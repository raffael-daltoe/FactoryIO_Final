
TP3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ba0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800707c  0800707c  0001707c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007080  08007080  00017080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08007084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003934  2000001c  080070a0  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003950  080070a0  00023950  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009ccb  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002095  00000000  00000000  00029d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a38  00000000  00000000  0002bde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000007c6  00000000  00000000  0002c820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003db3  00000000  00000000  0002cfe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f6c5  00000000  00000000  00030d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0007268b  00000000  00000000  0004045e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000235c  00000000  00000000  000b2aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000008e  00000000  00000000  000b4e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006c48 	.word	0x08006c48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08006c48 	.word	0x08006c48

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80003fa:	201c      	movs	r0, #28
 80003fc:	f003 faa8 	bl	8003950 <pvPortMalloc>
 8000400:	0003      	movs	r3, r0
 8000402:	607b      	str	r3, [r7, #4]

		if( pxEventBits != NULL )
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d02e      	beq.n	8000468 <xEventGroupCreate+0x74>
		{
			pxEventBits->uxEventBits = 0;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3304      	adds	r3, #4
 8000414:	0018      	movs	r0, r3
 8000416:	f000 fa0a 	bl	800082e <vListInitialise>
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			traceEVENT_GROUP_CREATE( pxEventBits );
 800041a:	4b1e      	ldr	r3, [pc, #120]	; (8000494 <xEventGroupCreate+0xa0>)
 800041c:	881a      	ldrh	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	0011      	movs	r1, r2
 8000422:	0018      	movs	r0, r3
 8000424:	f003 fe9f 	bl	8004166 <prvTraceSetEventGroupNumberHigh16>
 8000428:	f003 fff9 	bl	800441e <prvTraceGetCurrentTaskHandle>
 800042c:	0003      	movs	r3, r0
 800042e:	0018      	movs	r0, r3
 8000430:	f003 fe36 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8000434:	0003      	movs	r3, r0
 8000436:	001a      	movs	r2, r3
 8000438:	4b17      	ldr	r3, [pc, #92]	; (8000498 <xEventGroupCreate+0xa4>)
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	4013      	ands	r3, r2
 800043e:	b29b      	uxth	r3, r3
 8000440:	2b00      	cmp	r3, #0
 8000442:	d022      	beq.n	800048a <xEventGroupCreate+0x96>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	0018      	movs	r0, r3
 8000448:	f003 fe7e 	bl	8004148 <prvTraceGetEventGroupNumberHigh16>
 800044c:	0003      	movs	r3, r0
 800044e:	001a      	movs	r2, r3
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <xEventGroupCreate+0xa4>)
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	4013      	ands	r3, r2
 8000456:	b29b      	uxth	r3, r3
 8000458:	2b00      	cmp	r3, #0
 800045a:	d016      	beq.n	800048a <xEventGroupCreate+0x96>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	0019      	movs	r1, r3
 8000460:	2015      	movs	r0, #21
 8000462:	f004 fc2f 	bl	8004cc4 <prvTraceStoreEvent1>
 8000466:	e010      	b.n	800048a <xEventGroupCreate+0x96>
		}
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
 8000468:	f003 ffd9 	bl	800441e <prvTraceGetCurrentTaskHandle>
 800046c:	0003      	movs	r3, r0
 800046e:	0018      	movs	r0, r3
 8000470:	f003 fe16 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8000474:	0003      	movs	r3, r0
 8000476:	001a      	movs	r2, r3
 8000478:	4b07      	ldr	r3, [pc, #28]	; (8000498 <xEventGroupCreate+0xa4>)
 800047a:	881b      	ldrh	r3, [r3, #0]
 800047c:	4013      	ands	r3, r2
 800047e:	b29b      	uxth	r3, r3
 8000480:	2b00      	cmp	r3, #0
 8000482:	d002      	beq.n	800048a <xEventGroupCreate+0x96>
 8000484:	2045      	movs	r0, #69	; 0x45
 8000486:	f004 fbcb 	bl	8004c20 <prvTraceStoreEvent0>
		}

		return pxEventBits;
 800048a:	687b      	ldr	r3, [r7, #4]
	}
 800048c:	0018      	movs	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	b002      	add	sp, #8
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000016 	.word	0x20000016
 8000498:	20000014 	.word	0x20000014

0800049c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08c      	sub	sp, #48	; 0x30
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
 80004a8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	623b      	str	r3, [r7, #32]
EventBits_t uxReturn, uxControlBits = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80004b2:	2300      	movs	r3, #0
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d101      	bne.n	80004c0 <xEventGroupWaitBits+0x24>
 80004bc:	b672      	cpsid	i
 80004be:	e7fe      	b.n	80004be <xEventGroupWaitBits+0x22>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	0e1b      	lsrs	r3, r3, #24
 80004c4:	061b      	lsls	r3, r3, #24
 80004c6:	d001      	beq.n	80004cc <xEventGroupWaitBits+0x30>
 80004c8:	b672      	cpsid	i
 80004ca:	e7fe      	b.n	80004ca <xEventGroupWaitBits+0x2e>
	configASSERT( uxBitsToWaitFor != 0 );
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d101      	bne.n	80004d6 <xEventGroupWaitBits+0x3a>
 80004d2:	b672      	cpsid	i
 80004d4:	e7fe      	b.n	80004d4 <xEventGroupWaitBits+0x38>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80004d6:	f002 fbd1 	bl	8002c7c <xTaskGetSchedulerState>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d102      	bne.n	80004e4 <xEventGroupWaitBits+0x48>
 80004de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d101      	bne.n	80004e8 <xEventGroupWaitBits+0x4c>
 80004e4:	2301      	movs	r3, #1
 80004e6:	e000      	b.n	80004ea <xEventGroupWaitBits+0x4e>
 80004e8:	2300      	movs	r3, #0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d101      	bne.n	80004f2 <xEventGroupWaitBits+0x56>
 80004ee:	b672      	cpsid	i
 80004f0:	e7fe      	b.n	80004f0 <xEventGroupWaitBits+0x54>
	}
	#endif

	vTaskSuspendAll();
 80004f2:	f001 fed1 	bl	8002298 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80004f6:	6a3b      	ldr	r3, [r7, #32]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80004fc:	683a      	ldr	r2, [r7, #0]
 80004fe:	68b9      	ldr	r1, [r7, #8]
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	0018      	movs	r0, r3
 8000504:	f000 f954 	bl	80007b0 <prvTestWaitCondition>
 8000508:	0003      	movs	r3, r0
 800050a:	61bb      	str	r3, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
 800050c:	69bb      	ldr	r3, [r7, #24]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d00e      	beq.n	8000530 <xEventGroupWaitBits+0x94>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8000512:	69fb      	ldr	r3, [r7, #28]
 8000514:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
 8000516:	2300      	movs	r3, #0
 8000518:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d04a      	beq.n	80005b6 <xEventGroupWaitBits+0x11a>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000520:	6a3b      	ldr	r3, [r7, #32]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	68ba      	ldr	r2, [r7, #8]
 8000526:	43d2      	mvns	r2, r2
 8000528:	401a      	ands	r2, r3
 800052a:	6a3b      	ldr	r3, [r7, #32]
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	e042      	b.n	80005b6 <xEventGroupWaitBits+0x11a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8000530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000532:	2b00      	cmp	r3, #0
 8000534:	d104      	bne.n	8000540 <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
 800053a:	2301      	movs	r3, #1
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
 800053e:	e03a      	b.n	80005b6 <xEventGroupWaitBits+0x11a>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d004      	beq.n	8000550 <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8000546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000548:	2280      	movs	r2, #128	; 0x80
 800054a:	0452      	lsls	r2, r2, #17
 800054c:	4313      	orrs	r3, r2
 800054e:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d004      	beq.n	8000560 <xEventGroupWaitBits+0xc4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8000556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000558:	2280      	movs	r2, #128	; 0x80
 800055a:	04d2      	lsls	r2, r2, #19
 800055c:	4313      	orrs	r3, r2
 800055e:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8000560:	6a3b      	ldr	r3, [r7, #32]
 8000562:	1d18      	adds	r0, r3, #4
 8000564:	68ba      	ldr	r2, [r7, #8]
 8000566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000568:	4313      	orrs	r3, r2
 800056a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800056c:	0019      	movs	r1, r3
 800056e:	f002 f8b7 	bl	80026e0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 8000576:	f003 ff52 	bl	800441e <prvTraceGetCurrentTaskHandle>
 800057a:	0003      	movs	r3, r0
 800057c:	0018      	movs	r0, r3
 800057e:	f003 fd8f 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8000582:	0003      	movs	r3, r0
 8000584:	001a      	movs	r2, r3
 8000586:	4b3b      	ldr	r3, [pc, #236]	; (8000674 <xEventGroupWaitBits+0x1d8>)
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	4013      	ands	r3, r2
 800058c:	b29b      	uxth	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d011      	beq.n	80005b6 <xEventGroupWaitBits+0x11a>
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	0018      	movs	r0, r3
 8000596:	f003 fdd7 	bl	8004148 <prvTraceGetEventGroupNumberHigh16>
 800059a:	0003      	movs	r3, r0
 800059c:	001a      	movs	r2, r3
 800059e:	4b35      	ldr	r3, [pc, #212]	; (8000674 <xEventGroupWaitBits+0x1d8>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	4013      	ands	r3, r2
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d005      	beq.n	80005b6 <xEventGroupWaitBits+0x11a>
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	68ba      	ldr	r2, [r7, #8]
 80005ae:	0019      	movs	r1, r3
 80005b0:	20b7      	movs	r0, #183	; 0xb7
 80005b2:	f004 fbe1 	bl	8004d78 <prvTraceStoreEvent2>
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80005b6:	f001 fe7b 	bl	80022b0 <xTaskResumeAll>
 80005ba:	0003      	movs	r3, r0
 80005bc:	617b      	str	r3, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
 80005be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d02c      	beq.n	800061e <xEventGroupWaitBits+0x182>
	{
		if( xAlreadyYielded == pdFALSE )
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d101      	bne.n	80005ce <xEventGroupWaitBits+0x132>
		{
			portYIELD_WITHIN_API();
 80005ca:	f003 f921 	bl	8003810 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80005ce:	f002 fd47 	bl	8003060 <uxTaskResetEventItemValue>
 80005d2:	0003      	movs	r3, r0
 80005d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80005d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	049b      	lsls	r3, r3, #18
 80005dc:	4013      	ands	r3, r2
 80005de:	d11a      	bne.n	8000616 <xEventGroupWaitBits+0x17a>
		{
			taskENTER_CRITICAL();
 80005e0:	f003 f926 	bl	8003830 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80005e4:	6a3b      	ldr	r3, [r7, #32]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	68b9      	ldr	r1, [r7, #8]
 80005ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 f8dd 	bl	80007b0 <prvTestWaitCondition>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d009      	beq.n	800060e <xEventGroupWaitBits+0x172>
				{
					if( xClearOnExit != pdFALSE )
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d006      	beq.n	800060e <xEventGroupWaitBits+0x172>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000600:	6a3b      	ldr	r3, [r7, #32]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68ba      	ldr	r2, [r7, #8]
 8000606:	43d2      	mvns	r2, r2
 8000608:	401a      	ands	r2, r3
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800060e:	2301      	movs	r3, #1
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
			}
			taskEXIT_CRITICAL();
 8000612:	f003 f91f 	bl	8003854 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000618:	021b      	lsls	r3, r3, #8
 800061a:	0a1b      	lsrs	r3, r3, #8
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 800061e:	f003 fefe 	bl	800441e <prvTraceGetCurrentTaskHandle>
 8000622:	0003      	movs	r3, r0
 8000624:	0018      	movs	r0, r3
 8000626:	f003 fd3b 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 800062a:	0003      	movs	r3, r0
 800062c:	001a      	movs	r2, r3
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <xEventGroupWaitBits+0x1d8>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	4013      	ands	r3, r2
 8000634:	b29b      	uxth	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d016      	beq.n	8000668 <xEventGroupWaitBits+0x1cc>
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	0018      	movs	r0, r3
 800063e:	f003 fd83 	bl	8004148 <prvTraceGetEventGroupNumberHigh16>
 8000642:	0003      	movs	r3, r0
 8000644:	001a      	movs	r2, r3
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <xEventGroupWaitBits+0x1d8>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	4013      	ands	r3, r2
 800064c:	b29b      	uxth	r3, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	d00a      	beq.n	8000668 <xEventGroupWaitBits+0x1cc>
 8000652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000654:	2b01      	cmp	r3, #1
 8000656:	d001      	beq.n	800065c <xEventGroupWaitBits+0x1c0>
 8000658:	23b1      	movs	r3, #177	; 0xb1
 800065a:	e000      	b.n	800065e <xEventGroupWaitBits+0x1c2>
 800065c:	23b9      	movs	r3, #185	; 0xb9
 800065e:	68f9      	ldr	r1, [r7, #12]
 8000660:	68ba      	ldr	r2, [r7, #8]
 8000662:	0018      	movs	r0, r3
 8000664:	f004 fb88 	bl	8004d78 <prvTraceStoreEvent2>

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8000668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800066a:	0018      	movs	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	b00c      	add	sp, #48	; 0x30
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	20000014 	.word	0x20000014

08000678 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08c      	sub	sp, #48	; 0x30
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8000682:	2300      	movs	r3, #0
 8000684:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = xEventGroup;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d101      	bne.n	8000698 <xEventGroupSetBits+0x20>
 8000694:	b672      	cpsid	i
 8000696:	e7fe      	b.n	8000696 <xEventGroupSetBits+0x1e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	0e1b      	lsrs	r3, r3, #24
 800069c:	061b      	lsls	r3, r3, #24
 800069e:	d001      	beq.n	80006a4 <xEventGroupSetBits+0x2c>
 80006a0:	b672      	cpsid	i
 80006a2:	e7fe      	b.n	80006a2 <xEventGroupSetBits+0x2a>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80006a4:	6a3b      	ldr	r3, [r7, #32]
 80006a6:	3304      	adds	r3, #4
 80006a8:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3308      	adds	r3, #8
 80006ae:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
 80006b0:	f001 fdf2 	bl	8002298 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 80006b4:	f003 feb3 	bl	800441e <prvTraceGetCurrentTaskHandle>
 80006b8:	0003      	movs	r3, r0
 80006ba:	0018      	movs	r0, r3
 80006bc:	f003 fcf0 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 80006c0:	0003      	movs	r3, r0
 80006c2:	001a      	movs	r2, r3
 80006c4:	4b39      	ldr	r3, [pc, #228]	; (80007ac <xEventGroupSetBits+0x134>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	4013      	ands	r3, r2
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d011      	beq.n	80006f4 <xEventGroupSetBits+0x7c>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	0018      	movs	r0, r3
 80006d4:	f003 fd38 	bl	8004148 <prvTraceGetEventGroupNumberHigh16>
 80006d8:	0003      	movs	r3, r0
 80006da:	001a      	movs	r2, r3
 80006dc:	4b33      	ldr	r3, [pc, #204]	; (80007ac <xEventGroupSetBits+0x134>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	4013      	ands	r3, r2
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d005      	beq.n	80006f4 <xEventGroupSetBits+0x7c>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	0019      	movs	r1, r3
 80006ee:	20b4      	movs	r0, #180	; 0xb4
 80006f0:	f004 fb42 	bl	8004d78 <prvTraceStoreEvent2>

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80006fa:	6a3b      	ldr	r3, [r7, #32]
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	431a      	orrs	r2, r3
 8000702:	6a3b      	ldr	r3, [r7, #32]
 8000704:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000706:	e03d      	b.n	8000784 <xEventGroupSetBits+0x10c>
		{
			pxNext = listGET_NEXT( pxListItem );
 8000708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800070e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	0e1b      	lsrs	r3, r3, #24
 800071c:	061b      	lsls	r3, r3, #24
 800071e:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	021b      	lsls	r3, r3, #8
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	2380      	movs	r3, #128	; 0x80
 800072c:	04db      	lsls	r3, r3, #19
 800072e:	4013      	ands	r3, r2
 8000730:	d107      	bne.n	8000742 <xEventGroupSetBits+0xca>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	4013      	ands	r3, r2
 800073a:	d00b      	beq.n	8000754 <xEventGroupSetBits+0xdc>
				{
					xMatchFound = pdTRUE;
 800073c:	2301      	movs	r3, #1
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
 8000740:	e008      	b.n	8000754 <xEventGroupSetBits+0xdc>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8000742:	6a3b      	ldr	r3, [r7, #32]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	4013      	ands	r3, r2
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	429a      	cmp	r2, r3
 800074e:	d101      	bne.n	8000754 <xEventGroupSetBits+0xdc>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8000750:	2301      	movs	r3, #1
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	2b00      	cmp	r3, #0
 8000758:	d012      	beq.n	8000780 <xEventGroupSetBits+0x108>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	045b      	lsls	r3, r3, #17
 8000760:	4013      	ands	r3, r2
 8000762:	d003      	beq.n	800076c <xEventGroupSetBits+0xf4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8000764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	4313      	orrs	r3, r2
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	0492      	lsls	r2, r2, #18
 8000774:	431a      	orrs	r2, r3
 8000776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f002 f88e 	bl	800289c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
 8000784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	429a      	cmp	r2, r3
 800078a:	d1bd      	bne.n	8000708 <xEventGroupSetBits+0x90>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000792:	43d2      	mvns	r2, r2
 8000794:	401a      	ands	r2, r3
 8000796:	6a3b      	ldr	r3, [r7, #32]
 8000798:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800079a:	f001 fd89 	bl	80022b0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800079e:	6a3b      	ldr	r3, [r7, #32]
 80007a0:	681b      	ldr	r3, [r3, #0]
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b00c      	add	sp, #48	; 0x30
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	20000014 	.word	0x20000014

080007b0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d106      	bne.n	80007d4 <prvTestWaitCondition+0x24>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	4013      	ands	r3, r2
 80007cc:	d00a      	beq.n	80007e4 <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 80007ce:	2301      	movs	r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	e007      	b.n	80007e4 <prvTestWaitCondition+0x34>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	4013      	ands	r3, r2
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d101      	bne.n	80007e4 <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 80007e0:	2301      	movs	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80007e4:	697b      	ldr	r3, [r7, #20]
}
 80007e6:	0018      	movs	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b006      	add	sp, #24
 80007ec:	bd80      	pop	{r7, pc}

080007ee <uxEventGroupGetNumber>:
/*-----------------------------------------------------------*/

#if (configUSE_TRACE_FACILITY == 1)

	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
	{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b084      	sub	sp, #16
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
	UBaseType_t xReturn;
	EventGroup_t const *pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	60bb      	str	r3, [r7, #8]

		if( xEventGroup == NULL )
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d102      	bne.n	8000806 <uxEventGroupGetNumber+0x18>
		{
			xReturn = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	e002      	b.n	800080c <uxEventGroupGetNumber+0x1e>
		}
		else
		{
			xReturn = pxEventBits->uxEventGroupNumber;
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800080c:	68fb      	ldr	r3, [r7, #12]
	}
 800080e:	0018      	movs	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	b004      	add	sp, #16
 8000814:	bd80      	pop	{r7, pc}

08000816 <vEventGroupSetNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vEventGroupSetNumber( void * xEventGroup, UBaseType_t uxEventGroupNumber )
	{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
 800081e:	6039      	str	r1, [r7, #0]
		( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	683a      	ldr	r2, [r7, #0]
 8000824:	619a      	str	r2, [r3, #24]
	}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}

0800082e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3308      	adds	r3, #8
 800083a:	001a      	movs	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2201      	movs	r2, #1
 8000844:	4252      	negs	r2, r2
 8000846:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3308      	adds	r3, #8
 800084c:	001a      	movs	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3308      	adds	r3, #8
 8000856:	001a      	movs	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}

0800086a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b002      	add	sp, #8
 800087e:	bd80      	pop	{r7, pc}

08000880 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	689a      	ldr	r2, [r3, #8]
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	601a      	str	r2, [r3, #0]
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b004      	add	sp, #16
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	3301      	adds	r3, #1
 80008d8:	d103      	bne.n	80008e2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	691b      	ldr	r3, [r3, #16]
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	e00c      	b.n	80008fc <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3308      	adds	r3, #8
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e002      	b.n	80008f0 <vListInsert+0x2c>
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d2f6      	bcs.n	80008ea <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	685a      	ldr	r2, [r3, #4]
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	683a      	ldr	r2, [r7, #0]
 800090a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	601a      	str	r2, [r3, #0]
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b004      	add	sp, #16
 800092e:	bd80      	pop	{r7, pc}

08000930 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	6892      	ldr	r2, [r2, #8]
 8000946:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	6852      	ldr	r2, [r2, #4]
 8000950:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	429a      	cmp	r2, r3
 800095a:	d103      	bne.n	8000964 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	1e5a      	subs	r2, r3, #1
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	0018      	movs	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	b004      	add	sp, #16
 800097e:	bd80      	pop	{r7, pc}

08000980 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d101      	bne.n	8000998 <xQueueGenericReset+0x18>
 8000994:	b672      	cpsid	i
 8000996:	e7fe      	b.n	8000996 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8000998:	f002 ff4a 	bl	8003830 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	434b      	muls	r3, r1
 80009aa:	18d2      	adds	r2, r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2200      	movs	r2, #0
 80009b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009c6:	1e59      	subs	r1, r3, #1
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	434b      	muls	r3, r1
 80009ce:	18d2      	adds	r2, r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2244      	movs	r2, #68	; 0x44
 80009d8:	21ff      	movs	r1, #255	; 0xff
 80009da:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2245      	movs	r2, #69	; 0x45
 80009e0:	21ff      	movs	r1, #255	; 0xff
 80009e2:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d10d      	bne.n	8000a06 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d013      	beq.n	8000a1a <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3310      	adds	r3, #16
 80009f6:	0018      	movs	r0, r3
 80009f8:	f001 fee0 	bl	80027bc <xTaskRemoveFromEventList>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d00c      	beq.n	8000a1a <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000a00:	f002 ff06 	bl	8003810 <vPortYield>
 8000a04:	e009      	b.n	8000a1a <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3310      	adds	r3, #16
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f7ff ff0f 	bl	800082e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3324      	adds	r3, #36	; 0x24
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff ff0a 	bl	800082e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000a1a:	f002 ff1b 	bl	8003854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b004      	add	sp, #16
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b08b      	sub	sp, #44	; 0x2c
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d101      	bne.n	8000a40 <xQueueGenericCreate+0x18>
 8000a3c:	b672      	cpsid	i
 8000a3e:	e7fe      	b.n	8000a3e <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d102      	bne.n	8000a4c <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
 8000a4a:	e003      	b.n	8000a54 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	4353      	muls	r3, r2
 8000a52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	3350      	adds	r3, #80	; 0x50
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f002 ff79 	bl	8003950 <pvPortMalloc>
 8000a5e:	0003      	movs	r3, r0
 8000a60:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00f      	beq.n	8000a88 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	3350      	adds	r3, #80	; 0x50
 8000a70:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781c      	ldrb	r4, [r3, #0]
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	68b9      	ldr	r1, [r7, #8]
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	0023      	movs	r3, r4
 8000a82:	f000 f839 	bl	8000af8 <prvInitialiseNewQueue>
 8000a86:	e02f      	b.n	8000ae8 <xQueueGenericCreate+0xc0>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8000a88:	f003 fcc9 	bl	800441e <prvTraceGetCurrentTaskHandle>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f003 fb06 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8000a94:	0003      	movs	r3, r0
 8000a96:	001a      	movs	r2, r3
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <xQueueGenericCreate+0xcc>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d021      	beq.n	8000ae8 <xQueueGenericCreate+0xc0>
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	d019      	beq.n	8000ae0 <xQueueGenericCreate+0xb8>
 8000aac:	dc1c      	bgt.n	8000ae8 <xQueueGenericCreate+0xc0>
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	d00c      	beq.n	8000acc <xQueueGenericCreate+0xa4>
 8000ab2:	dc19      	bgt.n	8000ae8 <xQueueGenericCreate+0xc0>
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d002      	beq.n	8000abe <xQueueGenericCreate+0x96>
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d00c      	beq.n	8000ad6 <xQueueGenericCreate+0xae>
 8000abc:	e014      	b.n	8000ae8 <xQueueGenericCreate+0xc0>
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2041      	movs	r0, #65	; 0x41
 8000ac6:	f004 f957 	bl	8004d78 <prvTraceStoreEvent2>
 8000aca:	e00d      	b.n	8000ae8 <xQueueGenericCreate+0xc0>
 8000acc:	2100      	movs	r1, #0
 8000ace:	2042      	movs	r0, #66	; 0x42
 8000ad0:	f004 f8f8 	bl	8004cc4 <prvTraceStoreEvent1>
 8000ad4:	e008      	b.n	8000ae8 <xQueueGenericCreate+0xc0>
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2043      	movs	r0, #67	; 0x43
 8000ada:	f004 f8f3 	bl	8004cc4 <prvTraceStoreEvent1>
 8000ade:	e003      	b.n	8000ae8 <xQueueGenericCreate+0xc0>
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2047      	movs	r0, #71	; 0x47
 8000ae4:	f004 f8ee 	bl	8004cc4 <prvTraceStoreEvent1>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000ae8:	69bb      	ldr	r3, [r7, #24]
	}
 8000aea:	0018      	movs	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b009      	add	sp, #36	; 0x24
 8000af0:	bd90      	pop	{r4, r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	20000014 	.word	0x20000014

08000af8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
 8000b04:	001a      	movs	r2, r3
 8000b06:	1cfb      	adds	r3, r7, #3
 8000b08:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d103      	bne.n	8000b18 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	e002      	b.n	8000b1e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff ff26 	bl	8000980 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	1cfa      	adds	r2, r7, #3
 8000b38:	214c      	movs	r1, #76	; 0x4c
 8000b3a:	7812      	ldrb	r2, [r2, #0]
 8000b3c:	545a      	strb	r2, [r3, r1]
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8000b3e:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <prvInitialiseNewQueue+0xdc>)
 8000b40:	881a      	ldrh	r2, [r3, #0]
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	0011      	movs	r1, r2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f003 fae3 	bl	8004112 <prvTraceSetQueueNumberHigh16>
 8000b4c:	f003 fc67 	bl	800441e <prvTraceGetCurrentTaskHandle>
 8000b50:	0003      	movs	r3, r0
 8000b52:	0018      	movs	r0, r3
 8000b54:	f003 faa4 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <prvInitialiseNewQueue+0xe0>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	4013      	ands	r3, r2
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d031      	beq.n	8000bcc <prvInitialiseNewQueue+0xd4>
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f003 fac2 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 8000b70:	0003      	movs	r3, r0
 8000b72:	001a      	movs	r2, r3
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <prvInitialiseNewQueue+0xe0>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d025      	beq.n	8000bcc <prvInitialiseNewQueue+0xd4>
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	224c      	movs	r2, #76	; 0x4c
 8000b84:	5c9b      	ldrb	r3, [r3, r2]
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	d01b      	beq.n	8000bc2 <prvInitialiseNewQueue+0xca>
 8000b8a:	dc1f      	bgt.n	8000bcc <prvInitialiseNewQueue+0xd4>
 8000b8c:	2b03      	cmp	r3, #3
 8000b8e:	d00c      	beq.n	8000baa <prvInitialiseNewQueue+0xb2>
 8000b90:	dc1c      	bgt.n	8000bcc <prvInitialiseNewQueue+0xd4>
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d002      	beq.n	8000b9c <prvInitialiseNewQueue+0xa4>
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d00d      	beq.n	8000bb6 <prvInitialiseNewQueue+0xbe>
}
 8000b9a:	e017      	b.n	8000bcc <prvInitialiseNewQueue+0xd4>
	traceQUEUE_CREATE( pxNewQueue );
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	2011      	movs	r0, #17
 8000ba4:	f004 f8e8 	bl	8004d78 <prvTraceStoreEvent2>
 8000ba8:	e010      	b.n	8000bcc <prvInitialiseNewQueue+0xd4>
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	0019      	movs	r1, r3
 8000bae:	2012      	movs	r0, #18
 8000bb0:	f004 f888 	bl	8004cc4 <prvTraceStoreEvent1>
 8000bb4:	e00a      	b.n	8000bcc <prvInitialiseNewQueue+0xd4>
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	0019      	movs	r1, r3
 8000bba:	2013      	movs	r0, #19
 8000bbc:	f004 f882 	bl	8004cc4 <prvTraceStoreEvent1>
 8000bc0:	e004      	b.n	8000bcc <prvInitialiseNewQueue+0xd4>
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	2017      	movs	r0, #23
 8000bc8:	f004 f87c 	bl	8004cc4 <prvTraceStoreEvent1>
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b004      	add	sp, #16
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000016 	.word	0x20000016
 8000bd8:	20000014 	.word	0x20000014

08000bdc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00e      	beq.n	8000c08 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	f000 f820 	bl	8000c48 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b002      	add	sp, #8
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	0002      	movs	r2, r0
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	701a      	strb	r2, [r3, #0]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	6939      	ldr	r1, [r7, #16]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff fefb 	bl	8000a28 <xQueueGenericCreate>
 8000c32:	0003      	movs	r3, r0
 8000c34:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff ffcf 	bl	8000bdc <prvInitialiseMutex>

		return xNewQueue;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
	}
 8000c40:	0018      	movs	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b006      	add	sp, #24
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8000c5e:	6a3b      	ldr	r3, [r7, #32]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <xQueueGenericSend+0x20>
 8000c64:	b672      	cpsid	i
 8000c66:	e7fe      	b.n	8000c66 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d103      	bne.n	8000c76 <xQueueGenericSend+0x2e>
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d101      	bne.n	8000c7a <xQueueGenericSend+0x32>
 8000c76:	2301      	movs	r3, #1
 8000c78:	e000      	b.n	8000c7c <xQueueGenericSend+0x34>
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <xQueueGenericSend+0x3c>
 8000c80:	b672      	cpsid	i
 8000c82:	e7fe      	b.n	8000c82 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d103      	bne.n	8000c92 <xQueueGenericSend+0x4a>
 8000c8a:	6a3b      	ldr	r3, [r7, #32]
 8000c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d101      	bne.n	8000c96 <xQueueGenericSend+0x4e>
 8000c92:	2301      	movs	r3, #1
 8000c94:	e000      	b.n	8000c98 <xQueueGenericSend+0x50>
 8000c96:	2300      	movs	r3, #0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <xQueueGenericSend+0x58>
 8000c9c:	b672      	cpsid	i
 8000c9e:	e7fe      	b.n	8000c9e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000ca0:	f001 ffec 	bl	8002c7c <xTaskGetSchedulerState>
 8000ca4:	1e03      	subs	r3, r0, #0
 8000ca6:	d102      	bne.n	8000cae <xQueueGenericSend+0x66>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <xQueueGenericSend+0x6a>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <xQueueGenericSend+0x6c>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <xQueueGenericSend+0x74>
 8000cb8:	b672      	cpsid	i
 8000cba:	e7fe      	b.n	8000cba <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000cbc:	f002 fdb8 	bl	8003830 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000cc0:	6a3b      	ldr	r3, [r7, #32]
 8000cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cc4:	6a3b      	ldr	r3, [r7, #32]
 8000cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d303      	bcc.n	8000cd4 <xQueueGenericSend+0x8c>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d000      	beq.n	8000cd4 <xQueueGenericSend+0x8c>
 8000cd2:	e063      	b.n	8000d9c <xQueueGenericSend+0x154>
			{
				traceQUEUE_SEND( pxQueue );
 8000cd4:	f003 fba3 	bl	800441e <prvTraceGetCurrentTaskHandle>
 8000cd8:	0003      	movs	r3, r0
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f003 f9e0 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	4bbe      	ldr	r3, [pc, #760]	; (8000fe0 <xQueueGenericSend+0x398>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d036      	beq.n	8000d5e <xQueueGenericSend+0x116>
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f003 f9fe 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	4bb8      	ldr	r3, [pc, #736]	; (8000fe0 <xQueueGenericSend+0x398>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	4013      	ands	r3, r2
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d02a      	beq.n	8000d5e <xQueueGenericSend+0x116>
 8000d08:	6a3b      	ldr	r3, [r7, #32]
 8000d0a:	224c      	movs	r2, #76	; 0x4c
 8000d0c:	5c9b      	ldrb	r3, [r3, r2]
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	d020      	beq.n	8000d54 <xQueueGenericSend+0x10c>
 8000d12:	dc24      	bgt.n	8000d5e <xQueueGenericSend+0x116>
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	dc22      	bgt.n	8000d5e <xQueueGenericSend+0x116>
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	da12      	bge.n	8000d42 <xQueueGenericSend+0xfa>
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <xQueueGenericSend+0xde>
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d017      	beq.n	8000d54 <xQueueGenericSend+0x10c>
 8000d24:	e01b      	b.n	8000d5e <xQueueGenericSend+0x116>
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d101      	bne.n	8000d30 <xQueueGenericSend+0xe8>
 8000d2c:	2050      	movs	r0, #80	; 0x50
 8000d2e:	e000      	b.n	8000d32 <xQueueGenericSend+0xea>
 8000d30:	20c0      	movs	r0, #192	; 0xc0
 8000d32:	6a39      	ldr	r1, [r7, #32]
 8000d34:	6a3b      	ldr	r3, [r7, #32]
 8000d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d38:	3301      	adds	r3, #1
 8000d3a:	001a      	movs	r2, r3
 8000d3c:	f004 f81c 	bl	8004d78 <prvTraceStoreEvent2>
 8000d40:	e00d      	b.n	8000d5e <xQueueGenericSend+0x116>
 8000d42:	6a39      	ldr	r1, [r7, #32]
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d48:	3301      	adds	r3, #1
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	2051      	movs	r0, #81	; 0x51
 8000d4e:	f004 f813 	bl	8004d78 <prvTraceStoreEvent2>
 8000d52:	e004      	b.n	8000d5e <xQueueGenericSend+0x116>
 8000d54:	6a3b      	ldr	r3, [r7, #32]
 8000d56:	0019      	movs	r1, r3
 8000d58:	2052      	movs	r0, #82	; 0x52
 8000d5a:	f003 ffb3 	bl	8004cc4 <prvTraceStoreEvent1>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	6a3b      	ldr	r3, [r7, #32]
 8000d64:	0018      	movs	r0, r3
 8000d66:	f000 fea1 	bl	8001aac <prvCopyDataToQueue>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d6e:	6a3b      	ldr	r3, [r7, #32]
 8000d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d009      	beq.n	8000d8a <xQueueGenericSend+0x142>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d76:	6a3b      	ldr	r3, [r7, #32]
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f001 fd1e 	bl	80027bc <xTaskRemoveFromEventList>
 8000d80:	1e03      	subs	r3, r0, #0
 8000d82:	d007      	beq.n	8000d94 <xQueueGenericSend+0x14c>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000d84:	f002 fd44 	bl	8003810 <vPortYield>
 8000d88:	e004      	b.n	8000d94 <xQueueGenericSend+0x14c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <xQueueGenericSend+0x14c>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000d90:	f002 fd3e 	bl	8003810 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000d94:	f002 fd5e 	bl	8003854 <vPortExitCritical>
				return pdPASS;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e129      	b.n	8000ff0 <xQueueGenericSend+0x3a8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d146      	bne.n	8000e30 <xQueueGenericSend+0x1e8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000da2:	f002 fd57 	bl	8003854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8000da6:	f003 fb3a 	bl	800441e <prvTraceGetCurrentTaskHandle>
 8000daa:	0003      	movs	r3, r0
 8000dac:	0018      	movs	r0, r3
 8000dae:	f003 f977 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8000db2:	0003      	movs	r3, r0
 8000db4:	001a      	movs	r2, r3
 8000db6:	4b8a      	ldr	r3, [pc, #552]	; (8000fe0 <xQueueGenericSend+0x398>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d034      	beq.n	8000e2c <xQueueGenericSend+0x1e4>
 8000dc2:	6a3b      	ldr	r3, [r7, #32]
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f003 f995 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 8000dca:	0003      	movs	r3, r0
 8000dcc:	001a      	movs	r2, r3
 8000dce:	4b84      	ldr	r3, [pc, #528]	; (8000fe0 <xQueueGenericSend+0x398>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d028      	beq.n	8000e2c <xQueueGenericSend+0x1e4>
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	224c      	movs	r2, #76	; 0x4c
 8000dde:	5c9b      	ldrb	r3, [r3, r2]
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d01e      	beq.n	8000e22 <xQueueGenericSend+0x1da>
 8000de4:	dc22      	bgt.n	8000e2c <xQueueGenericSend+0x1e4>
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	dc20      	bgt.n	8000e2c <xQueueGenericSend+0x1e4>
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	da11      	bge.n	8000e12 <xQueueGenericSend+0x1ca>
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <xQueueGenericSend+0x1b0>
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d015      	beq.n	8000e22 <xQueueGenericSend+0x1da>
 8000df6:	e019      	b.n	8000e2c <xQueueGenericSend+0x1e4>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <xQueueGenericSend+0x1ba>
 8000dfe:	2053      	movs	r0, #83	; 0x53
 8000e00:	e000      	b.n	8000e04 <xQueueGenericSend+0x1bc>
 8000e02:	20c1      	movs	r0, #193	; 0xc1
 8000e04:	6a39      	ldr	r1, [r7, #32]
 8000e06:	6a3b      	ldr	r3, [r7, #32]
 8000e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e0a:	001a      	movs	r2, r3
 8000e0c:	f003 ffb4 	bl	8004d78 <prvTraceStoreEvent2>
 8000e10:	e00c      	b.n	8000e2c <xQueueGenericSend+0x1e4>
 8000e12:	6a39      	ldr	r1, [r7, #32]
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e18:	001a      	movs	r2, r3
 8000e1a:	2054      	movs	r0, #84	; 0x54
 8000e1c:	f003 ffac 	bl	8004d78 <prvTraceStoreEvent2>
 8000e20:	e004      	b.n	8000e2c <xQueueGenericSend+0x1e4>
 8000e22:	6a3b      	ldr	r3, [r7, #32]
 8000e24:	0019      	movs	r1, r3
 8000e26:	2055      	movs	r0, #85	; 0x55
 8000e28:	f003 ff4c 	bl	8004cc4 <prvTraceStoreEvent1>
					return errQUEUE_FULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e0df      	b.n	8000ff0 <xQueueGenericSend+0x3a8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d106      	bne.n	8000e44 <xQueueGenericSend+0x1fc>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000e36:	2314      	movs	r3, #20
 8000e38:	18fb      	adds	r3, r7, r3
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f001 fd94 	bl	8002968 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e40:	2301      	movs	r3, #1
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e44:	f002 fd06 	bl	8003854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e48:	f001 fa26 	bl	8002298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000e4c:	f002 fcf0 	bl	8003830 <vPortEnterCritical>
 8000e50:	6a3b      	ldr	r3, [r7, #32]
 8000e52:	2244      	movs	r2, #68	; 0x44
 8000e54:	5c9b      	ldrb	r3, [r3, r2]
 8000e56:	b25b      	sxtb	r3, r3
 8000e58:	3301      	adds	r3, #1
 8000e5a:	d103      	bne.n	8000e64 <xQueueGenericSend+0x21c>
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	2244      	movs	r2, #68	; 0x44
 8000e60:	2100      	movs	r1, #0
 8000e62:	5499      	strb	r1, [r3, r2]
 8000e64:	6a3b      	ldr	r3, [r7, #32]
 8000e66:	2245      	movs	r2, #69	; 0x45
 8000e68:	5c9b      	ldrb	r3, [r3, r2]
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	d103      	bne.n	8000e78 <xQueueGenericSend+0x230>
 8000e70:	6a3b      	ldr	r3, [r7, #32]
 8000e72:	2245      	movs	r2, #69	; 0x45
 8000e74:	2100      	movs	r1, #0
 8000e76:	5499      	strb	r1, [r3, r2]
 8000e78:	f002 fcec 	bl	8003854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e7c:	1d3a      	adds	r2, r7, #4
 8000e7e:	2314      	movs	r3, #20
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	0011      	movs	r1, r2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f001 fd83 	bl	8002990 <xTaskCheckForTimeOut>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d000      	beq.n	8000e90 <xQueueGenericSend+0x248>
 8000e8e:	e062      	b.n	8000f56 <xQueueGenericSend+0x30e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 ff0f 	bl	8001cb6 <prvIsQueueFull>
 8000e98:	1e03      	subs	r3, r0, #0
 8000e9a:	d055      	beq.n	8000f48 <xQueueGenericSend+0x300>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8000e9c:	f003 fabf 	bl	800441e <prvTraceGetCurrentTaskHandle>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f003 f8fc 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	001a      	movs	r2, r3
 8000eac:	4b4c      	ldr	r3, [pc, #304]	; (8000fe0 <xQueueGenericSend+0x398>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d034      	beq.n	8000f22 <xQueueGenericSend+0x2da>
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f003 f91a 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	001a      	movs	r2, r3
 8000ec4:	4b46      	ldr	r3, [pc, #280]	; (8000fe0 <xQueueGenericSend+0x398>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d028      	beq.n	8000f22 <xQueueGenericSend+0x2da>
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	224c      	movs	r2, #76	; 0x4c
 8000ed4:	5c9b      	ldrb	r3, [r3, r2]
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d01e      	beq.n	8000f18 <xQueueGenericSend+0x2d0>
 8000eda:	dc22      	bgt.n	8000f22 <xQueueGenericSend+0x2da>
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	dc20      	bgt.n	8000f22 <xQueueGenericSend+0x2da>
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	da11      	bge.n	8000f08 <xQueueGenericSend+0x2c0>
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <xQueueGenericSend+0x2a6>
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d015      	beq.n	8000f18 <xQueueGenericSend+0x2d0>
 8000eec:	e019      	b.n	8000f22 <xQueueGenericSend+0x2da>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <xQueueGenericSend+0x2b0>
 8000ef4:	2056      	movs	r0, #86	; 0x56
 8000ef6:	e000      	b.n	8000efa <xQueueGenericSend+0x2b2>
 8000ef8:	20c2      	movs	r0, #194	; 0xc2
 8000efa:	6a39      	ldr	r1, [r7, #32]
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f00:	001a      	movs	r2, r3
 8000f02:	f003 ff39 	bl	8004d78 <prvTraceStoreEvent2>
 8000f06:	e00c      	b.n	8000f22 <xQueueGenericSend+0x2da>
 8000f08:	6a39      	ldr	r1, [r7, #32]
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f0e:	001a      	movs	r2, r3
 8000f10:	2057      	movs	r0, #87	; 0x57
 8000f12:	f003 ff31 	bl	8004d78 <prvTraceStoreEvent2>
 8000f16:	e004      	b.n	8000f22 <xQueueGenericSend+0x2da>
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	0019      	movs	r1, r3
 8000f1c:	2058      	movs	r0, #88	; 0x58
 8000f1e:	f003 fed1 	bl	8004cc4 <prvTraceStoreEvent1>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	3310      	adds	r3, #16
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	0011      	movs	r1, r2
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f001 fbba 	bl	80026a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000f30:	6a3b      	ldr	r3, [r7, #32]
 8000f32:	0018      	movs	r0, r3
 8000f34:	f000 fe4b 	bl	8001bce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000f38:	f001 f9ba 	bl	80022b0 <xTaskResumeAll>
 8000f3c:	1e03      	subs	r3, r0, #0
 8000f3e:	d000      	beq.n	8000f42 <xQueueGenericSend+0x2fa>
 8000f40:	e6bc      	b.n	8000cbc <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8000f42:	f002 fc65 	bl	8003810 <vPortYield>
 8000f46:	e6b9      	b.n	8000cbc <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 fe3f 	bl	8001bce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f50:	f001 f9ae 	bl	80022b0 <xTaskResumeAll>
 8000f54:	e6b2      	b.n	8000cbc <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000f56:	6a3b      	ldr	r3, [r7, #32]
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f000 fe38 	bl	8001bce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f5e:	f001 f9a7 	bl	80022b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8000f62:	f003 fa5c 	bl	800441e <prvTraceGetCurrentTaskHandle>
 8000f66:	0003      	movs	r3, r0
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f003 f899 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	001a      	movs	r2, r3
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <xQueueGenericSend+0x398>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	4013      	ands	r3, r2
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d037      	beq.n	8000fee <xQueueGenericSend+0x3a6>
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	0018      	movs	r0, r3
 8000f82:	f003 f8b7 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 8000f86:	0003      	movs	r3, r0
 8000f88:	001a      	movs	r2, r3
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <xQueueGenericSend+0x398>)
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d02b      	beq.n	8000fee <xQueueGenericSend+0x3a6>
 8000f96:	6a3b      	ldr	r3, [r7, #32]
 8000f98:	224c      	movs	r2, #76	; 0x4c
 8000f9a:	5c9b      	ldrb	r3, [r3, r2]
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d021      	beq.n	8000fe4 <xQueueGenericSend+0x39c>
 8000fa0:	dc25      	bgt.n	8000fee <xQueueGenericSend+0x3a6>
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	dc23      	bgt.n	8000fee <xQueueGenericSend+0x3a6>
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	da11      	bge.n	8000fce <xQueueGenericSend+0x386>
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <xQueueGenericSend+0x36c>
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d018      	beq.n	8000fe4 <xQueueGenericSend+0x39c>
 8000fb2:	e01c      	b.n	8000fee <xQueueGenericSend+0x3a6>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <xQueueGenericSend+0x376>
 8000fba:	2053      	movs	r0, #83	; 0x53
 8000fbc:	e000      	b.n	8000fc0 <xQueueGenericSend+0x378>
 8000fbe:	20c1      	movs	r0, #193	; 0xc1
 8000fc0:	6a39      	ldr	r1, [r7, #32]
 8000fc2:	6a3b      	ldr	r3, [r7, #32]
 8000fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	f003 fed6 	bl	8004d78 <prvTraceStoreEvent2>
 8000fcc:	e00f      	b.n	8000fee <xQueueGenericSend+0x3a6>
 8000fce:	6a39      	ldr	r1, [r7, #32]
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	2054      	movs	r0, #84	; 0x54
 8000fd8:	f003 fece 	bl	8004d78 <prvTraceStoreEvent2>
 8000fdc:	e007      	b.n	8000fee <xQueueGenericSend+0x3a6>
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	20000014 	.word	0x20000014
 8000fe4:	6a3b      	ldr	r3, [r7, #32]
 8000fe6:	0019      	movs	r1, r3
 8000fe8:	2055      	movs	r0, #85	; 0x55
 8000fea:	f003 fe6b 	bl	8004cc4 <prvTraceStoreEvent1>
			return errQUEUE_FULL;
 8000fee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b00a      	add	sp, #40	; 0x28
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <xQueueGenericSendFromISR+0x1c>
 8001010:	b672      	cpsid	i
 8001012:	e7fe      	b.n	8001012 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d103      	bne.n	8001022 <xQueueGenericSendFromISR+0x2a>
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <xQueueGenericSendFromISR+0x2e>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <xQueueGenericSendFromISR+0x30>
 8001026:	2300      	movs	r3, #0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <xQueueGenericSendFromISR+0x38>
 800102c:	b672      	cpsid	i
 800102e:	e7fe      	b.n	800102e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d103      	bne.n	800103e <xQueueGenericSendFromISR+0x46>
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103a:	2b01      	cmp	r3, #1
 800103c:	d101      	bne.n	8001042 <xQueueGenericSendFromISR+0x4a>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <xQueueGenericSendFromISR+0x4c>
 8001042:	2300      	movs	r3, #0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <xQueueGenericSendFromISR+0x54>
 8001048:	b672      	cpsid	i
 800104a:	e7fe      	b.n	800104a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800104c:	f002 fc1a 	bl	8003884 <ulSetInterruptMaskFromISR>
 8001050:	0003      	movs	r3, r0
 8001052:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800105c:	429a      	cmp	r2, r3
 800105e:	d302      	bcc.n	8001066 <xQueueGenericSendFromISR+0x6e>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d15b      	bne.n	800111e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001066:	2313      	movs	r3, #19
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	2145      	movs	r1, #69	; 0x45
 800106e:	5c52      	ldrb	r2, [r2, r1]
 8001070:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	0018      	movs	r0, r3
 8001076:	f003 f83d 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 800107a:	0003      	movs	r3, r0
 800107c:	001a      	movs	r2, r3
 800107e:	4b42      	ldr	r3, [pc, #264]	; (8001188 <xQueueGenericSendFromISR+0x190>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	4013      	ands	r3, r2
 8001084:	b29b      	uxth	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d01f      	beq.n	80010ca <xQueueGenericSendFromISR+0xd2>
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	224c      	movs	r2, #76	; 0x4c
 800108e:	5c9b      	ldrb	r3, [r3, r2]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <xQueueGenericSendFromISR+0xa6>
 8001094:	db19      	blt.n	80010ca <xQueueGenericSendFromISR+0xd2>
 8001096:	3b02      	subs	r3, #2
 8001098:	2b01      	cmp	r3, #1
 800109a:	d816      	bhi.n	80010ca <xQueueGenericSendFromISR+0xd2>
 800109c:	e00d      	b.n	80010ba <xQueueGenericSendFromISR+0xc2>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <xQueueGenericSendFromISR+0xb0>
 80010a4:	2059      	movs	r0, #89	; 0x59
 80010a6:	e000      	b.n	80010aa <xQueueGenericSendFromISR+0xb2>
 80010a8:	20c3      	movs	r0, #195	; 0xc3
 80010aa:	69b9      	ldr	r1, [r7, #24]
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b0:	3301      	adds	r3, #1
 80010b2:	001a      	movs	r2, r3
 80010b4:	f003 fe60 	bl	8004d78 <prvTraceStoreEvent2>
 80010b8:	e007      	b.n	80010ca <xQueueGenericSendFromISR+0xd2>
 80010ba:	69b9      	ldr	r1, [r7, #24]
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c0:	3301      	adds	r3, #1
 80010c2:	001a      	movs	r2, r3
 80010c4:	205a      	movs	r0, #90	; 0x5a
 80010c6:	f003 fe57 	bl	8004d78 <prvTraceStoreEvent2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	0018      	movs	r0, r3
 80010d2:	f000 fceb 	bl	8001aac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80010d6:	2313      	movs	r3, #19
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	3301      	adds	r3, #1
 80010e0:	d111      	bne.n	8001106 <xQueueGenericSendFromISR+0x10e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d016      	beq.n	8001118 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	3324      	adds	r3, #36	; 0x24
 80010ee:	0018      	movs	r0, r3
 80010f0:	f001 fb64 	bl	80027bc <xTaskRemoveFromEventList>
 80010f4:	1e03      	subs	r3, r0, #0
 80010f6:	d00f      	beq.n	8001118 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00c      	beq.n	8001118 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	e008      	b.n	8001118 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001106:	2313      	movs	r3, #19
 8001108:	18fb      	adds	r3, r7, r3
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	b2db      	uxtb	r3, r3
 8001110:	b259      	sxtb	r1, r3
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2245      	movs	r2, #69	; 0x45
 8001116:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8001118:	2301      	movs	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
		{
 800111c:	e02b      	b.n	8001176 <xQueueGenericSendFromISR+0x17e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	0018      	movs	r0, r3
 8001122:	f002 ffe7 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 8001126:	0003      	movs	r3, r0
 8001128:	001a      	movs	r2, r3
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <xQueueGenericSendFromISR+0x190>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	4013      	ands	r3, r2
 8001130:	b29b      	uxth	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d01d      	beq.n	8001172 <xQueueGenericSendFromISR+0x17a>
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	224c      	movs	r2, #76	; 0x4c
 800113a:	5c9b      	ldrb	r3, [r3, r2]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d004      	beq.n	800114a <xQueueGenericSendFromISR+0x152>
 8001140:	db17      	blt.n	8001172 <xQueueGenericSendFromISR+0x17a>
 8001142:	3b02      	subs	r3, #2
 8001144:	2b01      	cmp	r3, #1
 8001146:	d814      	bhi.n	8001172 <xQueueGenericSendFromISR+0x17a>
 8001148:	e00c      	b.n	8001164 <xQueueGenericSendFromISR+0x16c>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <xQueueGenericSendFromISR+0x15c>
 8001150:	205c      	movs	r0, #92	; 0x5c
 8001152:	e000      	b.n	8001156 <xQueueGenericSendFromISR+0x15e>
 8001154:	20c4      	movs	r0, #196	; 0xc4
 8001156:	69b9      	ldr	r1, [r7, #24]
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115c:	001a      	movs	r2, r3
 800115e:	f003 fe0b 	bl	8004d78 <prvTraceStoreEvent2>
 8001162:	e006      	b.n	8001172 <xQueueGenericSendFromISR+0x17a>
 8001164:	69b9      	ldr	r1, [r7, #24]
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116a:	001a      	movs	r2, r3
 800116c:	205d      	movs	r0, #93	; 0x5d
 800116e:	f003 fe03 	bl	8004d78 <prvTraceStoreEvent2>
			xReturn = errQUEUE_FULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	0018      	movs	r0, r3
 800117a:	f002 fb89 	bl	8003890 <vClearInterruptMaskFromISR>

	return xReturn;
 800117e:	69fb      	ldr	r3, [r7, #28]
}
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	b008      	add	sp, #32
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000014 	.word	0x20000014

0800118c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	6839      	ldr	r1, [r7, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	0018      	movs	r0, r3
 800119e:	f000 f805 	bl	80011ac <MyWrapper_xQueueGiveFromISR>
 80011a2:	0003      	movs	r3, r0
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}

080011ac <MyWrapper_xQueueGiveFromISR>:
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <MyWrapper_xQueueGiveFromISR+0x1a>
 80011c2:	b672      	cpsid	i
 80011c4:	e7fe      	b.n	80011c4 <MyWrapper_xQueueGiveFromISR+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MyWrapper_xQueueGiveFromISR+0x26>
 80011ce:	b672      	cpsid	i
 80011d0:	e7fe      	b.n	80011d0 <MyWrapper_xQueueGiveFromISR+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d103      	bne.n	80011e2 <MyWrapper_xQueueGiveFromISR+0x36>
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <MyWrapper_xQueueGiveFromISR+0x3a>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <MyWrapper_xQueueGiveFromISR+0x3c>
 80011e6:	2300      	movs	r3, #0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <MyWrapper_xQueueGiveFromISR+0x44>
 80011ec:	b672      	cpsid	i
 80011ee:	e7fe      	b.n	80011ee <MyWrapper_xQueueGiveFromISR+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80011f0:	f002 fb48 	bl	8003884 <ulSetInterruptMaskFromISR>
 80011f4:	0003      	movs	r3, r0
 80011f6:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fc:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	429a      	cmp	r2, r3
 8001206:	d259      	bcs.n	80012bc <MyWrapper_xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001208:	2317      	movs	r3, #23
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	6a3a      	ldr	r2, [r7, #32]
 800120e:	2145      	movs	r1, #69	; 0x45
 8001210:	5c52      	ldrb	r2, [r2, r1]
 8001212:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	0018      	movs	r0, r3
 8001218:	f002 ff6c 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 800121c:	0003      	movs	r3, r0
 800121e:	001a      	movs	r2, r3
 8001220:	4b41      	ldr	r3, [pc, #260]	; (8001328 <MyWrapper_xQueueGiveFromISR+0x17c>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	4013      	ands	r3, r2
 8001226:	b29b      	uxth	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d01f      	beq.n	800126c <MyWrapper_xQueueGiveFromISR+0xc0>
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	224c      	movs	r2, #76	; 0x4c
 8001230:	5c9b      	ldrb	r3, [r3, r2]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d004      	beq.n	8001240 <MyWrapper_xQueueGiveFromISR+0x94>
 8001236:	db19      	blt.n	800126c <MyWrapper_xQueueGiveFromISR+0xc0>
 8001238:	3b02      	subs	r3, #2
 800123a:	2b01      	cmp	r3, #1
 800123c:	d816      	bhi.n	800126c <MyWrapper_xQueueGiveFromISR+0xc0>
 800123e:	e00d      	b.n	800125c <MyWrapper_xQueueGiveFromISR+0xb0>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <MyWrapper_xQueueGiveFromISR+0x9e>
 8001246:	2059      	movs	r0, #89	; 0x59
 8001248:	e000      	b.n	800124c <MyWrapper_xQueueGiveFromISR+0xa0>
 800124a:	20c3      	movs	r0, #195	; 0xc3
 800124c:	6a39      	ldr	r1, [r7, #32]
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001252:	3301      	adds	r3, #1
 8001254:	001a      	movs	r2, r3
 8001256:	f003 fd8f 	bl	8004d78 <prvTraceStoreEvent2>
 800125a:	e007      	b.n	800126c <MyWrapper_xQueueGiveFromISR+0xc0>
 800125c:	6a39      	ldr	r1, [r7, #32]
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001262:	3301      	adds	r3, #1
 8001264:	001a      	movs	r2, r3
 8001266:	205a      	movs	r0, #90	; 0x5a
 8001268:	f003 fd86 	bl	8004d78 <prvTraceStoreEvent2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001274:	2317      	movs	r3, #23
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b25b      	sxtb	r3, r3
 800127c:	3301      	adds	r3, #1
 800127e:	d111      	bne.n	80012a4 <MyWrapper_xQueueGiveFromISR+0xf8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	2b00      	cmp	r3, #0
 8001286:	d016      	beq.n	80012b6 <MyWrapper_xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	3324      	adds	r3, #36	; 0x24
 800128c:	0018      	movs	r0, r3
 800128e:	f001 fa95 	bl	80027bc <xTaskRemoveFromEventList>
 8001292:	1e03      	subs	r3, r0, #0
 8001294:	d00f      	beq.n	80012b6 <MyWrapper_xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00c      	beq.n	80012b6 <MyWrapper_xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e008      	b.n	80012b6 <MyWrapper_xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80012a4:	2317      	movs	r3, #23
 80012a6:	18fb      	adds	r3, r7, r3
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	b259      	sxtb	r1, r3
 80012b0:	6a3b      	ldr	r3, [r7, #32]
 80012b2:	2245      	movs	r2, #69	; 0x45
 80012b4:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80012b6:	2301      	movs	r3, #1
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ba:	e02b      	b.n	8001314 <MyWrapper_xQueueGiveFromISR+0x168>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	0018      	movs	r0, r3
 80012c0:	f002 ff18 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 80012c4:	0003      	movs	r3, r0
 80012c6:	001a      	movs	r2, r3
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MyWrapper_xQueueGiveFromISR+0x17c>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	4013      	ands	r3, r2
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d01d      	beq.n	8001310 <MyWrapper_xQueueGiveFromISR+0x164>
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	224c      	movs	r2, #76	; 0x4c
 80012d8:	5c9b      	ldrb	r3, [r3, r2]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d004      	beq.n	80012e8 <MyWrapper_xQueueGiveFromISR+0x13c>
 80012de:	db17      	blt.n	8001310 <MyWrapper_xQueueGiveFromISR+0x164>
 80012e0:	3b02      	subs	r3, #2
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d814      	bhi.n	8001310 <MyWrapper_xQueueGiveFromISR+0x164>
 80012e6:	e00c      	b.n	8001302 <MyWrapper_xQueueGiveFromISR+0x156>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <MyWrapper_xQueueGiveFromISR+0x146>
 80012ee:	205c      	movs	r0, #92	; 0x5c
 80012f0:	e000      	b.n	80012f4 <MyWrapper_xQueueGiveFromISR+0x148>
 80012f2:	20c4      	movs	r0, #196	; 0xc4
 80012f4:	6a39      	ldr	r1, [r7, #32]
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fa:	001a      	movs	r2, r3
 80012fc:	f003 fd3c 	bl	8004d78 <prvTraceStoreEvent2>
 8001300:	e006      	b.n	8001310 <MyWrapper_xQueueGiveFromISR+0x164>
 8001302:	6a39      	ldr	r1, [r7, #32]
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001308:	001a      	movs	r2, r3
 800130a:	205d      	movs	r0, #93	; 0x5d
 800130c:	f003 fd34 	bl	8004d78 <prvTraceStoreEvent2>
			xReturn = errQUEUE_FULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	0018      	movs	r0, r3
 8001318:	f002 faba 	bl	8003890 <vClearInterruptMaskFromISR>

	return xReturn;
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800131e:	0018      	movs	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	b00a      	add	sp, #40	; 0x28
 8001324:	bd80      	pop	{r7, pc}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	20000014 	.word	0x20000014

0800132c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <xQueueReceive+0x1e>
 8001346:	b672      	cpsid	i
 8001348:	e7fe      	b.n	8001348 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d103      	bne.n	8001358 <xQueueReceive+0x2c>
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <xQueueReceive+0x30>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <xQueueReceive+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <xQueueReceive+0x3a>
 8001362:	b672      	cpsid	i
 8001364:	e7fe      	b.n	8001364 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001366:	f001 fc89 	bl	8002c7c <xTaskGetSchedulerState>
 800136a:	1e03      	subs	r3, r0, #0
 800136c:	d102      	bne.n	8001374 <xQueueReceive+0x48>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <xQueueReceive+0x4c>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <xQueueReceive+0x4e>
 8001378:	2300      	movs	r3, #0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <xQueueReceive+0x56>
 800137e:	b672      	cpsid	i
 8001380:	e7fe      	b.n	8001380 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001382:	f002 fa55 	bl	8003830 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d05b      	beq.n	800144a <xQueueReceive+0x11e>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	0011      	movs	r1, r2
 8001398:	0018      	movs	r0, r3
 800139a:	f000 fbf2 	bl	8001b82 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800139e:	f003 f83e 	bl	800441e <prvTraceGetCurrentTaskHandle>
 80013a2:	0003      	movs	r3, r0
 80013a4:	0018      	movs	r0, r3
 80013a6:	f002 fe7b 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 80013aa:	0003      	movs	r3, r0
 80013ac:	001a      	movs	r2, r3
 80013ae:	4bb9      	ldr	r3, [pc, #740]	; (8001694 <xQueueReceive+0x368>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	4013      	ands	r3, r2
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d032      	beq.n	8001420 <xQueueReceive+0xf4>
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	0018      	movs	r0, r3
 80013be:	f002 fe99 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 80013c2:	0003      	movs	r3, r0
 80013c4:	001a      	movs	r2, r3
 80013c6:	4bb3      	ldr	r3, [pc, #716]	; (8001694 <xQueueReceive+0x368>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	4013      	ands	r3, r2
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d026      	beq.n	8001420 <xQueueReceive+0xf4>
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	224c      	movs	r2, #76	; 0x4c
 80013d6:	5c9b      	ldrb	r3, [r3, r2]
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d01b      	beq.n	8001414 <xQueueReceive+0xe8>
 80013dc:	dc20      	bgt.n	8001420 <xQueueReceive+0xf4>
 80013de:	2b03      	cmp	r3, #3
 80013e0:	dc1e      	bgt.n	8001420 <xQueueReceive+0xf4>
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	da0d      	bge.n	8001402 <xQueueReceive+0xd6>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <xQueueReceive+0xc4>
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d012      	beq.n	8001414 <xQueueReceive+0xe8>
 80013ee:	e017      	b.n	8001420 <xQueueReceive+0xf4>
 80013f0:	6a39      	ldr	r1, [r7, #32]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f8:	3b01      	subs	r3, #1
 80013fa:	2060      	movs	r0, #96	; 0x60
 80013fc:	f003 fd1c 	bl	8004e38 <prvTraceStoreEvent3>
 8001400:	e00e      	b.n	8001420 <xQueueReceive+0xf4>
 8001402:	6a39      	ldr	r1, [r7, #32]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140a:	3b01      	subs	r3, #1
 800140c:	2061      	movs	r0, #97	; 0x61
 800140e:	f003 fd13 	bl	8004e38 <prvTraceStoreEvent3>
 8001412:	e005      	b.n	8001420 <xQueueReceive+0xf4>
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	0019      	movs	r1, r3
 800141a:	2062      	movs	r0, #98	; 0x62
 800141c:	f003 fcac 	bl	8004d78 <prvTraceStoreEvent2>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	1e5a      	subs	r2, r3, #1
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <xQueueReceive+0x116>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	3310      	adds	r3, #16
 8001434:	0018      	movs	r0, r3
 8001436:	f001 f9c1 	bl	80027bc <xTaskRemoveFromEventList>
 800143a:	1e03      	subs	r3, r0, #0
 800143c:	d001      	beq.n	8001442 <xQueueReceive+0x116>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800143e:	f002 f9e7 	bl	8003810 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001442:	f002 fa07 	bl	8003854 <vPortExitCritical>
				return pdPASS;
 8001446:	2301      	movs	r3, #1
 8001448:	e120      	b.n	800168c <xQueueReceive+0x360>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d142      	bne.n	80014d6 <xQueueReceive+0x1aa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001450:	f002 fa00 	bl	8003854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001454:	f002 ffe3 	bl	800441e <prvTraceGetCurrentTaskHandle>
 8001458:	0003      	movs	r3, r0
 800145a:	0018      	movs	r0, r3
 800145c:	f002 fe20 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8001460:	0003      	movs	r3, r0
 8001462:	001a      	movs	r2, r3
 8001464:	4b8b      	ldr	r3, [pc, #556]	; (8001694 <xQueueReceive+0x368>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	4013      	ands	r3, r2
 800146a:	b29b      	uxth	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d030      	beq.n	80014d2 <xQueueReceive+0x1a6>
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	0018      	movs	r0, r3
 8001474:	f002 fe3e 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 8001478:	0003      	movs	r3, r0
 800147a:	001a      	movs	r2, r3
 800147c:	4b85      	ldr	r3, [pc, #532]	; (8001694 <xQueueReceive+0x368>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	4013      	ands	r3, r2
 8001482:	b29b      	uxth	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d024      	beq.n	80014d2 <xQueueReceive+0x1a6>
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	224c      	movs	r2, #76	; 0x4c
 800148c:	5c9b      	ldrb	r3, [r3, r2]
 800148e:	2b04      	cmp	r3, #4
 8001490:	d019      	beq.n	80014c6 <xQueueReceive+0x19a>
 8001492:	dc1e      	bgt.n	80014d2 <xQueueReceive+0x1a6>
 8001494:	2b03      	cmp	r3, #3
 8001496:	dc1c      	bgt.n	80014d2 <xQueueReceive+0x1a6>
 8001498:	2b02      	cmp	r3, #2
 800149a:	da0c      	bge.n	80014b6 <xQueueReceive+0x18a>
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <xQueueReceive+0x17a>
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d010      	beq.n	80014c6 <xQueueReceive+0x19a>
 80014a4:	e015      	b.n	80014d2 <xQueueReceive+0x1a6>
 80014a6:	6a39      	ldr	r1, [r7, #32]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ae:	2063      	movs	r0, #99	; 0x63
 80014b0:	f003 fcc2 	bl	8004e38 <prvTraceStoreEvent3>
 80014b4:	e00d      	b.n	80014d2 <xQueueReceive+0x1a6>
 80014b6:	6a39      	ldr	r1, [r7, #32]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014be:	2064      	movs	r0, #100	; 0x64
 80014c0:	f003 fcba 	bl	8004e38 <prvTraceStoreEvent3>
 80014c4:	e005      	b.n	80014d2 <xQueueReceive+0x1a6>
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	0019      	movs	r1, r3
 80014cc:	2065      	movs	r0, #101	; 0x65
 80014ce:	f003 fc53 	bl	8004d78 <prvTraceStoreEvent2>
					return errQUEUE_EMPTY;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e0da      	b.n	800168c <xQueueReceive+0x360>
				}
				else if( xEntryTimeSet == pdFALSE )
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d106      	bne.n	80014ea <xQueueReceive+0x1be>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80014dc:	2314      	movs	r3, #20
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	0018      	movs	r0, r3
 80014e2:	f001 fa41 	bl	8002968 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80014e6:	2301      	movs	r3, #1
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80014ea:	f002 f9b3 	bl	8003854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80014ee:	f000 fed3 	bl	8002298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80014f2:	f002 f99d 	bl	8003830 <vPortEnterCritical>
 80014f6:	6a3b      	ldr	r3, [r7, #32]
 80014f8:	2244      	movs	r2, #68	; 0x44
 80014fa:	5c9b      	ldrb	r3, [r3, r2]
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	d103      	bne.n	800150a <xQueueReceive+0x1de>
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	2244      	movs	r2, #68	; 0x44
 8001506:	2100      	movs	r1, #0
 8001508:	5499      	strb	r1, [r3, r2]
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	2245      	movs	r2, #69	; 0x45
 800150e:	5c9b      	ldrb	r3, [r3, r2]
 8001510:	b25b      	sxtb	r3, r3
 8001512:	3301      	adds	r3, #1
 8001514:	d103      	bne.n	800151e <xQueueReceive+0x1f2>
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	2245      	movs	r2, #69	; 0x45
 800151a:	2100      	movs	r1, #0
 800151c:	5499      	strb	r1, [r3, r2]
 800151e:	f002 f999 	bl	8003854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001522:	1d3a      	adds	r2, r7, #4
 8001524:	2314      	movs	r3, #20
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	0011      	movs	r1, r2
 800152a:	0018      	movs	r0, r3
 800152c:	f001 fa30 	bl	8002990 <xTaskCheckForTimeOut>
 8001530:	1e03      	subs	r3, r0, #0
 8001532:	d15e      	bne.n	80015f2 <xQueueReceive+0x2c6>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001534:	6a3b      	ldr	r3, [r7, #32]
 8001536:	0018      	movs	r0, r3
 8001538:	f000 fba7 	bl	8001c8a <prvIsQueueEmpty>
 800153c:	1e03      	subs	r3, r0, #0
 800153e:	d051      	beq.n	80015e4 <xQueueReceive+0x2b8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8001540:	f002 ff6d 	bl	800441e <prvTraceGetCurrentTaskHandle>
 8001544:	0003      	movs	r3, r0
 8001546:	0018      	movs	r0, r3
 8001548:	f002 fdaa 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 800154c:	0003      	movs	r3, r0
 800154e:	001a      	movs	r2, r3
 8001550:	4b50      	ldr	r3, [pc, #320]	; (8001694 <xQueueReceive+0x368>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	4013      	ands	r3, r2
 8001556:	b29b      	uxth	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d030      	beq.n	80015be <xQueueReceive+0x292>
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	0018      	movs	r0, r3
 8001560:	f002 fdc8 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 8001564:	0003      	movs	r3, r0
 8001566:	001a      	movs	r2, r3
 8001568:	4b4a      	ldr	r3, [pc, #296]	; (8001694 <xQueueReceive+0x368>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	4013      	ands	r3, r2
 800156e:	b29b      	uxth	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d024      	beq.n	80015be <xQueueReceive+0x292>
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	224c      	movs	r2, #76	; 0x4c
 8001578:	5c9b      	ldrb	r3, [r3, r2]
 800157a:	2b04      	cmp	r3, #4
 800157c:	d019      	beq.n	80015b2 <xQueueReceive+0x286>
 800157e:	dc1e      	bgt.n	80015be <xQueueReceive+0x292>
 8001580:	2b03      	cmp	r3, #3
 8001582:	dc1c      	bgt.n	80015be <xQueueReceive+0x292>
 8001584:	2b02      	cmp	r3, #2
 8001586:	da0c      	bge.n	80015a2 <xQueueReceive+0x276>
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <xQueueReceive+0x266>
 800158c:	2b01      	cmp	r3, #1
 800158e:	d010      	beq.n	80015b2 <xQueueReceive+0x286>
 8001590:	e015      	b.n	80015be <xQueueReceive+0x292>
 8001592:	6a39      	ldr	r1, [r7, #32]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	2066      	movs	r0, #102	; 0x66
 800159c:	f003 fc4c 	bl	8004e38 <prvTraceStoreEvent3>
 80015a0:	e00d      	b.n	80015be <xQueueReceive+0x292>
 80015a2:	6a39      	ldr	r1, [r7, #32]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015aa:	2067      	movs	r0, #103	; 0x67
 80015ac:	f003 fc44 	bl	8004e38 <prvTraceStoreEvent3>
 80015b0:	e005      	b.n	80015be <xQueueReceive+0x292>
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	0019      	movs	r1, r3
 80015b8:	2068      	movs	r0, #104	; 0x68
 80015ba:	f003 fbdd 	bl	8004d78 <prvTraceStoreEvent2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	3324      	adds	r3, #36	; 0x24
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	0011      	movs	r1, r2
 80015c6:	0018      	movs	r0, r3
 80015c8:	f001 f86c 	bl	80026a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	0018      	movs	r0, r3
 80015d0:	f000 fafd 	bl	8001bce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80015d4:	f000 fe6c 	bl	80022b0 <xTaskResumeAll>
 80015d8:	1e03      	subs	r3, r0, #0
 80015da:	d000      	beq.n	80015de <xQueueReceive+0x2b2>
 80015dc:	e6d1      	b.n	8001382 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80015de:	f002 f917 	bl	8003810 <vPortYield>
 80015e2:	e6ce      	b.n	8001382 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	0018      	movs	r0, r3
 80015e8:	f000 faf1 	bl	8001bce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80015ec:	f000 fe60 	bl	80022b0 <xTaskResumeAll>
 80015f0:	e6c7      	b.n	8001382 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f000 faea 	bl	8001bce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80015fa:	f000 fe59 	bl	80022b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	0018      	movs	r0, r3
 8001602:	f000 fb42 	bl	8001c8a <prvIsQueueEmpty>
 8001606:	1e03      	subs	r3, r0, #0
 8001608:	d100      	bne.n	800160c <xQueueReceive+0x2e0>
 800160a:	e6ba      	b.n	8001382 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800160c:	f002 ff07 	bl	800441e <prvTraceGetCurrentTaskHandle>
 8001610:	0003      	movs	r3, r0
 8001612:	0018      	movs	r0, r3
 8001614:	f002 fd44 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8001618:	0003      	movs	r3, r0
 800161a:	001a      	movs	r2, r3
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <xQueueReceive+0x368>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	4013      	ands	r3, r2
 8001622:	b29b      	uxth	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d030      	beq.n	800168a <xQueueReceive+0x35e>
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	0018      	movs	r0, r3
 800162c:	f002 fd62 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 8001630:	0003      	movs	r3, r0
 8001632:	001a      	movs	r2, r3
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <xQueueReceive+0x368>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	4013      	ands	r3, r2
 800163a:	b29b      	uxth	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d024      	beq.n	800168a <xQueueReceive+0x35e>
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	224c      	movs	r2, #76	; 0x4c
 8001644:	5c9b      	ldrb	r3, [r3, r2]
 8001646:	2b04      	cmp	r3, #4
 8001648:	d019      	beq.n	800167e <xQueueReceive+0x352>
 800164a:	dc1e      	bgt.n	800168a <xQueueReceive+0x35e>
 800164c:	2b03      	cmp	r3, #3
 800164e:	dc1c      	bgt.n	800168a <xQueueReceive+0x35e>
 8001650:	2b02      	cmp	r3, #2
 8001652:	da0c      	bge.n	800166e <xQueueReceive+0x342>
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <xQueueReceive+0x332>
 8001658:	2b01      	cmp	r3, #1
 800165a:	d010      	beq.n	800167e <xQueueReceive+0x352>
 800165c:	e015      	b.n	800168a <xQueueReceive+0x35e>
 800165e:	6a39      	ldr	r1, [r7, #32]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001666:	2063      	movs	r0, #99	; 0x63
 8001668:	f003 fbe6 	bl	8004e38 <prvTraceStoreEvent3>
 800166c:	e00d      	b.n	800168a <xQueueReceive+0x35e>
 800166e:	6a39      	ldr	r1, [r7, #32]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001676:	2064      	movs	r0, #100	; 0x64
 8001678:	f003 fbde 	bl	8004e38 <prvTraceStoreEvent3>
 800167c:	e005      	b.n	800168a <xQueueReceive+0x35e>
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	0019      	movs	r1, r3
 8001684:	2065      	movs	r0, #101	; 0x65
 8001686:	f003 fb77 	bl	8004d78 <prvTraceStoreEvent2>
				return errQUEUE_EMPTY;
 800168a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	b00a      	add	sp, #40	; 0x28
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000014 	.word	0x20000014

08001698 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <xQueueSemaphoreTake+0x20>
 80016b4:	b672      	cpsid	i
 80016b6:	e7fe      	b.n	80016b6 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <xQueueSemaphoreTake+0x2c>
 80016c0:	b672      	cpsid	i
 80016c2:	e7fe      	b.n	80016c2 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80016c4:	f001 fada 	bl	8002c7c <xTaskGetSchedulerState>
 80016c8:	1e03      	subs	r3, r0, #0
 80016ca:	d102      	bne.n	80016d2 <xQueueSemaphoreTake+0x3a>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <xQueueSemaphoreTake+0x3e>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <xQueueSemaphoreTake+0x40>
 80016d6:	2300      	movs	r3, #0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <xQueueSemaphoreTake+0x48>
 80016dc:	b672      	cpsid	i
 80016de:	e7fe      	b.n	80016de <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80016e0:	f002 f8a6 	bl	8003830 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e8:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d05e      	beq.n	80017ae <xQueueSemaphoreTake+0x116>
			{
				traceQUEUE_RECEIVE( pxQueue );
 80016f0:	f002 fe95 	bl	800441e <prvTraceGetCurrentTaskHandle>
 80016f4:	0003      	movs	r3, r0
 80016f6:	0018      	movs	r0, r3
 80016f8:	f002 fcd2 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 80016fc:	0003      	movs	r3, r0
 80016fe:	001a      	movs	r2, r3
 8001700:	4b9f      	ldr	r3, [pc, #636]	; (8001980 <xQueueSemaphoreTake+0x2e8>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	4013      	ands	r3, r2
 8001706:	b29b      	uxth	r3, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	d032      	beq.n	8001772 <xQueueSemaphoreTake+0xda>
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	0018      	movs	r0, r3
 8001710:	f002 fcf0 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 8001714:	0003      	movs	r3, r0
 8001716:	001a      	movs	r2, r3
 8001718:	4b99      	ldr	r3, [pc, #612]	; (8001980 <xQueueSemaphoreTake+0x2e8>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	4013      	ands	r3, r2
 800171e:	b29b      	uxth	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d026      	beq.n	8001772 <xQueueSemaphoreTake+0xda>
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	224c      	movs	r2, #76	; 0x4c
 8001728:	5c9b      	ldrb	r3, [r3, r2]
 800172a:	2b04      	cmp	r3, #4
 800172c:	d01b      	beq.n	8001766 <xQueueSemaphoreTake+0xce>
 800172e:	dc20      	bgt.n	8001772 <xQueueSemaphoreTake+0xda>
 8001730:	2b03      	cmp	r3, #3
 8001732:	dc1e      	bgt.n	8001772 <xQueueSemaphoreTake+0xda>
 8001734:	2b02      	cmp	r3, #2
 8001736:	da0d      	bge.n	8001754 <xQueueSemaphoreTake+0xbc>
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <xQueueSemaphoreTake+0xaa>
 800173c:	2b01      	cmp	r3, #1
 800173e:	d012      	beq.n	8001766 <xQueueSemaphoreTake+0xce>
 8001740:	e017      	b.n	8001772 <xQueueSemaphoreTake+0xda>
 8001742:	69f9      	ldr	r1, [r7, #28]
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174a:	3b01      	subs	r3, #1
 800174c:	2060      	movs	r0, #96	; 0x60
 800174e:	f003 fb73 	bl	8004e38 <prvTraceStoreEvent3>
 8001752:	e00e      	b.n	8001772 <xQueueSemaphoreTake+0xda>
 8001754:	69f9      	ldr	r1, [r7, #28]
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175c:	3b01      	subs	r3, #1
 800175e:	2061      	movs	r0, #97	; 0x61
 8001760:	f003 fb6a 	bl	8004e38 <prvTraceStoreEvent3>
 8001764:	e005      	b.n	8001772 <xQueueSemaphoreTake+0xda>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	0019      	movs	r1, r3
 800176c:	2062      	movs	r0, #98	; 0x62
 800176e:	f003 fb03 	bl	8004d78 <prvTraceStoreEvent2>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	1e5a      	subs	r2, r3, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d104      	bne.n	800178c <xQueueSemaphoreTake+0xf4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001782:	f001 fc83 	bl	800308c <pvTaskIncrementMutexHeldCount>
 8001786:	0002      	movs	r2, r0
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <xQueueSemaphoreTake+0x10e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	3310      	adds	r3, #16
 8001798:	0018      	movs	r0, r3
 800179a:	f001 f80f 	bl	80027bc <xTaskRemoveFromEventList>
 800179e:	1e03      	subs	r3, r0, #0
 80017a0:	d001      	beq.n	80017a6 <xQueueSemaphoreTake+0x10e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80017a2:	f002 f835 	bl	8003810 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80017a6:	f002 f855 	bl	8003854 <vPortExitCritical>
				return pdPASS;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e14b      	b.n	8001a46 <xQueueSemaphoreTake+0x3ae>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d147      	bne.n	8001844 <xQueueSemaphoreTake+0x1ac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <xQueueSemaphoreTake+0x126>
 80017ba:	b672      	cpsid	i
 80017bc:	e7fe      	b.n	80017bc <xQueueSemaphoreTake+0x124>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80017be:	f002 f849 	bl	8003854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80017c2:	f002 fe2c 	bl	800441e <prvTraceGetCurrentTaskHandle>
 80017c6:	0003      	movs	r3, r0
 80017c8:	0018      	movs	r0, r3
 80017ca:	f002 fc69 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 80017ce:	0003      	movs	r3, r0
 80017d0:	001a      	movs	r2, r3
 80017d2:	4b6b      	ldr	r3, [pc, #428]	; (8001980 <xQueueSemaphoreTake+0x2e8>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	4013      	ands	r3, r2
 80017d8:	b29b      	uxth	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d030      	beq.n	8001840 <xQueueSemaphoreTake+0x1a8>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	0018      	movs	r0, r3
 80017e2:	f002 fc87 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 80017e6:	0003      	movs	r3, r0
 80017e8:	001a      	movs	r2, r3
 80017ea:	4b65      	ldr	r3, [pc, #404]	; (8001980 <xQueueSemaphoreTake+0x2e8>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	4013      	ands	r3, r2
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d024      	beq.n	8001840 <xQueueSemaphoreTake+0x1a8>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	224c      	movs	r2, #76	; 0x4c
 80017fa:	5c9b      	ldrb	r3, [r3, r2]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d019      	beq.n	8001834 <xQueueSemaphoreTake+0x19c>
 8001800:	dc1e      	bgt.n	8001840 <xQueueSemaphoreTake+0x1a8>
 8001802:	2b03      	cmp	r3, #3
 8001804:	dc1c      	bgt.n	8001840 <xQueueSemaphoreTake+0x1a8>
 8001806:	2b02      	cmp	r3, #2
 8001808:	da0c      	bge.n	8001824 <xQueueSemaphoreTake+0x18c>
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <xQueueSemaphoreTake+0x17c>
 800180e:	2b01      	cmp	r3, #1
 8001810:	d010      	beq.n	8001834 <xQueueSemaphoreTake+0x19c>
 8001812:	e015      	b.n	8001840 <xQueueSemaphoreTake+0x1a8>
 8001814:	69f9      	ldr	r1, [r7, #28]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181c:	2063      	movs	r0, #99	; 0x63
 800181e:	f003 fb0b 	bl	8004e38 <prvTraceStoreEvent3>
 8001822:	e00d      	b.n	8001840 <xQueueSemaphoreTake+0x1a8>
 8001824:	69f9      	ldr	r1, [r7, #28]
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182c:	2064      	movs	r0, #100	; 0x64
 800182e:	f003 fb03 	bl	8004e38 <prvTraceStoreEvent3>
 8001832:	e005      	b.n	8001840 <xQueueSemaphoreTake+0x1a8>
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	0019      	movs	r1, r3
 800183a:	2065      	movs	r0, #101	; 0x65
 800183c:	f003 fa9c 	bl	8004d78 <prvTraceStoreEvent2>
					return errQUEUE_EMPTY;
 8001840:	2300      	movs	r3, #0
 8001842:	e100      	b.n	8001a46 <xQueueSemaphoreTake+0x3ae>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d106      	bne.n	8001858 <xQueueSemaphoreTake+0x1c0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800184a:	230c      	movs	r3, #12
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	0018      	movs	r0, r3
 8001850:	f001 f88a 	bl	8002968 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001854:	2301      	movs	r3, #1
 8001856:	623b      	str	r3, [r7, #32]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001858:	f001 fffc 	bl	8003854 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800185c:	f000 fd1c 	bl	8002298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001860:	f001 ffe6 	bl	8003830 <vPortEnterCritical>
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	2244      	movs	r2, #68	; 0x44
 8001868:	5c9b      	ldrb	r3, [r3, r2]
 800186a:	b25b      	sxtb	r3, r3
 800186c:	3301      	adds	r3, #1
 800186e:	d103      	bne.n	8001878 <xQueueSemaphoreTake+0x1e0>
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	2244      	movs	r2, #68	; 0x44
 8001874:	2100      	movs	r1, #0
 8001876:	5499      	strb	r1, [r3, r2]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	2245      	movs	r2, #69	; 0x45
 800187c:	5c9b      	ldrb	r3, [r3, r2]
 800187e:	b25b      	sxtb	r3, r3
 8001880:	3301      	adds	r3, #1
 8001882:	d103      	bne.n	800188c <xQueueSemaphoreTake+0x1f4>
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	2245      	movs	r2, #69	; 0x45
 8001888:	2100      	movs	r1, #0
 800188a:	5499      	strb	r1, [r3, r2]
 800188c:	f001 ffe2 	bl	8003854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001890:	003a      	movs	r2, r7
 8001892:	230c      	movs	r3, #12
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	0011      	movs	r1, r2
 8001898:	0018      	movs	r0, r3
 800189a:	f001 f879 	bl	8002990 <xTaskCheckForTimeOut>
 800189e:	1e03      	subs	r3, r0, #0
 80018a0:	d000      	beq.n	80018a4 <xQueueSemaphoreTake+0x20c>
 80018a2:	e06f      	b.n	8001984 <xQueueSemaphoreTake+0x2ec>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	0018      	movs	r0, r3
 80018a8:	f000 f9ef 	bl	8001c8a <prvIsQueueEmpty>
 80018ac:	1e03      	subs	r3, r0, #0
 80018ae:	d060      	beq.n	8001972 <xQueueSemaphoreTake+0x2da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80018b0:	f002 fdb5 	bl	800441e <prvTraceGetCurrentTaskHandle>
 80018b4:	0003      	movs	r3, r0
 80018b6:	0018      	movs	r0, r3
 80018b8:	f002 fbf2 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 80018bc:	0003      	movs	r3, r0
 80018be:	001a      	movs	r2, r3
 80018c0:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <xQueueSemaphoreTake+0x2e8>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	4013      	ands	r3, r2
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d030      	beq.n	800192e <xQueueSemaphoreTake+0x296>
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	0018      	movs	r0, r3
 80018d0:	f002 fc10 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 80018d4:	0003      	movs	r3, r0
 80018d6:	001a      	movs	r2, r3
 80018d8:	4b29      	ldr	r3, [pc, #164]	; (8001980 <xQueueSemaphoreTake+0x2e8>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	4013      	ands	r3, r2
 80018de:	b29b      	uxth	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d024      	beq.n	800192e <xQueueSemaphoreTake+0x296>
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	224c      	movs	r2, #76	; 0x4c
 80018e8:	5c9b      	ldrb	r3, [r3, r2]
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d019      	beq.n	8001922 <xQueueSemaphoreTake+0x28a>
 80018ee:	dc1e      	bgt.n	800192e <xQueueSemaphoreTake+0x296>
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	dc1c      	bgt.n	800192e <xQueueSemaphoreTake+0x296>
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	da0c      	bge.n	8001912 <xQueueSemaphoreTake+0x27a>
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <xQueueSemaphoreTake+0x26a>
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d010      	beq.n	8001922 <xQueueSemaphoreTake+0x28a>
 8001900:	e015      	b.n	800192e <xQueueSemaphoreTake+0x296>
 8001902:	69f9      	ldr	r1, [r7, #28]
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190a:	2066      	movs	r0, #102	; 0x66
 800190c:	f003 fa94 	bl	8004e38 <prvTraceStoreEvent3>
 8001910:	e00d      	b.n	800192e <xQueueSemaphoreTake+0x296>
 8001912:	69f9      	ldr	r1, [r7, #28]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191a:	2067      	movs	r0, #103	; 0x67
 800191c:	f003 fa8c 	bl	8004e38 <prvTraceStoreEvent3>
 8001920:	e005      	b.n	800192e <xQueueSemaphoreTake+0x296>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	0019      	movs	r1, r3
 8001928:	2068      	movs	r0, #104	; 0x68
 800192a:	f003 fa25 	bl	8004d78 <prvTraceStoreEvent2>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10a      	bne.n	800194c <xQueueSemaphoreTake+0x2b4>
					{
						taskENTER_CRITICAL();
 8001936:	f001 ff7b 	bl	8003830 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0018      	movs	r0, r3
 8001940:	f001 f9b8 	bl	8002cb4 <xTaskPriorityInherit>
 8001944:	0003      	movs	r3, r0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
						}
						taskEXIT_CRITICAL();
 8001948:	f001 ff84 	bl	8003854 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	3324      	adds	r3, #36	; 0x24
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	0011      	movs	r1, r2
 8001954:	0018      	movs	r0, r3
 8001956:	f000 fea5 	bl	80026a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	0018      	movs	r0, r3
 800195e:	f000 f936 	bl	8001bce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001962:	f000 fca5 	bl	80022b0 <xTaskResumeAll>
 8001966:	1e03      	subs	r3, r0, #0
 8001968:	d000      	beq.n	800196c <xQueueSemaphoreTake+0x2d4>
 800196a:	e6b9      	b.n	80016e0 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800196c:	f001 ff50 	bl	8003810 <vPortYield>
 8001970:	e6b6      	b.n	80016e0 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	0018      	movs	r0, r3
 8001976:	f000 f92a 	bl	8001bce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800197a:	f000 fc99 	bl	80022b0 <xTaskResumeAll>
 800197e:	e6af      	b.n	80016e0 <xQueueSemaphoreTake+0x48>
 8001980:	20000014 	.word	0x20000014
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	0018      	movs	r0, r3
 8001988:	f000 f921 	bl	8001bce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800198c:	f000 fc90 	bl	80022b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	0018      	movs	r0, r3
 8001994:	f000 f979 	bl	8001c8a <prvIsQueueEmpty>
 8001998:	1e03      	subs	r3, r0, #0
 800199a:	d100      	bne.n	800199e <xQueueSemaphoreTake+0x306>
 800199c:	e6a0      	b.n	80016e0 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d010      	beq.n	80019c6 <xQueueSemaphoreTake+0x32e>
					{
						taskENTER_CRITICAL();
 80019a4:	f001 ff44 	bl	8003830 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	0018      	movs	r0, r3
 80019ac:	f000 f868 	bl	8001a80 <prvGetDisinheritPriorityAfterTimeout>
 80019b0:	0003      	movs	r3, r0
 80019b2:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	0011      	movs	r1, r2
 80019bc:	0018      	movs	r0, r3
 80019be:	f001 faa9 	bl	8002f14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80019c2:	f001 ff47 	bl	8003854 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80019c6:	f002 fd2a 	bl	800441e <prvTraceGetCurrentTaskHandle>
 80019ca:	0003      	movs	r3, r0
 80019cc:	0018      	movs	r0, r3
 80019ce:	f002 fb67 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 80019d2:	0003      	movs	r3, r0
 80019d4:	001a      	movs	r2, r3
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <xQueueSemaphoreTake+0x3b8>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	4013      	ands	r3, r2
 80019dc:	b29b      	uxth	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d030      	beq.n	8001a44 <xQueueSemaphoreTake+0x3ac>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	0018      	movs	r0, r3
 80019e6:	f002 fb85 	bl	80040f4 <prvTraceGetQueueNumberHigh16>
 80019ea:	0003      	movs	r3, r0
 80019ec:	001a      	movs	r2, r3
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <xQueueSemaphoreTake+0x3b8>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	4013      	ands	r3, r2
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d024      	beq.n	8001a44 <xQueueSemaphoreTake+0x3ac>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	224c      	movs	r2, #76	; 0x4c
 80019fe:	5c9b      	ldrb	r3, [r3, r2]
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d019      	beq.n	8001a38 <xQueueSemaphoreTake+0x3a0>
 8001a04:	dc1e      	bgt.n	8001a44 <xQueueSemaphoreTake+0x3ac>
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	dc1c      	bgt.n	8001a44 <xQueueSemaphoreTake+0x3ac>
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	da0c      	bge.n	8001a28 <xQueueSemaphoreTake+0x390>
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <xQueueSemaphoreTake+0x380>
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d010      	beq.n	8001a38 <xQueueSemaphoreTake+0x3a0>
 8001a16:	e015      	b.n	8001a44 <xQueueSemaphoreTake+0x3ac>
 8001a18:	69f9      	ldr	r1, [r7, #28]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a20:	2063      	movs	r0, #99	; 0x63
 8001a22:	f003 fa09 	bl	8004e38 <prvTraceStoreEvent3>
 8001a26:	e00d      	b.n	8001a44 <xQueueSemaphoreTake+0x3ac>
 8001a28:	69f9      	ldr	r1, [r7, #28]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a30:	2064      	movs	r0, #100	; 0x64
 8001a32:	f003 fa01 	bl	8004e38 <prvTraceStoreEvent3>
 8001a36:	e005      	b.n	8001a44 <xQueueSemaphoreTake+0x3ac>
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	2065      	movs	r0, #101	; 0x65
 8001a40:	f003 f99a 	bl	8004d78 <prvTraceStoreEvent2>
				return errQUEUE_EMPTY;
 8001a44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001a46:	0018      	movs	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b00a      	add	sp, #40	; 0x28
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	20000014 	.word	0x20000014

08001a54 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 8001a60:	0018      	movs	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b002      	add	sp, #8
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	649a      	str	r2, [r3, #72]	; 0x48
	}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2205      	movs	r2, #5
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	e001      	b.n	8001aa2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
	}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b004      	add	sp, #16
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10e      	bne.n	8001ae8 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d14e      	bne.n	8001b70 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f001 f98c 	bl	8002df4 <xTaskPriorityDisinherit>
 8001adc:	0003      	movs	r3, r0
 8001ade:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	e043      	b.n	8001b70 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d119      	bne.n	8001b22 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6858      	ldr	r0, [r3, #4]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	0019      	movs	r1, r3
 8001afa:	f005 f89b 	bl	8006c34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	18d2      	adds	r2, r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d32b      	bcc.n	8001b70 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	e026      	b.n	8001b70 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	68d8      	ldr	r0, [r3, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	f005 f881 	bl	8006c34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	425b      	negs	r3, r3
 8001b3c:	18d2      	adds	r2, r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d207      	bcs.n	8001b5e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	425b      	negs	r3, r3
 8001b58:	18d2      	adds	r2, r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d105      	bne.n	8001b70 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001b78:	697b      	ldr	r3, [r7, #20]
}
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b006      	add	sp, #24
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d018      	beq.n	8001bc6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	18d2      	adds	r2, r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d303      	bcc.n	8001bb6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68d9      	ldr	r1, [r3, #12]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f005 f837 	bl	8006c34 <memcpy>
	}
}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b002      	add	sp, #8
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001bd6:	f001 fe2b 	bl	8003830 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001bda:	230f      	movs	r3, #15
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	2145      	movs	r1, #69	; 0x45
 8001be2:	5c52      	ldrb	r2, [r2, r1]
 8001be4:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001be6:	e013      	b.n	8001c10 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d016      	beq.n	8001c1e <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3324      	adds	r3, #36	; 0x24
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f000 fde1 	bl	80027bc <xTaskRemoveFromEventList>
 8001bfa:	1e03      	subs	r3, r0, #0
 8001bfc:	d001      	beq.n	8001c02 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001bfe:	f000 ff17 	bl	8002a30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001c02:	210f      	movs	r1, #15
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001c10:	230f      	movs	r3, #15
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b25b      	sxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	dce5      	bgt.n	8001be8 <prvUnlockQueue+0x1a>
 8001c1c:	e000      	b.n	8001c20 <prvUnlockQueue+0x52>
					break;
 8001c1e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2245      	movs	r2, #69	; 0x45
 8001c24:	21ff      	movs	r1, #255	; 0xff
 8001c26:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8001c28:	f001 fe14 	bl	8003854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001c2c:	f001 fe00 	bl	8003830 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001c30:	230e      	movs	r3, #14
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	2144      	movs	r1, #68	; 0x44
 8001c38:	5c52      	ldrb	r2, [r2, r1]
 8001c3a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c3c:	e013      	b.n	8001c66 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d016      	beq.n	8001c74 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3310      	adds	r3, #16
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f000 fdb6 	bl	80027bc <xTaskRemoveFromEventList>
 8001c50:	1e03      	subs	r3, r0, #0
 8001c52:	d001      	beq.n	8001c58 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8001c54:	f000 feec 	bl	8002a30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001c58:	210e      	movs	r1, #14
 8001c5a:	187b      	adds	r3, r7, r1
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	187b      	adds	r3, r7, r1
 8001c64:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c66:	230e      	movs	r3, #14
 8001c68:	18fb      	adds	r3, r7, r3
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b25b      	sxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	dce5      	bgt.n	8001c3e <prvUnlockQueue+0x70>
 8001c72:	e000      	b.n	8001c76 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8001c74:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2244      	movs	r2, #68	; 0x44
 8001c7a:	21ff      	movs	r1, #255	; 0xff
 8001c7c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8001c7e:	f001 fde9 	bl	8003854 <vPortExitCritical>
}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b004      	add	sp, #16
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001c92:	f001 fdcd 	bl	8003830 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d102      	bne.n	8001ca4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	e001      	b.n	8001ca8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001ca8:	f001 fdd4 	bl	8003854 <vPortExitCritical>

	return xReturn;
 8001cac:	68fb      	ldr	r3, [r7, #12]
}
 8001cae:	0018      	movs	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b004      	add	sp, #16
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001cbe:	f001 fdb7 	bl	8003830 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d102      	bne.n	8001cd4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	e001      	b.n	8001cd8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001cd8:	f001 fdbc 	bl	8003854 <vPortExitCritical>

	return xReturn;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
}
 8001cde:	0018      	movs	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b004      	add	sp, #16
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001cf6:	f001 fd9b 	bl	8003830 <vPortEnterCritical>
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2244      	movs	r2, #68	; 0x44
 8001cfe:	5c9b      	ldrb	r3, [r3, r2]
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	d103      	bne.n	8001d0e <vQueueWaitForMessageRestricted+0x28>
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2244      	movs	r2, #68	; 0x44
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	5499      	strb	r1, [r3, r2]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2245      	movs	r2, #69	; 0x45
 8001d12:	5c9b      	ldrb	r3, [r3, r2]
 8001d14:	b25b      	sxtb	r3, r3
 8001d16:	3301      	adds	r3, #1
 8001d18:	d103      	bne.n	8001d22 <vQueueWaitForMessageRestricted+0x3c>
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2245      	movs	r2, #69	; 0x45
 8001d1e:	2100      	movs	r1, #0
 8001d20:	5499      	strb	r1, [r3, r2]
 8001d22:	f001 fd97 	bl	8003854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3324      	adds	r3, #36	; 0x24
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	0018      	movs	r0, r3
 8001d38:	f000 fd00 	bl	800273c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f7ff ff45 	bl	8001bce <prvUnlockQueue>
	}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b006      	add	sp, #24
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b08d      	sub	sp, #52	; 0x34
 8001d50:	af04      	add	r7, sp, #16
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	1dbb      	adds	r3, r7, #6
 8001d5a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001d5c:	1dbb      	adds	r3, r7, #6
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	0018      	movs	r0, r3
 8001d64:	f001 fdf4 	bl	8003950 <pvPortMalloc>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d010      	beq.n	8001d94 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001d72:	2058      	movs	r0, #88	; 0x58
 8001d74:	f001 fdec 	bl	8003950 <pvPortMalloc>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
 8001d88:	e006      	b.n	8001d98 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f001 fe25 	bl	80039dc <vPortFree>
 8001d92:	e001      	b.n	8001d98 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d016      	beq.n	8001dcc <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d9e:	1dbb      	adds	r3, r7, #6
 8001da0:	881a      	ldrh	r2, [r3, #0]
 8001da2:	683c      	ldr	r4, [r7, #0]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	2300      	movs	r3, #0
 8001daa:	9303      	str	r3, [sp, #12]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	0023      	movs	r3, r4
 8001dba:	f000 f80f 	bl	8001ddc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f000 f895 	bl	8001ef0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	e002      	b.n	8001dd2 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	425b      	negs	r3, r3
 8001dd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001dd2:	69bb      	ldr	r3, [r7, #24]
	}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b009      	add	sp, #36	; 0x24
 8001dda:	bd90      	pop	{r4, r7, pc}

08001ddc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	001a      	movs	r2, r3
 8001df4:	21a5      	movs	r1, #165	; 0xa5
 8001df6:	f004 fef1 	bl	8006bdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	493a      	ldr	r1, [pc, #232]	; (8001eec <prvInitialiseNewTask+0x110>)
 8001e02:	468c      	mov	ip, r1
 8001e04:	4463      	add	r3, ip
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	18d3      	adds	r3, r2, r3
 8001e0a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2207      	movs	r2, #7
 8001e10:	4393      	bics	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	2207      	movs	r2, #7
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d001      	beq.n	8001e20 <prvInitialiseNewTask+0x44>
 8001e1c:	b672      	cpsid	i
 8001e1e:	e7fe      	b.n	8001e1e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d020      	beq.n	8001e68 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	e013      	b.n	8001e54 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	18d3      	adds	r3, r2, r3
 8001e32:	7818      	ldrb	r0, [r3, #0]
 8001e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e36:	2134      	movs	r1, #52	; 0x34
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	18d3      	adds	r3, r2, r3
 8001e3c:	185b      	adds	r3, r3, r1
 8001e3e:	1c02      	adds	r2, r0, #0
 8001e40:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	18d3      	adds	r3, r2, r3
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	3301      	adds	r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2b09      	cmp	r3, #9
 8001e58:	d9e8      	bls.n	8001e2c <prvInitialiseNewTask+0x50>
 8001e5a:	e000      	b.n	8001e5e <prvInitialiseNewTask+0x82>
			{
				break;
 8001e5c:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e60:	223d      	movs	r2, #61	; 0x3d
 8001e62:	2100      	movs	r1, #0
 8001e64:	5499      	strb	r1, [r3, r2]
 8001e66:	e003      	b.n	8001e70 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6a:	2234      	movs	r2, #52	; 0x34
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d901      	bls.n	8001e7a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001e76:	2304      	movs	r3, #4
 8001e78:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7c:	6a3a      	ldr	r2, [r7, #32]
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e82:	6a3a      	ldr	r2, [r7, #32]
 8001e84:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8001e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e88:	2200      	movs	r2, #0
 8001e8a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8e:	3304      	adds	r3, #4
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7fe fcea 	bl	800086a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e98:	3318      	adds	r3, #24
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7fe fce5 	bl	800086a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ea4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	2205      	movs	r2, #5
 8001eaa:	1ad2      	subs	r2, r2, r3
 8001eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	2200      	movs	r2, #0
 8001eba:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebe:	2254      	movs	r2, #84	; 0x54
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	68f9      	ldr	r1, [r7, #12]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f001 fc18 	bl	8003700 <pxPortInitialiseStack>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ee0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b006      	add	sp, #24
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	3fffffff 	.word	0x3fffffff

08001ef0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001ef8:	f001 fc9a 	bl	8003830 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001efc:	4b55      	ldr	r3, [pc, #340]	; (8002054 <prvAddNewTaskToReadyList+0x164>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	4b54      	ldr	r3, [pc, #336]	; (8002054 <prvAddNewTaskToReadyList+0x164>)
 8001f04:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001f06:	4b54      	ldr	r3, [pc, #336]	; (8002058 <prvAddNewTaskToReadyList+0x168>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001f0e:	4b52      	ldr	r3, [pc, #328]	; (8002058 <prvAddNewTaskToReadyList+0x168>)
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001f14:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <prvAddNewTaskToReadyList+0x164>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d110      	bne.n	8001f3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001f1c:	f000 fdc8 	bl	8002ab0 <prvInitialiseTaskLists>
 8001f20:	e00d      	b.n	8001f3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001f22:	4b4e      	ldr	r3, [pc, #312]	; (800205c <prvAddNewTaskToReadyList+0x16c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d109      	bne.n	8001f3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001f2a:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <prvAddNewTaskToReadyList+0x168>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d802      	bhi.n	8001f3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001f38:	4b47      	ldr	r3, [pc, #284]	; (8002058 <prvAddNewTaskToReadyList+0x168>)
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001f3e:	4b48      	ldr	r3, [pc, #288]	; (8002060 <prvAddNewTaskToReadyList+0x170>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	4b46      	ldr	r3, [pc, #280]	; (8002060 <prvAddNewTaskToReadyList+0x170>)
 8001f46:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001f48:	4b45      	ldr	r3, [pc, #276]	; (8002060 <prvAddNewTaskToReadyList+0x170>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d042      	beq.n	8001fdc <prvAddNewTaskToReadyList+0xec>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f002 f91f 	bl	800419c <prvAddTaskToStackMonitor>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3334      	adds	r3, #52	; 0x34
 8001f62:	001a      	movs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	0011      	movs	r1, r2
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f003 fa27 	bl	80053bc <prvTraceSaveObjectSymbol>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	0011      	movs	r1, r2
 8001f76:	0018      	movs	r0, r3
 8001f78:	f003 fa90 	bl	800549c <prvTraceSaveObjectData>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3334      	adds	r3, #52	; 0x34
 8001f80:	001a      	movs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2103      	movs	r1, #3
 8001f86:	2001      	movs	r0, #1
 8001f88:	f002 ffba 	bl	8004f00 <prvTraceStoreStringEvent>
 8001f8c:	4b35      	ldr	r3, [pc, #212]	; (8002064 <prvAddNewTaskToReadyList+0x174>)
 8001f8e:	881a      	ldrh	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	0011      	movs	r1, r2
 8001f94:	0018      	movs	r0, r3
 8001f96:	f002 f892 	bl	80040be <prvTraceSetTaskNumberHigh16>
 8001f9a:	f002 fa40 	bl	800441e <prvTraceGetCurrentTaskHandle>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f002 f87d 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	001a      	movs	r2, r3
 8001faa:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <prvAddNewTaskToReadyList+0x178>)
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d012      	beq.n	8001fdc <prvAddNewTaskToReadyList+0xec>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f002 f871 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	001a      	movs	r2, r3
 8001fc2:	4b29      	ldr	r3, [pc, #164]	; (8002068 <prvAddNewTaskToReadyList+0x178>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <prvAddNewTaskToReadyList+0xec>
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	001a      	movs	r2, r3
 8001fd6:	2010      	movs	r0, #16
 8001fd8:	f002 fece 	bl	8004d78 <prvTraceStoreEvent2>

		prvAddTaskToReadyList( pxNewTCB );
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f002 f85e 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	001a      	movs	r2, r3
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <prvAddNewTaskToReadyList+0x178>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	4013      	ands	r3, r2
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <prvAddNewTaskToReadyList+0x10e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	2030      	movs	r0, #48	; 0x30
 8001ffa:	f002 fe63 	bl	8004cc4 <prvTraceStoreEvent1>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <prvAddNewTaskToReadyList+0x17c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d903      	bls.n	8002012 <prvAddNewTaskToReadyList+0x122>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <prvAddNewTaskToReadyList+0x17c>)
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002016:	0013      	movs	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	189b      	adds	r3, r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4a14      	ldr	r2, [pc, #80]	; (8002070 <prvAddNewTaskToReadyList+0x180>)
 8002020:	189a      	adds	r2, r3, r2
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	0019      	movs	r1, r3
 8002028:	0010      	movs	r0, r2
 800202a:	f7fe fc29 	bl	8000880 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800202e:	f001 fc11 	bl	8003854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <prvAddNewTaskToReadyList+0x16c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <prvAddNewTaskToReadyList+0x15c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <prvAddNewTaskToReadyList+0x168>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	429a      	cmp	r2, r3
 8002046:	d201      	bcs.n	800204c <prvAddNewTaskToReadyList+0x15c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002048:	f001 fbe2 	bl	8003810 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800204c:	46c0      	nop			; (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	b002      	add	sp, #8
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000110 	.word	0x20000110
 8002058:	20000038 	.word	0x20000038
 800205c:	2000011c 	.word	0x2000011c
 8002060:	2000012c 	.word	0x2000012c
 8002064:	20000016 	.word	0x20000016
 8002068:	20000014 	.word	0x20000014
 800206c:	20000118 	.word	0x20000118
 8002070:	2000003c 	.word	0x2000003c

08002074 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <vTaskDelayUntil+0x18>
 8002088:	b672      	cpsid	i
 800208a:	e7fe      	b.n	800208a <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <vTaskDelayUntil+0x22>
 8002092:	b672      	cpsid	i
 8002094:	e7fe      	b.n	8002094 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
 8002096:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <vTaskDelayUntil+0xd4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <vTaskDelayUntil+0x2e>
 800209e:	b672      	cpsid	i
 80020a0:	e7fe      	b.n	80020a0 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
 80020a2:	f000 f8f9 	bl	8002298 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80020a6:	4b29      	ldr	r3, [pc, #164]	; (800214c <vTaskDelayUntil+0xd8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	18d3      	adds	r3, r2, r3
 80020b4:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d20b      	bcs.n	80020d8 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d211      	bcs.n	80020ee <vTaskDelayUntil+0x7a>
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d90d      	bls.n	80020ee <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 80020d2:	2301      	movs	r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	e00a      	b.n	80020ee <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d303      	bcc.n	80020ea <vTaskDelayUntil+0x76>
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d901      	bls.n	80020ee <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 80020ea:	2301      	movs	r3, #1
 80020ec:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d019      	beq.n	800212e <vTaskDelayUntil+0xba>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 80020fa:	f002 f990 	bl	800441e <prvTraceGetCurrentTaskHandle>
 80020fe:	0003      	movs	r3, r0
 8002100:	0018      	movs	r0, r3
 8002102:	f001 ffcd 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8002106:	0003      	movs	r3, r0
 8002108:	001a      	movs	r2, r3
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <vTaskDelayUntil+0xdc>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	4013      	ands	r3, r2
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <vTaskDelayUntil+0xac>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	0019      	movs	r1, r3
 800211a:	2079      	movs	r0, #121	; 0x79
 800211c:	f002 fdd2 	bl	8004cc4 <prvTraceStoreEvent1>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2100      	movs	r1, #0
 8002128:	0018      	movs	r0, r3
 800212a:	f000 ffc1 	bl	80030b0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800212e:	f000 f8bf 	bl	80022b0 <xTaskResumeAll>
 8002132:	0003      	movs	r3, r0
 8002134:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
 800213c:	f001 fb68 	bl	8003810 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b006      	add	sp, #24
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000138 	.word	0x20000138
 800214c:	20000114 	.word	0x20000114
 8002150:	20000014 	.word	0x20000014

08002154 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d023      	beq.n	80021ae <vTaskDelay+0x5a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002166:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <vTaskDelay+0x6c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <vTaskDelay+0x1e>
 800216e:	b672      	cpsid	i
 8002170:	e7fe      	b.n	8002170 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002172:	f000 f891 	bl	8002298 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8002176:	f002 f952 	bl	800441e <prvTraceGetCurrentTaskHandle>
 800217a:	0003      	movs	r3, r0
 800217c:	0018      	movs	r0, r3
 800217e:	f001 ff8f 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8002182:	0003      	movs	r3, r0
 8002184:	001a      	movs	r2, r3
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <vTaskDelay+0x70>)
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	4013      	ands	r3, r2
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d004      	beq.n	800219c <vTaskDelay+0x48>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	0019      	movs	r1, r3
 8002196:	207a      	movs	r0, #122	; 0x7a
 8002198:	f002 fd94 	bl	8004cc4 <prvTraceStoreEvent1>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2100      	movs	r1, #0
 80021a0:	0018      	movs	r0, r3
 80021a2:	f000 ff85 	bl	80030b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80021a6:	f000 f883 	bl	80022b0 <xTaskResumeAll>
 80021aa:	0003      	movs	r3, r0
 80021ac:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <vTaskDelay+0x64>
		{
			portYIELD_WITHIN_API();
 80021b4:	f001 fb2c 	bl	8003810 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80021b8:	46c0      	nop			; (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b004      	add	sp, #16
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000138 	.word	0x20000138
 80021c4:	20000014 	.word	0x20000014

080021c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80021ce:	4929      	ldr	r1, [pc, #164]	; (8002274 <vTaskStartScheduler+0xac>)
 80021d0:	4829      	ldr	r0, [pc, #164]	; (8002278 <vTaskStartScheduler+0xb0>)
 80021d2:	4b2a      	ldr	r3, [pc, #168]	; (800227c <vTaskStartScheduler+0xb4>)
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	2300      	movs	r3, #0
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2300      	movs	r3, #0
 80021dc:	2246      	movs	r2, #70	; 0x46
 80021de:	f7ff fdb5 	bl	8001d4c <xTaskCreate>
 80021e2:	0003      	movs	r3, r0
 80021e4:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d103      	bne.n	80021f4 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
 80021ec:	f000 ffb4 	bl	8003158 <xTimerCreateTimerTask>
 80021f0:	0003      	movs	r3, r0
 80021f2:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d132      	bne.n	8002260 <vTaskStartScheduler+0x98>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80021fa:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80021fc:	4b20      	ldr	r3, [pc, #128]	; (8002280 <vTaskStartScheduler+0xb8>)
 80021fe:	2201      	movs	r2, #1
 8002200:	4252      	negs	r2, r2
 8002202:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002204:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <vTaskStartScheduler+0xbc>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800220a:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <vTaskStartScheduler+0xc0>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8002210:	4b1e      	ldr	r3, [pc, #120]	; (800228c <vTaskStartScheduler+0xc4>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	f002 f902 	bl	800441e <prvTraceGetCurrentTaskHandle>
 800221a:	0003      	movs	r3, r0
 800221c:	0018      	movs	r0, r3
 800221e:	f001 ff3f 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8002222:	0003      	movs	r3, r0
 8002224:	001a      	movs	r2, r3
 8002226:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <vTaskStartScheduler+0xc8>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	4013      	ands	r3, r2
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d010      	beq.n	8002254 <vTaskStartScheduler+0x8c>
 8002232:	4b18      	ldr	r3, [pc, #96]	; (8002294 <vTaskStartScheduler+0xcc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0018      	movs	r0, r3
 8002238:	f002 f8fa 	bl	8004430 <prvIsNewTCB>
 800223c:	1e03      	subs	r3, r0, #0
 800223e:	d009      	beq.n	8002254 <vTaskStartScheduler+0x8c>
 8002240:	4b14      	ldr	r3, [pc, #80]	; (8002294 <vTaskStartScheduler+0xcc>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0019      	movs	r1, r3
 8002246:	4b13      	ldr	r3, [pc, #76]	; (8002294 <vTaskStartScheduler+0xcc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	001a      	movs	r2, r3
 800224e:	2037      	movs	r0, #55	; 0x37
 8002250:	f002 fd92 	bl	8004d78 <prvTraceStoreEvent2>
 8002254:	4b0d      	ldr	r3, [pc, #52]	; (800228c <vTaskStartScheduler+0xc4>)
 8002256:	2202      	movs	r2, #2
 8002258:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800225a:	f001 fab5 	bl	80037c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800225e:	e004      	b.n	800226a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3301      	adds	r3, #1
 8002264:	d101      	bne.n	800226a <vTaskStartScheduler+0xa2>
 8002266:	b672      	cpsid	i
 8002268:	e7fe      	b.n	8002268 <vTaskStartScheduler+0xa0>
}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	46bd      	mov	sp, r7
 800226e:	b002      	add	sp, #8
 8002270:	bd80      	pop	{r7, pc}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	08006c60 	.word	0x08006c60
 8002278:	08002a91 	.word	0x08002a91
 800227c:	20000134 	.word	0x20000134
 8002280:	20000130 	.word	0x20000130
 8002284:	2000011c 	.word	0x2000011c
 8002288:	20000114 	.word	0x20000114
 800228c:	200038fc 	.word	0x200038fc
 8002290:	20000014 	.word	0x20000014
 8002294:	20000038 	.word	0x20000038

08002298 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <vTaskSuspendAll+0x14>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	4b02      	ldr	r3, [pc, #8]	; (80022ac <vTaskSuspendAll+0x14>)
 80022a4:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000138 	.word	0x20000138

080022b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80022be:	4b43      	ldr	r3, [pc, #268]	; (80023cc <xTaskResumeAll+0x11c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <xTaskResumeAll+0x1a>
 80022c6:	b672      	cpsid	i
 80022c8:	e7fe      	b.n	80022c8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80022ca:	f001 fab1 	bl	8003830 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80022ce:	4b3f      	ldr	r3, [pc, #252]	; (80023cc <xTaskResumeAll+0x11c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	1e5a      	subs	r2, r3, #1
 80022d4:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <xTaskResumeAll+0x11c>)
 80022d6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022d8:	4b3c      	ldr	r3, [pc, #240]	; (80023cc <xTaskResumeAll+0x11c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d000      	beq.n	80022e2 <xTaskResumeAll+0x32>
 80022e0:	e06c      	b.n	80023bc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80022e2:	4b3b      	ldr	r3, [pc, #236]	; (80023d0 <xTaskResumeAll+0x120>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d068      	beq.n	80023bc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022ea:	e040      	b.n	800236e <xTaskResumeAll+0xbe>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022ec:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <xTaskResumeAll+0x124>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3318      	adds	r3, #24
 80022f8:	0018      	movs	r0, r3
 80022fa:	f7fe fb19 	bl	8000930 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3304      	adds	r3, #4
 8002302:	0018      	movs	r0, r3
 8002304:	f7fe fb14 	bl	8000930 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	0018      	movs	r0, r3
 800230c:	f001 fec8 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8002310:	0003      	movs	r3, r0
 8002312:	001a      	movs	r2, r3
 8002314:	4b30      	ldr	r3, [pc, #192]	; (80023d8 <xTaskResumeAll+0x128>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	4013      	ands	r3, r2
 800231a:	b29b      	uxth	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d004      	beq.n	800232a <xTaskResumeAll+0x7a>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	0019      	movs	r1, r3
 8002324:	2030      	movs	r0, #48	; 0x30
 8002326:	f002 fccd 	bl	8004cc4 <prvTraceStoreEvent1>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232e:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <xTaskResumeAll+0x12c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d903      	bls.n	800233e <xTaskResumeAll+0x8e>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <xTaskResumeAll+0x12c>)
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002342:	0013      	movs	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	189b      	adds	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4a25      	ldr	r2, [pc, #148]	; (80023e0 <xTaskResumeAll+0x130>)
 800234c:	189a      	adds	r2, r3, r2
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3304      	adds	r3, #4
 8002352:	0019      	movs	r1, r3
 8002354:	0010      	movs	r0, r2
 8002356:	f7fe fa93 	bl	8000880 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235e:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <xTaskResumeAll+0x134>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	429a      	cmp	r2, r3
 8002366:	d302      	bcc.n	800236e <xTaskResumeAll+0xbe>
					{
						xYieldPending = pdTRUE;
 8002368:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <xTaskResumeAll+0x138>)
 800236a:	2201      	movs	r2, #1
 800236c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <xTaskResumeAll+0x124>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1ba      	bne.n	80022ec <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <xTaskResumeAll+0xd0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800237c:	f000 fc52 	bl	8002c24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002380:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <xTaskResumeAll+0x13c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00f      	beq.n	80023ac <xTaskResumeAll+0xfc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800238c:	f000 f83e 	bl	800240c <xTaskIncrementTick>
 8002390:	1e03      	subs	r3, r0, #0
 8002392:	d002      	beq.n	800239a <xTaskResumeAll+0xea>
							{
								xYieldPending = pdTRUE;
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <xTaskResumeAll+0x138>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3b01      	subs	r3, #1
 800239e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f2      	bne.n	800238c <xTaskResumeAll+0xdc>

						uxPendedTicks = 0;
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <xTaskResumeAll+0x13c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80023ac:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <xTaskResumeAll+0x138>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80023b4:	2301      	movs	r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80023b8:	f001 fa2a 	bl	8003810 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80023bc:	f001 fa4a 	bl	8003854 <vPortExitCritical>

	return xAlreadyYielded;
 80023c0:	68bb      	ldr	r3, [r7, #8]
}
 80023c2:	0018      	movs	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b004      	add	sp, #16
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	20000138 	.word	0x20000138
 80023d0:	20000110 	.word	0x20000110
 80023d4:	200000d0 	.word	0x200000d0
 80023d8:	20000014 	.word	0x20000014
 80023dc:	20000118 	.word	0x20000118
 80023e0:	2000003c 	.word	0x2000003c
 80023e4:	20000038 	.word	0x20000038
 80023e8:	20000124 	.word	0x20000124
 80023ec:	20000120 	.word	0x20000120

080023f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80023f6:	4b04      	ldr	r3, [pc, #16]	; (8002408 <xTaskGetTickCount+0x18>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80023fc:	687b      	ldr	r3, [r7, #4]
}
 80023fe:	0018      	movs	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	b002      	add	sp, #8
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	20000114 	.word	0x20000114

0800240c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 8002416:	4b59      	ldr	r3, [pc, #356]	; (800257c <xTaskIncrementTick+0x170>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d003      	beq.n	8002426 <xTaskIncrementTick+0x1a>
 800241e:	4b58      	ldr	r3, [pc, #352]	; (8002580 <xTaskIncrementTick+0x174>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d104      	bne.n	8002430 <xTaskIncrementTick+0x24>
 8002426:	4b57      	ldr	r3, [pc, #348]	; (8002584 <xTaskIncrementTick+0x178>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	4b55      	ldr	r3, [pc, #340]	; (8002584 <xTaskIncrementTick+0x178>)
 800242e:	601a      	str	r2, [r3, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002430:	4b52      	ldr	r3, [pc, #328]	; (800257c <xTaskIncrementTick+0x170>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d000      	beq.n	800243a <xTaskIncrementTick+0x2e>
 8002438:	e08f      	b.n	800255a <xTaskIncrementTick+0x14e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800243a:	4b53      	ldr	r3, [pc, #332]	; (8002588 <xTaskIncrementTick+0x17c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	3301      	adds	r3, #1
 8002440:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002442:	4b51      	ldr	r3, [pc, #324]	; (8002588 <xTaskIncrementTick+0x17c>)
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d117      	bne.n	800247e <xTaskIncrementTick+0x72>
		{
			taskSWITCH_DELAYED_LISTS();
 800244e:	4b4f      	ldr	r3, [pc, #316]	; (800258c <xTaskIncrementTick+0x180>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <xTaskIncrementTick+0x50>
 8002458:	b672      	cpsid	i
 800245a:	e7fe      	b.n	800245a <xTaskIncrementTick+0x4e>
 800245c:	4b4b      	ldr	r3, [pc, #300]	; (800258c <xTaskIncrementTick+0x180>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	4b4b      	ldr	r3, [pc, #300]	; (8002590 <xTaskIncrementTick+0x184>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b49      	ldr	r3, [pc, #292]	; (800258c <xTaskIncrementTick+0x180>)
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	4b49      	ldr	r3, [pc, #292]	; (8002590 <xTaskIncrementTick+0x184>)
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	4b48      	ldr	r3, [pc, #288]	; (8002594 <xTaskIncrementTick+0x188>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <xTaskIncrementTick+0x188>)
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f000 fbd3 	bl	8002c24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800247e:	4b46      	ldr	r3, [pc, #280]	; (8002598 <xTaskIncrementTick+0x18c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	429a      	cmp	r2, r3
 8002486:	d35a      	bcc.n	800253e <xTaskIncrementTick+0x132>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002488:	4b40      	ldr	r3, [pc, #256]	; (800258c <xTaskIncrementTick+0x180>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d104      	bne.n	800249c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002492:	4b41      	ldr	r3, [pc, #260]	; (8002598 <xTaskIncrementTick+0x18c>)
 8002494:	2201      	movs	r2, #1
 8002496:	4252      	negs	r2, r2
 8002498:	601a      	str	r2, [r3, #0]
					break;
 800249a:	e050      	b.n	800253e <xTaskIncrementTick+0x132>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800249c:	4b3b      	ldr	r3, [pc, #236]	; (800258c <xTaskIncrementTick+0x180>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d203      	bcs.n	80024bc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80024b4:	4b38      	ldr	r3, [pc, #224]	; (8002598 <xTaskIncrementTick+0x18c>)
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80024ba:	e040      	b.n	800253e <xTaskIncrementTick+0x132>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	3304      	adds	r3, #4
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7fe fa35 	bl	8000930 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	3318      	adds	r3, #24
 80024d2:	0018      	movs	r0, r3
 80024d4:	f7fe fa2c 	bl	8000930 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	0018      	movs	r0, r3
 80024dc:	f001 fde0 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 80024e0:	0003      	movs	r3, r0
 80024e2:	001a      	movs	r2, r3
 80024e4:	4b2d      	ldr	r3, [pc, #180]	; (800259c <xTaskIncrementTick+0x190>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	4013      	ands	r3, r2
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d004      	beq.n	80024fa <xTaskIncrementTick+0xee>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	0019      	movs	r1, r3
 80024f4:	2030      	movs	r0, #48	; 0x30
 80024f6:	f002 fbe5 	bl	8004cc4 <prvTraceStoreEvent1>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fe:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <xTaskIncrementTick+0x194>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d903      	bls.n	800250e <xTaskIncrementTick+0x102>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250a:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <xTaskIncrementTick+0x194>)
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002512:	0013      	movs	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	189b      	adds	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <xTaskIncrementTick+0x198>)
 800251c:	189a      	adds	r2, r3, r2
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	3304      	adds	r3, #4
 8002522:	0019      	movs	r1, r3
 8002524:	0010      	movs	r0, r2
 8002526:	f7fe f9ab 	bl	8000880 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252e:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <xTaskIncrementTick+0x19c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	429a      	cmp	r2, r3
 8002536:	d3a7      	bcc.n	8002488 <xTaskIncrementTick+0x7c>
						{
							xSwitchRequired = pdTRUE;
 8002538:	2301      	movs	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800253c:	e7a4      	b.n	8002488 <xTaskIncrementTick+0x7c>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800253e:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <xTaskIncrementTick+0x19c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002544:	4917      	ldr	r1, [pc, #92]	; (80025a4 <xTaskIncrementTick+0x198>)
 8002546:	0013      	movs	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	189b      	adds	r3, r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	585b      	ldr	r3, [r3, r1]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d907      	bls.n	8002564 <xTaskIncrementTick+0x158>
			{
				xSwitchRequired = pdTRUE;
 8002554:	2301      	movs	r3, #1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e004      	b.n	8002564 <xTaskIncrementTick+0x158>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <xTaskIncrementTick+0x174>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	4b07      	ldr	r3, [pc, #28]	; (8002580 <xTaskIncrementTick+0x174>)
 8002562:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <xTaskIncrementTick+0x1a0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <xTaskIncrementTick+0x164>
		{
			xSwitchRequired = pdTRUE;
 800256c:	2301      	movs	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002570:	697b      	ldr	r3, [r7, #20]
}
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	b006      	add	sp, #24
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	20000138 	.word	0x20000138
 8002580:	20000120 	.word	0x20000120
 8002584:	200038e4 	.word	0x200038e4
 8002588:	20000114 	.word	0x20000114
 800258c:	200000c8 	.word	0x200000c8
 8002590:	200000cc 	.word	0x200000cc
 8002594:	20000128 	.word	0x20000128
 8002598:	20000130 	.word	0x20000130
 800259c:	20000014 	.word	0x20000014
 80025a0:	20000118 	.word	0x20000118
 80025a4:	2000003c 	.word	0x2000003c
 80025a8:	20000038 	.word	0x20000038
 80025ac:	20000124 	.word	0x20000124

080025b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80025b6:	4b34      	ldr	r3, [pc, #208]	; (8002688 <vTaskSwitchContext+0xd8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80025be:	4b33      	ldr	r3, [pc, #204]	; (800268c <vTaskSwitchContext+0xdc>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80025c4:	e05c      	b.n	8002680 <vTaskSwitchContext+0xd0>
		xYieldPending = pdFALSE;
 80025c6:	4b31      	ldr	r3, [pc, #196]	; (800268c <vTaskSwitchContext+0xdc>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025cc:	4b30      	ldr	r3, [pc, #192]	; (8002690 <vTaskSwitchContext+0xe0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	e007      	b.n	80025e4 <vTaskSwitchContext+0x34>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <vTaskSwitchContext+0x2e>
 80025da:	b672      	cpsid	i
 80025dc:	e7fe      	b.n	80025dc <vTaskSwitchContext+0x2c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	492b      	ldr	r1, [pc, #172]	; (8002694 <vTaskSwitchContext+0xe4>)
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	0013      	movs	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	189b      	adds	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	585b      	ldr	r3, [r3, r1]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0ee      	beq.n	80025d4 <vTaskSwitchContext+0x24>
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	0013      	movs	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	189b      	adds	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4a24      	ldr	r2, [pc, #144]	; (8002694 <vTaskSwitchContext+0xe4>)
 8002602:	189b      	adds	r3, r3, r2
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	3308      	adds	r3, #8
 8002618:	429a      	cmp	r2, r3
 800261a:	d104      	bne.n	8002626 <vTaskSwitchContext+0x76>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <vTaskSwitchContext+0xe8>)
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	4b17      	ldr	r3, [pc, #92]	; (8002690 <vTaskSwitchContext+0xe0>)
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
 8002636:	4b19      	ldr	r3, [pc, #100]	; (800269c <vTaskSwitchContext+0xec>)
 8002638:	2201      	movs	r2, #1
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	f001 feef 	bl	800441e <prvTraceGetCurrentTaskHandle>
 8002640:	0003      	movs	r3, r0
 8002642:	0018      	movs	r0, r3
 8002644:	f001 fd2c 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8002648:	0003      	movs	r3, r0
 800264a:	001a      	movs	r2, r3
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <vTaskSwitchContext+0xf0>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	4013      	ands	r3, r2
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d010      	beq.n	800267a <vTaskSwitchContext+0xca>
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <vTaskSwitchContext+0xe8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	0018      	movs	r0, r3
 800265e:	f001 fee7 	bl	8004430 <prvIsNewTCB>
 8002662:	1e03      	subs	r3, r0, #0
 8002664:	d009      	beq.n	800267a <vTaskSwitchContext+0xca>
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <vTaskSwitchContext+0xe8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	0019      	movs	r1, r3
 800266c:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <vTaskSwitchContext+0xe8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	001a      	movs	r2, r3
 8002674:	2037      	movs	r0, #55	; 0x37
 8002676:	f002 fb7f 	bl	8004d78 <prvTraceStoreEvent2>
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <vTaskSwitchContext+0xec>)
 800267c:	2202      	movs	r2, #2
 800267e:	601a      	str	r2, [r3, #0]
}
 8002680:	46c0      	nop			; (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	b002      	add	sp, #8
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000138 	.word	0x20000138
 800268c:	20000124 	.word	0x20000124
 8002690:	20000118 	.word	0x20000118
 8002694:	2000003c 	.word	0x2000003c
 8002698:	20000038 	.word	0x20000038
 800269c:	200038fc 	.word	0x200038fc
 80026a0:	20000014 	.word	0x20000014

080026a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <vTaskPlaceOnEventList+0x14>
 80026b4:	b672      	cpsid	i
 80026b6:	e7fe      	b.n	80026b6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <vTaskPlaceOnEventList+0x38>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3318      	adds	r3, #24
 80026be:	001a      	movs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	0011      	movs	r1, r2
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7fe f8fd 	bl	80008c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2101      	movs	r1, #1
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 fcee 	bl	80030b0 <prvAddCurrentTaskToDelayedList>
}
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b002      	add	sp, #8
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000038 	.word	0x20000038

080026e0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <vTaskPlaceOnUnorderedEventList+0x16>
 80026f2:	b672      	cpsid	i
 80026f4:	e7fe      	b.n	80026f4 <vTaskPlaceOnUnorderedEventList+0x14>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80026f6:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <vTaskPlaceOnUnorderedEventList+0x54>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <vTaskPlaceOnUnorderedEventList+0x22>
 80026fe:	b672      	cpsid	i
 8002700:	e7fe      	b.n	8002700 <vTaskPlaceOnUnorderedEventList+0x20>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <vTaskPlaceOnUnorderedEventList+0x58>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	2180      	movs	r1, #128	; 0x80
 800270a:	0609      	lsls	r1, r1, #24
 800270c:	430a      	orrs	r2, r1
 800270e:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002710:	4b09      	ldr	r3, [pc, #36]	; (8002738 <vTaskPlaceOnUnorderedEventList+0x58>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3318      	adds	r3, #24
 8002716:	001a      	movs	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	0011      	movs	r1, r2
 800271c:	0018      	movs	r0, r3
 800271e:	f7fe f8af 	bl	8000880 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2101      	movs	r1, #1
 8002726:	0018      	movs	r0, r3
 8002728:	f000 fcc2 	bl	80030b0 <prvAddCurrentTaskToDelayedList>
}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b004      	add	sp, #16
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000138 	.word	0x20000138
 8002738:	20000038 	.word	0x20000038

0800273c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <vTaskPlaceOnEventListRestricted+0x16>
 800274e:	b672      	cpsid	i
 8002750:	e7fe      	b.n	8002750 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002752:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <vTaskPlaceOnEventListRestricted+0x74>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3318      	adds	r3, #24
 8002758:	001a      	movs	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	0011      	movs	r1, r2
 800275e:	0018      	movs	r0, r3
 8002760:	f7fe f88e 	bl	8000880 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800276a:	2301      	movs	r3, #1
 800276c:	425b      	negs	r3, r3
 800276e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002770:	f001 fe55 	bl	800441e <prvTraceGetCurrentTaskHandle>
 8002774:	0003      	movs	r3, r0
 8002776:	0018      	movs	r0, r3
 8002778:	f001 fc92 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 800277c:	0003      	movs	r3, r0
 800277e:	001a      	movs	r2, r3
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <vTaskPlaceOnEventListRestricted+0x78>)
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	4013      	ands	r3, r2
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <vTaskPlaceOnEventListRestricted+0x60>
 800278c:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <vTaskPlaceOnEventListRestricted+0x7c>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	18d3      	adds	r3, r2, r3
 8002794:	0019      	movs	r1, r3
 8002796:	2079      	movs	r0, #121	; 0x79
 8002798:	f002 fa94 	bl	8004cc4 <prvTraceStoreEvent1>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	0011      	movs	r1, r2
 80027a2:	0018      	movs	r0, r3
 80027a4:	f000 fc84 	bl	80030b0 <prvAddCurrentTaskToDelayedList>
	}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000038 	.word	0x20000038
 80027b4:	20000014 	.word	0x20000014
 80027b8:	20000114 	.word	0x20000114

080027bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <xTaskRemoveFromEventList+0x1a>
 80027d2:	b672      	cpsid	i
 80027d4:	e7fe      	b.n	80027d4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	3318      	adds	r3, #24
 80027da:	0018      	movs	r0, r3
 80027dc:	f7fe f8a8 	bl	8000930 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027e0:	4b27      	ldr	r3, [pc, #156]	; (8002880 <xTaskRemoveFromEventList+0xc4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d12e      	bne.n	8002846 <xTaskRemoveFromEventList+0x8a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	3304      	adds	r3, #4
 80027ec:	0018      	movs	r0, r3
 80027ee:	f7fe f89f 	bl	8000930 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	0018      	movs	r0, r3
 80027f6:	f001 fc53 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 80027fa:	0003      	movs	r3, r0
 80027fc:	001a      	movs	r2, r3
 80027fe:	4b21      	ldr	r3, [pc, #132]	; (8002884 <xTaskRemoveFromEventList+0xc8>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	4013      	ands	r3, r2
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d004      	beq.n	8002814 <xTaskRemoveFromEventList+0x58>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	0019      	movs	r1, r3
 800280e:	2030      	movs	r0, #48	; 0x30
 8002810:	f002 fa58 	bl	8004cc4 <prvTraceStoreEvent1>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <xTaskRemoveFromEventList+0xcc>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d903      	bls.n	8002828 <xTaskRemoveFromEventList+0x6c>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002824:	4b18      	ldr	r3, [pc, #96]	; (8002888 <xTaskRemoveFromEventList+0xcc>)
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282c:	0013      	movs	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	189b      	adds	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4a15      	ldr	r2, [pc, #84]	; (800288c <xTaskRemoveFromEventList+0xd0>)
 8002836:	189a      	adds	r2, r3, r2
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	3304      	adds	r3, #4
 800283c:	0019      	movs	r1, r3
 800283e:	0010      	movs	r0, r2
 8002840:	f7fe f81e 	bl	8000880 <vListInsertEnd>
 8002844:	e007      	b.n	8002856 <xTaskRemoveFromEventList+0x9a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	3318      	adds	r3, #24
 800284a:	001a      	movs	r2, r3
 800284c:	4b10      	ldr	r3, [pc, #64]	; (8002890 <xTaskRemoveFromEventList+0xd4>)
 800284e:	0011      	movs	r1, r2
 8002850:	0018      	movs	r0, r3
 8002852:	f7fe f815 	bl	8000880 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800285a:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <xTaskRemoveFromEventList+0xd8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	429a      	cmp	r2, r3
 8002862:	d905      	bls.n	8002870 <xTaskRemoveFromEventList+0xb4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002864:	2301      	movs	r3, #1
 8002866:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <xTaskRemoveFromEventList+0xdc>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	e001      	b.n	8002874 <xTaskRemoveFromEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8002874:	68fb      	ldr	r3, [r7, #12]
}
 8002876:	0018      	movs	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	b004      	add	sp, #16
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	20000138 	.word	0x20000138
 8002884:	20000014 	.word	0x20000014
 8002888:	20000118 	.word	0x20000118
 800288c:	2000003c 	.word	0x2000003c
 8002890:	200000d0 	.word	0x200000d0
 8002894:	20000038 	.word	0x20000038
 8002898:	20000124 	.word	0x20000124

0800289c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80028a6:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <vTaskRemoveFromUnorderedEventList+0x16>
 80028ae:	b672      	cpsid	i
 80028b0:	e7fe      	b.n	80028b0 <vTaskRemoveFromUnorderedEventList+0x14>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2280      	movs	r2, #128	; 0x80
 80028b6:	0612      	lsls	r2, r2, #24
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <vTaskRemoveFromUnorderedEventList+0x32>
 80028ca:	b672      	cpsid	i
 80028cc:	e7fe      	b.n	80028cc <vTaskRemoveFromUnorderedEventList+0x30>
	( void ) uxListRemove( pxEventListItem );
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7fe f82d 	bl	8000930 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3304      	adds	r3, #4
 80028da:	0018      	movs	r0, r3
 80028dc:	f7fe f828 	bl	8000930 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	0018      	movs	r0, r3
 80028e4:	f001 fbdc 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 80028e8:	0003      	movs	r3, r0
 80028ea:	001a      	movs	r2, r3
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	4013      	ands	r3, r2
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d004      	beq.n	8002902 <vTaskRemoveFromUnorderedEventList+0x66>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	0019      	movs	r1, r3
 80028fc:	2030      	movs	r0, #48	; 0x30
 80028fe:	f002 f9e1 	bl	8004cc4 <prvTraceStoreEvent1>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d903      	bls.n	8002916 <vTaskRemoveFromUnorderedEventList+0x7a>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291a:	0013      	movs	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	189b      	adds	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4a0e      	ldr	r2, [pc, #56]	; (800295c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8002924:	189a      	adds	r2, r3, r2
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3304      	adds	r3, #4
 800292a:	0019      	movs	r1, r3
 800292c:	0010      	movs	r0, r2
 800292e:	f7fd ffa7 	bl	8000880 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	429a      	cmp	r2, r3
 800293e:	d902      	bls.n	8002946 <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]
	}
}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	b004      	add	sp, #16
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	20000138 	.word	0x20000138
 8002954:	20000014 	.word	0x20000014
 8002958:	20000118 	.word	0x20000118
 800295c:	2000003c 	.word	0x2000003c
 8002960:	20000038 	.word	0x20000038
 8002964:	20000124 	.word	0x20000124

08002968 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <vTaskInternalSetTimeOutState+0x20>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <vTaskInternalSetTimeOutState+0x24>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	605a      	str	r2, [r3, #4]
}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	b002      	add	sp, #8
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000128 	.word	0x20000128
 800298c:	20000114 	.word	0x20000114

08002990 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <xTaskCheckForTimeOut+0x14>
 80029a0:	b672      	cpsid	i
 80029a2:	e7fe      	b.n	80029a2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <xTaskCheckForTimeOut+0x1e>
 80029aa:	b672      	cpsid	i
 80029ac:	e7fe      	b.n	80029ac <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80029ae:	f000 ff3f 	bl	8003830 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80029b2:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <xTaskCheckForTimeOut+0x98>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3301      	adds	r3, #1
 80029c8:	d102      	bne.n	80029d0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	e024      	b.n	8002a1a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <xTaskCheckForTimeOut+0x9c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d007      	beq.n	80029ec <xTaskCheckForTimeOut+0x5c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d302      	bcc.n	80029ec <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80029e6:	2301      	movs	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	e016      	b.n	8002a1a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d20c      	bcs.n	8002a10 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1ad2      	subs	r2, r2, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7ff ffaf 	bl	8002968 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e004      	b.n	8002a1a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002a16:	2301      	movs	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8002a1a:	f000 ff1b 	bl	8003854 <vPortExitCritical>

	return xReturn;
 8002a1e:	697b      	ldr	r3, [r7, #20]
}
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b006      	add	sp, #24
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000114 	.word	0x20000114
 8002a2c:	20000128 	.word	0x20000128

08002a30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002a34:	4b02      	ldr	r3, [pc, #8]	; (8002a40 <vTaskMissedYield+0x10>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000124 	.word	0x20000124

08002a44 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	e001      	b.n	8002a62 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 8002a62:	68fb      	ldr	r3, [r7, #12]
	}
 8002a64:	0018      	movs	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b004      	add	sp, #16
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d004      	beq.n	8002a86 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b004      	add	sp, #16
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002a98:	f000 f84e 	bl	8002b38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <prvIdleTask+0x1c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d9f9      	bls.n	8002a98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002aa4:	f000 feb4 	bl	8003810 <vPortYield>
		prvCheckTasksWaitingTermination();
 8002aa8:	e7f6      	b.n	8002a98 <prvIdleTask+0x8>
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	2000003c 	.word	0x2000003c

08002ab0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	e00c      	b.n	8002ad6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	0013      	movs	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	189b      	adds	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <prvInitialiseTaskLists+0x68>)
 8002ac8:	189b      	adds	r3, r3, r2
 8002aca:	0018      	movs	r0, r3
 8002acc:	f7fd feaf 	bl	800082e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d9ef      	bls.n	8002abc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002adc:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <prvInitialiseTaskLists+0x6c>)
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f7fd fea5 	bl	800082e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <prvInitialiseTaskLists+0x70>)
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f7fd fea1 	bl	800082e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002aec:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <prvInitialiseTaskLists+0x74>)
 8002aee:	0018      	movs	r0, r3
 8002af0:	f7fd fe9d 	bl	800082e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <prvInitialiseTaskLists+0x78>)
 8002af6:	0018      	movs	r0, r3
 8002af8:	f7fd fe99 	bl	800082e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <prvInitialiseTaskLists+0x7c>)
 8002afe:	0018      	movs	r0, r3
 8002b00:	f7fd fe95 	bl	800082e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <prvInitialiseTaskLists+0x80>)
 8002b06:	4a05      	ldr	r2, [pc, #20]	; (8002b1c <prvInitialiseTaskLists+0x6c>)
 8002b08:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <prvInitialiseTaskLists+0x84>)
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <prvInitialiseTaskLists+0x70>)
 8002b0e:	601a      	str	r2, [r3, #0]
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b002      	add	sp, #8
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	2000003c 	.word	0x2000003c
 8002b1c:	200000a0 	.word	0x200000a0
 8002b20:	200000b4 	.word	0x200000b4
 8002b24:	200000d0 	.word	0x200000d0
 8002b28:	200000e4 	.word	0x200000e4
 8002b2c:	200000fc 	.word	0x200000fc
 8002b30:	200000c8 	.word	0x200000c8
 8002b34:	200000cc 	.word	0x200000cc

08002b38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b3e:	e01a      	b.n	8002b76 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8002b40:	f000 fe76 	bl	8003830 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b44:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <prvCheckTasksWaitingTermination+0x50>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	0018      	movs	r0, r3
 8002b52:	f7fd feed 	bl	8000930 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <prvCheckTasksWaitingTermination+0x54>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	1e5a      	subs	r2, r3, #1
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <prvCheckTasksWaitingTermination+0x54>)
 8002b5e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <prvCheckTasksWaitingTermination+0x58>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	1e5a      	subs	r2, r3, #1
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <prvCheckTasksWaitingTermination+0x58>)
 8002b68:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8002b6a:	f000 fe73 	bl	8003854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 f845 	bl	8002c00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <prvCheckTasksWaitingTermination+0x58>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1e0      	bne.n	8002b40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	200000e4 	.word	0x200000e4
 8002b8c:	20000110 	.word	0x20000110
 8002b90:	200000f8 	.word	0x200000f8

08002b94 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002ba0:	e005      	b.n	8002bae <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	607b      	str	r3, [r7, #4]
			ulCount++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3301      	adds	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2ba5      	cmp	r3, #165	; 0xa5
 8002bb4:	d0f5      	beq.n	8002ba2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	089b      	lsrs	r3, r3, #2
 8002bba:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	b29b      	uxth	r3, r3
	}
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b004      	add	sp, #16
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d102      	bne.n	8002bdc <uxTaskGetStackHighWaterMark+0x14>
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <uxTaskGetStackHighWaterMark+0x34>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	e000      	b.n	8002bde <uxTaskGetStackHighWaterMark+0x16>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7ff ffd3 	bl	8002b94 <prvTaskCheckFreeStackSpace>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
	}
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b006      	add	sp, #24
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000038 	.word	0x20000038

08002c00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f000 fee5 	bl	80039dc <vPortFree>
			vPortFree( pxTCB );
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	0018      	movs	r0, r3
 8002c16:	f000 fee1 	bl	80039dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b002      	add	sp, #8
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <prvResetNextTaskUnblockTime+0x34>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d104      	bne.n	8002c3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <prvResetNextTaskUnblockTime+0x38>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	4252      	negs	r2, r2
 8002c3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002c3c:	e008      	b.n	8002c50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <prvResetNextTaskUnblockTime+0x34>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <prvResetNextTaskUnblockTime+0x38>)
 8002c4e:	601a      	str	r2, [r3, #0]
}
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b002      	add	sp, #8
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	200000c8 	.word	0x200000c8
 8002c5c:	20000130 	.word	0x20000130

08002c60 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8002c66:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <xTaskGetCurrentTaskHandle+0x18>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8002c6c:	687b      	ldr	r3, [r7, #4]
	}
 8002c6e:	0018      	movs	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b002      	add	sp, #8
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	20000038 	.word	0x20000038

08002c7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <xTaskGetSchedulerState+0x30>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	e008      	b.n	8002ca2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <xTaskGetSchedulerState+0x34>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	e001      	b.n	8002ca2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002ca2:	687b      	ldr	r3, [r7, #4]
	}
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b002      	add	sp, #8
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	2000011c 	.word	0x2000011c
 8002cb0:	20000138 	.word	0x20000138

08002cb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d100      	bne.n	8002ccc <xTaskPriorityInherit+0x18>
 8002cca:	e085      	b.n	8002dd8 <xTaskPriorityInherit+0x124>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd0:	4b44      	ldr	r3, [pc, #272]	; (8002de4 <xTaskPriorityInherit+0x130>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d300      	bcc.n	8002cdc <xTaskPriorityInherit+0x28>
 8002cda:	e074      	b.n	8002dc6 <xTaskPriorityInherit+0x112>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	db06      	blt.n	8002cf2 <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ce4:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <xTaskPriorityInherit+0x130>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	2205      	movs	r2, #5
 8002cec:	1ad2      	subs	r2, r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	6959      	ldr	r1, [r3, #20]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfa:	0013      	movs	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	189b      	adds	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4a39      	ldr	r2, [pc, #228]	; (8002de8 <xTaskPriorityInherit+0x134>)
 8002d04:	189b      	adds	r3, r3, r2
 8002d06:	4299      	cmp	r1, r3
 8002d08:	d133      	bne.n	8002d72 <xTaskPriorityInherit+0xbe>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f7fd fe0e 	bl	8000930 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002d14:	4b33      	ldr	r3, [pc, #204]	; (8002de4 <xTaskPriorityInherit+0x130>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f001 f9bd 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8002d26:	0003      	movs	r3, r0
 8002d28:	001a      	movs	r2, r3
 8002d2a:	4b30      	ldr	r3, [pc, #192]	; (8002dec <xTaskPriorityInherit+0x138>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d004      	beq.n	8002d40 <xTaskPriorityInherit+0x8c>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	0019      	movs	r1, r3
 8002d3a:	2030      	movs	r0, #48	; 0x30
 8002d3c:	f001 ffc2 	bl	8004cc4 <prvTraceStoreEvent1>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d44:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <xTaskPriorityInherit+0x13c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d903      	bls.n	8002d54 <xTaskPriorityInherit+0xa0>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	4b27      	ldr	r3, [pc, #156]	; (8002df0 <xTaskPriorityInherit+0x13c>)
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d58:	0013      	movs	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	189b      	adds	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4a21      	ldr	r2, [pc, #132]	; (8002de8 <xTaskPriorityInherit+0x134>)
 8002d62:	189a      	adds	r2, r3, r2
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	3304      	adds	r3, #4
 8002d68:	0019      	movs	r1, r3
 8002d6a:	0010      	movs	r0, r2
 8002d6c:	f7fd fd88 	bl	8000880 <vListInsertEnd>
 8002d70:	e004      	b.n	8002d7c <xTaskPriorityInherit+0xc8>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002d72:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <xTaskPriorityInherit+0x130>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8002d7c:	f001 fb4f 	bl	800441e <prvTraceGetCurrentTaskHandle>
 8002d80:	0003      	movs	r3, r0
 8002d82:	0018      	movs	r0, r3
 8002d84:	f001 f98c 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	001a      	movs	r2, r3
 8002d8c:	4b17      	ldr	r3, [pc, #92]	; (8002dec <xTaskPriorityInherit+0x138>)
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	4013      	ands	r3, r2
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <xTaskPriorityInherit+0x10c>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f001 f980 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8002da0:	0003      	movs	r3, r0
 8002da2:	001a      	movs	r2, r3
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <xTaskPriorityInherit+0x138>)
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	4013      	ands	r3, r2
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d007      	beq.n	8002dc0 <xTaskPriorityInherit+0x10c>
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <xTaskPriorityInherit+0x130>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	001a      	movs	r2, r3
 8002dba:	2005      	movs	r0, #5
 8002dbc:	f001 ffdc 	bl	8004d78 <prvTraceStoreEvent2>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e008      	b.n	8002dd8 <xTaskPriorityInherit+0x124>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <xTaskPriorityInherit+0x130>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d201      	bcs.n	8002dd8 <xTaskPriorityInherit+0x124>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
	}
 8002dda:	0018      	movs	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b004      	add	sp, #16
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	20000038 	.word	0x20000038
 8002de8:	2000003c 	.word	0x2000003c
 8002dec:	20000014 	.word	0x20000014
 8002df0:	20000118 	.word	0x20000118

08002df4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d100      	bne.n	8002e0c <xTaskPriorityDisinherit+0x18>
 8002e0a:	e076      	b.n	8002efa <xTaskPriorityDisinherit+0x106>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002e0c:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <xTaskPriorityDisinherit+0x110>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d001      	beq.n	8002e1a <xTaskPriorityDisinherit+0x26>
 8002e16:	b672      	cpsid	i
 8002e18:	e7fe      	b.n	8002e18 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <xTaskPriorityDisinherit+0x32>
 8002e22:	b672      	cpsid	i
 8002e24:	e7fe      	b.n	8002e24 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	1e5a      	subs	r2, r3, #1
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d05e      	beq.n	8002efa <xTaskPriorityDisinherit+0x106>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d15a      	bne.n	8002efa <xTaskPriorityDisinherit+0x106>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	3304      	adds	r3, #4
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f7fd fd71 	bl	8000930 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8002e4e:	f001 fae6 	bl	800441e <prvTraceGetCurrentTaskHandle>
 8002e52:	0003      	movs	r3, r0
 8002e54:	0018      	movs	r0, r3
 8002e56:	f001 f923 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	001a      	movs	r2, r3
 8002e5e:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <xTaskPriorityDisinherit+0x114>)
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	4013      	ands	r3, r2
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d012      	beq.n	8002e90 <xTaskPriorityDisinherit+0x9c>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f001 f917 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8002e72:	0003      	movs	r3, r0
 8002e74:	001a      	movs	r2, r3
 8002e76:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <xTaskPriorityDisinherit+0x114>)
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d006      	beq.n	8002e90 <xTaskPriorityDisinherit+0x9c>
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e88:	001a      	movs	r2, r3
 8002e8a:	2006      	movs	r0, #6
 8002e8c:	f001 ff74 	bl	8004d78 <prvTraceStoreEvent2>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	2205      	movs	r2, #5
 8002e9e:	1ad2      	subs	r2, r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f001 f8fa 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8002eac:	0003      	movs	r3, r0
 8002eae:	001a      	movs	r2, r3
 8002eb0:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <xTaskPriorityDisinherit+0x114>)
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d004      	beq.n	8002ec6 <xTaskPriorityDisinherit+0xd2>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	2030      	movs	r0, #48	; 0x30
 8002ec2:	f001 feff 	bl	8004cc4 <prvTraceStoreEvent1>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <xTaskPriorityDisinherit+0x118>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d903      	bls.n	8002eda <xTaskPriorityDisinherit+0xe6>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <xTaskPriorityDisinherit+0x118>)
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ede:	0013      	movs	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	189b      	adds	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <xTaskPriorityDisinherit+0x11c>)
 8002ee8:	189a      	adds	r2, r3, r2
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	3304      	adds	r3, #4
 8002eee:	0019      	movs	r1, r3
 8002ef0:	0010      	movs	r0, r2
 8002ef2:	f7fd fcc5 	bl	8000880 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002efa:	68fb      	ldr	r3, [r7, #12]
	}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b004      	add	sp, #16
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20000038 	.word	0x20000038
 8002f08:	20000014 	.word	0x20000014
 8002f0c:	20000118 	.word	0x20000118
 8002f10:	2000003c 	.word	0x2000003c

08002f14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002f22:	2301      	movs	r3, #1
 8002f24:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d100      	bne.n	8002f2e <vTaskPriorityDisinheritAfterTimeout+0x1a>
 8002f2c:	e08c      	b.n	8003048 <vTaskPriorityDisinheritAfterTimeout+0x134>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <vTaskPriorityDisinheritAfterTimeout+0x26>
 8002f36:	b672      	cpsid	i
 8002f38:	e7fe      	b.n	8002f38 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d902      	bls.n	8002f4a <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	e002      	b.n	8002f50 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4e:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d100      	bne.n	8002f5c <vTaskPriorityDisinheritAfterTimeout+0x48>
 8002f5a:	e075      	b.n	8003048 <vTaskPriorityDisinheritAfterTimeout+0x134>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d000      	beq.n	8002f68 <vTaskPriorityDisinheritAfterTimeout+0x54>
 8002f66:	e06f      	b.n	8003048 <vTaskPriorityDisinheritAfterTimeout+0x134>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8002f68:	4b39      	ldr	r3, [pc, #228]	; (8003050 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d101      	bne.n	8002f76 <vTaskPriorityDisinheritAfterTimeout+0x62>
 8002f72:	b672      	cpsid	i
 8002f74:	e7fe      	b.n	8002f74 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8002f76:	f001 fa52 	bl	800441e <prvTraceGetCurrentTaskHandle>
 8002f7a:	0003      	movs	r3, r0
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f001 f88f 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8002f82:	0003      	movs	r3, r0
 8002f84:	001a      	movs	r2, r3
 8002f86:	4b33      	ldr	r3, [pc, #204]	; (8003054 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d012      	beq.n	8002fb8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f001 f883 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8002f9a:	0003      	movs	r3, r0
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	4b2d      	ldr	r3, [pc, #180]	; (8003054 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d006      	beq.n	8002fb8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
 8002faa:	6939      	ldr	r1, [r7, #16]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb0:	001a      	movs	r2, r3
 8002fb2:	2006      	movs	r0, #6
 8002fb4:	f001 fee0 	bl	8004d78 <prvTraceStoreEvent2>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	db04      	blt.n	8002fd6 <vTaskPriorityDisinheritAfterTimeout+0xc2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2205      	movs	r2, #5
 8002fd0:	1ad2      	subs	r2, r2, r3
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	6959      	ldr	r1, [r3, #20]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	0013      	movs	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	189b      	adds	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4a1c      	ldr	r2, [pc, #112]	; (8003058 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8002fe6:	189b      	adds	r3, r3, r2
 8002fe8:	4299      	cmp	r1, r3
 8002fea:	d12d      	bne.n	8003048 <vTaskPriorityDisinheritAfterTimeout+0x134>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7fd fc9d 	bl	8000930 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f001 f851 	bl	80040a0 <prvTraceGetTaskNumberHigh16>
 8002ffe:	0003      	movs	r3, r0
 8003000:	001a      	movs	r2, r3
 8003002:	4b14      	ldr	r3, [pc, #80]	; (8003054 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	4013      	ands	r3, r2
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <vTaskPriorityDisinheritAfterTimeout+0x104>
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	0019      	movs	r1, r3
 8003012:	2030      	movs	r0, #48	; 0x30
 8003014:	f001 fe56 	bl	8004cc4 <prvTraceStoreEvent1>
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <vTaskPriorityDisinheritAfterTimeout+0x148>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d903      	bls.n	800302c <vTaskPriorityDisinheritAfterTimeout+0x118>
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <vTaskPriorityDisinheritAfterTimeout+0x148>)
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003030:	0013      	movs	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	189b      	adds	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4a07      	ldr	r2, [pc, #28]	; (8003058 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 800303a:	189a      	adds	r2, r3, r2
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	3304      	adds	r3, #4
 8003040:	0019      	movs	r1, r3
 8003042:	0010      	movs	r0, r2
 8003044:	f7fd fc1c 	bl	8000880 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003048:	46c0      	nop			; (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	b006      	add	sp, #24
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20000038 	.word	0x20000038
 8003054:	20000014 	.word	0x20000014
 8003058:	2000003c 	.word	0x2000003c
 800305c:	20000118 	.word	0x20000118

08003060 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <uxTaskResetEventItemValue+0x28>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <uxTaskResetEventItemValue+0x28>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <uxTaskResetEventItemValue+0x28>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2105      	movs	r1, #5
 800307a:	1a8a      	subs	r2, r1, r2
 800307c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800307e:	687b      	ldr	r3, [r7, #4]
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000038 	.word	0x20000038

0800308c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <pvTaskIncrementMutexHeldCount+0x20>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d004      	beq.n	80030a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <pvTaskIncrementMutexHeldCount+0x20>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800309e:	3201      	adds	r2, #1
 80030a0:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 80030a2:	4b02      	ldr	r3, [pc, #8]	; (80030ac <pvTaskIncrementMutexHeldCount+0x20>)
 80030a4:	681b      	ldr	r3, [r3, #0]
	}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000038 	.word	0x20000038

080030b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80030ba:	4b21      	ldr	r3, [pc, #132]	; (8003140 <prvAddCurrentTaskToDelayedList+0x90>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030c0:	4b20      	ldr	r3, [pc, #128]	; (8003144 <prvAddCurrentTaskToDelayedList+0x94>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3304      	adds	r3, #4
 80030c6:	0018      	movs	r0, r3
 80030c8:	f7fd fc32 	bl	8000930 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3301      	adds	r3, #1
 80030d0:	d10b      	bne.n	80030ea <prvAddCurrentTaskToDelayedList+0x3a>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030d8:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <prvAddCurrentTaskToDelayedList+0x94>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	1d1a      	adds	r2, r3, #4
 80030de:	4b1a      	ldr	r3, [pc, #104]	; (8003148 <prvAddCurrentTaskToDelayedList+0x98>)
 80030e0:	0011      	movs	r1, r2
 80030e2:	0018      	movs	r0, r3
 80030e4:	f7fd fbcc 	bl	8000880 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80030e8:	e026      	b.n	8003138 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	18d3      	adds	r3, r2, r3
 80030f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80030f2:	4b14      	ldr	r3, [pc, #80]	; (8003144 <prvAddCurrentTaskToDelayedList+0x94>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d209      	bcs.n	8003116 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <prvAddCurrentTaskToDelayedList+0x94>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3304      	adds	r3, #4
 800310c:	0019      	movs	r1, r3
 800310e:	0010      	movs	r0, r2
 8003110:	f7fd fbd8 	bl	80008c4 <vListInsert>
}
 8003114:	e010      	b.n	8003138 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <prvAddCurrentTaskToDelayedList+0x94>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3304      	adds	r3, #4
 8003120:	0019      	movs	r1, r3
 8003122:	0010      	movs	r0, r2
 8003124:	f7fd fbce 	bl	80008c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003128:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <prvAddCurrentTaskToDelayedList+0xa4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	d202      	bcs.n	8003138 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	601a      	str	r2, [r3, #0]
}
 8003138:	46c0      	nop			; (mov r8, r8)
 800313a:	46bd      	mov	sp, r7
 800313c:	b004      	add	sp, #16
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000114 	.word	0x20000114
 8003144:	20000038 	.word	0x20000038
 8003148:	200000fc 	.word	0x200000fc
 800314c:	200000cc 	.word	0x200000cc
 8003150:	200000c8 	.word	0x200000c8
 8003154:	20000130 	.word	0x20000130

08003158 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800315e:	2300      	movs	r3, #0
 8003160:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003162:	f000 fa9f 	bl	80036a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003166:	4b0d      	ldr	r3, [pc, #52]	; (800319c <xTimerCreateTimerTask+0x44>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800316e:	490c      	ldr	r1, [pc, #48]	; (80031a0 <xTimerCreateTimerTask+0x48>)
 8003170:	480c      	ldr	r0, [pc, #48]	; (80031a4 <xTimerCreateTimerTask+0x4c>)
 8003172:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <xTimerCreateTimerTask+0x50>)
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	2303      	movs	r3, #3
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2300      	movs	r3, #0
 800317c:	2246      	movs	r2, #70	; 0x46
 800317e:	f7fe fde5 	bl	8001d4c <xTaskCreate>
 8003182:	0003      	movs	r3, r0
 8003184:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <xTimerCreateTimerTask+0x38>
 800318c:	b672      	cpsid	i
 800318e:	e7fe      	b.n	800318e <xTimerCreateTimerTask+0x36>
	return xReturn;
 8003190:	687b      	ldr	r3, [r7, #4]
}
 8003192:	0018      	movs	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	b002      	add	sp, #8
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	2000016c 	.word	0x2000016c
 80031a0:	08006c68 	.word	0x08006c68
 80031a4:	080032c9 	.word	0x080032c9
 80031a8:	20000170 	.word	0x20000170

080031ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80031ac:	b590      	push	{r4, r7, lr}
 80031ae:	b089      	sub	sp, #36	; 0x24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <xTimerGenericCommand+0x1c>
 80031c4:	b672      	cpsid	i
 80031c6:	e7fe      	b.n	80031c6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80031c8:	4b1c      	ldr	r3, [pc, #112]	; (800323c <xTimerGenericCommand+0x90>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d030      	beq.n	8003232 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80031d0:	2410      	movs	r4, #16
 80031d2:	193b      	adds	r3, r7, r4
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80031d8:	193b      	adds	r3, r7, r4
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80031de:	193b      	adds	r3, r7, r4
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b05      	cmp	r3, #5
 80031e8:	dc19      	bgt.n	800321e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80031ea:	f7ff fd47 	bl	8002c7c <xTaskGetSchedulerState>
 80031ee:	0003      	movs	r3, r0
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d109      	bne.n	8003208 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <xTimerGenericCommand+0x90>)
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fa:	1939      	adds	r1, r7, r4
 80031fc:	2300      	movs	r3, #0
 80031fe:	f7fd fd23 	bl	8000c48 <xQueueGenericSend>
 8003202:	0003      	movs	r3, r0
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	e014      	b.n	8003232 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <xTimerGenericCommand+0x90>)
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	2310      	movs	r3, #16
 800320e:	18f9      	adds	r1, r7, r3
 8003210:	2300      	movs	r3, #0
 8003212:	2200      	movs	r2, #0
 8003214:	f7fd fd18 	bl	8000c48 <xQueueGenericSend>
 8003218:	0003      	movs	r3, r0
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	e009      	b.n	8003232 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800321e:	4b07      	ldr	r3, [pc, #28]	; (800323c <xTimerGenericCommand+0x90>)
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	2310      	movs	r3, #16
 8003226:	18f9      	adds	r1, r7, r3
 8003228:	2300      	movs	r3, #0
 800322a:	f7fd fee5 	bl	8000ff8 <xQueueGenericSendFromISR>
 800322e:	0003      	movs	r3, r0
 8003230:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003232:	69fb      	ldr	r3, [r7, #28]
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b009      	add	sp, #36	; 0x24
 800323a:	bd90      	pop	{r4, r7, pc}
 800323c:	2000016c 	.word	0x2000016c

08003240 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af02      	add	r7, sp, #8
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800324a:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <prvProcessExpiredTimer+0x84>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3304      	adds	r3, #4
 8003258:	0018      	movs	r0, r3
 800325a:	f7fd fb69 	bl	8000930 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2228      	movs	r2, #40	; 0x28
 8003262:	5c9b      	ldrb	r3, [r3, r2]
 8003264:	001a      	movs	r2, r3
 8003266:	2304      	movs	r3, #4
 8003268:	4013      	ands	r3, r2
 800326a:	d019      	beq.n	80032a0 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	18d1      	adds	r1, r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f8c3 	bl	8003404 <prvInsertTimerInActiveList>
 800327e:	1e03      	subs	r3, r0, #0
 8003280:	d017      	beq.n	80032b2 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	2300      	movs	r3, #0
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	2300      	movs	r3, #0
 800328c:	2100      	movs	r1, #0
 800328e:	f7ff ff8d 	bl	80031ac <xTimerGenericCommand>
 8003292:	0003      	movs	r3, r0
 8003294:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <prvProcessExpiredTimer+0x72>
 800329c:	b672      	cpsid	i
 800329e:	e7fe      	b.n	800329e <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2228      	movs	r2, #40	; 0x28
 80032a4:	5c9b      	ldrb	r3, [r3, r2]
 80032a6:	2201      	movs	r2, #1
 80032a8:	4393      	bics	r3, r2
 80032aa:	b2d9      	uxtb	r1, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2228      	movs	r2, #40	; 0x28
 80032b0:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	0010      	movs	r0, r2
 80032ba:	4798      	blx	r3
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	b004      	add	sp, #16
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20000164 	.word	0x20000164

080032c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80032d0:	2308      	movs	r3, #8
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	0018      	movs	r0, r3
 80032d6:	f000 f853 	bl	8003380 <prvGetNextExpireTime>
 80032da:	0003      	movs	r3, r0
 80032dc:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	0011      	movs	r1, r2
 80032e4:	0018      	movs	r0, r3
 80032e6:	f000 f803 	bl	80032f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80032ea:	f000 f8cd 	bl	8003488 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80032ee:	e7ef      	b.n	80032d0 <prvTimerTask+0x8>

080032f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80032fa:	f7fe ffcd 	bl	8002298 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80032fe:	2308      	movs	r3, #8
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	0018      	movs	r0, r3
 8003304:	f000 f85e 	bl	80033c4 <prvSampleTimeNow>
 8003308:	0003      	movs	r3, r0
 800330a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d12b      	bne.n	800336a <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10c      	bne.n	8003332 <prvProcessTimerOrBlockTask+0x42>
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	429a      	cmp	r2, r3
 800331e:	d808      	bhi.n	8003332 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8003320:	f7fe ffc6 	bl	80022b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	0011      	movs	r1, r2
 800332a:	0018      	movs	r0, r3
 800332c:	f7ff ff88 	bl	8003240 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003330:	e01d      	b.n	800336e <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003338:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <prvProcessTimerOrBlockTask+0x88>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <prvProcessTimerOrBlockTask+0x56>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <prvProcessTimerOrBlockTask+0x58>
 8003346:	2300      	movs	r3, #0
 8003348:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <prvProcessTimerOrBlockTask+0x8c>)
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	0019      	movs	r1, r3
 8003358:	f7fe fcc5 	bl	8001ce6 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800335c:	f7fe ffa8 	bl	80022b0 <xTaskResumeAll>
 8003360:	1e03      	subs	r3, r0, #0
 8003362:	d104      	bne.n	800336e <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8003364:	f000 fa54 	bl	8003810 <vPortYield>
}
 8003368:	e001      	b.n	800336e <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800336a:	f7fe ffa1 	bl	80022b0 <xTaskResumeAll>
}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	46bd      	mov	sp, r7
 8003372:	b004      	add	sp, #16
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	20000168 	.word	0x20000168
 800337c:	2000016c 	.word	0x2000016c

08003380 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003388:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <prvGetNextExpireTime+0x40>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <prvGetNextExpireTime+0x16>
 8003392:	2201      	movs	r2, #1
 8003394:	e000      	b.n	8003398 <prvGetNextExpireTime+0x18>
 8003396:	2200      	movs	r2, #0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <prvGetNextExpireTime+0x40>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	e001      	b.n	80033b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80033b4:	68fb      	ldr	r3, [r7, #12]
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b004      	add	sp, #16
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	20000164 	.word	0x20000164

080033c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80033cc:	f7ff f810 	bl	80023f0 <xTaskGetTickCount>
 80033d0:	0003      	movs	r3, r0
 80033d2:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <prvSampleTimeNow+0x3c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d205      	bcs.n	80033ea <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80033de:	f000 f903 	bl	80035e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e002      	b.n	80033f0 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <prvSampleTimeNow+0x3c>)
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80033f6:	68fb      	ldr	r3, [r7, #12]
}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b004      	add	sp, #16
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000174 	.word	0x20000174

08003404 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	429a      	cmp	r2, r3
 8003428:	d812      	bhi.n	8003450 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	1ad2      	subs	r2, r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	429a      	cmp	r2, r3
 8003436:	d302      	bcc.n	800343e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003438:	2301      	movs	r3, #1
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	e01b      	b.n	8003476 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <prvInsertTimerInActiveList+0x7c>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3304      	adds	r3, #4
 8003446:	0019      	movs	r1, r3
 8003448:	0010      	movs	r0, r2
 800344a:	f7fd fa3b 	bl	80008c4 <vListInsert>
 800344e:	e012      	b.n	8003476 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d206      	bcs.n	8003466 <prvInsertTimerInActiveList+0x62>
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d302      	bcc.n	8003466 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003460:	2301      	movs	r3, #1
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	e007      	b.n	8003476 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <prvInsertTimerInActiveList+0x80>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3304      	adds	r3, #4
 800346e:	0019      	movs	r1, r3
 8003470:	0010      	movs	r0, r2
 8003472:	f7fd fa27 	bl	80008c4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003476:	697b      	ldr	r3, [r7, #20]
}
 8003478:	0018      	movs	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	b006      	add	sp, #24
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000168 	.word	0x20000168
 8003484:	20000164 	.word	0x20000164

08003488 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b08b      	sub	sp, #44	; 0x2c
 800348c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800348e:	e097      	b.n	80035c0 <prvProcessReceivedCommands+0x138>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003490:	2208      	movs	r2, #8
 8003492:	18bb      	adds	r3, r7, r2
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	da00      	bge.n	800349c <prvProcessReceivedCommands+0x14>
 800349a:	e091      	b.n	80035c0 <prvProcessReceivedCommands+0x138>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800349c:	18bb      	adds	r3, r7, r2
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d004      	beq.n	80034b4 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3304      	adds	r3, #4
 80034ae:	0018      	movs	r0, r3
 80034b0:	f7fd fa3e 	bl	8000930 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	0018      	movs	r0, r3
 80034b8:	f7ff ff84 	bl	80033c4 <prvSampleTimeNow>
 80034bc:	0003      	movs	r3, r0
 80034be:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 80034c0:	2308      	movs	r3, #8
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b09      	cmp	r3, #9
 80034c8:	d900      	bls.n	80034cc <prvProcessReceivedCommands+0x44>
 80034ca:	e078      	b.n	80035be <prvProcessReceivedCommands+0x136>
 80034cc:	009a      	lsls	r2, r3, #2
 80034ce:	4b44      	ldr	r3, [pc, #272]	; (80035e0 <prvProcessReceivedCommands+0x158>)
 80034d0:	18d3      	adds	r3, r2, r3
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	2228      	movs	r2, #40	; 0x28
 80034da:	5c9b      	ldrb	r3, [r3, r2]
 80034dc:	2201      	movs	r2, #1
 80034de:	4313      	orrs	r3, r2
 80034e0:	b2d9      	uxtb	r1, r3
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	2228      	movs	r2, #40	; 0x28
 80034e6:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80034e8:	2408      	movs	r4, #8
 80034ea:	193b      	adds	r3, r7, r4
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	18d1      	adds	r1, r2, r3
 80034f4:	193b      	adds	r3, r7, r4
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	69f8      	ldr	r0, [r7, #28]
 80034fc:	f7ff ff82 	bl	8003404 <prvInsertTimerInActiveList>
 8003500:	1e03      	subs	r3, r0, #0
 8003502:	d05d      	beq.n	80035c0 <prvProcessReceivedCommands+0x138>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	0010      	movs	r0, r2
 800350c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	2228      	movs	r2, #40	; 0x28
 8003512:	5c9b      	ldrb	r3, [r3, r2]
 8003514:	001a      	movs	r2, r3
 8003516:	2304      	movs	r3, #4
 8003518:	4013      	ands	r3, r2
 800351a:	d051      	beq.n	80035c0 <prvProcessReceivedCommands+0x138>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800351c:	193b      	adds	r3, r7, r4
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	18d2      	adds	r2, r2, r3
 8003526:	69f8      	ldr	r0, [r7, #28]
 8003528:	2300      	movs	r3, #0
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2300      	movs	r3, #0
 800352e:	2100      	movs	r1, #0
 8003530:	f7ff fe3c 	bl	80031ac <xTimerGenericCommand>
 8003534:	0003      	movs	r3, r0
 8003536:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d140      	bne.n	80035c0 <prvProcessReceivedCommands+0x138>
 800353e:	b672      	cpsid	i
 8003540:	e7fe      	b.n	8003540 <prvProcessReceivedCommands+0xb8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	2228      	movs	r2, #40	; 0x28
 8003546:	5c9b      	ldrb	r3, [r3, r2]
 8003548:	2201      	movs	r2, #1
 800354a:	4393      	bics	r3, r2
 800354c:	b2d9      	uxtb	r1, r3
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2228      	movs	r2, #40	; 0x28
 8003552:	5499      	strb	r1, [r3, r2]
					break;
 8003554:	e034      	b.n	80035c0 <prvProcessReceivedCommands+0x138>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	2228      	movs	r2, #40	; 0x28
 800355a:	5c9b      	ldrb	r3, [r3, r2]
 800355c:	2201      	movs	r2, #1
 800355e:	4313      	orrs	r3, r2
 8003560:	b2d9      	uxtb	r1, r3
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	2228      	movs	r2, #40	; 0x28
 8003566:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003568:	2308      	movs	r3, #8
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <prvProcessReceivedCommands+0xf6>
 800357a:	b672      	cpsid	i
 800357c:	e7fe      	b.n	800357c <prvProcessReceivedCommands+0xf4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	18d1      	adds	r1, r2, r3
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	69f8      	ldr	r0, [r7, #28]
 800358c:	f7ff ff3a 	bl	8003404 <prvInsertTimerInActiveList>
					break;
 8003590:	e016      	b.n	80035c0 <prvProcessReceivedCommands+0x138>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	2228      	movs	r2, #40	; 0x28
 8003596:	5c9b      	ldrb	r3, [r3, r2]
 8003598:	001a      	movs	r2, r3
 800359a:	2302      	movs	r3, #2
 800359c:	4013      	ands	r3, r2
 800359e:	d104      	bne.n	80035aa <prvProcessReceivedCommands+0x122>
						{
							vPortFree( pxTimer );
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	0018      	movs	r0, r3
 80035a4:	f000 fa1a 	bl	80039dc <vPortFree>
 80035a8:	e00a      	b.n	80035c0 <prvProcessReceivedCommands+0x138>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	2228      	movs	r2, #40	; 0x28
 80035ae:	5c9b      	ldrb	r3, [r3, r2]
 80035b0:	2201      	movs	r2, #1
 80035b2:	4393      	bics	r3, r2
 80035b4:	b2d9      	uxtb	r1, r3
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	2228      	movs	r2, #40	; 0x28
 80035ba:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80035bc:	e000      	b.n	80035c0 <prvProcessReceivedCommands+0x138>

				default	:
					/* Don't expect to get here. */
					break;
 80035be:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <prvProcessReceivedCommands+0x15c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2208      	movs	r2, #8
 80035c6:	18b9      	adds	r1, r7, r2
 80035c8:	2200      	movs	r2, #0
 80035ca:	0018      	movs	r0, r3
 80035cc:	f7fd feae 	bl	800132c <xQueueReceive>
 80035d0:	1e03      	subs	r3, r0, #0
 80035d2:	d000      	beq.n	80035d6 <prvProcessReceivedCommands+0x14e>
 80035d4:	e75c      	b.n	8003490 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b009      	add	sp, #36	; 0x24
 80035de:	bd90      	pop	{r4, r7, pc}
 80035e0:	08007008 	.word	0x08007008
 80035e4:	2000016c 	.word	0x2000016c

080035e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80035ee:	e041      	b.n	8003674 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80035f0:	4b2a      	ldr	r3, [pc, #168]	; (800369c <prvSwitchTimerLists+0xb4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035fa:	4b28      	ldr	r3, [pc, #160]	; (800369c <prvSwitchTimerLists+0xb4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	3304      	adds	r3, #4
 8003608:	0018      	movs	r0, r3
 800360a:	f7fd f991 	bl	8000930 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	0010      	movs	r0, r2
 8003616:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2228      	movs	r2, #40	; 0x28
 800361c:	5c9b      	ldrb	r3, [r3, r2]
 800361e:	001a      	movs	r2, r3
 8003620:	2304      	movs	r3, #4
 8003622:	4013      	ands	r3, r2
 8003624:	d026      	beq.n	8003674 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	18d3      	adds	r3, r2, r3
 800362e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	429a      	cmp	r2, r3
 8003636:	d90e      	bls.n	8003656 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003644:	4b15      	ldr	r3, [pc, #84]	; (800369c <prvSwitchTimerLists+0xb4>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3304      	adds	r3, #4
 800364c:	0019      	movs	r1, r3
 800364e:	0010      	movs	r0, r2
 8003650:	f7fd f938 	bl	80008c4 <vListInsert>
 8003654:	e00e      	b.n	8003674 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	2300      	movs	r3, #0
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	2300      	movs	r3, #0
 8003660:	2100      	movs	r1, #0
 8003662:	f7ff fda3 	bl	80031ac <xTimerGenericCommand>
 8003666:	0003      	movs	r3, r0
 8003668:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <prvSwitchTimerLists+0x8c>
 8003670:	b672      	cpsid	i
 8003672:	e7fe      	b.n	8003672 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <prvSwitchTimerLists+0xb4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1b8      	bne.n	80035f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800367e:	4b07      	ldr	r3, [pc, #28]	; (800369c <prvSwitchTimerLists+0xb4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <prvSwitchTimerLists+0xb8>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4b04      	ldr	r3, [pc, #16]	; (800369c <prvSwitchTimerLists+0xb4>)
 800368a:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800368c:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <prvSwitchTimerLists+0xb8>)
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	601a      	str	r2, [r3, #0]
}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	46bd      	mov	sp, r7
 8003696:	b006      	add	sp, #24
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	20000164 	.word	0x20000164
 80036a0:	20000168 	.word	0x20000168

080036a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80036a8:	f000 f8c2 	bl	8003830 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <prvCheckForValidListAndQueue+0x48>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d115      	bne.n	80036e0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80036b4:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <prvCheckForValidListAndQueue+0x4c>)
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7fd f8b9 	bl	800082e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80036bc:	4b0d      	ldr	r3, [pc, #52]	; (80036f4 <prvCheckForValidListAndQueue+0x50>)
 80036be:	0018      	movs	r0, r3
 80036c0:	f7fd f8b5 	bl	800082e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <prvCheckForValidListAndQueue+0x54>)
 80036c6:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <prvCheckForValidListAndQueue+0x4c>)
 80036c8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80036ca:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <prvCheckForValidListAndQueue+0x58>)
 80036cc:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <prvCheckForValidListAndQueue+0x50>)
 80036ce:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80036d0:	2200      	movs	r2, #0
 80036d2:	210c      	movs	r1, #12
 80036d4:	2005      	movs	r0, #5
 80036d6:	f7fd f9a7 	bl	8000a28 <xQueueGenericCreate>
 80036da:	0002      	movs	r2, r0
 80036dc:	4b03      	ldr	r3, [pc, #12]	; (80036ec <prvCheckForValidListAndQueue+0x48>)
 80036de:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036e0:	f000 f8b8 	bl	8003854 <vPortExitCritical>
}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	2000016c 	.word	0x2000016c
 80036f0:	2000013c 	.word	0x2000013c
 80036f4:	20000150 	.word	0x20000150
 80036f8:	20000164 	.word	0x20000164
 80036fc:	20000168 	.word	0x20000168

08003700 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3b04      	subs	r3, #4
 8003710:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	0452      	lsls	r2, r2, #17
 8003718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3b04      	subs	r3, #4
 800371e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	3b04      	subs	r3, #4
 800372a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800372c:	4a08      	ldr	r2, [pc, #32]	; (8003750 <pxPortInitialiseStack+0x50>)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3b14      	subs	r3, #20
 8003736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3b20      	subs	r3, #32
 8003742:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003744:	68fb      	ldr	r3, [r7, #12]
}
 8003746:	0018      	movs	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	b004      	add	sp, #16
 800374c:	bd80      	pop	{r7, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	08003755 	.word	0x08003755

08003754 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800375e:	4b08      	ldr	r3, [pc, #32]	; (8003780 <prvTaskExitError+0x2c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3301      	adds	r3, #1
 8003764:	d001      	beq.n	800376a <prvTaskExitError+0x16>
 8003766:	b672      	cpsid	i
 8003768:	e7fe      	b.n	8003768 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800376a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0fc      	beq.n	800376e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003774:	46c0      	nop			; (mov r8, r8)
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	46bd      	mov	sp, r7
 800377a:	b002      	add	sp, #8
 800377c:	bd80      	pop	{r7, pc}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	20000000 	.word	0x20000000

08003784 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003790:	4a0b      	ldr	r2, [pc, #44]	; (80037c0 <pxCurrentTCBConst2>)
 8003792:	6813      	ldr	r3, [r2, #0]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	3020      	adds	r0, #32
 8003798:	f380 8809 	msr	PSP, r0
 800379c:	2002      	movs	r0, #2
 800379e:	f380 8814 	msr	CONTROL, r0
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80037a8:	46ae      	mov	lr, r5
 80037aa:	bc08      	pop	{r3}
 80037ac:	bc04      	pop	{r2}
 80037ae:	b662      	cpsie	i
 80037b0:	4718      	bx	r3
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46c0      	nop			; (mov r8, r8)

080037c0 <pxCurrentTCBConst2>:
 80037c0:	20000038 	.word	0x20000038
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80037c4:	46c0      	nop			; (mov r8, r8)
 80037c6:	46c0      	nop			; (mov r8, r8)

080037c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80037cc:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <xPortStartScheduler+0x40>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <xPortStartScheduler+0x40>)
 80037d2:	21ff      	movs	r1, #255	; 0xff
 80037d4:	0409      	lsls	r1, r1, #16
 80037d6:	430a      	orrs	r2, r1
 80037d8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80037da:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <xPortStartScheduler+0x40>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <xPortStartScheduler+0x40>)
 80037e0:	21ff      	movs	r1, #255	; 0xff
 80037e2:	0609      	lsls	r1, r1, #24
 80037e4:	430a      	orrs	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80037e8:	f000 f898 	bl	800391c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80037ec:	4b07      	ldr	r3, [pc, #28]	; (800380c <xPortStartScheduler+0x44>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80037f2:	f7ff ffcd 	bl	8003790 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80037f6:	f7fe fedb 	bl	80025b0 <vTaskSwitchContext>
	prvTaskExitError();
 80037fa:	f7ff ffab 	bl	8003754 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	0018      	movs	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	e000ed20 	.word	0xe000ed20
 800380c:	20000000 	.word	0x20000000

08003810 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <vPortYield+0x1c>)
 8003816:	2280      	movs	r2, #128	; 0x80
 8003818:	0552      	lsls	r2, r2, #21
 800381a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800381c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003820:	f3bf 8f6f 	isb	sy
}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	e000ed04 	.word	0xe000ed04

08003830 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003834:	b672      	cpsid	i
    uxCriticalNesting++;
 8003836:	4b06      	ldr	r3, [pc, #24]	; (8003850 <vPortEnterCritical+0x20>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <vPortEnterCritical+0x20>)
 800383e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003840:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003844:	f3bf 8f6f 	isb	sy
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	20000000 	.word	0x20000000

08003854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003858:	4b09      	ldr	r3, [pc, #36]	; (8003880 <vPortExitCritical+0x2c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <vPortExitCritical+0x10>
 8003860:	b672      	cpsid	i
 8003862:	e7fe      	b.n	8003862 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <vPortExitCritical+0x2c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	1e5a      	subs	r2, r3, #1
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <vPortExitCritical+0x2c>)
 800386c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800386e:	4b04      	ldr	r3, [pc, #16]	; (8003880 <vPortExitCritical+0x2c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d100      	bne.n	8003878 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003876:	b662      	cpsie	i
    }
}
 8003878:	46c0      	nop			; (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	20000000 	.word	0x20000000

08003884 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003884:	f3ef 8010 	mrs	r0, PRIMASK
 8003888:	b672      	cpsid	i
 800388a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	0018      	movs	r0, r3

08003890 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003890:	f380 8810 	msr	PRIMASK, r0
 8003894:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003896:	46c0      	nop			; (mov r8, r8)
	...

080038a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80038a0:	f3ef 8009 	mrs	r0, PSP
 80038a4:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <pxCurrentTCBConst>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	3820      	subs	r0, #32
 80038aa:	6010      	str	r0, [r2, #0]
 80038ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80038ae:	4644      	mov	r4, r8
 80038b0:	464d      	mov	r5, r9
 80038b2:	4656      	mov	r6, sl
 80038b4:	465f      	mov	r7, fp
 80038b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80038b8:	b508      	push	{r3, lr}
 80038ba:	b672      	cpsid	i
 80038bc:	f7fe fe78 	bl	80025b0 <vTaskSwitchContext>
 80038c0:	b662      	cpsie	i
 80038c2:	bc0c      	pop	{r2, r3}
 80038c4:	6811      	ldr	r1, [r2, #0]
 80038c6:	6808      	ldr	r0, [r1, #0]
 80038c8:	3010      	adds	r0, #16
 80038ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80038cc:	46a0      	mov	r8, r4
 80038ce:	46a9      	mov	r9, r5
 80038d0:	46b2      	mov	sl, r6
 80038d2:	46bb      	mov	fp, r7
 80038d4:	f380 8809 	msr	PSP, r0
 80038d8:	3820      	subs	r0, #32
 80038da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80038dc:	4718      	bx	r3
 80038de:	46c0      	nop			; (mov r8, r8)

080038e0 <pxCurrentTCBConst>:
 80038e0:	20000038 	.word	0x20000038
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80038e4:	46c0      	nop			; (mov r8, r8)
 80038e6:	46c0      	nop			; (mov r8, r8)

080038e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80038ee:	f7ff ffc9 	bl	8003884 <ulSetInterruptMaskFromISR>
 80038f2:	0003      	movs	r3, r0
 80038f4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80038f6:	f7fe fd89 	bl	800240c <xTaskIncrementTick>
 80038fa:	1e03      	subs	r3, r0, #0
 80038fc:	d003      	beq.n	8003906 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <SysTick_Handler+0x30>)
 8003900:	2280      	movs	r2, #128	; 0x80
 8003902:	0552      	lsls	r2, r2, #21
 8003904:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	0018      	movs	r0, r3
 800390a:	f7ff ffc1 	bl	8003890 <vClearInterruptMaskFromISR>
}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	46bd      	mov	sp, r7
 8003912:	b002      	add	sp, #8
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	e000ed04 	.word	0xe000ed04

0800391c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
 8003920:	4b07      	ldr	r3, [pc, #28]	; (8003940 <prvSetupTimerInterrupt+0x24>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
 8003926:	4b07      	ldr	r3, [pc, #28]	; (8003944 <prvSetupTimerInterrupt+0x28>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <prvSetupTimerInterrupt+0x2c>)
 800392e:	4a07      	ldr	r2, [pc, #28]	; (800394c <prvSetupTimerInterrupt+0x30>)
 8003930:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003932:	4b03      	ldr	r3, [pc, #12]	; (8003940 <prvSetupTimerInterrupt+0x24>)
 8003934:	2207      	movs	r2, #7
 8003936:	601a      	str	r2, [r3, #0]
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	e000e010 	.word	0xe000e010
 8003944:	e000e018 	.word	0xe000e018
 8003948:	e000e014 	.word	0xe000e014
 800394c:	0000270f 	.word	0x0000270f

08003950 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2207      	movs	r2, #7
 8003960:	4013      	ands	r3, r2
 8003962:	d004      	beq.n	800396e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2207      	movs	r2, #7
 8003968:	4393      	bics	r3, r2
 800396a:	3308      	adds	r3, #8
 800396c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800396e:	f7fe fc93 	bl	8002298 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8003972:	4b16      	ldr	r3, [pc, #88]	; (80039cc <pvPortMalloc+0x7c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d105      	bne.n	8003986 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <pvPortMalloc+0x80>)
 800397c:	2207      	movs	r2, #7
 800397e:	4393      	bics	r3, r2
 8003980:	001a      	movs	r2, r3
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <pvPortMalloc+0x7c>)
 8003984:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <pvPortMalloc+0x84>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	18d3      	adds	r3, r2, r3
 800398e:	4a12      	ldr	r2, [pc, #72]	; (80039d8 <pvPortMalloc+0x88>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d813      	bhi.n	80039bc <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8003994:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <pvPortMalloc+0x84>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	18d2      	adds	r2, r2, r3
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <pvPortMalloc+0x84>)
 800399e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d90b      	bls.n	80039bc <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80039a4:	4b09      	ldr	r3, [pc, #36]	; (80039cc <pvPortMalloc+0x7c>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <pvPortMalloc+0x84>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	18d3      	adds	r3, r2, r3
 80039ae:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80039b0:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <pvPortMalloc+0x84>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	18d2      	adds	r2, r2, r3
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <pvPortMalloc+0x84>)
 80039ba:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039bc:	f7fe fc78 	bl	80022b0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80039c0:	68fb      	ldr	r3, [r7, #12]
}
 80039c2:	0018      	movs	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b004      	add	sp, #16
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	20001d7c 	.word	0x20001d7c
 80039d0:	20000180 	.word	0x20000180
 80039d4:	20001d78 	.word	0x20001d78
 80039d8:	00001bf7 	.word	0x00001bf7

080039dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <vPortFree+0x12>
 80039ea:	b672      	cpsid	i
 80039ec:	e7fe      	b.n	80039ec <vPortFree+0x10>
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b002      	add	sp, #8
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 80039fc:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <xPortGetFreeHeapSize+0x14>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a03      	ldr	r2, [pc, #12]	; (8003a10 <xPortGetFreeHeapSize+0x18>)
 8003a02:	1ad3      	subs	r3, r2, r3
}
 8003a04:	0018      	movs	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	20001d78 	.word	0x20001d78
 8003a10:	00001bf8 	.word	0x00001bf8

08003a14 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8003a1a:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <_DoInit+0x90>)
 8003a1c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2203      	movs	r2, #3
 8003a22:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2203      	movs	r2, #3
 8003a28:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a1e      	ldr	r2, [pc, #120]	; (8003aa8 <_DoInit+0x94>)
 8003a2e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a1e      	ldr	r2, [pc, #120]	; (8003aac <_DoInit+0x98>)
 8003a34:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2240      	movs	r2, #64	; 0x40
 8003a3a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a15      	ldr	r2, [pc, #84]	; (8003aa8 <_DoInit+0x94>)
 8003a52:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <_DoInit+0x9c>)
 8003a58:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	1dda      	adds	r2, r3, #7
 8003a76:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <_DoInit+0xa0>)
 8003a78:	0010      	movs	r0, r2
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	001a      	movs	r2, r3
 8003a80:	f003 f8d8 	bl	8006c34 <memcpy>
  strcpy(&p->acID[0], "SEGGER");
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <_DoInit+0xa4>)
 8003a88:	0010      	movs	r0, r2
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	2307      	movs	r3, #7
 8003a8e:	001a      	movs	r2, r3
 8003a90:	f003 f8d0 	bl	8006c34 <memcpy>
  p->acID[6] = ' ';
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	719a      	strb	r2, [r3, #6]
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b002      	add	sp, #8
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	20001d80 	.word	0x20001d80
 8003aa8:	08006c70 	.word	0x08006c70
 8003aac:	20001e28 	.word	0x20001e28
 8003ab0:	20001e68 	.word	0x20001e68
 8003ab4:	08006c7c 	.word	0x08006c7c
 8003ab8:	08006c80 	.word	0x08006c80

08003abc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  unsigned RdOff;
  unsigned WrOff;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d905      	bls.n	8003aec <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e007      	b.n	8003afc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	6939      	ldr	r1, [r7, #16]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	1acb      	subs	r3, r1, r3
 8003af6:	18d3      	adds	r3, r2, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	1ad2      	subs	r2, r2, r3
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d900      	bls.n	8003b0c <_WriteBlocking+0x50>
 8003b0a:	0013      	movs	r3, r2
 8003b0c:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d900      	bls.n	8003b18 <_WriteBlocking+0x5c>
 8003b16:	0013      	movs	r3, r2
 8003b18:	61fb      	str	r3, [r7, #28]
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	18d3      	adds	r3, r2, r3
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	0018      	movs	r0, r3
 8003b28:	f003 f884 	bl	8006c34 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	18d3      	adds	r3, r2, r3
 8003b32:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	18d3      	adds	r3, r2, r3
 8003b3a:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	18d3      	adds	r3, r2, r3
 8003b4a:	617b      	str	r3, [r7, #20]
    if (WrOff == pRing->SizeOfBuffer) {
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d101      	bne.n	8003b5a <_WriteBlocking+0x9e>
      WrOff = 0u;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1b5      	bne.n	8003ad2 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8003b66:	69bb      	ldr	r3, [r7, #24]
}
 8003b68:	0018      	movs	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b008      	add	sp, #32
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;

  WrOff = pRing->WrOff;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d90e      	bls.n	8003bb2 <_WriteNoCheck+0x42>
    //
    // All data fits before wrap around
    //
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	18d3      	adds	r3, r2, r3
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f003 f847 	bl	8006c34 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	18d2      	adds	r2, r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	60da      	str	r2, [r3, #12]
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    NumBytesAtOnce = NumBytes - Rem;
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
  }
}
 8003bb0:	e01a      	b.n	8003be8 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	617b      	str	r3, [r7, #20]
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	18d3      	adds	r3, r2, r3
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f003 f836 	bl	8006c34 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	617b      	str	r3, [r7, #20]
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6858      	ldr	r0, [r3, #4]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	18d3      	adds	r3, r2, r3
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	0019      	movs	r1, r3
 8003bde:	f003 f829 	bl	8006c34 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	60da      	str	r2, [r3, #12]
}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b008      	add	sp, #32
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d808      	bhi.n	8003c1e <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1ad2      	subs	r2, r2, r3
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	18d3      	adds	r3, r2, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	e004      	b.n	8003c28 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003c28:	697b      	ldr	r3, [r7, #20]
}
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b006      	add	sp, #24
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	; 0x28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  unsigned                RdOff;
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  //
  INIT();
 8003c40:	4b3c      	ldr	r3, [pc, #240]	; (8003d34 <SEGGER_RTT_ReadNoLock+0x100>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <SEGGER_RTT_ReadNoLock+0x18>
 8003c48:	f7ff fee4 	bl	8003a14 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	0013      	movs	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	189b      	adds	r3, r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	3360      	adds	r3, #96	; 0x60
 8003c58:	001a      	movs	r2, r3
 8003c5a:	4b36      	ldr	r3, [pc, #216]	; (8003d34 <SEGGER_RTT_ReadNoLock+0x100>)
 8003c5c:	18d3      	adds	r3, r2, r3
 8003c5e:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8003c70:	2300      	movs	r3, #0
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003c74:	6a3a      	ldr	r2, [r7, #32]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d92a      	bls.n	8003cd2 <SEGGER_RTT_ReadNoLock+0x9e>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d900      	bls.n	8003c90 <SEGGER_RTT_ReadNoLock+0x5c>
 8003c8e:	0013      	movs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	18d1      	adds	r1, r2, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f002 ffc8 	bl	8006c34 <memcpy>
    NumBytesRead += NumBytesRem;
 8003ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	18d3      	adds	r3, r2, r3
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	18d3      	adds	r3, r2, r3
 8003cb2:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003cbc:	6a3a      	ldr	r2, [r7, #32]
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	18d3      	adds	r3, r2, r3
 8003cc2:	623b      	str	r3, [r7, #32]
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	6a3a      	ldr	r2, [r7, #32]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d101      	bne.n	8003cd2 <SEGGER_RTT_ReadNoLock+0x9e>
      RdOff = 0u;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d900      	bls.n	8003ce4 <SEGGER_RTT_ReadNoLock+0xb0>
 8003ce2:	0013      	movs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d018      	beq.n	8003d1e <SEGGER_RTT_ReadNoLock+0xea>
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	18d1      	adds	r1, r2, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f002 ff9b 	bl	8006c34 <memcpy>
    NumBytesRead += NumBytesRem;
 8003cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	18d3      	adds	r3, r2, r3
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	18d3      	adds	r3, r2, r3
 8003d0c:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d16:	6a3a      	ldr	r2, [r7, #32]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	18d3      	adds	r3, r2, r3
 8003d1c:	623b      	str	r3, [r7, #32]
  }
  if (NumBytesRead) {
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <SEGGER_RTT_ReadNoLock+0xf6>
    pRing->RdOff = RdOff;
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	6a3a      	ldr	r2, [r7, #32]
 8003d28:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b00a      	add	sp, #40	; 0x28
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20001d80 	.word	0x20001d80

08003d38 <SEGGER_RTT_Read>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  unsigned NumBytesRead;
  //
  SEGGER_RTT_LOCK();
 8003d44:	f3ef 8310 	mrs	r3, PRIMASK
 8003d48:	2101      	movs	r1, #1
 8003d4a:	f381 8810 	msr	PRIMASK, r1
 8003d4e:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking read function
  //
  NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	0018      	movs	r0, r3
 8003d58:	f7ff ff6c 	bl	8003c34 <SEGGER_RTT_ReadNoLock>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	613b      	str	r3, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f383 8810 	msr	PRIMASK, r3
  //
  return NumBytesRead;
 8003d66:	693b      	ldr	r3, [r7, #16]
}
 8003d68:	0018      	movs	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b006      	add	sp, #24
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <SEGGER_RTT_WriteNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	0013      	movs	r3, r2
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	189b      	adds	r3, r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <SEGGER_RTT_WriteNoLock+0xac>)
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d02e      	beq.n	8003df8 <SEGGER_RTT_WriteNoLock+0x88>
 8003d9a:	d836      	bhi.n	8003e0a <SEGGER_RTT_WriteNoLock+0x9a>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <SEGGER_RTT_WriteNoLock+0x36>
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d016      	beq.n	8003dd2 <SEGGER_RTT_WriteNoLock+0x62>
 8003da4:	e031      	b.n	8003e0a <SEGGER_RTT_WriteNoLock+0x9a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7ff ff21 	bl	8003bf0 <_GetAvailWriteSpace>
 8003dae:	0003      	movs	r3, r0
 8003db0:	613b      	str	r3, [r7, #16]
    if (Avail < NumBytes) {
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d202      	bcs.n	8003dc0 <SEGGER_RTT_WriteNoLock+0x50>
      Status = 0u;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003dbe:	e027      	b.n	8003e10 <SEGGER_RTT_WriteNoLock+0xa0>
      Status = NumBytes;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	69b9      	ldr	r1, [r7, #24]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f7ff fed0 	bl	8003b70 <_WriteNoCheck>
    break;
 8003dd0:	e01e      	b.n	8003e10 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f7ff ff0b 	bl	8003bf0 <_GetAvailWriteSpace>
 8003dda:	0003      	movs	r3, r0
 8003ddc:	613b      	str	r3, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d900      	bls.n	8003de8 <SEGGER_RTT_WriteNoLock+0x78>
 8003de6:	0013      	movs	r3, r2
 8003de8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	69b9      	ldr	r1, [r7, #24]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7ff febd 	bl	8003b70 <_WriteNoCheck>
    break;
 8003df6:	e00b      	b.n	8003e10 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	69b9      	ldr	r1, [r7, #24]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f7ff fe5c 	bl	8003abc <_WriteBlocking>
 8003e04:	0003      	movs	r3, r0
 8003e06:	61fb      	str	r3, [r7, #28]
    break;
 8003e08:	e002      	b.n	8003e10 <SEGGER_RTT_WriteNoLock+0xa0>
  default:
    Status = 0u;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
    break;
 8003e0e:	46c0      	nop			; (mov r8, r8)
  }
  //
  // Finish up.
  //
  return Status;
 8003e10:	69fb      	ldr	r3, [r7, #28]
}
 8003e12:	0018      	movs	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b008      	add	sp, #32
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	20001d80 	.word	0x20001d80

08003e20 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8003e2c:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <SEGGER_RTT_Write+0x44>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <SEGGER_RTT_Write+0x18>
 8003e34:	f7ff fdee 	bl	8003a14 <_DoInit>
  SEGGER_RTT_LOCK();
 8003e38:	f3ef 8310 	mrs	r3, PRIMASK
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	f381 8810 	msr	PRIMASK, r1
 8003e42:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f7ff ff90 	bl	8003d70 <SEGGER_RTT_WriteNoLock>
 8003e50:	0003      	movs	r3, r0
 8003e52:	613b      	str	r3, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f383 8810 	msr	PRIMASK, r3
  //
  return Status;
 8003e5a:	693b      	ldr	r3, [r7, #16]
}
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b006      	add	sp, #24
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20001d80 	.word	0x20001d80

08003e68 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003e76:	4b2f      	ldr	r3, [pc, #188]	; (8003f34 <SEGGER_RTT_ConfigUpBuffer+0xcc>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8003e7e:	f7ff fdc9 	bl	8003a14 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8003e82:	4b2c      	ldr	r3, [pc, #176]	; (8003f34 <SEGGER_RTT_ConfigUpBuffer+0xcc>)
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	001a      	movs	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d24a      	bcs.n	8003f24 <SEGGER_RTT_ConfigUpBuffer+0xbc>
    SEGGER_RTT_LOCK();
 8003e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e92:	2101      	movs	r1, #1
 8003e94:	f381 8810 	msr	PRIMASK, r1
 8003e98:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d031      	beq.n	8003f04 <SEGGER_RTT_ConfigUpBuffer+0x9c>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8003ea0:	4924      	ldr	r1, [pc, #144]	; (8003f34 <SEGGER_RTT_ConfigUpBuffer+0xcc>)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	0013      	movs	r3, r2
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	189b      	adds	r3, r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	505a      	str	r2, [r3, r1]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003eb2:	4920      	ldr	r1, [pc, #128]	; (8003f34 <SEGGER_RTT_ConfigUpBuffer+0xcc>)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	0013      	movs	r3, r2
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	189b      	adds	r3, r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	18cb      	adds	r3, r1, r3
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003ec8:	491a      	ldr	r1, [pc, #104]	; (8003f34 <SEGGER_RTT_ConfigUpBuffer+0xcc>)
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	0013      	movs	r3, r2
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	189b      	adds	r3, r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	18cb      	adds	r3, r1, r3
 8003ed6:	3320      	adds	r3, #32
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8003edc:	4915      	ldr	r1, [pc, #84]	; (8003f34 <SEGGER_RTT_ConfigUpBuffer+0xcc>)
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	0013      	movs	r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	189b      	adds	r3, r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	18cb      	adds	r3, r1, r3
 8003eea:	3328      	adds	r3, #40	; 0x28
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8003ef0:	4910      	ldr	r1, [pc, #64]	; (8003f34 <SEGGER_RTT_ConfigUpBuffer+0xcc>)
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	0013      	movs	r3, r2
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	189b      	adds	r3, r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	18cb      	adds	r3, r1, r3
 8003efe:	3324      	adds	r3, #36	; 0x24
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8003f04:	490b      	ldr	r1, [pc, #44]	; (8003f34 <SEGGER_RTT_ConfigUpBuffer+0xcc>)
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	0013      	movs	r3, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	189b      	adds	r3, r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	18cb      	adds	r3, r1, r3
 8003f12:	332c      	adds	r3, #44	; 0x2c
 8003f14:	6a3a      	ldr	r2, [r7, #32]
 8003f16:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	e002      	b.n	8003f2a <SEGGER_RTT_ConfigUpBuffer+0xc2>
  } else {
    r = -1;
 8003f24:	2301      	movs	r3, #1
 8003f26:	425b      	negs	r3, r3
 8003f28:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003f2a:	697b      	ldr	r3, [r7, #20]
}
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b006      	add	sp, #24
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20001d80 	.word	0x20001d80

08003f38 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003f46:	4b2f      	ldr	r3, [pc, #188]	; (8004004 <SEGGER_RTT_ConfigDownBuffer+0xcc>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8003f4e:	f7ff fd61 	bl	8003a14 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8003f52:	4b2c      	ldr	r3, [pc, #176]	; (8004004 <SEGGER_RTT_ConfigDownBuffer+0xcc>)
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	001a      	movs	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d24a      	bcs.n	8003ff4 <SEGGER_RTT_ConfigDownBuffer+0xbc>
    SEGGER_RTT_LOCK();
 8003f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f62:	2101      	movs	r1, #1
 8003f64:	f381 8810 	msr	PRIMASK, r1
 8003f68:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d031      	beq.n	8003fd4 <SEGGER_RTT_ConfigDownBuffer+0x9c>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8003f70:	4924      	ldr	r1, [pc, #144]	; (8004004 <SEGGER_RTT_ConfigDownBuffer+0xcc>)
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	0013      	movs	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	189b      	adds	r3, r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	18cb      	adds	r3, r1, r3
 8003f7e:	3360      	adds	r3, #96	; 0x60
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003f84:	491f      	ldr	r1, [pc, #124]	; (8004004 <SEGGER_RTT_ConfigDownBuffer+0xcc>)
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	0013      	movs	r3, r2
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	189b      	adds	r3, r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	18cb      	adds	r3, r1, r3
 8003f92:	3364      	adds	r3, #100	; 0x64
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003f98:	491a      	ldr	r1, [pc, #104]	; (8004004 <SEGGER_RTT_ConfigDownBuffer+0xcc>)
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	0013      	movs	r3, r2
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	189b      	adds	r3, r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	18cb      	adds	r3, r1, r3
 8003fa6:	3368      	adds	r3, #104	; 0x68
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8003fac:	4915      	ldr	r1, [pc, #84]	; (8004004 <SEGGER_RTT_ConfigDownBuffer+0xcc>)
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	0013      	movs	r3, r2
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	189b      	adds	r3, r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	18cb      	adds	r3, r1, r3
 8003fba:	3370      	adds	r3, #112	; 0x70
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8003fc0:	4910      	ldr	r1, [pc, #64]	; (8004004 <SEGGER_RTT_ConfigDownBuffer+0xcc>)
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	0013      	movs	r3, r2
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	189b      	adds	r3, r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	18cb      	adds	r3, r1, r3
 8003fce:	336c      	adds	r3, #108	; 0x6c
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8003fd4:	490b      	ldr	r1, [pc, #44]	; (8004004 <SEGGER_RTT_ConfigDownBuffer+0xcc>)
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	0013      	movs	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	189b      	adds	r3, r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	18cb      	adds	r3, r1, r3
 8003fe2:	3374      	adds	r3, #116	; 0x74
 8003fe4:	6a3a      	ldr	r2, [r7, #32]
 8003fe6:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	e002      	b.n	8003ffa <SEGGER_RTT_ConfigDownBuffer+0xc2>
  } else {
    r = -1;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	425b      	negs	r3, r3
 8003ff8:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003ffa:	697b      	ldr	r3, [r7, #20]
}
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b006      	add	sp, #24
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20001d80 	.word	0x20001d80

08004008 <readFromRTT>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1)
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

int32_t readFromRTT(void* ptrData, uint32_t size, int32_t* ptrBytesRead)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
	uint32_t bytesRead = 0; 
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
	
	if (SEGGER_RTT_HASDATA(TRC_CFG_RTT_DOWN_BUFFER_INDEX))
 8004018:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <readFromRTT+0x48>)
 800401a:	2284      	movs	r2, #132	; 0x84
 800401c:	589a      	ldr	r2, [r3, r2]
 800401e:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <readFromRTT+0x48>)
 8004020:	2188      	movs	r1, #136	; 0x88
 8004022:	585b      	ldr	r3, [r3, r1]
 8004024:	429a      	cmp	r2, r3
 8004026:	d00d      	beq.n	8004044 <readFromRTT+0x3c>
	{
		bytesRead = SEGGER_RTT_Read((TRC_CFG_RTT_DOWN_BUFFER_INDEX), (char*)ptrData, size);
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	0019      	movs	r1, r3
 800402e:	2001      	movs	r0, #1
 8004030:	f7ff fe82 	bl	8003d38 <SEGGER_RTT_Read>
 8004034:	0003      	movs	r3, r0
 8004036:	617b      	str	r3, [r7, #20]
	
		if (ptrBytesRead != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <readFromRTT+0x3c>
			*ptrBytesRead = (int32_t)bytesRead;
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	601a      	str	r2, [r3, #0]

	}

	return 0;
 8004044:	2300      	movs	r3, #0
}
 8004046:	0018      	movs	r0, r3
 8004048:	46bd      	mov	sp, r7
 800404a:	b006      	add	sp, #24
 800404c:	bd80      	pop	{r7, pc}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	20001d80 	.word	0x20001d80

08004054 <writeToRTT>:

int32_t writeToRTT(void* ptrData, uint32_t size, int32_t* ptrBytesWritten)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
	uint32_t bytesWritten = SEGGER_RTT_Write((TRC_CFG_RTT_UP_BUFFER_INDEX), (const char*)ptrData, size);
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	0019      	movs	r1, r3
 8004066:	2001      	movs	r0, #1
 8004068:	f7ff feda 	bl	8003e20 <SEGGER_RTT_Write>
 800406c:	0003      	movs	r3, r0
 800406e:	617b      	str	r3, [r7, #20]
	
	if (ptrBytesWritten != NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <writeToRTT+0x28>
		*ptrBytesWritten = (int32_t)bytesWritten;
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	601a      	str	r2, [r3, #0]

	return 0;
 800407c:	2300      	movs	r3, #0
}
 800407e:	0018      	movs	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	b006      	add	sp, #24
 8004084:	bd80      	pop	{r7, pc}

08004086 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	0018      	movs	r0, r3
 8004092:	f7fd fcdf 	bl	8001a54 <uxQueueGetQueueNumber>
 8004096:	0003      	movs	r3, r0
}
 8004098:	0018      	movs	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	b002      	add	sp, #8
 800409e:	bd80      	pop	{r7, pc}

080040a0 <prvTraceGetTaskNumberHigh16>:
{
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
}

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	0018      	movs	r0, r3
 80040ac:	f7fe fcca 	bl	8002a44 <uxTaskGetTaskNumber>
 80040b0:	0003      	movs	r3, r0
 80040b2:	0c1b      	lsrs	r3, r3, #16
 80040b4:	b29b      	uxth	r3, r3
}
 80040b6:	0018      	movs	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b002      	add	sp, #8
 80040bc:	bd80      	pop	{r7, pc}

080040be <prvTraceSetTaskNumberHigh16>:
{
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
}

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	000a      	movs	r2, r1
 80040c8:	1cbb      	adds	r3, r7, #2
 80040ca:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	0018      	movs	r0, r3
 80040d0:	f7fe fcb8 	bl	8002a44 <uxTaskGetTaskNumber>
 80040d4:	0003      	movs	r3, r0
 80040d6:	041b      	lsls	r3, r3, #16
 80040d8:	0c1a      	lsrs	r2, r3, #16
 80040da:	1cbb      	adds	r3, r7, #2
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	041b      	lsls	r3, r3, #16
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	0011      	movs	r1, r2
 80040e6:	0018      	movs	r0, r3
 80040e8:	f7fe fcc0 	bl	8002a6c <vTaskSetTaskNumber>
}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b002      	add	sp, #8
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <prvTraceGetQueueNumberHigh16>:
{
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
}

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	0018      	movs	r0, r3
 8004100:	f7ff ffc1 	bl	8004086 <prvTraceGetQueueNumber>
 8004104:	0003      	movs	r3, r0
 8004106:	0c1b      	lsrs	r3, r3, #16
 8004108:	b29b      	uxth	r3, r3
}
 800410a:	0018      	movs	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	b002      	add	sp, #8
 8004110:	bd80      	pop	{r7, pc}

08004112 <prvTraceSetQueueNumberHigh16>:
{
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
}

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	000a      	movs	r2, r1
 800411c:	1cbb      	adds	r3, r7, #2
 800411e:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	0018      	movs	r0, r3
 8004124:	f7ff ffaf 	bl	8004086 <prvTraceGetQueueNumber>
 8004128:	0003      	movs	r3, r0
 800412a:	041b      	lsls	r3, r3, #16
 800412c:	0c1a      	lsrs	r2, r3, #16
 800412e:	1cbb      	adds	r3, r7, #2
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	041b      	lsls	r3, r3, #16
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	0011      	movs	r1, r2
 800413a:	0018      	movs	r0, r3
 800413c:	f7fd fc94 	bl	8001a68 <vQueueSetQueueNumber>
}
 8004140:	46c0      	nop			; (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	b002      	add	sp, #8
 8004146:	bd80      	pop	{r7, pc}

08004148 <prvTraceGetEventGroupNumberHigh16>:
{
	return TRACE_GET_LOW16(uxEventGroupGetNumber(handle));
}

uint16_t prvTraceGetEventGroupNumberHigh16(void* handle)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxEventGroupGetNumber(handle));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	0018      	movs	r0, r3
 8004154:	f7fc fb4b 	bl	80007ee <uxEventGroupGetNumber>
 8004158:	0003      	movs	r3, r0
 800415a:	0c1b      	lsrs	r3, r3, #16
 800415c:	b29b      	uxth	r3, r3
}
 800415e:	0018      	movs	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	b002      	add	sp, #8
 8004164:	bd80      	pop	{r7, pc}

08004166 <prvTraceSetEventGroupNumberHigh16>:
{
	vEventGroupSetNumber(handle, TRACE_SET_LOW16(uxEventGroupGetNumber(handle), value));
}

void prvTraceSetEventGroupNumberHigh16(void* handle, uint16_t value)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	000a      	movs	r2, r1
 8004170:	1cbb      	adds	r3, r7, #2
 8004172:	801a      	strh	r2, [r3, #0]
	vEventGroupSetNumber(handle, TRACE_SET_HIGH16(uxEventGroupGetNumber(handle), value));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	0018      	movs	r0, r3
 8004178:	f7fc fb39 	bl	80007ee <uxEventGroupGetNumber>
 800417c:	0003      	movs	r3, r0
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	0c1a      	lsrs	r2, r3, #16
 8004182:	1cbb      	adds	r3, r7, #2
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	0011      	movs	r1, r2
 800418e:	0018      	movs	r0, r3
 8004190:	f7fc fb41 	bl	8000816 <vEventGroupSetNumber>
}
 8004194:	46c0      	nop			; (mov r8, r8)
 8004196:	46bd      	mov	sp, r7
 8004198:	b002      	add	sp, #8
 800419a:	bd80      	pop	{r7, pc}

0800419c <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { { NULL } };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	int i;
	int foundEmptySlot = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60bb      	str	r3, [r7, #8]

	// find an empty slot
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	e018      	b.n	80041e0 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
 80041ae:	4b14      	ldr	r3, [pc, #80]	; (8004200 <prvAddTaskToStackMonitor+0x64>)
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	00d2      	lsls	r2, r2, #3
 80041b4:	58d3      	ldr	r3, [r2, r3]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10f      	bne.n	80041da <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
 80041ba:	4b11      	ldr	r3, [pc, #68]	; (8004200 <prvAddTaskToStackMonitor+0x64>)
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	00d2      	lsls	r2, r2, #3
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
 80041c4:	4a0e      	ldr	r2, [pc, #56]	; (8004200 <prvAddTaskToStackMonitor+0x64>)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	18d3      	adds	r3, r2, r3
 80041cc:	3304      	adds	r3, #4
 80041ce:	2201      	movs	r2, #1
 80041d0:	4252      	negs	r2, r2
 80041d2:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
 80041d4:	2301      	movs	r3, #1
 80041d6:	60bb      	str	r3, [r7, #8]
			break;
 80041d8:	e005      	b.n	80041e6 <prvAddTaskToStackMonitor+0x4a>
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3301      	adds	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b09      	cmp	r3, #9
 80041e4:	dde3      	ble.n	80041ae <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d104      	bne.n	80041f6 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
 80041ec:	4b05      	ldr	r3, [pc, #20]	; (8004204 <prvAddTaskToStackMonitor+0x68>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	4b04      	ldr	r3, [pc, #16]	; (8004204 <prvAddTaskToStackMonitor+0x68>)
 80041f4:	601a      	str	r2, [r3, #0]
	}
}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b004      	add	sp, #16
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	20001e7c 	.word	0x20001e7c
 8004204:	20001ecc 	.word	0x20001ecc

08004208 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
 8004212:	4b28      	ldr	r3, [pc, #160]	; (80042b4 <prvReportStackUsage+0xac>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
 8004218:	4b26      	ldr	r3, [pc, #152]	; (80042b4 <prvReportStackUsage+0xac>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4b26      	ldr	r3, [pc, #152]	; (80042b8 <prvReportStackUsage+0xb0>)
 800421e:	00d2      	lsls	r2, r2, #3
 8004220:	58d3      	ldr	r3, [r2, r3]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d02f      	beq.n	8004286 <prvReportStackUsage+0x7e>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
 8004226:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <prvReportStackUsage+0xac>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <prvReportStackUsage+0xb0>)
 800422c:	00d2      	lsls	r2, r2, #3
 800422e:	58d3      	ldr	r3, [r2, r3]
 8004230:	0018      	movs	r0, r3
 8004232:	f7fe fcc9 	bl	8002bc8 <uxTaskGetStackHighWaterMark>
 8004236:	0003      	movs	r3, r0
 8004238:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
 800423a:	4b1e      	ldr	r3, [pc, #120]	; (80042b4 <prvReportStackUsage+0xac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a1e      	ldr	r2, [pc, #120]	; (80042b8 <prvReportStackUsage+0xb0>)
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	18d3      	adds	r3, r2, r3
 8004244:	3304      	adds	r3, #4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	429a      	cmp	r2, r3
 800424c:	d207      	bcs.n	800425e <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
 800424e:	4b19      	ldr	r3, [pc, #100]	; (80042b4 <prvReportStackUsage+0xac>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a19      	ldr	r2, [pc, #100]	; (80042b8 <prvReportStackUsage+0xb0>)
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	18d3      	adds	r3, r2, r3
 8004258:	3304      	adds	r3, #4
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
 800425e:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <prvReportStackUsage+0xac>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <prvReportStackUsage+0xb0>)
 8004264:	00d2      	lsls	r2, r2, #3
 8004266:	58d3      	ldr	r3, [r2, r3]
 8004268:	0019      	movs	r1, r3
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <prvReportStackUsage+0xac>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <prvReportStackUsage+0xb0>)
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	18d3      	adds	r3, r2, r3
 8004274:	3304      	adds	r3, #4
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	001a      	movs	r2, r3
 800427a:	20ea      	movs	r0, #234	; 0xea
 800427c:	f000 fd7c 	bl	8004d78 <prvTraceStoreEvent2>
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3301      	adds	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <prvReportStackUsage+0xac>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3301      	adds	r3, #1
 800428c:	210a      	movs	r1, #10
 800428e:	0018      	movs	r0, r3
 8004290:	f7fc f8aa 	bl	80003e8 <__aeabi_idivmod>
 8004294:	000b      	movs	r3, r1
 8004296:	001a      	movs	r2, r3
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <prvReportStackUsage+0xac>)
 800429a:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	dc04      	bgt.n	80042ac <prvReportStackUsage+0xa4>
 80042a2:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <prvReportStackUsage+0xac>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d1b5      	bne.n	8004218 <prvReportStackUsage+0x10>
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b004      	add	sp, #16
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20003280 	.word	0x20003280
 80042b8:	20001e7c 	.word	0x20001e7c

080042bc <vTraceEnable>:
 * Function that enables the tracing and creates the control task. It will halt
 * execution until a Start command has been received if haltUntilStart is true.
 *
 ******************************************************************************/
void vTraceEnable(int startOption)
{
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b089      	sub	sp, #36	; 0x24
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	6078      	str	r0, [r7, #4]
	int32_t bytes = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]
	int32_t status;
	extern uint32_t RecorderEnabled;
	TracealyzerCommandType msg;

	/* Only do this first time...*/
	if (HandleTzCtrl == NULL)
 80042c8:	4b34      	ldr	r3, [pc, #208]	; (800439c <vTraceEnable+0xe0>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d128      	bne.n	8004322 <vTraceEnable+0x66>
	{
		TRC_STREAM_PORT_INIT();
 80042d0:	4833      	ldr	r0, [pc, #204]	; (80043a0 <vTraceEnable+0xe4>)
 80042d2:	4a34      	ldr	r2, [pc, #208]	; (80043a4 <vTraceEnable+0xe8>)
 80042d4:	4934      	ldr	r1, [pc, #208]	; (80043a8 <vTraceEnable+0xec>)
 80042d6:	2300      	movs	r3, #0
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	0003      	movs	r3, r0
 80042dc:	2001      	movs	r0, #1
 80042de:	f7ff fdc3 	bl	8003e68 <SEGGER_RTT_ConfigUpBuffer>
 80042e2:	4a32      	ldr	r2, [pc, #200]	; (80043ac <vTraceEnable+0xf0>)
 80042e4:	4932      	ldr	r1, [pc, #200]	; (80043b0 <vTraceEnable+0xf4>)
 80042e6:	2300      	movs	r3, #0
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	2320      	movs	r3, #32
 80042ec:	2001      	movs	r0, #1
 80042ee:	f7ff fe23 	bl	8003f38 <SEGGER_RTT_ConfigDownBuffer>
		* This is translated in Tracealyzer and shown as the full name,
		* "Warnings from Recorder".
		*
		* Note: Requires that TRC_CFG_INCLUDE_USER_EVENTS is 1. */
		
		trcWarningChannel = xTraceRegisterString("#WFR"); 
 80042f2:	4b30      	ldr	r3, [pc, #192]	; (80043b4 <vTraceEnable+0xf8>)
 80042f4:	0018      	movs	r0, r3
 80042f6:	f000 f951 	bl	800459c <xTraceRegisterString>
 80042fa:	0002      	movs	r2, r0
 80042fc:	4b2e      	ldr	r3, [pc, #184]	; (80043b8 <vTraceEnable+0xfc>)
 80042fe:	601a      	str	r2, [r3, #0]

		/* Creates the TzCtrl task - receives trace commands (start, stop, ...) */
		#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
		#else
		xTaskCreate( TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl );
 8004300:	492b      	ldr	r1, [pc, #172]	; (80043b0 <vTraceEnable+0xf4>)
 8004302:	482e      	ldr	r0, [pc, #184]	; (80043bc <vTraceEnable+0x100>)
 8004304:	4b25      	ldr	r3, [pc, #148]	; (800439c <vTraceEnable+0xe0>)
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	2301      	movs	r3, #1
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	2300      	movs	r3, #0
 800430e:	228c      	movs	r2, #140	; 0x8c
 8004310:	f7fd fd1c 	bl	8001d4c <xTaskCreate>
		#endif

		if (HandleTzCtrl == NULL)
 8004314:	4b21      	ldr	r3, [pc, #132]	; (800439c <vTraceEnable+0xe0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d102      	bne.n	8004322 <vTraceEnable+0x66>
		{
			prvTraceError(PSF_ERROR_TZCTRLTASK_NOT_CREATED);
 800431c:	2005      	movs	r0, #5
 800431e:	f001 f9a3 	bl	8005668 <prvTraceError>
		}
	}

	if (startOption == TRC_START_AWAIT_HOST)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d127      	bne.n	8004378 <vTraceEnable+0xbc>
	{
		/* We keep trying to read commands until the recorder has been started */
		do
		{
			bytes = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	613b      	str	r3, [r7, #16]
			
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 800432c:	2310      	movs	r3, #16
 800432e:	18fa      	adds	r2, r7, r3
 8004330:	2308      	movs	r3, #8
 8004332:	18fb      	adds	r3, r7, r3
 8004334:	2108      	movs	r1, #8
 8004336:	0018      	movs	r0, r3
 8004338:	f7ff fe66 	bl	8004008 <readFromRTT>
 800433c:	0003      	movs	r3, r0
 800433e:	617b      	str	r3, [r7, #20]
			
			if (status != 0)
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <vTraceEnable+0x90>
			{
				prvTraceWarning(PSF_WARNING_STREAM_PORT_READ);
 8004346:	200b      	movs	r0, #11
 8004348:	f001 f960 	bl	800560c <prvTraceWarning>
			}

			if ((status == 0) && (bytes == sizeof(TracealyzerCommandType)))
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10d      	bne.n	800436e <vTraceEnable+0xb2>
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b08      	cmp	r3, #8
 8004356:	d10a      	bne.n	800436e <vTraceEnable+0xb2>
			{
				if (prvIsValidCommand(&msg))
 8004358:	2408      	movs	r4, #8
 800435a:	193b      	adds	r3, r7, r4
 800435c:	0018      	movs	r0, r3
 800435e:	f001 f8fd 	bl	800555c <prvIsValidCommand>
 8004362:	1e03      	subs	r3, r0, #0
 8004364:	d003      	beq.n	800436e <vTraceEnable+0xb2>
					{
						/* On start, init and reset the timestamping */
						TRC_PORT_SPECIFIC_INIT();
					}
					
					prvProcessCommand(&msg);
 8004366:	193b      	adds	r3, r7, r4
 8004368:	0018      	movs	r0, r3
 800436a:	f001 f93b 	bl	80055e4 <prvProcessCommand>
				}
			}
		}
		while (RecorderEnabled == 0);
 800436e:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <vTraceEnable+0x104>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0d8      	beq.n	8004328 <vTraceEnable+0x6c>
	else
	{
		/* On TRC_INIT */
		TRC_PORT_SPECIFIC_INIT();
	}
}
 8004376:	e00d      	b.n	8004394 <vTraceEnable+0xd8>
	else if (startOption == TRC_START)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10a      	bne.n	8004394 <vTraceEnable+0xd8>
		msg.cmdCode = CMD_SET_ACTIVE;
 800437e:	2108      	movs	r1, #8
 8004380:	187b      	adds	r3, r7, r1
 8004382:	2201      	movs	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
		msg.param1 = 1;
 8004386:	187b      	adds	r3, r7, r1
 8004388:	2201      	movs	r2, #1
 800438a:	705a      	strb	r2, [r3, #1]
		prvProcessCommand(&msg);
 800438c:	187b      	adds	r3, r7, r1
 800438e:	0018      	movs	r0, r3
 8004390:	f001 f928 	bl	80055e4 <prvProcessCommand>
}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	b007      	add	sp, #28
 800439a:	bd90      	pop	{r4, r7, pc}
 800439c:	20001e78 	.word	0x20001e78
 80043a0:	00001388 	.word	0x00001388
 80043a4:	20001ed8 	.word	0x20001ed8
 80043a8:	08006c88 	.word	0x08006c88
 80043ac:	20003260 	.word	0x20003260
 80043b0:	08006c90 	.word	0x08006c90
 80043b4:	08006c98 	.word	0x08006c98
 80043b8:	20001ed4 	.word	0x20001ed4
 80043bc:	080044e1 	.word	0x080044e1
 80043c0:	200038dc 	.word	0x200038dc

080043c4 <vTraceSetQueueName>:
 * Parameter name: the name to set (const string literal)
 *
 * Sets a name for Queue objects for display in Tracealyzer.
 ******************************************************************************/
void vTraceSetQueueName(void* object, const char* name)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
	vTraceStoreKernelObjectName(object, name);
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	0011      	movs	r1, r2
 80043d4:	0018      	movs	r0, r3
 80043d6:	f000 f8bc 	bl	8004552 <vTraceStoreKernelObjectName>
}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	46bd      	mov	sp, r7
 80043de:	b002      	add	sp, #8
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <vTraceSetSemaphoreName>:
 * Parameter name: the name to set (const string literal)
 *
 * Sets a name for Semaphore objects for display in Tracealyzer.
 ******************************************************************************/
void vTraceSetSemaphoreName(void* object, const char* name)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
	vTraceStoreKernelObjectName(object, name);
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	0011      	movs	r1, r2
 80043f2:	0018      	movs	r0, r3
 80043f4:	f000 f8ad 	bl	8004552 <vTraceStoreKernelObjectName>
}
 80043f8:	46c0      	nop			; (mov r8, r8)
 80043fa:	46bd      	mov	sp, r7
 80043fc:	b002      	add	sp, #8
 80043fe:	bd80      	pop	{r7, pc}

08004400 <vTraceSetMutexName>:
 * Parameter name: the name to set (const string literal)
 *
 * Sets a name for Mutex objects for display in Tracealyzer.
 ******************************************************************************/
void vTraceSetMutexName(void* object, const char* name)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
	vTraceStoreKernelObjectName(object, name);
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	0011      	movs	r1, r2
 8004410:	0018      	movs	r0, r3
 8004412:	f000 f89e 	bl	8004552 <vTraceStoreKernelObjectName>
}
 8004416:	46c0      	nop			; (mov r8, r8)
 8004418:	46bd      	mov	sp, r7
 800441a:	b002      	add	sp, #8
 800441c:	bd80      	pop	{r7, pc}

0800441e <prvTraceGetCurrentTaskHandle>:
 *
 * Function that returns the handle to the currently executing task.
 *
 ******************************************************************************/
void* prvTraceGetCurrentTaskHandle(void)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8004422:	f7fe fc1d 	bl	8002c60 <xTaskGetCurrentTaskHandle>
 8004426:	0003      	movs	r3, r0
}
 8004428:	0018      	movs	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <prvIsNewTCB>:
 *
 * Tells if this task is already executing, or if there has been a task-switch.
 * Assumed to be called within a trace hook in kernel context.
 ******************************************************************************/
uint32_t prvIsNewTCB(void* pNewTCB)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
	if (pCurrentTCB != pNewTCB)
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <prvIsNewTCB+0x28>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	429a      	cmp	r2, r3
 8004440:	d004      	beq.n	800444c <prvIsNewTCB+0x1c>
	{
		pCurrentTCB = pNewTCB;
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <prvIsNewTCB+0x28>)
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	601a      	str	r2, [r3, #0]
		return 1;
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <prvIsNewTCB+0x1e>
	}
	return 0;
 800444c:	2300      	movs	r3, #0
}
 800444e:	0018      	movs	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	b002      	add	sp, #8
 8004454:	bd80      	pop	{r7, pc}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	20001ed0 	.word	0x20001ed0

0800445c <prvCheckRecorderStatus>:
 * Called by TzCtrl task periodically (every 100 ms - seems reasonable).
 * Checks a number of diagnostic variables and give warnings as user events,
 * in most cases including a suggested solution.
 ******************************************************************************/
static void prvCheckRecorderStatus(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	if (tasksNotIncluded > 0)
 8004460:	4b1a      	ldr	r3, [pc, #104]	; (80044cc <prvCheckRecorderStatus+0x70>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	dd05      	ble.n	8004474 <prvCheckRecorderStatus+0x18>
	{
		prvTraceWarning(PSF_WARNING_STACKMON_NO_SLOTS);
 8004468:	200e      	movs	r0, #14
 800446a:	f001 f8cf 	bl	800560c <prvTraceWarning>
		tasksNotIncluded = 0;
 800446e:	4b17      	ldr	r3, [pc, #92]	; (80044cc <prvCheckRecorderStatus+0x70>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (NoRoomForSymbol > 0)
 8004474:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <prvCheckRecorderStatus+0x74>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <prvCheckRecorderStatus+0x2c>
	{
		prvTraceWarning(PSF_WARNING_SYMBOL_TABLE_SLOTS);
 800447c:	2007      	movs	r0, #7
 800447e:	f001 f8c5 	bl	800560c <prvTraceWarning>
		NoRoomForSymbol = 0;
 8004482:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <prvCheckRecorderStatus+0x74>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
	}

	if (NoRoomForObjectData > 0)
 8004488:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <prvCheckRecorderStatus+0x78>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <prvCheckRecorderStatus+0x40>
	{
		prvTraceWarning(PSF_WARNING_OBJECT_DATA_SLOTS);
 8004490:	2009      	movs	r0, #9
 8004492:	f001 f8bb 	bl	800560c <prvTraceWarning>
		NoRoomForObjectData = 0;
 8004496:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <prvCheckRecorderStatus+0x78>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
	}

	if (LongestSymbolName > (TRC_CFG_SYMBOL_MAX_LENGTH))
 800449c:	4b0e      	ldr	r3, [pc, #56]	; (80044d8 <prvCheckRecorderStatus+0x7c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b19      	cmp	r3, #25
 80044a2:	d905      	bls.n	80044b0 <prvCheckRecorderStatus+0x54>
	{
		prvTraceWarning(PSF_WARNING_SYMBOL_MAX_LENGTH);
 80044a4:	2008      	movs	r0, #8
 80044a6:	f001 f8b1 	bl	800560c <prvTraceWarning>
		LongestSymbolName = 0;
 80044aa:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <prvCheckRecorderStatus+0x7c>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
	}

	if (MaxBytesTruncated > 0)
 80044b0:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <prvCheckRecorderStatus+0x80>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <prvCheckRecorderStatus+0x68>
	{
		prvTraceWarning(PSF_WARNING_STRING_TOO_LONG);
 80044b8:	200a      	movs	r0, #10
 80044ba:	f001 f8a7 	bl	800560c <prvTraceWarning>
		MaxBytesTruncated = 0;
 80044be:	4b07      	ldr	r3, [pc, #28]	; (80044dc <prvCheckRecorderStatus+0x80>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
	}
}
 80044c4:	46c0      	nop			; (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	20001ecc 	.word	0x20001ecc
 80044d0:	200038ec 	.word	0x200038ec
 80044d4:	200038f0 	.word	0x200038f0
 80044d8:	200038f4 	.word	0x200038f4
 80044dc:	200038f8 	.word	0x200038f8

080044e0 <TzCtrl>:
 * Task for sending the trace data from the internal buffer to the stream 
 * interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
 * receiving commands from Tracealyzer. Also does some diagnostics.
 ******************************************************************************/
static portTASK_FUNCTION( TzCtrl, pvParameters )
{
 80044e0:	b590      	push	{r4, r7, lr}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	TracealyzerCommandType msg;
	int32_t bytes = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60bb      	str	r3, [r7, #8]
	int32_t status = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
	while (1)
	{
		do
		{
			/* Listen for new commands */
			bytes = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60bb      	str	r3, [r7, #8]
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 80044f4:	2308      	movs	r3, #8
 80044f6:	18fa      	adds	r2, r7, r3
 80044f8:	230c      	movs	r3, #12
 80044fa:	18fb      	adds	r3, r7, r3
 80044fc:	2108      	movs	r1, #8
 80044fe:	0018      	movs	r0, r3
 8004500:	f7ff fd82 	bl	8004008 <readFromRTT>
 8004504:	0003      	movs	r3, r0
 8004506:	617b      	str	r3, [r7, #20]

			if (status != 0)
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <TzCtrl+0x32>
			{
				/* The connection has failed, stop tracing */
				vTraceStop();
 800450e:	f000 f86c 	bl	80045ea <vTraceStop>
			}

			if ((status == 0) && (bytes == sizeof(TracealyzerCommandType)))
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10d      	bne.n	8004534 <TzCtrl+0x54>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b08      	cmp	r3, #8
 800451c:	d10a      	bne.n	8004534 <TzCtrl+0x54>
			{
				if (prvIsValidCommand(&msg))
 800451e:	240c      	movs	r4, #12
 8004520:	193b      	adds	r3, r7, r4
 8004522:	0018      	movs	r0, r3
 8004524:	f001 f81a 	bl	800555c <prvIsValidCommand>
 8004528:	1e03      	subs	r3, r0, #0
 800452a:	d003      	beq.n	8004534 <TzCtrl+0x54>
				{
					prvProcessCommand(&msg); /* Start or Stop currently... */
 800452c:	193b      	adds	r3, r7, r4
 800452e:	0018      	movs	r0, r3
 8004530:	f001 f858 	bl	80055e4 <prvProcessCommand>
#endif			
			
		/* If there was data sent or received (bytes != 0), loop around and repeat, if there is more data to send or receive.
		Otherwise, step out of this loop and sleep for a while. */		
		
		} while (bytes != 0);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1da      	bne.n	80044f0 <TzCtrl+0x10>

		if (xTraceIsRecordingEnabled())
 800453a:	f000 f85f 	bl	80045fc <xTraceIsRecordingEnabled>
 800453e:	1e03      	subs	r3, r0, #0
 8004540:	d003      	beq.n	800454a <TzCtrl+0x6a>
		{
			prvCheckRecorderStatus();
 8004542:	f7ff ff8b 	bl	800445c <prvCheckRecorderStatus>
			prvReportStackUsage();
 8004546:	f7ff fe5f 	bl	8004208 <prvReportStackUsage>
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 800454a:	200a      	movs	r0, #10
 800454c:	f7fd fe02 	bl	8002154 <vTaskDelay>
	while (1)
 8004550:	e7ce      	b.n	80044f0 <TzCtrl+0x10>

08004552 <vTraceStoreKernelObjectName>:
 * Parameter name: the name to set (const string literal)
 *
 * Sets a name for a kernel object for display in Tracealyzer.
 ******************************************************************************/
void vTraceStoreKernelObjectName(void* object, const char* name)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	6039      	str	r1, [r7, #0]
	uint16_t eventID = PSF_EVENT_OBJ_NAME;
 800455c:	210e      	movs	r1, #14
 800455e:	187b      	adds	r3, r7, r1
 8004560:	2203      	movs	r2, #3
 8004562:	801a      	strh	r2, [r3, #0]
	
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8004564:	187b      	adds	r3, r7, r1
 8004566:	881a      	ldrh	r2, [r3, #0]
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	015b      	lsls	r3, r3, #5
 800456c:	429a      	cmp	r2, r3
 800456e:	d303      	bcc.n	8004578 <vTraceStoreKernelObjectName+0x26>
 8004570:	2001      	movs	r0, #1
 8004572:	f001 f879 	bl	8005668 <prvTraceError>
 8004576:	e00e      	b.n	8004596 <vTraceStoreKernelObjectName+0x44>
	
	/* Always save in symbol table, in case the recording has not yet started */
	prvTraceSaveObjectSymbol(object, name);
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	0011      	movs	r1, r2
 800457e:	0018      	movs	r0, r3
 8004580:	f000 ff1c 	bl	80053bc <prvTraceSaveObjectSymbol>
	
	prvTraceStoreStringEvent(1, eventID, name, object);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	230e      	movs	r3, #14
 800458a:	18fb      	adds	r3, r7, r3
 800458c:	8819      	ldrh	r1, [r3, #0]
 800458e:	0003      	movs	r3, r0
 8004590:	2001      	movs	r0, #1
 8004592:	f000 fcb5 	bl	8004f00 <prvTraceStoreStringEvent>
}
 8004596:	46bd      	mov	sp, r7
 8004598:	b004      	add	sp, #16
 800459a:	bd80      	pop	{r7, pc}

0800459c <xTraceRegisterString>:
* xTraceRegisterString
*
* Stores a name for a user event channel, returns the handle.
******************************************************************************/
traceString xTraceRegisterString(const char* name)
{
 800459c:	b590      	push	{r4, r7, lr}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	traceString str;
	uint16_t eventID = PSF_EVENT_OBJ_NAME;
 80045a4:	240e      	movs	r4, #14
 80045a6:	193b      	adds	r3, r7, r4
 80045a8:	2203      	movs	r2, #3
 80045aa:	801a      	strh	r2, [r3, #0]
	
	str = prvTraceSaveSymbol(name);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	0018      	movs	r0, r3
 80045b0:	f000 fed2 	bl	8005358 <prvTraceSaveSymbol>
 80045b4:	0003      	movs	r3, r0
 80045b6:	60bb      	str	r3, [r7, #8]

	PSF_ASSERT_RET(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE, str);
 80045b8:	193b      	adds	r3, r7, r4
 80045ba:	881a      	ldrh	r2, [r3, #0]
 80045bc:	2380      	movs	r3, #128	; 0x80
 80045be:	015b      	lsls	r3, r3, #5
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d304      	bcc.n	80045ce <xTraceRegisterString+0x32>
 80045c4:	2001      	movs	r0, #1
 80045c6:	f001 f84f 	bl	8005668 <prvTraceError>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	e009      	b.n	80045e2 <xTraceRegisterString+0x46>

	/* Always save in symbol table, if the recording has not yet started */
	prvTraceStoreStringEvent(1, eventID, (const char*)name, str);
 80045ce:	68b8      	ldr	r0, [r7, #8]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	230e      	movs	r3, #14
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	8819      	ldrh	r1, [r3, #0]
 80045d8:	0003      	movs	r3, r0
 80045da:	2001      	movs	r0, #1
 80045dc:	f000 fc90 	bl	8004f00 <prvTraceStoreStringEvent>

	return str;
 80045e0:	68bb      	ldr	r3, [r7, #8]
}
 80045e2:	0018      	movs	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b005      	add	sp, #20
 80045e8:	bd90      	pop	{r4, r7, pc}

080045ea <vTraceStop>:
 * vTraceStop
 *
 * Stops the tracing.
 *****************************************************************************/
void vTraceStop(void)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	af00      	add	r7, sp, #0
	prvSetRecorderEnabled(0);
 80045ee:	2000      	movs	r0, #0
 80045f0:	f000 f80e 	bl	8004610 <prvSetRecorderEnabled>
}
 80045f4:	46c0      	nop			; (mov r8, r8)
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
	return (int)RecorderEnabled;
 8004600:	4b02      	ldr	r3, [pc, #8]	; (800460c <xTraceIsRecordingEnabled+0x10>)
 8004602:	681b      	ldr	r3, [r3, #0]
}
 8004604:	0018      	movs	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	200038dc 	.word	0x200038dc

08004610 <prvSetRecorderEnabled>:
/*** INTERNAL FUNCTIONS *******************************************************/
/******************************************************************************/

/* Internal function for starting/stopping the recorder. */
static void prvSetRecorderEnabled(uint32_t isEnabled)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	TRACE_ALLOC_CRITICAL_SECTION();
	
	if (RecorderEnabled == isEnabled)
 8004618:	4b18      	ldr	r3, [pc, #96]	; (800467c <prvSetRecorderEnabled+0x6c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	429a      	cmp	r2, r3
 8004620:	d028      	beq.n	8004674 <prvSetRecorderEnabled+0x64>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004622:	f3ef 8310 	mrs	r3, PRIMASK
 8004626:	60fb      	str	r3, [r7, #12]
  return(result);
 8004628:	68fb      	ldr	r3, [r7, #12]
	{
		return;
	}

	TRACE_ENTER_CRITICAL_SECTION();
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	2301      	movs	r3, #1
 800462e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f383 8810 	msr	PRIMASK, r3
}
 8004636:	46c0      	nop			; (mov r8, r8)

	if (isEnabled)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d011      	beq.n	8004662 <prvSetRecorderEnabled+0x52>

		#if (TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1)
		prvPagedEventBufferInit(_TzTraceData);
		#endif
		
     	eventCounter = 0;
 800463e:	4b10      	ldr	r3, [pc, #64]	; (8004680 <prvSetRecorderEnabled+0x70>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
        ISR_stack_index = -1;
 8004644:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <prvSetRecorderEnabled+0x74>)
 8004646:	22ff      	movs	r2, #255	; 0xff
 8004648:	701a      	strb	r2, [r3, #0]
        prvTraceStoreHeader();
 800464a:	f000 f9dd 	bl	8004a08 <prvTraceStoreHeader>
		prvTraceStoreSymbolTable();
 800464e:	f000 f903 	bl	8004858 <prvTraceStoreSymbolTable>
    	prvTraceStoreObjectDataTable();
 8004652:	f000 f96f 	bl	8004934 <prvTraceStoreObjectDataTable>
    	prvTraceStoreExtensionInfo();
 8004656:	f000 fa49 	bl	8004aec <prvTraceStoreExtensionInfo>
        prvTraceStoreStartEvent();
 800465a:	f000 f815 	bl	8004688 <prvTraceStoreStartEvent>
        prvTraceStoreTSConfig();
 800465e:	f000 f893 	bl	8004788 <prvTraceStoreTSConfig>
    else
    {
		TRC_STREAM_PORT_ON_TRACE_END();
    }
	
	RecorderEnabled = isEnabled;		
 8004662:	4b06      	ldr	r3, [pc, #24]	; (800467c <prvSetRecorderEnabled+0x6c>)
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f383 8810 	msr	PRIMASK, r3
}
 8004672:	e000      	b.n	8004676 <prvSetRecorderEnabled+0x66>
		return;
 8004674:	46c0      	nop			; (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();
}
 8004676:	46bd      	mov	sp, r7
 8004678:	b006      	add	sp, #24
 800467a:	bd80      	pop	{r7, pc}
 800467c:	200038dc 	.word	0x200038dc
 8004680:	200038e0 	.word	0x200038e0
 8004684:	20000004 	.word	0x20000004

08004688 <prvTraceStoreStartEvent>:

static void prvTraceStoreStartEvent()
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b090      	sub	sp, #64	; 0x40
 800468c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800468e:	f3ef 8310 	mrs	r3, PRIMASK
 8004692:	61fb      	str	r3, [r7, #28]
  return(result);
 8004694:	69fb      	ldr	r3, [r7, #28]
	void* currentTask;
	
	TRACE_ALLOC_CRITICAL_SECTION();
	
	TRACE_ENTER_CRITICAL_SECTION();
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004698:	2301      	movs	r3, #1
 800469a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	f383 8810 	msr	PRIMASK, r3
}
 80046a2:	46c0      	nop			; (mov r8, r8)
	
	if (uiTraceSystemState == TRC_STATE_IN_STARTUP)
 80046a4:	4b33      	ldr	r3, [pc, #204]	; (8004774 <prvTraceStoreStartEvent+0xec>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <prvTraceStoreStartEvent+0x2a>
	{
		currentTask = (void*)HANDLE_NO_TASK;
 80046ac:	2302      	movs	r3, #2
 80046ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b0:	e003      	b.n	80046ba <prvTraceStoreStartEvent+0x32>
	}
	else
	{
		currentTask = TRACE_GET_CURRENT_TASK();
 80046b2:	f7ff feb4 	bl	800441e <prvTraceGetCurrentTaskHandle>
 80046b6:	0003      	movs	r3, r0
 80046b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	
	eventCounter++;
 80046ba:	4b2f      	ldr	r3, [pc, #188]	; (8004778 <prvTraceStoreStartEvent+0xf0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	4b2d      	ldr	r3, [pc, #180]	; (8004778 <prvTraceStoreStartEvent+0xf0>)
 80046c2:	601a      	str	r2, [r3, #0]
	
	{
		TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(EventWithParam_3, pxEvent, sizeof(EventWithParam_3));
 80046c4:	1d3b      	adds	r3, r7, #4
 80046c6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (pxEvent != NULL)
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d047      	beq.n	800475e <prvTraceStoreStartEvent+0xd6>
		{
			pxEvent->base.EventID = PSF_EVENT_TRACE_START | PARAM_COUNT(3);
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	4a2a      	ldr	r2, [pc, #168]	; (800477c <prvTraceStoreStartEvent+0xf4>)
 80046d2:	801a      	strh	r2, [r3, #0]
			pxEvent->base.EventCount = (uint16_t)eventCounter;
 80046d4:	4b28      	ldr	r3, [pc, #160]	; (8004778 <prvTraceStoreStartEvent+0xf0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	b29a      	uxth	r2, r3
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	805a      	strh	r2, [r3, #2]
			pxEvent->base.TS = prvGetTimestamp32();
 80046de:	f000 fffd 	bl	80056dc <prvGetTimestamp32>
 80046e2:	0002      	movs	r2, r0
 80046e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e6:	605a      	str	r2, [r3, #4]
			pxEvent->param1 = (uint32_t)TRACE_GET_OS_TICKS();
 80046e8:	4b25      	ldr	r3, [pc, #148]	; (8004780 <prvTraceStoreStartEvent+0xf8>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	609a      	str	r2, [r3, #8]
			pxEvent->param2 = (uint32_t)currentTask;
 80046f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	60da      	str	r2, [r3, #12]
			pxEvent->param3 = SessionCounter++;
 80046f6:	4b23      	ldr	r3, [pc, #140]	; (8004784 <prvTraceStoreStartEvent+0xfc>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	1c51      	adds	r1, r2, #1
 80046fc:	4b21      	ldr	r3, [pc, #132]	; (8004784 <prvTraceStoreStartEvent+0xfc>)
 80046fe:	6019      	str	r1, [r3, #0]
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	611a      	str	r2, [r3, #16]
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(pxEvent, sizeof(EventWithParam_3));
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	63bb      	str	r3, [r7, #56]	; 0x38
 8004708:	2314      	movs	r3, #20
 800470a:	637b      	str	r3, [r7, #52]	; 0x34
 800470c:	2300      	movs	r3, #0
 800470e:	633b      	str	r3, [r7, #48]	; 0x30
 8004710:	2300      	movs	r3, #0
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	003a      	movs	r2, r7
 8004716:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471a:	0018      	movs	r0, r3
 800471c:	f7ff fc9a 	bl	8004054 <writeToRTT>
 8004720:	0003      	movs	r3, r0
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <prvTraceStoreStartEvent+0xaa>
 800472a:	2006      	movs	r0, #6
 800472c:	f000 ff9c 	bl	8005668 <prvTraceError>
 8004730:	e00f      	b.n	8004752 <prvTraceStoreStartEvent+0xca>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	001a      	movs	r2, r3
 8004736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004738:	189b      	adds	r3, r3, r2
 800473a:	63bb      	str	r3, [r7, #56]	; 0x38
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	001a      	movs	r2, r3
 8004740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	637b      	str	r3, [r7, #52]	; 0x34
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	3301      	adds	r3, #1
 800474a:	633b      	str	r3, [r7, #48]	; 0x30
 800474c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1de      	bne.n	8004710 <prvTraceStoreStartEvent+0x88>
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	2b01      	cmp	r3, #1
 8004756:	d902      	bls.n	800475e <prvTraceStoreStartEvent+0xd6>
 8004758:	200d      	movs	r0, #13
 800475a:	f000 ff57 	bl	800560c <prvTraceWarning>
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f383 8810 	msr	PRIMASK, r3
}
 8004768:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	TRACE_EXIT_CRITICAL_SECTION();
}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	46bd      	mov	sp, r7
 800476e:	b010      	add	sp, #64	; 0x40
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	200038fc 	.word	0x200038fc
 8004778:	200038e0 	.word	0x200038e0
 800477c:	00003001 	.word	0x00003001
 8004780:	200038e4 	.word	0x200038e4
 8004784:	200038d8 	.word	0x200038d8

08004788 <prvTraceStoreTSConfig>:

/* Store the Timestamp Config event */
static void prvTraceStoreTSConfig(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08c      	sub	sp, #48	; 0x30
 800478c:	af00      	add	r7, sp, #0
	/* If not overridden using vTraceSetFrequency, use default value */
	if (timestampFrequency == 0)
 800478e:	4b2e      	ldr	r3, [pc, #184]	; (8004848 <prvTraceStoreTSConfig+0xc0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <prvTraceStoreTSConfig+0x14>
	{
		timestampFrequency = TRC_HWTC_FREQ_HZ;
 8004796:	4b2c      	ldr	r3, [pc, #176]	; (8004848 <prvTraceStoreTSConfig+0xc0>)
 8004798:	4a2c      	ldr	r2, [pc, #176]	; (800484c <prvTraceStoreTSConfig+0xc4>)
 800479a:	601a      	str	r2, [r3, #0]
	}

	eventCounter++;
 800479c:	4b2c      	ldr	r3, [pc, #176]	; (8004850 <prvTraceStoreTSConfig+0xc8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	4b2b      	ldr	r3, [pc, #172]	; (8004850 <prvTraceStoreTSConfig+0xc8>)
 80047a4:	601a      	str	r2, [r3, #0]
			event->param4 = (uint32_t)(TRC_CFG_ISR_TAILCHAINING_THRESHOLD);
			event->param5 = (uint32_t)(TRC_HWTC_PERIOD);
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(event, (uint32_t)sizeof(EventWithParam_5));
		}
#else
		TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(EventWithParam_4, event, sizeof(EventWithParam_4));
 80047a6:	1d3b      	adds	r3, r7, #4
 80047a8:	623b      	str	r3, [r7, #32]
		if (event != NULL)
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d046      	beq.n	800483e <prvTraceStoreTSConfig+0xb6>
		{
			event->base.EventID = PSF_EVENT_TS_CONFIG | (uint16_t)PARAM_COUNT(4);
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	4a28      	ldr	r2, [pc, #160]	; (8004854 <prvTraceStoreTSConfig+0xcc>)
 80047b4:	801a      	strh	r2, [r3, #0]
			event->base.EventCount = (uint16_t)eventCounter;
 80047b6:	4b26      	ldr	r3, [pc, #152]	; (8004850 <prvTraceStoreTSConfig+0xc8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	805a      	strh	r2, [r3, #2]
			event->base.TS = prvGetTimestamp32();
 80047c0:	f000 ff8c 	bl	80056dc <prvGetTimestamp32>
 80047c4:	0002      	movs	r2, r0
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	605a      	str	r2, [r3, #4]
						
			event->param1 = (uint32_t)timestampFrequency;
 80047ca:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <prvTraceStoreTSConfig+0xc0>)
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	609a      	str	r2, [r3, #8]
			event->param2 = (uint32_t)(TRACE_TICK_RATE_HZ);
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	2264      	movs	r2, #100	; 0x64
 80047d6:	60da      	str	r2, [r3, #12]
			event->param3 = (uint32_t)(TRC_HWTC_TYPE);
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	2204      	movs	r2, #4
 80047dc:	611a      	str	r2, [r3, #16]
			event->param4 = (uint32_t)(TRC_CFG_ISR_TAILCHAINING_THRESHOLD);
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	2200      	movs	r2, #0
 80047e2:	615a      	str	r2, [r3, #20]
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(event, (uint32_t)sizeof(EventWithParam_4));
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e8:	2318      	movs	r3, #24
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ec:	2300      	movs	r3, #0
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
 80047f0:	2300      	movs	r3, #0
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	003a      	movs	r2, r7
 80047f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fa:	0018      	movs	r0, r3
 80047fc:	f7ff fc2a 	bl	8004054 <writeToRTT>
 8004800:	0003      	movs	r3, r0
 8004802:	61fb      	str	r3, [r7, #28]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <prvTraceStoreTSConfig+0x8a>
 800480a:	2006      	movs	r0, #6
 800480c:	f000 ff2c 	bl	8005668 <prvTraceError>
 8004810:	e00f      	b.n	8004832 <prvTraceStoreTSConfig+0xaa>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	001a      	movs	r2, r3
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	189b      	adds	r3, r3, r2
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	001a      	movs	r2, r3
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	62bb      	str	r3, [r7, #40]	; 0x28
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	3301      	adds	r3, #1
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1de      	bne.n	80047f0 <prvTraceStoreTSConfig+0x68>
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	2b01      	cmp	r3, #1
 8004836:	d902      	bls.n	800483e <prvTraceStoreTSConfig+0xb6>
 8004838:	200d      	movs	r0, #13
 800483a:	f000 fee7 	bl	800560c <prvTraceWarning>
		}			
#endif

	}
}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	46bd      	mov	sp, r7
 8004842:	b00c      	add	sp, #48	; 0x30
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	200038e8 	.word	0x200038e8
 800484c:	000f4240 	.word	0x000f4240
 8004850:	200038e0 	.word	0x200038e0
 8004854:	00004002 	.word	0x00004002

08004858 <prvTraceStoreSymbolTable>:

/* Stores the symbol table on Start */
static void prvTraceStoreSymbolTable(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b094      	sub	sp, #80	; 0x50
 800485c:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 800485e:	2300      	movs	r3, #0
 8004860:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t j = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004866:	f3ef 8310 	mrs	r3, PRIMASK
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 800486e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004870:	2301      	movs	r3, #1
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004876:	f383 8810 	msr	PRIMASK, r3
}
 800487a:	46c0      	nop			; (mov r8, r8)
	
	{
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
 800487c:	2300      	movs	r3, #0
 800487e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004880:	e046      	b.n	8004910 <prvTraceStoreSymbolTable+0xb8>
		{
			TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(uint32_t, data, SYMBOL_TABLE_SLOT_SIZE);            
 8004882:	003b      	movs	r3, r7
 8004884:	637b      	str	r3, [r7, #52]	; 0x34
            
            for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
 8004886:	2300      	movs	r3, #0
 8004888:	64bb      	str	r3, [r7, #72]	; 0x48
 800488a:	e00d      	b.n	80048a8 <prvTraceStoreSymbolTable+0x50>
            {
            	data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 800488c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800488e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004890:	18d1      	adds	r1, r2, r3
 8004892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004898:	18d3      	adds	r3, r2, r3
 800489a:	4a25      	ldr	r2, [pc, #148]	; (8004930 <prvTraceStoreSymbolTable+0xd8>)
 800489c:	0089      	lsls	r1, r1, #2
 800489e:	588a      	ldr	r2, [r1, r2]
 80048a0:	601a      	str	r2, [r3, #0]
            for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
 80048a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a4:	3301      	adds	r3, #1
 80048a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80048a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048aa:	2b07      	cmp	r3, #7
 80048ac:	d9ee      	bls.n	800488c <prvTraceStoreSymbolTable+0x34>
            }
			
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, SYMBOL_TABLE_SLOT_SIZE);						
 80048ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b0:	647b      	str	r3, [r7, #68]	; 0x44
 80048b2:	2320      	movs	r3, #32
 80048b4:	643b      	str	r3, [r7, #64]	; 0x40
 80048b6:	2300      	movs	r3, #0
 80048b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ba:	2300      	movs	r3, #0
 80048bc:	623b      	str	r3, [r7, #32]
 80048be:	2320      	movs	r3, #32
 80048c0:	18fa      	adds	r2, r7, r3
 80048c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c6:	0018      	movs	r0, r3
 80048c8:	f7ff fbc4 	bl	8004054 <writeToRTT>
 80048cc:	0003      	movs	r3, r0
 80048ce:	633b      	str	r3, [r7, #48]	; 0x30
 80048d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <prvTraceStoreSymbolTable+0x86>
 80048d6:	2006      	movs	r0, #6
 80048d8:	f000 fec6 	bl	8005668 <prvTraceError>
 80048dc:	e00f      	b.n	80048fe <prvTraceStoreSymbolTable+0xa6>
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	001a      	movs	r2, r3
 80048e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048e4:	189b      	adds	r3, r3, r2
 80048e6:	647b      	str	r3, [r7, #68]	; 0x44
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	001a      	movs	r2, r3
 80048ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	643b      	str	r3, [r7, #64]	; 0x40
 80048f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f4:	3301      	adds	r3, #1
 80048f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1dd      	bne.n	80048ba <prvTraceStoreSymbolTable+0x62>
 80048fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004900:	2b01      	cmp	r3, #1
 8004902:	d902      	bls.n	800490a <prvTraceStoreSymbolTable+0xb2>
 8004904:	200d      	movs	r0, #13
 8004906:	f000 fe81 	bl	800560c <prvTraceWarning>
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
 800490a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800490c:	3308      	adds	r3, #8
 800490e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004910:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004912:	23a0      	movs	r3, #160	; 0xa0
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	429a      	cmp	r2, r3
 8004918:	d3b3      	bcc.n	8004882 <prvTraceStoreSymbolTable+0x2a>
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	f383 8810 	msr	PRIMASK, r3
}
 8004924:	46c0      	nop			; (mov r8, r8)
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	46bd      	mov	sp, r7
 800492a:	b014      	add	sp, #80	; 0x50
 800492c:	bd80      	pop	{r7, pc}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	2000328c 	.word	0x2000328c

08004934 <prvTraceStoreObjectDataTable>:

/* Stores the object table on Start */
static void prvTraceStoreObjectDataTable(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08e      	sub	sp, #56	; 0x38
 8004938:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t j = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004942:	f3ef 8310 	mrs	r3, PRIMASK
 8004946:	613b      	str	r3, [r7, #16]
  return(result);
 8004948:	693b      	ldr	r3, [r7, #16]
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 800494a:	623b      	str	r3, [r7, #32]
 800494c:	2301      	movs	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f383 8810 	msr	PRIMASK, r3
}
 8004956:	46c0      	nop			; (mov r8, r8)

	{
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 8004958:	2300      	movs	r3, #0
 800495a:	637b      	str	r3, [r7, #52]	; 0x34
 800495c:	e045      	b.n	80049ea <prvTraceStoreObjectDataTable+0xb6>
        {
            TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(uint32_t, data, OBJECT_DATA_SLOT_SIZE);
 800495e:	1d3b      	adds	r3, r7, #4
 8004960:	61fb      	str	r3, [r7, #28]
            
            for (j = 0; j < (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)); j++)
 8004962:	2300      	movs	r3, #0
 8004964:	633b      	str	r3, [r7, #48]	; 0x30
 8004966:	e00d      	b.n	8004984 <prvTraceStoreObjectDataTable+0x50>
            {
            	data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 8004968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496c:	18d1      	adds	r1, r2, r3
 800496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	18d3      	adds	r3, r2, r3
 8004976:	4a23      	ldr	r2, [pc, #140]	; (8004a04 <prvTraceStoreObjectDataTable+0xd0>)
 8004978:	0089      	lsls	r1, r1, #2
 800497a:	588a      	ldr	r2, [r1, r2]
 800497c:	601a      	str	r2, [r3, #0]
            for (j = 0; j < (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)); j++)
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	3301      	adds	r3, #1
 8004982:	633b      	str	r3, [r7, #48]	; 0x30
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	2b01      	cmp	r3, #1
 8004988:	d9ee      	bls.n	8004968 <prvTraceStoreObjectDataTable+0x34>
            }

			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, OBJECT_DATA_SLOT_SIZE);			
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800498e:	2308      	movs	r3, #8
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
 8004992:	2300      	movs	r3, #0
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
 8004996:	2300      	movs	r3, #0
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	003a      	movs	r2, r7
 800499c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7ff fb57 	bl	8004054 <writeToRTT>
 80049a6:	0003      	movs	r3, r0
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <prvTraceStoreObjectDataTable+0x84>
 80049b0:	2006      	movs	r0, #6
 80049b2:	f000 fe59 	bl	8005668 <prvTraceError>
 80049b6:	e00f      	b.n	80049d8 <prvTraceStoreObjectDataTable+0xa4>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	001a      	movs	r2, r3
 80049bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049be:	189b      	adds	r3, r3, r2
 80049c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	001a      	movs	r2, r3
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	3301      	adds	r3, #1
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1de      	bne.n	8004996 <prvTraceStoreObjectDataTable+0x62>
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d902      	bls.n	80049e4 <prvTraceStoreObjectDataTable+0xb0>
 80049de:	200d      	movs	r0, #13
 80049e0:	f000 fe14 	bl	800560c <prvTraceWarning>
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 80049e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e6:	3302      	adds	r3, #2
 80049e8:	637b      	str	r3, [r7, #52]	; 0x34
 80049ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ec:	2b4f      	cmp	r3, #79	; 0x4f
 80049ee:	d9b6      	bls.n	800495e <prvTraceStoreObjectDataTable+0x2a>
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f383 8810 	msr	PRIMASK, r3
}
 80049fa:	46c0      	nop			; (mov r8, r8)
        }
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b00e      	add	sp, #56	; 0x38
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20003790 	.word	0x20003790

08004a08 <prvTraceStoreHeader>:

/* Stores the header information on Start */
static void prvTraceStoreHeader(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b090      	sub	sp, #64	; 0x40
 8004a0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a12:	623b      	str	r3, [r7, #32]
  return(result);
 8004a14:	6a3b      	ldr	r3, [r7, #32]
  	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8004a16:	633b      	str	r3, [r7, #48]	; 0x30
 8004a18:	2301      	movs	r3, #1
 8004a1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	f383 8810 	msr	PRIMASK, r3
}
 8004a22:	46c0      	nop			; (mov r8, r8)

	{
	  	TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(PSFHeaderInfo, header, sizeof(PSFHeaderInfo));
 8004a24:	1d3b      	adds	r3, r7, #4
 8004a26:	62fb      	str	r3, [r7, #44]	; 0x2c
		header->psf = PSFEndianessIdentifier;
 8004a28:	4b2c      	ldr	r3, [pc, #176]	; (8004adc <prvTraceStoreHeader+0xd4>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2e:	601a      	str	r2, [r3, #0]
		header->version = FormatVersion;
 8004a30:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <prvTraceStoreHeader+0xd8>)
 8004a32:	881a      	ldrh	r2, [r3, #0]
 8004a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a36:	809a      	strh	r2, [r3, #4]
		header->platform = TRACE_KERNEL_VERSION;
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3a:	4a2a      	ldr	r2, [pc, #168]	; (8004ae4 <prvTraceStoreHeader+0xdc>)
 8004a3c:	80da      	strh	r2, [r3, #6]
		header->options = 0;
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	2200      	movs	r2, #0
 8004a42:	609a      	str	r2, [r3, #8]
		header->heapCounter = trcHeapCounter;
 8004a44:	4b28      	ldr	r3, [pc, #160]	; (8004ae8 <prvTraceStoreHeader+0xe0>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	60da      	str	r2, [r3, #12]
        /* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
		header->options = header->options | (TRC_IRQ_PRIORITY_ORDER << 0);
 8004a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a52:	609a      	str	r2, [r3, #8]
		header->symbolSize = SYMBOL_TABLE_SLOT_SIZE;
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	2220      	movs	r2, #32
 8004a58:	821a      	strh	r2, [r3, #16]
		header->symbolCount = (TRC_CFG_SYMBOL_TABLE_SLOTS);
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	2228      	movs	r2, #40	; 0x28
 8004a5e:	825a      	strh	r2, [r3, #18]
		header->objectDataSize = 8;
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	2208      	movs	r2, #8
 8004a64:	829a      	strh	r2, [r3, #20]
		header->objectDataCount = (TRC_CFG_OBJECT_DATA_SLOTS);
 8004a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a68:	2228      	movs	r2, #40	; 0x28
 8004a6a:	82da      	strh	r2, [r3, #22]
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a70:	2318      	movs	r3, #24
 8004a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a74:	2300      	movs	r3, #0
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34
 8004a78:	2300      	movs	r3, #0
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	003a      	movs	r2, r7
 8004a7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a82:	0018      	movs	r0, r3
 8004a84:	f7ff fae6 	bl	8004054 <writeToRTT>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <prvTraceStoreHeader+0x92>
 8004a92:	2006      	movs	r0, #6
 8004a94:	f000 fde8 	bl	8005668 <prvTraceError>
 8004a98:	e00f      	b.n	8004aba <prvTraceStoreHeader+0xb2>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	001a      	movs	r2, r3
 8004a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa0:	189b      	adds	r3, r3, r2
 8004aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	001a      	movs	r2, r3
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1de      	bne.n	8004a78 <prvTraceStoreHeader+0x70>
 8004aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d902      	bls.n	8004ac6 <prvTraceStoreHeader+0xbe>
 8004ac0:	200d      	movs	r0, #13
 8004ac2:	f000 fda3 	bl	800560c <prvTraceWarning>
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	f383 8810 	msr	PRIMASK, r3
}
 8004ad0:	46c0      	nop			; (mov r8, r8)
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b010      	add	sp, #64	; 0x40
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	20000008 	.word	0x20000008
 8004ae0:	2000000c 	.word	0x2000000c
 8004ae4:	00001aa1 	.word	0x00001aa1
 8004ae8:	20003284 	.word	0x20003284

08004aec <prvTraceStoreExtensionInfo>:

/* Stores the header information on Start */
static void prvTraceStoreExtensionInfo(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08c      	sub	sp, #48	; 0x30
 8004af0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af2:	f3ef 8310 	mrs	r3, PRIMASK
 8004af6:	613b      	str	r3, [r7, #16]
  return(result);
 8004af8:	693b      	ldr	r3, [r7, #16]
  	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8004afa:	623b      	str	r3, [r7, #32]
 8004afc:	2301      	movs	r3, #1
 8004afe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f383 8810 	msr	PRIMASK, r3
}
 8004b06:	46c0      	nop			; (mov r8, r8)

	{
		TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(PSFExtensionInfoType, extinfo, sizeof(PSFExtensionInfoType));
 8004b08:	2308      	movs	r3, #8
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	61fb      	str	r3, [r7, #28]
		memcpy(extinfo, &PSFExtensionInfo, sizeof(PSFExtensionInfoType));
 8004b0e:	491e      	ldr	r1, [pc, #120]	; (8004b88 <prvTraceStoreExtensionInfo+0x9c>)
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	2204      	movs	r2, #4
 8004b14:	0018      	movs	r0, r3
 8004b16:	f002 f88d 	bl	8006c34 <memcpy>
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(extinfo, sizeof(PSFExtensionInfoType));		
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b1e:	2304      	movs	r3, #4
 8004b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b22:	2300      	movs	r3, #0
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
 8004b26:	2300      	movs	r3, #0
 8004b28:	607b      	str	r3, [r7, #4]
 8004b2a:	1d3a      	adds	r2, r7, #4
 8004b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b30:	0018      	movs	r0, r3
 8004b32:	f7ff fa8f 	bl	8004054 <writeToRTT>
 8004b36:	0003      	movs	r3, r0
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <prvTraceStoreExtensionInfo+0x5c>
 8004b40:	2006      	movs	r0, #6
 8004b42:	f000 fd91 	bl	8005668 <prvTraceError>
 8004b46:	e00f      	b.n	8004b68 <prvTraceStoreExtensionInfo+0x7c>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	001a      	movs	r2, r3
 8004b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4e:	189b      	adds	r3, r3, r2
 8004b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	001a      	movs	r2, r3
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	3301      	adds	r3, #1
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1de      	bne.n	8004b26 <prvTraceStoreExtensionInfo+0x3a>
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d902      	bls.n	8004b74 <prvTraceStoreExtensionInfo+0x88>
 8004b6e:	200d      	movs	r0, #13
 8004b70:	f000 fd4c 	bl	800560c <prvTraceWarning>
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f383 8810 	msr	PRIMASK, r3
}
 8004b7e:	46c0      	nop			; (mov r8, r8)
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 8004b80:	46c0      	nop			; (mov r8, r8)
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b00c      	add	sp, #48	; 0x30
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000010 	.word	0x20000010

08004b8c <prvTraceGetError>:

/* Returns the error or warning, as a string, or NULL if none. */
static const char* prvTraceGetError(int errCode)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	switch (errCode)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b0e      	cmp	r3, #14
 8004b98:	d821      	bhi.n	8004bde <prvTraceGetError+0x52>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	009a      	lsls	r2, r3, #2
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <prvTraceGetError+0x5c>)
 8004ba0:	18d3      	adds	r3, r2, r3
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	469f      	mov	pc, r3
	case PSF_WARNING_SYMBOL_TABLE_SLOTS:
		/* There was not enough symbol table slots for storing symbol names.
		The number of missing slots is counted by NoRoomForSymbol. Inspect this
		variable and increase TRC_CFG_SYMBOL_TABLE_SLOTS by at least that value. */

		return "Exceeded SYMBOL_TABLE_SLOTS (see prvTraceGetError)";
 8004ba6:	4b11      	ldr	r3, [pc, #68]	; (8004bec <prvTraceGetError+0x60>)
 8004ba8:	e01a      	b.n	8004be0 <prvTraceGetError+0x54>
		/* A symbol name exceeded TRC_CFG_SYMBOL_MAX_LENGTH in length.
		Make sure the symbol names are at most TRC_CFG_SYMBOL_MAX_LENGTH,
		or inspect LongestSymbolName and increase TRC_CFG_SYMBOL_MAX_LENGTH
		to at least this value. */

		return "Exceeded SYMBOL_MAX_LENGTH (see prvTraceGetError)";
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <prvTraceGetError+0x64>)
 8004bac:	e018      	b.n	8004be0 <prvTraceGetError+0x54>
		/* There was not enough symbol object table slots for storing object
		properties, such as task priorites. The number of missing slots is
		counted by NoRoomForObjectData. Inspect this variable and increase
		TRC_CFG_OBJECT_DATA_SLOTS by at least that value. */

		return "Exceeded OBJECT_DATA_SLOTS (see prvTraceGetError)";
 8004bae:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <prvTraceGetError+0x68>)
 8004bb0:	e016      	b.n	8004be0 <prvTraceGetError+0x54>
		A PSF event may store maximum 60 bytes payload, including data
		arguments and string characters. For User Events, also the User
		Event Channel (4 bytes) must be squeezed in, if a channel is
		specified (can be NULL). */

		return "String too long (see prvTraceGetError)";
 8004bb2:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <prvTraceGetError+0x6c>)
 8004bb4:	e014      	b.n	8004be0 <prvTraceGetError+0x54>

	case PSF_WARNING_STREAM_PORT_READ:
		/* TRC_STREAM_PORT_READ_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		return "TRC_STREAM_PORT_READ_DATA returned error (!= 0).";
 8004bb6:	4b11      	ldr	r3, [pc, #68]	; (8004bfc <prvTraceGetError+0x70>)
 8004bb8:	e012      	b.n	8004be0 <prvTraceGetError+0x54>

	case PSF_WARNING_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		return "TRC_STREAM_PORT_WRITE_DATA returned error (!= 0).";
 8004bba:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <prvTraceGetError+0x74>)
 8004bbc:	e010      	b.n	8004be0 <prvTraceGetError+0x54>

	case PSF_WARNING_STACKMON_NO_SLOTS:
		/* TRC_CFG_STACK_MONITOR_MAX_TASKS is too small to monitor all tasks. */

		return "TRC_CFG_STACK_MONITOR_MAX_TASKS too small!";
 8004bbe:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <prvTraceGetError+0x78>)
 8004bc0:	e00e      	b.n	8004be0 <prvTraceGetError+0x54>

	case PSF_WARNING_STREAM_PORT_INITIAL_BLOCKING:
		/* Blocking occurred during vTraceEnable. This happens if the trace buffer is
		smaller than the initial transmission (trace header, object table, and symbol table). */

		return "Blocking in vTraceEnable (see xTraceGetLastError)";
 8004bc2:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <prvTraceGetError+0x7c>)
 8004bc4:	e00c      	b.n	8004be0 <prvTraceGetError+0x54>

	case PSF_ERROR_EVENT_CODE_TOO_LARGE:
		/* The highest allowed event code is 4095, anything higher is an unexpected error.
		Please contact support@percepio.com for assistance.*/

		return "Invalid event code (see prvTraceGetError)";
 8004bc6:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <prvTraceGetError+0x80>)
 8004bc8:	e00a      	b.n	8004be0 <prvTraceGetError+0x54>
	case PSF_ERROR_ISR_NESTING_OVERFLOW:
		/* Nesting of ISR trace calls exceeded the limit (TRC_CFG_MAX_ISR_NESTING).
		If this is unlikely, make sure that you call vTraceStoreISRExit in the end
		of all ISR handlers. Or increase TRC_CFG_MAX_ISR_NESTING. */

		return "Exceeded ISR nesting (see prvTraceGetError)";
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <prvTraceGetError+0x84>)
 8004bcc:	e008      	b.n	8004be0 <prvTraceGetError+0x54>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		return "DWT not supported (see prvTraceGetError)";
 8004bce:	4b11      	ldr	r3, [pc, #68]	; (8004c14 <prvTraceGetError+0x88>)
 8004bd0:	e006      	b.n	8004be0 <prvTraceGetError+0x54>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		return "DWT_CYCCNT not supported (see prvTraceGetError)";
 8004bd2:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <prvTraceGetError+0x8c>)
 8004bd4:	e004      	b.n	8004be0 <prvTraceGetError+0x54>

	case PSF_ERROR_TZCTRLTASK_NOT_CREATED:
		/* vTraceEnable failed creating the trace control task (TzCtrl) - incorrect parameters (priority?)
		or insufficient heap size? */
		return "Could not create TzCtrl (see prvTraceGetError)";
 8004bd6:	4b11      	ldr	r3, [pc, #68]	; (8004c1c <prvTraceGetError+0x90>)
 8004bd8:	e002      	b.n	8004be0 <prvTraceGetError+0x54>

	case PSF_ERROR_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */
		return "TRC_STREAM_PORT_WRITE_DATA returned error (!= 0).";
 8004bda:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <prvTraceGetError+0x74>)
 8004bdc:	e000      	b.n	8004be0 <prvTraceGetError+0x54>
	}

	return NULL;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	0018      	movs	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	b002      	add	sp, #8
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	08007030 	.word	0x08007030
 8004bec:	08006cb0 	.word	0x08006cb0
 8004bf0:	08006ce4 	.word	0x08006ce4
 8004bf4:	08006d18 	.word	0x08006d18
 8004bf8:	08006d4c 	.word	0x08006d4c
 8004bfc:	08006d74 	.word	0x08006d74
 8004c00:	08006da8 	.word	0x08006da8
 8004c04:	08006ddc 	.word	0x08006ddc
 8004c08:	08006e08 	.word	0x08006e08
 8004c0c:	08006e3c 	.word	0x08006e3c
 8004c10:	08006e68 	.word	0x08006e68
 8004c14:	08006e94 	.word	0x08006e94
 8004c18:	08006ec0 	.word	0x08006ec0
 8004c1c:	08006ef0 	.word	0x08006ef0

08004c20 <prvTraceStoreEvent0>:

/* Store an event with zero parameters (event ID only) */
void prvTraceStoreEvent0(uint16_t eventID)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08a      	sub	sp, #40	; 0x28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	0002      	movs	r2, r0
 8004c28:	1dbb      	adds	r3, r7, #6
 8004c2a:	801a      	strh	r2, [r3, #0]
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8004c2c:	1dbb      	adds	r3, r7, #6
 8004c2e:	881a      	ldrh	r2, [r3, #0]
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	015b      	lsls	r3, r3, #5
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d303      	bcc.n	8004c40 <prvTraceStoreEvent0+0x20>
 8004c38:	2001      	movs	r0, #1
 8004c3a:	f000 fd15 	bl	8005668 <prvTraceError>
 8004c3e:	e03a      	b.n	8004cb6 <prvTraceStoreEvent0+0x96>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c40:	f3ef 8310 	mrs	r3, PRIMASK
 8004c44:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c46:	69bb      	ldr	r3, [r7, #24]

	TRACE_ENTER_CRITICAL_SECTION();
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	f383 8810 	msr	PRIMASK, r3
}
 8004c54:	46c0      	nop			; (mov r8, r8)

	if (RecorderEnabled)
 8004c56:	4b19      	ldr	r3, [pc, #100]	; (8004cbc <prvTraceStoreEvent0+0x9c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d025      	beq.n	8004caa <prvTraceStoreEvent0+0x8a>
	{
		eventCounter++;
 8004c5e:	4b18      	ldr	r3, [pc, #96]	; (8004cc0 <prvTraceStoreEvent0+0xa0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	4b16      	ldr	r3, [pc, #88]	; (8004cc0 <prvTraceStoreEvent0+0xa0>)
 8004c66:	601a      	str	r2, [r3, #0]

		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(BaseEvent, event, sizeof(BaseEvent));
 8004c68:	230c      	movs	r3, #12
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	623b      	str	r3, [r7, #32]
			if (event != NULL)
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d01a      	beq.n	8004caa <prvTraceStoreEvent0+0x8a>
			{
				event->EventID = eventID | PARAM_COUNT(0);
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	1dba      	adds	r2, r7, #6
 8004c78:	8812      	ldrh	r2, [r2, #0]
 8004c7a:	801a      	strh	r2, [r3, #0]
				event->EventCount = (uint16_t)eventCounter;
 8004c7c:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <prvTraceStoreEvent0+0xa0>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	805a      	strh	r2, [r3, #2]
				event->TS = prvGetTimestamp32();
 8004c86:	f000 fd29 	bl	80056dc <prvGetTimestamp32>
 8004c8a:	0002      	movs	r2, r0
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	605a      	str	r2, [r3, #4]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(BaseEvent));
 8004c90:	2300      	movs	r3, #0
 8004c92:	60bb      	str	r3, [r7, #8]
 8004c94:	2308      	movs	r3, #8
 8004c96:	18fa      	adds	r2, r7, r3
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	2108      	movs	r1, #8
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f7ff f9d9 	bl	8004054 <writeToRTT>
 8004ca2:	1e03      	subs	r3, r0, #0
 8004ca4:	d001      	beq.n	8004caa <prvTraceStoreEvent0+0x8a>
 8004ca6:	f7ff fca0 	bl	80045ea <vTraceStop>
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f383 8810 	msr	PRIMASK, r3
}
 8004cb4:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b00a      	add	sp, #40	; 0x28
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	200038dc 	.word	0x200038dc
 8004cc0:	200038e0 	.word	0x200038e0

08004cc4 <prvTraceStoreEvent1>:

/* Store an event with one 32-bit parameter (pointer address or an int) */
void prvTraceStoreEvent1(uint16_t eventID, uint32_t param1)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08c      	sub	sp, #48	; 0x30
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	0002      	movs	r2, r0
 8004ccc:	6039      	str	r1, [r7, #0]
 8004cce:	1dbb      	adds	r3, r7, #6
 8004cd0:	801a      	strh	r2, [r3, #0]
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8004cd2:	1dbb      	adds	r3, r7, #6
 8004cd4:	881a      	ldrh	r2, [r3, #0]
 8004cd6:	2380      	movs	r3, #128	; 0x80
 8004cd8:	015b      	lsls	r3, r3, #5
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d303      	bcc.n	8004ce6 <prvTraceStoreEvent1+0x22>
 8004cde:	2001      	movs	r0, #1
 8004ce0:	f000 fcc2 	bl	8005668 <prvTraceError>
 8004ce4:	e041      	b.n	8004d6a <prvTraceStoreEvent1+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cea:	623b      	str	r3, [r7, #32]
  return(result);
 8004cec:	6a3b      	ldr	r3, [r7, #32]

	TRACE_ENTER_CRITICAL_SECTION();
 8004cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	f383 8810 	msr	PRIMASK, r3
}
 8004cfa:	46c0      	nop			; (mov r8, r8)

	if (RecorderEnabled)
 8004cfc:	4b1c      	ldr	r3, [pc, #112]	; (8004d70 <prvTraceStoreEvent1+0xac>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d02c      	beq.n	8004d5e <prvTraceStoreEvent1+0x9a>
	{
		eventCounter++;
 8004d04:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <prvTraceStoreEvent1+0xb0>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <prvTraceStoreEvent1+0xb0>)
 8004d0c:	601a      	str	r2, [r3, #0]
		
		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_1, event, sizeof(EventWithParam_1));
 8004d0e:	2310      	movs	r3, #16
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
			if (event != NULL)
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d021      	beq.n	8004d5e <prvTraceStoreEvent1+0x9a>
			{
				event->base.EventID = eventID | PARAM_COUNT(1);
 8004d1a:	1dbb      	adds	r3, r7, #6
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	2280      	movs	r2, #128	; 0x80
 8004d20:	0152      	lsls	r2, r2, #5
 8004d22:	4313      	orrs	r3, r2
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	801a      	strh	r2, [r3, #0]
				event->base.EventCount = (uint16_t)eventCounter;
 8004d2a:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <prvTraceStoreEvent1+0xb0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	805a      	strh	r2, [r3, #2]
				event->base.TS = prvGetTimestamp32();
 8004d34:	f000 fcd2 	bl	80056dc <prvGetTimestamp32>
 8004d38:	0002      	movs	r2, r0
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	605a      	str	r2, [r3, #4]
				event->param1 = (uint32_t)param1;
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	609a      	str	r2, [r3, #8]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_1));
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	230c      	movs	r3, #12
 8004d4a:	18fa      	adds	r2, r7, r3
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	210c      	movs	r1, #12
 8004d50:	0018      	movs	r0, r3
 8004d52:	f7ff f97f 	bl	8004054 <writeToRTT>
 8004d56:	1e03      	subs	r3, r0, #0
 8004d58:	d001      	beq.n	8004d5e <prvTraceStoreEvent1+0x9a>
 8004d5a:	f7ff fc46 	bl	80045ea <vTraceStop>
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f383 8810 	msr	PRIMASK, r3
}
 8004d68:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b00c      	add	sp, #48	; 0x30
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	200038dc 	.word	0x200038dc
 8004d74:	200038e0 	.word	0x200038e0

08004d78 <prvTraceStoreEvent2>:

/* Store an event with two 32-bit parameters */
void prvTraceStoreEvent2(uint16_t eventID, uint32_t param1, uint32_t param2)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08e      	sub	sp, #56	; 0x38
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
 8004d82:	210e      	movs	r1, #14
 8004d84:	187b      	adds	r3, r7, r1
 8004d86:	1c02      	adds	r2, r0, #0
 8004d88:	801a      	strh	r2, [r3, #0]
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8004d8a:	187b      	adds	r3, r7, r1
 8004d8c:	881a      	ldrh	r2, [r3, #0]
 8004d8e:	2380      	movs	r3, #128	; 0x80
 8004d90:	015b      	lsls	r3, r3, #5
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d303      	bcc.n	8004d9e <prvTraceStoreEvent2+0x26>
 8004d96:	2001      	movs	r0, #1
 8004d98:	f000 fc66 	bl	8005668 <prvTraceError>
 8004d9c:	e045      	b.n	8004e2a <prvTraceStoreEvent2+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004da2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28

	TRACE_ENTER_CRITICAL_SECTION();
 8004da6:	637b      	str	r3, [r7, #52]	; 0x34
 8004da8:	2301      	movs	r3, #1
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dae:	f383 8810 	msr	PRIMASK, r3
}
 8004db2:	46c0      	nop			; (mov r8, r8)

	if (RecorderEnabled)
 8004db4:	4b1e      	ldr	r3, [pc, #120]	; (8004e30 <prvTraceStoreEvent2+0xb8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d030      	beq.n	8004e1e <prvTraceStoreEvent2+0xa6>
	{
		eventCounter++;
 8004dbc:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <prvTraceStoreEvent2+0xbc>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	4b1c      	ldr	r3, [pc, #112]	; (8004e34 <prvTraceStoreEvent2+0xbc>)
 8004dc4:	601a      	str	r2, [r3, #0]

		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_2, event, sizeof(EventWithParam_2));
 8004dc6:	2314      	movs	r3, #20
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	633b      	str	r3, [r7, #48]	; 0x30
			if (event != NULL)
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d025      	beq.n	8004e1e <prvTraceStoreEvent2+0xa6>
			{
				event->base.EventID = eventID | PARAM_COUNT(2);
 8004dd2:	230e      	movs	r3, #14
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	2280      	movs	r2, #128	; 0x80
 8004dda:	0192      	lsls	r2, r2, #6
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	801a      	strh	r2, [r3, #0]
				event->base.EventCount = (uint16_t)eventCounter;
 8004de4:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <prvTraceStoreEvent2+0xbc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	805a      	strh	r2, [r3, #2]
				event->base.TS = prvGetTimestamp32();
 8004dee:	f000 fc75 	bl	80056dc <prvGetTimestamp32>
 8004df2:	0002      	movs	r2, r0
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	605a      	str	r2, [r3, #4]
				event->param1 = (uint32_t)param1;
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	609a      	str	r2, [r3, #8]
				event->param2 = param2;
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	60da      	str	r2, [r3, #12]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_2));
 8004e04:	2300      	movs	r3, #0
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	2310      	movs	r3, #16
 8004e0a:	18fa      	adds	r2, r7, r3
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	2110      	movs	r1, #16
 8004e10:	0018      	movs	r0, r3
 8004e12:	f7ff f91f 	bl	8004054 <writeToRTT>
 8004e16:	1e03      	subs	r3, r0, #0
 8004e18:	d001      	beq.n	8004e1e <prvTraceStoreEvent2+0xa6>
 8004e1a:	f7ff fbe6 	bl	80045ea <vTraceStop>
 8004e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	f383 8810 	msr	PRIMASK, r3
}
 8004e28:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b00e      	add	sp, #56	; 0x38
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	200038dc 	.word	0x200038dc
 8004e34:	200038e0 	.word	0x200038e0

08004e38 <prvTraceStoreEvent3>:
/* Store an event with three 32-bit parameters */
void prvTraceStoreEvent3(	uint16_t eventID,
						uint32_t param1,
						uint32_t param2,
						uint32_t param3)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b090      	sub	sp, #64	; 0x40
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	210e      	movs	r1, #14
 8004e46:	187b      	adds	r3, r7, r1
 8004e48:	1c02      	adds	r2, r0, #0
 8004e4a:	801a      	strh	r2, [r3, #0]
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8004e4c:	187b      	adds	r3, r7, r1
 8004e4e:	881a      	ldrh	r2, [r3, #0]
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	015b      	lsls	r3, r3, #5
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d303      	bcc.n	8004e60 <prvTraceStoreEvent3+0x28>
 8004e58:	2001      	movs	r0, #1
 8004e5a:	f000 fc05 	bl	8005668 <prvTraceError>
 8004e5e:	e048      	b.n	8004ef2 <prvTraceStoreEvent3+0xba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e60:	f3ef 8310 	mrs	r3, PRIMASK
 8004e64:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30

	TRACE_ENTER_CRITICAL_SECTION();
 8004e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e70:	f383 8810 	msr	PRIMASK, r3
}
 8004e74:	46c0      	nop			; (mov r8, r8)

	if (RecorderEnabled)
 8004e76:	4b20      	ldr	r3, [pc, #128]	; (8004ef8 <prvTraceStoreEvent3+0xc0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d033      	beq.n	8004ee6 <prvTraceStoreEvent3+0xae>
	{
  		eventCounter++;
 8004e7e:	4b1f      	ldr	r3, [pc, #124]	; (8004efc <prvTraceStoreEvent3+0xc4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	4b1d      	ldr	r3, [pc, #116]	; (8004efc <prvTraceStoreEvent3+0xc4>)
 8004e86:	601a      	str	r2, [r3, #0]

		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_3, event, sizeof(EventWithParam_3));
 8004e88:	2318      	movs	r3, #24
 8004e8a:	18fb      	adds	r3, r7, r3
 8004e8c:	63bb      	str	r3, [r7, #56]	; 0x38
			if (event != NULL)
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d028      	beq.n	8004ee6 <prvTraceStoreEvent3+0xae>
			{
				event->base.EventID = eventID | PARAM_COUNT(3);
 8004e94:	230e      	movs	r3, #14
 8004e96:	18fb      	adds	r3, r7, r3
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	22c0      	movs	r2, #192	; 0xc0
 8004e9c:	0192      	lsls	r2, r2, #6
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	801a      	strh	r2, [r3, #0]
				event->base.EventCount = (uint16_t)eventCounter;
 8004ea6:	4b15      	ldr	r3, [pc, #84]	; (8004efc <prvTraceStoreEvent3+0xc4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eae:	805a      	strh	r2, [r3, #2]
				event->base.TS = prvGetTimestamp32();
 8004eb0:	f000 fc14 	bl	80056dc <prvGetTimestamp32>
 8004eb4:	0002      	movs	r2, r0
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	605a      	str	r2, [r3, #4]
				event->param1 = (uint32_t)param1;
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	609a      	str	r2, [r3, #8]
				event->param2 = param2;
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	60da      	str	r2, [r3, #12]
				event->param3 = param3;
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	611a      	str	r2, [r3, #16]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_3));
 8004ecc:	2300      	movs	r3, #0
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	2314      	movs	r3, #20
 8004ed2:	18fa      	adds	r2, r7, r3
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	2114      	movs	r1, #20
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f7ff f8bb 	bl	8004054 <writeToRTT>
 8004ede:	1e03      	subs	r3, r0, #0
 8004ee0:	d001      	beq.n	8004ee6 <prvTraceStoreEvent3+0xae>
 8004ee2:	f7ff fb82 	bl	80045ea <vTraceStop>
 8004ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	f383 8810 	msr	PRIMASK, r3
}
 8004ef0:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b010      	add	sp, #64	; 0x40
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	200038dc 	.word	0x200038dc
 8004efc:	200038e0 	.word	0x200038e0

08004f00 <prvTraceStoreStringEvent>:
	TRACE_EXIT_CRITICAL_SECTION();
}

/* Stories an event with a string and <nParam> 32-bit integer parameters */
void prvTraceStoreStringEvent(int nArgs, uint16_t eventID, const char* str, ...)
{
 8004f00:	b40c      	push	{r2, r3}
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b086      	sub	sp, #24
 8004f06:	af02      	add	r7, sp, #8
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	000a      	movs	r2, r1
 8004f0c:	1cbb      	adds	r3, r7, #2
 8004f0e:	801a      	strh	r2, [r3, #0]
	int len;
  	va_list vl;

	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e002      	b.n	8004f1c <prvTraceStoreStringEvent+0x1c>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	18d3      	adds	r3, r2, r3
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <prvTraceStoreStringEvent+0x2e>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b33      	cmp	r3, #51	; 0x33
 8004f2c:	ddf3      	ble.n	8004f16 <prvTraceStoreStringEvent+0x16>

	va_start(vl, str);
 8004f2e:	231c      	movs	r3, #28
 8004f30:	18fb      	adds	r3, r7, r3
 8004f32:	60bb      	str	r3, [r7, #8]
	prvTraceStoreStringEventHelper(nArgs, eventID, NULL, len, str, vl);
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	1cbb      	adds	r3, r7, #2
 8004f38:	8819      	ldrh	r1, [r3, #0]
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	0013      	movs	r3, r2
 8004f46:	2200      	movs	r2, #0
 8004f48:	f000 f808 	bl	8004f5c <prvTraceStoreStringEventHelper>
	va_end(vl);
}
 8004f4c:	46c0      	nop			; (mov r8, r8)
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	b004      	add	sp, #16
 8004f52:	bc80      	pop	{r7}
 8004f54:	bc08      	pop	{r3}
 8004f56:	b002      	add	sp, #8
 8004f58:	4718      	bx	r3
	...

08004f5c <prvTraceStoreStringEventHelper>:
										uint16_t eventID,
										traceString userEvtChannel,
										int len,
										const char* str,
										va_list vl)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b0a4      	sub	sp, #144	; 0x90
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	230a      	movs	r3, #10
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	1c0a      	adds	r2, r1, #0
 8004f6e:	801a      	strh	r2, [r3, #0]
  	int nWords;
	int nStrWords;
	int i;
	int offset = 0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	2284      	movs	r2, #132	; 0x84
 8004f74:	18ba      	adds	r2, r7, r2
 8004f76:	6013      	str	r3, [r2, #0]
  	TRACE_ALLOC_CRITICAL_SECTION();
	
	/* The string length in multiples of 32 bit words (+1 for null character) */
	nStrWords = (len+1+3)/4;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	da00      	bge.n	8004f82 <prvTraceStoreStringEventHelper+0x26>
 8004f80:	3303      	adds	r3, #3
 8004f82:	109b      	asrs	r3, r3, #2
 8004f84:	2280      	movs	r2, #128	; 0x80
 8004f86:	18b9      	adds	r1, r7, r2
 8004f88:	600b      	str	r3, [r1, #0]

	offset = nArgs * 4;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	2184      	movs	r1, #132	; 0x84
 8004f90:	1879      	adds	r1, r7, r1
 8004f92:	600b      	str	r3, [r1, #0]

	/* The total number of 32-bit words needed for the whole payload */
	nWords = nStrWords + nArgs;
 8004f94:	18bb      	adds	r3, r7, r2
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	18d3      	adds	r3, r2, r3
 8004f9c:	228c      	movs	r2, #140	; 0x8c
 8004f9e:	18b9      	adds	r1, r7, r2
 8004fa0:	600b      	str	r3, [r1, #0]

	if (nWords > 15) /* if attempting to store more than 60 byte (= max) */
 8004fa2:	18bb      	adds	r3, r7, r2
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b0f      	cmp	r3, #15
 8004fa8:	dd16      	ble.n	8004fd8 <prvTraceStoreStringEventHelper+0x7c>
		/* Truncate event if too large. The	string characters are stored
		last, so usually only the string is truncated, unless there a lot
		of parameters... */

		/* Diagnostics ... */
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 8004faa:	18bb      	adds	r3, r7, r2
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3b0f      	subs	r3, #15
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	67fb      	str	r3, [r7, #124]	; 0x7c

		if (bytesTruncated > MaxBytesTruncated)
 8004fb4:	4b63      	ldr	r3, [pc, #396]	; (8005144 <prvTraceStoreStringEventHelper+0x1e8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d902      	bls.n	8004fc4 <prvTraceStoreStringEventHelper+0x68>
		{
			MaxBytesTruncated = bytesTruncated;
 8004fbe:	4b61      	ldr	r3, [pc, #388]	; (8005144 <prvTraceStoreStringEventHelper+0x1e8>)
 8004fc0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004fc2:	601a      	str	r2, [r3, #0]
		}

		nWords = 15;
 8004fc4:	230f      	movs	r3, #15
 8004fc6:	228c      	movs	r2, #140	; 0x8c
 8004fc8:	18ba      	adds	r2, r7, r2
 8004fca:	6013      	str	r3, [r2, #0]
		len = 15 * 4 - offset;
 8004fcc:	2384      	movs	r3, #132	; 0x84
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	223c      	movs	r2, #60	; 0x3c
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fdc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	}

	TRACE_ENTER_CRITICAL_SECTION();
 8004fe0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fe8:	f383 8810 	msr	PRIMASK, r3
}
 8004fec:	46c0      	nop			; (mov r8, r8)

	if (RecorderEnabled)
 8004fee:	4b56      	ldr	r3, [pc, #344]	; (8005148 <prvTraceStoreStringEventHelper+0x1ec>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d100      	bne.n	8004ff8 <prvTraceStoreStringEventHelper+0x9c>
 8004ff6:	e09b      	b.n	8005130 <prvTraceStoreStringEventHelper+0x1d4>
	{
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 8004ff8:	218c      	movs	r1, #140	; 0x8c
 8004ffa:	187b      	adds	r3, r7, r1
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3302      	adds	r3, #2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	677b      	str	r3, [r7, #116]	; 0x74

		eventCounter++;
 8005004:	4b51      	ldr	r3, [pc, #324]	; (800514c <prvTraceStoreStringEventHelper+0x1f0>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	4b50      	ldr	r3, [pc, #320]	; (800514c <prvTraceStoreStringEventHelper+0x1f0>)
 800500c:	601a      	str	r2, [r3, #0]

		{
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
 800500e:	2314      	movs	r3, #20
 8005010:	18fb      	adds	r3, r7, r3
 8005012:	673b      	str	r3, [r7, #112]	; 0x70
			if (event != NULL)
 8005014:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005016:	2b00      	cmp	r3, #0
 8005018:	d100      	bne.n	800501c <prvTraceStoreStringEventHelper+0xc0>
 800501a:	e089      	b.n	8005130 <prvTraceStoreStringEventHelper+0x1d4>
			{
				uint32_t* data32;
				uint8_t* data8;
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 800501c:	187b      	adds	r3, r7, r1
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	031b      	lsls	r3, r3, #12
 8005024:	b29a      	uxth	r2, r3
 8005026:	230a      	movs	r3, #10
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	4313      	orrs	r3, r2
 800502e:	b29a      	uxth	r2, r3
 8005030:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005032:	801a      	strh	r2, [r3, #0]
				event->base.EventCount = (uint16_t)eventCounter;
 8005034:	4b45      	ldr	r3, [pc, #276]	; (800514c <prvTraceStoreStringEventHelper+0x1f0>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	b29a      	uxth	r2, r3
 800503a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800503c:	805a      	strh	r2, [r3, #2]
				event->base.TS = prvGetTimestamp32();
 800503e:	f000 fb4d 	bl	80056dc <prvGetTimestamp32>
 8005042:	0002      	movs	r2, r0
 8005044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005046:	605a      	str	r2, [r3, #4]

				/* 32-bit write-pointer for the data argument */
				data32 = (uint32_t*) &(event->data[0]);
 8005048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800504a:	3308      	adds	r3, #8
 800504c:	66fb      	str	r3, [r7, #108]	; 0x6c

				for (i = 0; i < nArgs; i++)
 800504e:	2300      	movs	r3, #0
 8005050:	2288      	movs	r2, #136	; 0x88
 8005052:	18ba      	adds	r2, r7, r2
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	e023      	b.n	80050a0 <prvTraceStoreStringEventHelper+0x144>
				{
					if ((userEvtChannel != NULL) && (i == 0))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00c      	beq.n	8005078 <prvTraceStoreStringEventHelper+0x11c>
 800505e:	2288      	movs	r2, #136	; 0x88
 8005060:	18bb      	adds	r3, r7, r2
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d107      	bne.n	8005078 <prvTraceStoreStringEventHelper+0x11c>
					{
						/* First, add the User Event Channel if not NULL */
						data32[i] = (uint32_t)userEvtChannel;
 8005068:	18bb      	adds	r3, r7, r2
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005070:	18d3      	adds	r3, r2, r3
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	e00d      	b.n	8005094 <prvTraceStoreStringEventHelper+0x138>
					}
					else
					{
						/* Add data arguments... */
						data32[i] = va_arg(vl, uint32_t);
 8005078:	2388      	movs	r3, #136	; 0x88
 800507a:	18fb      	adds	r3, r7, r3
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005082:	18d2      	adds	r2, r2, r3
 8005084:	209c      	movs	r0, #156	; 0x9c
 8005086:	183b      	adds	r3, r7, r0
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	1d19      	adds	r1, r3, #4
 800508c:	1838      	adds	r0, r7, r0
 800508e:	6001      	str	r1, [r0, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6013      	str	r3, [r2, #0]
				for (i = 0; i < nArgs; i++)
 8005094:	2288      	movs	r2, #136	; 0x88
 8005096:	18bb      	adds	r3, r7, r2
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3301      	adds	r3, #1
 800509c:	18ba      	adds	r2, r7, r2
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	2188      	movs	r1, #136	; 0x88
 80050a2:	187b      	adds	r3, r7, r1
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	dbd5      	blt.n	8005058 <prvTraceStoreStringEventHelper+0xfc>
					}
				}
				data8 = (uint8_t*)&(event->data[0]);
 80050ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050ae:	3308      	adds	r3, #8
 80050b0:	66bb      	str	r3, [r7, #104]	; 0x68
				for (i = 0; i < len; i++)
 80050b2:	2300      	movs	r3, #0
 80050b4:	187a      	adds	r2, r7, r1
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	e016      	b.n	80050e8 <prvTraceStoreStringEventHelper+0x18c>
				{
					data8[offset + i] = str[i];
 80050ba:	2088      	movs	r0, #136	; 0x88
 80050bc:	183b      	adds	r3, r7, r0
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2298      	movs	r2, #152	; 0x98
 80050c2:	18ba      	adds	r2, r7, r2
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	18d2      	adds	r2, r2, r3
 80050c8:	2384      	movs	r3, #132	; 0x84
 80050ca:	18fb      	adds	r3, r7, r3
 80050cc:	6819      	ldr	r1, [r3, #0]
 80050ce:	183b      	adds	r3, r7, r0
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	18cb      	adds	r3, r1, r3
 80050d4:	0019      	movs	r1, r3
 80050d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050d8:	185b      	adds	r3, r3, r1
 80050da:	7812      	ldrb	r2, [r2, #0]
 80050dc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < len; i++)
 80050de:	183b      	adds	r3, r7, r0
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3301      	adds	r3, #1
 80050e4:	183a      	adds	r2, r7, r0
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	2388      	movs	r3, #136	; 0x88
 80050ea:	18fb      	adds	r3, r7, r3
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	dbe2      	blt.n	80050ba <prvTraceStoreStringEventHelper+0x15e>
				}

				if (len < (15 * 4 - offset))
 80050f4:	2184      	movs	r1, #132	; 0x84
 80050f6:	187b      	adds	r3, r7, r1
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	223c      	movs	r2, #60	; 0x3c
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	da08      	bge.n	8005116 <prvTraceStoreStringEventHelper+0x1ba>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 8005104:	187b      	adds	r3, r7, r1
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	18d3      	adds	r3, r2, r3
 800510c:	001a      	movs	r2, r3
 800510e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005110:	189b      	adds	r3, r3, r2
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 8005116:	2300      	movs	r3, #0
 8005118:	65bb      	str	r3, [r7, #88]	; 0x58
 800511a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800511c:	2358      	movs	r3, #88	; 0x58
 800511e:	18fa      	adds	r2, r7, r3
 8005120:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005122:	0018      	movs	r0, r3
 8005124:	f7fe ff96 	bl	8004054 <writeToRTT>
 8005128:	1e03      	subs	r3, r0, #0
 800512a:	d001      	beq.n	8005130 <prvTraceStoreStringEventHelper+0x1d4>
 800512c:	f7ff fa5d 	bl	80045ea <vTraceStop>
 8005130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005132:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005136:	f383 8810 	msr	PRIMASK, r3
}
 800513a:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	TRACE_EXIT_CRITICAL_SECTION();
}
 800513c:	46c0      	nop			; (mov r8, r8)
 800513e:	46bd      	mov	sp, r7
 8005140:	b024      	add	sp, #144	; 0x90
 8005142:	bd80      	pop	{r7, pc}
 8005144:	200038f8 	.word	0x200038f8
 8005148:	200038dc 	.word	0x200038dc
 800514c:	200038e0 	.word	0x200038e0

08005150 <prvTraceStoreSimpleStringEventHelper>:

/* Internal common function for storing string events without additional arguments */
void prvTraceStoreSimpleStringEventHelper(uint16_t eventID,
													traceString userEvtChannel,
													const char* str)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b0a6      	sub	sp, #152	; 0x98
 8005154:	af00      	add	r7, sp, #0
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
 800515a:	230e      	movs	r3, #14
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	1c02      	adds	r2, r0, #0
 8005160:	801a      	strh	r2, [r3, #0]
	int len;
  	int nWords;
	int nStrWords;
	int i;
	int nArgs = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	2288      	movs	r2, #136	; 0x88
 8005166:	18ba      	adds	r2, r7, r2
 8005168:	6013      	str	r3, [r2, #0]
	int offset = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	2284      	movs	r2, #132	; 0x84
 800516e:	18ba      	adds	r2, r7, r2
 8005170:	6013      	str	r3, [r2, #0]
  	TRACE_ALLOC_CRITICAL_SECTION();

	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 8005172:	2300      	movs	r3, #0
 8005174:	2294      	movs	r2, #148	; 0x94
 8005176:	18ba      	adds	r2, r7, r2
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	e005      	b.n	8005188 <prvTraceStoreSimpleStringEventHelper+0x38>
 800517c:	2294      	movs	r2, #148	; 0x94
 800517e:	18bb      	adds	r3, r7, r2
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3301      	adds	r3, #1
 8005184:	18ba      	adds	r2, r7, r2
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	2194      	movs	r1, #148	; 0x94
 800518a:	187b      	adds	r3, r7, r1
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	18d3      	adds	r3, r2, r3
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <prvTraceStoreSimpleStringEventHelper+0x50>
 8005198:	187b      	adds	r3, r7, r1
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b33      	cmp	r3, #51	; 0x33
 800519e:	dded      	ble.n	800517c <prvTraceStoreSimpleStringEventHelper+0x2c>
	
	/* The string length in multiples of 32 bit words (+1 for null character) */
	nStrWords = (len+1+3)/4;
 80051a0:	2394      	movs	r3, #148	; 0x94
 80051a2:	18fb      	adds	r3, r7, r3
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3304      	adds	r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	da00      	bge.n	80051ae <prvTraceStoreSimpleStringEventHelper+0x5e>
 80051ac:	3303      	adds	r3, #3
 80051ae:	109b      	asrs	r3, r3, #2
 80051b0:	2280      	movs	r2, #128	; 0x80
 80051b2:	18ba      	adds	r2, r7, r2
 80051b4:	6013      	str	r3, [r2, #0]

	/* If a user event channel is specified, add in the list */
	if (userEvtChannel)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00b      	beq.n	80051d4 <prvTraceStoreSimpleStringEventHelper+0x84>
	{
		nArgs++;
 80051bc:	2288      	movs	r2, #136	; 0x88
 80051be:	18bb      	adds	r3, r7, r2
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3301      	adds	r3, #1
 80051c4:	18ba      	adds	r2, r7, r2
 80051c6:	6013      	str	r3, [r2, #0]
		eventID++;
 80051c8:	210e      	movs	r1, #14
 80051ca:	187b      	adds	r3, r7, r1
 80051cc:	881a      	ldrh	r2, [r3, #0]
 80051ce:	187b      	adds	r3, r7, r1
 80051d0:	3201      	adds	r2, #1
 80051d2:	801a      	strh	r2, [r3, #0]
	}

	offset = nArgs * 4;
 80051d4:	2188      	movs	r1, #136	; 0x88
 80051d6:	187b      	adds	r3, r7, r1
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	2284      	movs	r2, #132	; 0x84
 80051de:	18ba      	adds	r2, r7, r2
 80051e0:	6013      	str	r3, [r2, #0]

	/* The total number of 32-bit words needed for the whole payload */
	nWords = nStrWords + nArgs;
 80051e2:	2380      	movs	r3, #128	; 0x80
 80051e4:	18fb      	adds	r3, r7, r3
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	187b      	adds	r3, r7, r1
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	18d3      	adds	r3, r2, r3
 80051ee:	2290      	movs	r2, #144	; 0x90
 80051f0:	18b9      	adds	r1, r7, r2
 80051f2:	600b      	str	r3, [r1, #0]

	if (nWords > 15) /* if attempting to store more than 60 byte (= max) */
 80051f4:	18bb      	adds	r3, r7, r2
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b0f      	cmp	r3, #15
 80051fa:	dd18      	ble.n	800522e <prvTraceStoreSimpleStringEventHelper+0xde>
		/* Truncate event if too large. The	string characters are stored
		last, so usually only the string is truncated, unless there a lot
		of parameters... */

		/* Diagnostics ... */
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 80051fc:	18bb      	adds	r3, r7, r2
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3b0f      	subs	r3, #15
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	67fb      	str	r3, [r7, #124]	; 0x7c

		if (bytesTruncated > MaxBytesTruncated)
 8005206:	4b51      	ldr	r3, [pc, #324]	; (800534c <prvTraceStoreSimpleStringEventHelper+0x1fc>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800520c:	429a      	cmp	r2, r3
 800520e:	d902      	bls.n	8005216 <prvTraceStoreSimpleStringEventHelper+0xc6>
		{
			MaxBytesTruncated = bytesTruncated;
 8005210:	4b4e      	ldr	r3, [pc, #312]	; (800534c <prvTraceStoreSimpleStringEventHelper+0x1fc>)
 8005212:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005214:	601a      	str	r2, [r3, #0]
		}

		nWords = 15;
 8005216:	230f      	movs	r3, #15
 8005218:	2290      	movs	r2, #144	; 0x90
 800521a:	18ba      	adds	r2, r7, r2
 800521c:	6013      	str	r3, [r2, #0]
		len = 15 * 4 - offset;
 800521e:	2384      	movs	r3, #132	; 0x84
 8005220:	18fb      	adds	r3, r7, r3
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	223c      	movs	r2, #60	; 0x3c
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2294      	movs	r2, #148	; 0x94
 800522a:	18ba      	adds	r2, r7, r2
 800522c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800522e:	f3ef 8310 	mrs	r3, PRIMASK
 8005232:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	}

	TRACE_ENTER_CRITICAL_SECTION();
 8005236:	67bb      	str	r3, [r7, #120]	; 0x78
 8005238:	2301      	movs	r3, #1
 800523a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800523e:	f383 8810 	msr	PRIMASK, r3
}
 8005242:	46c0      	nop			; (mov r8, r8)

	if (RecorderEnabled)
 8005244:	4b42      	ldr	r3, [pc, #264]	; (8005350 <prvTraceStoreSimpleStringEventHelper+0x200>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d100      	bne.n	800524e <prvTraceStoreSimpleStringEventHelper+0xfe>
 800524c:	e074      	b.n	8005338 <prvTraceStoreSimpleStringEventHelper+0x1e8>
	{
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 800524e:	2190      	movs	r1, #144	; 0x90
 8005250:	187b      	adds	r3, r7, r1
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3302      	adds	r3, #2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	677b      	str	r3, [r7, #116]	; 0x74

		eventCounter++;
 800525a:	4b3e      	ldr	r3, [pc, #248]	; (8005354 <prvTraceStoreSimpleStringEventHelper+0x204>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	4b3c      	ldr	r3, [pc, #240]	; (8005354 <prvTraceStoreSimpleStringEventHelper+0x204>)
 8005262:	601a      	str	r2, [r3, #0]

		{
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
 8005264:	2314      	movs	r3, #20
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	673b      	str	r3, [r7, #112]	; 0x70
			if (event != NULL)
 800526a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800526c:	2b00      	cmp	r3, #0
 800526e:	d063      	beq.n	8005338 <prvTraceStoreSimpleStringEventHelper+0x1e8>
			{
				uint32_t* data32;
				uint8_t* data8;
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8005270:	187b      	adds	r3, r7, r1
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	031b      	lsls	r3, r3, #12
 8005278:	b29a      	uxth	r2, r3
 800527a:	230e      	movs	r3, #14
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	4313      	orrs	r3, r2
 8005282:	b29a      	uxth	r2, r3
 8005284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005286:	801a      	strh	r2, [r3, #0]
				event->base.EventCount = (uint16_t)eventCounter;
 8005288:	4b32      	ldr	r3, [pc, #200]	; (8005354 <prvTraceStoreSimpleStringEventHelper+0x204>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	b29a      	uxth	r2, r3
 800528e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005290:	805a      	strh	r2, [r3, #2]
				event->base.TS = prvGetTimestamp32();
 8005292:	f000 fa23 	bl	80056dc <prvGetTimestamp32>
 8005296:	0002      	movs	r2, r0
 8005298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800529a:	605a      	str	r2, [r3, #4]

				/* 32-bit write-pointer for the data argument */
				data32 = (uint32_t*) &(event->data[0]);
 800529c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800529e:	3308      	adds	r3, #8
 80052a0:	66fb      	str	r3, [r7, #108]	; 0x6c

				if (userEvtChannel != NULL)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <prvTraceStoreSimpleStringEventHelper+0x15e>
				{
					/* First, add the User Event Channel if not NULL */
					data32[0] = (uint32_t)userEvtChannel;
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ac:	601a      	str	r2, [r3, #0]
				}

				data8 = (uint8_t*) &(event->data[0]);
 80052ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052b0:	3308      	adds	r3, #8
 80052b2:	66bb      	str	r3, [r7, #104]	; 0x68
				for (i = 0; i < len; i++)
 80052b4:	2300      	movs	r3, #0
 80052b6:	228c      	movs	r2, #140	; 0x8c
 80052b8:	18ba      	adds	r2, r7, r2
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	e014      	b.n	80052e8 <prvTraceStoreSimpleStringEventHelper+0x198>
				{
					data8[offset + i] = str[i];
 80052be:	208c      	movs	r0, #140	; 0x8c
 80052c0:	183b      	adds	r3, r7, r0
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	18d2      	adds	r2, r2, r3
 80052c8:	2384      	movs	r3, #132	; 0x84
 80052ca:	18fb      	adds	r3, r7, r3
 80052cc:	6819      	ldr	r1, [r3, #0]
 80052ce:	183b      	adds	r3, r7, r0
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	18cb      	adds	r3, r1, r3
 80052d4:	0019      	movs	r1, r3
 80052d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052d8:	185b      	adds	r3, r3, r1
 80052da:	7812      	ldrb	r2, [r2, #0]
 80052dc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < len; i++)
 80052de:	183b      	adds	r3, r7, r0
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3301      	adds	r3, #1
 80052e4:	183a      	adds	r2, r7, r0
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	238c      	movs	r3, #140	; 0x8c
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	2194      	movs	r1, #148	; 0x94
 80052f0:	187b      	adds	r3, r7, r1
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	dbe2      	blt.n	80052be <prvTraceStoreSimpleStringEventHelper+0x16e>
				}

				if (len < (15 * 4 - offset))
 80052f8:	2084      	movs	r0, #132	; 0x84
 80052fa:	183b      	adds	r3, r7, r0
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	223c      	movs	r2, #60	; 0x3c
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	187a      	adds	r2, r7, r1
 8005304:	6812      	ldr	r2, [r2, #0]
 8005306:	429a      	cmp	r2, r3
 8005308:	da09      	bge.n	800531e <prvTraceStoreSimpleStringEventHelper+0x1ce>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 800530a:	183b      	adds	r3, r7, r0
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	187b      	adds	r3, r7, r1
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	18d3      	adds	r3, r2, r3
 8005314:	001a      	movs	r2, r3
 8005316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005318:	189b      	adds	r3, r3, r2
 800531a:	2200      	movs	r2, #0
 800531c:	701a      	strb	r2, [r3, #0]
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 800531e:	2300      	movs	r3, #0
 8005320:	65bb      	str	r3, [r7, #88]	; 0x58
 8005322:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005324:	2358      	movs	r3, #88	; 0x58
 8005326:	18fa      	adds	r2, r7, r3
 8005328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800532a:	0018      	movs	r0, r3
 800532c:	f7fe fe92 	bl	8004054 <writeToRTT>
 8005330:	1e03      	subs	r3, r0, #0
 8005332:	d001      	beq.n	8005338 <prvTraceStoreSimpleStringEventHelper+0x1e8>
 8005334:	f7ff f959 	bl	80045ea <vTraceStop>
 8005338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800533a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800533e:	f383 8810 	msr	PRIMASK, r3
}
 8005342:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	TRACE_EXIT_CRITICAL_SECTION();
}
 8005344:	46c0      	nop			; (mov r8, r8)
 8005346:	46bd      	mov	sp, r7
 8005348:	b026      	add	sp, #152	; 0x98
 800534a:	bd80      	pop	{r7, pc}
 800534c:	200038f8 	.word	0x200038f8
 8005350:	200038dc 	.word	0x200038dc
 8005354:	200038e0 	.word	0x200038e0

08005358 <prvTraceSaveSymbol>:

/* Saves a symbol name in the symbol table and returns the slot address */
void* prvTraceSaveSymbol(const char *name)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
	void* retVal = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005364:	f3ef 8310 	mrs	r3, PRIMASK
 8005368:	613b      	str	r3, [r7, #16]
  return(result);
 800536a:	693b      	ldr	r3, [r7, #16]
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 800536c:	61bb      	str	r3, [r7, #24]
 800536e:	2301      	movs	r3, #1
 8005370:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f383 8810 	msr	PRIMASK, r3
}
 8005378:	46c0      	nop			; (mov r8, r8)
	if (firstFreeSymbolTableIndex < SYMBOL_TABLE_BUFFER_SIZE)
 800537a:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <prvTraceSaveSymbol+0x5c>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	23a0      	movs	r3, #160	; 0xa0
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	429a      	cmp	r2, r3
 8005384:	d20a      	bcs.n	800539c <prvTraceSaveSymbol+0x44>
	{
		/* The address to the available symbol table slot is the address we use */
		retVal = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[firstFreeSymbolTableIndex];
 8005386:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <prvTraceSaveSymbol+0x5c>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <prvTraceSaveSymbol+0x60>)
 800538c:	18d3      	adds	r3, r2, r3
 800538e:	61fb      	str	r3, [r7, #28]
		prvTraceSaveObjectSymbol(retVal, name);
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	0011      	movs	r1, r2
 8005396:	0018      	movs	r0, r3
 8005398:	f000 f810 	bl	80053bc <prvTraceSaveObjectSymbol>
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f383 8810 	msr	PRIMASK, r3
}
 80053a6:	46c0      	nop			; (mov r8, r8)
	}
	TRACE_EXIT_CRITICAL_SECTION();
	
	return retVal;
 80053a8:	69fb      	ldr	r3, [r7, #28]
}
 80053aa:	0018      	movs	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b008      	add	sp, #32
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	2000378c 	.word	0x2000378c
 80053b8:	2000328c 	.word	0x2000328c

080053bc <prvTraceSaveObjectSymbol>:

/* Saves a string in the symbol table for an object (task name etc.) */
void prvTraceSaveObjectSymbol(void* address, const char *name)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c6:	f3ef 8310 	mrs	r3, PRIMASK
 80053ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80053cc:	68fb      	ldr	r3, [r7, #12]
	uint32_t i;
	uint8_t *ptrSymbol;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	2301      	movs	r3, #1
 80053d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f383 8810 	msr	PRIMASK, r3
}
 80053da:	46c0      	nop			; (mov r8, r8)

	/* We do not look for previous entries -> changing a registered string is no longer possible */
	if (firstFreeSymbolTableIndex < SYMBOL_TABLE_BUFFER_SIZE)
 80053dc:	4b2b      	ldr	r3, [pc, #172]	; (800548c <prvTraceSaveObjectSymbol+0xd0>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	23a0      	movs	r3, #160	; 0xa0
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d241      	bcs.n	800546c <prvTraceSaveObjectSymbol+0xb0>
	{
		/* We access the symbol table via the union member pSymbolTableBufferUINT32 to avoid strict-aliasing issues */
		symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[firstFreeSymbolTableIndex / sizeof(uint32_t)] = (uint32_t)address;
 80053e8:	4b28      	ldr	r3, [pc, #160]	; (800548c <prvTraceSaveObjectSymbol+0xd0>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	089a      	lsrs	r2, r3, #2
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4b27      	ldr	r3, [pc, #156]	; (8005490 <prvTraceSaveObjectSymbol+0xd4>)
 80053f2:	0092      	lsls	r2, r2, #2
 80053f4:	50d1      	str	r1, [r2, r3]
		
		/* We access the symbol table via the union member pSymbolTableBufferUINT8 to avoid strict-aliasing issues */
		ptrSymbol = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[firstFreeSymbolTableIndex + sizeof(uint32_t)];
 80053f6:	4b25      	ldr	r3, [pc, #148]	; (800548c <prvTraceSaveObjectSymbol+0xd0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	1d1a      	adds	r2, r3, #4
 80053fc:	4b24      	ldr	r3, [pc, #144]	; (8005490 <prvTraceSaveObjectSymbol+0xd4>)
 80053fe:	18d3      	adds	r3, r2, r3
 8005400:	617b      	str	r3, [r7, #20]
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 8005402:	2300      	movs	r3, #0
 8005404:	61fb      	str	r3, [r7, #28]
 8005406:	e010      	b.n	800542a <prvTraceSaveObjectSymbol+0x6e>
		{
			ptrSymbol[i] = (uint8_t)name[i];	/* We do this first to ensure we also get the 0 termination, if there is one */
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	18d2      	adds	r2, r2, r3
 800540e:	6979      	ldr	r1, [r7, #20]
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	18cb      	adds	r3, r1, r3
 8005414:	7812      	ldrb	r2, [r2, #0]
 8005416:	701a      	strb	r2, [r3, #0]

			if (name[i] == 0)
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	18d3      	adds	r3, r2, r3
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d006      	beq.n	8005432 <prvTraceSaveObjectSymbol+0x76>
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	3301      	adds	r3, #1
 8005428:	61fb      	str	r3, [r7, #28]
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	2b18      	cmp	r3, #24
 800542e:	d9eb      	bls.n	8005408 <prvTraceSaveObjectSymbol+0x4c>
 8005430:	e004      	b.n	800543c <prvTraceSaveObjectSymbol+0x80>
			break;
 8005432:	46c0      	nop			; (mov r8, r8)
		}

		/* Check the length of "name", if longer than SYMBOL_MAX_LENGTH */
		while ((name[i] != 0) && i < 128)
 8005434:	e002      	b.n	800543c <prvTraceSaveObjectSymbol+0x80>
		{
			i++;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	3301      	adds	r3, #1
 800543a:	61fb      	str	r3, [r7, #28]
		while ((name[i] != 0) && i < 128)
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	18d3      	adds	r3, r2, r3
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <prvTraceSaveObjectSymbol+0x92>
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	2b7f      	cmp	r3, #127	; 0x7f
 800544c:	d9f3      	bls.n	8005436 <prvTraceSaveObjectSymbol+0x7a>
		}

		/* Remember the longest symbol name, for diagnostic purposes */
		if (i > LongestSymbolName)
 800544e:	4b11      	ldr	r3, [pc, #68]	; (8005494 <prvTraceSaveObjectSymbol+0xd8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	429a      	cmp	r2, r3
 8005456:	d902      	bls.n	800545e <prvTraceSaveObjectSymbol+0xa2>
		{
			LongestSymbolName = i;
 8005458:	4b0e      	ldr	r3, [pc, #56]	; (8005494 <prvTraceSaveObjectSymbol+0xd8>)
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	601a      	str	r2, [r3, #0]
		}

		firstFreeSymbolTableIndex += SYMBOL_TABLE_SLOT_SIZE;
 800545e:	4b0b      	ldr	r3, [pc, #44]	; (800548c <prvTraceSaveObjectSymbol+0xd0>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3320      	adds	r3, #32
 8005464:	001a      	movs	r2, r3
 8005466:	4b09      	ldr	r3, [pc, #36]	; (800548c <prvTraceSaveObjectSymbol+0xd0>)
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	e004      	b.n	8005476 <prvTraceSaveObjectSymbol+0xba>
	}
	else
	{
		NoRoomForSymbol++;
 800546c:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <prvTraceSaveObjectSymbol+0xdc>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	4b09      	ldr	r3, [pc, #36]	; (8005498 <prvTraceSaveObjectSymbol+0xdc>)
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f383 8810 	msr	PRIMASK, r3
}
 8005480:	46c0      	nop			; (mov r8, r8)
	}

	TRACE_EXIT_CRITICAL_SECTION();
}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	46bd      	mov	sp, r7
 8005486:	b008      	add	sp, #32
 8005488:	bd80      	pop	{r7, pc}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	2000378c 	.word	0x2000378c
 8005490:	2000328c 	.word	0x2000328c
 8005494:	200038f4 	.word	0x200038f4
 8005498:	200038ec 	.word	0x200038ec

0800549c <prvTraceSaveObjectData>:
	TRACE_EXIT_CRITICAL_SECTION();
}

/* Saves an object data entry (current task priority) in object data table */
void prvTraceSaveObjectData(const void *address, uint32_t data)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08a      	sub	sp, #40	; 0x28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054a6:	f3ef 8310 	mrs	r3, PRIMASK
 80054aa:	613b      	str	r3, [r7, #16]
  return(result);
 80054ac:	693b      	ldr	r3, [r7, #16]
	uint32_t i;
	uint32_t foundSlot;
	uint32_t *ptr;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 80054ae:	61fb      	str	r3, [r7, #28]
 80054b0:	2301      	movs	r3, #1
 80054b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f383 8810 	msr	PRIMASK, r3
}
 80054ba:	46c0      	nop			; (mov r8, r8)
	
	foundSlot = firstFreeObjectDataTableIndex;
 80054bc:	4b24      	ldr	r3, [pc, #144]	; (8005550 <prvTraceSaveObjectData+0xb4>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	623b      	str	r3, [r7, #32]

	/* First look for previous entries using this address */
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 80054c2:	2300      	movs	r3, #0
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
 80054c6:	e010      	b.n	80054ea <prvTraceSaveObjectData+0x4e>
	{
		/* We access the data table via the union member pObjectDataTableBufferUINT32 to avoid strict-aliasing issues */
		ptr = &objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i / sizeof(uint32_t)];
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	089b      	lsrs	r3, r3, #2
 80054cc:	009a      	lsls	r2, r3, #2
 80054ce:	4b21      	ldr	r3, [pc, #132]	; (8005554 <prvTraceSaveObjectData+0xb8>)
 80054d0:	18d3      	adds	r3, r2, r3
 80054d2:	61bb      	str	r3, [r7, #24]
		if (*ptr == (uint32_t)address)
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d102      	bne.n	80054e4 <prvTraceSaveObjectData+0x48>
		{
			foundSlot = i;
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	623b      	str	r3, [r7, #32]
			break;
 80054e2:	e007      	b.n	80054f4 <prvTraceSaveObjectData+0x58>
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	3308      	adds	r3, #8
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ea:	4b19      	ldr	r3, [pc, #100]	; (8005550 <prvTraceSaveObjectData+0xb4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d3e9      	bcc.n	80054c8 <prvTraceSaveObjectData+0x2c>
		}
	}

	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
 80054f4:	6a3a      	ldr	r2, [r7, #32]
 80054f6:	23a0      	movs	r3, #160	; 0xa0
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d218      	bcs.n	8005530 <prvTraceSaveObjectData+0x94>
	{
		/* We access the data table via the union member pObjectDataTableBufferUINT32 to avoid strict-aliasing issues */
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	089a      	lsrs	r2, r3, #2
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	4b13      	ldr	r3, [pc, #76]	; (8005554 <prvTraceSaveObjectData+0xb8>)
 8005506:	0092      	lsls	r2, r2, #2
 8005508:	50d1      	str	r1, [r2, r3]
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	089b      	lsrs	r3, r3, #2
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	4b10      	ldr	r3, [pc, #64]	; (8005554 <prvTraceSaveObjectData+0xb8>)
 8005512:	0092      	lsls	r2, r2, #2
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	50d1      	str	r1, [r2, r3]

		/* Is this the last entry in the object data table? */
		if (foundSlot == firstFreeObjectDataTableIndex)
 8005518:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <prvTraceSaveObjectData+0xb4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6a3a      	ldr	r2, [r7, #32]
 800551e:	429a      	cmp	r2, r3
 8005520:	d10b      	bne.n	800553a <prvTraceSaveObjectData+0x9e>
		{
			firstFreeObjectDataTableIndex += OBJECT_DATA_SLOT_SIZE;
 8005522:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <prvTraceSaveObjectData+0xb4>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3308      	adds	r3, #8
 8005528:	001a      	movs	r2, r3
 800552a:	4b09      	ldr	r3, [pc, #36]	; (8005550 <prvTraceSaveObjectData+0xb4>)
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e004      	b.n	800553a <prvTraceSaveObjectData+0x9e>
		}
	}
	else
	{
		NoRoomForObjectData++;
 8005530:	4b09      	ldr	r3, [pc, #36]	; (8005558 <prvTraceSaveObjectData+0xbc>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	4b08      	ldr	r3, [pc, #32]	; (8005558 <prvTraceSaveObjectData+0xbc>)
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f383 8810 	msr	PRIMASK, r3
}
 8005544:	46c0      	nop			; (mov r8, r8)
	}

	TRACE_EXIT_CRITICAL_SECTION();
}
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	46bd      	mov	sp, r7
 800554a:	b00a      	add	sp, #40	; 0x28
 800554c:	bd80      	pop	{r7, pc}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	200038d0 	.word	0x200038d0
 8005554:	20003790 	.word	0x20003790
 8005558:	200038f0 	.word	0x200038f0

0800555c <prvIsValidCommand>:
	TRACE_EXIT_CRITICAL_SECTION();
}

/* Checks if the provided command is a valid command */
int prvIsValidCommand(TracealyzerCommandType* cmd)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	b29a      	uxth	r2, r3
												cmd->param1 +
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	785b      	ldrb	r3, [r3, #1]
 800556e:	b29b      	uxth	r3, r3
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8005570:	18d3      	adds	r3, r2, r3
 8005572:	b29a      	uxth	r2, r3
												cmd->param2 +
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	789b      	ldrb	r3, [r3, #2]
 8005578:	b29b      	uxth	r3, r3
												cmd->param1 +
 800557a:	18d3      	adds	r3, r2, r3
 800557c:	b29a      	uxth	r2, r3
												cmd->param3 +
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	78db      	ldrb	r3, [r3, #3]
 8005582:	b29b      	uxth	r3, r3
												cmd->param2 +
 8005584:	18d3      	adds	r3, r2, r3
 8005586:	b29a      	uxth	r2, r3
												cmd->param4 +
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	791b      	ldrb	r3, [r3, #4]
 800558c:	b29b      	uxth	r3, r3
												cmd->param3 +
 800558e:	18d3      	adds	r3, r2, r3
 8005590:	b29a      	uxth	r2, r3
												cmd->param5));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	795b      	ldrb	r3, [r3, #5]
 8005596:	b29b      	uxth	r3, r3
												cmd->param4 +
 8005598:	18d3      	adds	r3, r2, r3
 800559a:	b29a      	uxth	r2, r3
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 800559c:	210e      	movs	r1, #14
 800559e:	187b      	adds	r3, r7, r1
 80055a0:	43d2      	mvns	r2, r2
 80055a2:	801a      	strh	r2, [r3, #0]

	if (cmd->checksumMSB != (unsigned char)(checksum >> 8))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	79da      	ldrb	r2, [r3, #7]
 80055a8:	187b      	adds	r3, r7, r1
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	0a1b      	lsrs	r3, r3, #8
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d001      	beq.n	80055ba <prvIsValidCommand+0x5e>
		return 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	e010      	b.n	80055dc <prvIsValidCommand+0x80>

	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFF))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	799a      	ldrb	r2, [r3, #6]
 80055be:	230e      	movs	r3, #14
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d001      	beq.n	80055ce <prvIsValidCommand+0x72>
		return 0;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e006      	b.n	80055dc <prvIsValidCommand+0x80>

	if (cmd->cmdCode > CMD_LAST_COMMAND)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d901      	bls.n	80055da <prvIsValidCommand+0x7e>
		return 0;
 80055d6:	2300      	movs	r3, #0
 80055d8:	e000      	b.n	80055dc <prvIsValidCommand+0x80>

	return 1;
 80055da:	2301      	movs	r3, #1
}
 80055dc:	0018      	movs	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	b004      	add	sp, #16
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <prvProcessCommand>:

/* Executed the received command (Start or Stop) */
void prvProcessCommand(TracealyzerCommandType* cmd)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  	switch(cmd->cmdCode)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d105      	bne.n	8005600 <prvProcessCommand+0x1c>
	{
		case CMD_SET_ACTIVE:
		  	prvSetRecorderEnabled(cmd->param1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	0018      	movs	r0, r3
 80055fa:	f7ff f809 	bl	8004610 <prvSetRecorderEnabled>
		  	break;
 80055fe:	e000      	b.n	8005602 <prvProcessCommand+0x1e>
		default:
		  	break;
 8005600:	46c0      	nop			; (mov r8, r8)
	}
}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	46bd      	mov	sp, r7
 8005606:	b002      	add	sp, #8
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <prvTraceWarning>:

/* Called on warnings, when the recording can continue. */
void prvTraceWarning(int errCode)
{
 800560c:	b590      	push	{r4, r7, lr}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3b01      	subs	r3, #1
 8005618:	2201      	movs	r2, #1
 800561a:	409a      	lsls	r2, r3
 800561c:	0013      	movs	r3, r2
 800561e:	001a      	movs	r2, r3
 8005620:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <prvTraceWarning+0x54>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4013      	ands	r3, r2
 8005626:	d116      	bne.n	8005656 <prvTraceWarning+0x4a>
	{
		/* Will never reach this point more than once per warning type, since we verify if ErrorAndWarningFlags[errCode] has already been set */
		SET_ERROR_WARNING_FLAG(errCode);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3b01      	subs	r3, #1
 800562c:	2201      	movs	r2, #1
 800562e:	409a      	lsls	r2, r3
 8005630:	0013      	movs	r3, r2
 8005632:	001a      	movs	r2, r3
 8005634:	4b0a      	ldr	r3, [pc, #40]	; (8005660 <prvTraceWarning+0x54>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	431a      	orrs	r2, r3
 800563a:	4b09      	ldr	r3, [pc, #36]	; (8005660 <prvTraceWarning+0x54>)
 800563c:	601a      	str	r2, [r3, #0]

		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <prvTraceWarning+0x58>)
 8005640:	681c      	ldr	r4, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	0018      	movs	r0, r3
 8005646:	f7ff faa1 	bl	8004b8c <prvTraceGetError>
 800564a:	0003      	movs	r3, r0
 800564c:	001a      	movs	r2, r3
 800564e:	0021      	movs	r1, r4
 8005650:	2090      	movs	r0, #144	; 0x90
 8005652:	f7ff fd7d 	bl	8005150 <prvTraceStoreSimpleStringEventHelper>
	}
}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	46bd      	mov	sp, r7
 800565a:	b003      	add	sp, #12
 800565c:	bd90      	pop	{r4, r7, pc}
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	20003288 	.word	0x20003288
 8005664:	20001ed4 	.word	0x20001ed4

08005668 <prvTraceError>:

/* Called on critical errors in the recorder. Stops the recorder! */
void prvTraceError(int errCode)
{
 8005668:	b590      	push	{r4, r7, lr}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
	if (errorCode == PSF_ERROR_NONE)
 8005670:	4b16      	ldr	r3, [pc, #88]	; (80056cc <prvTraceError+0x64>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d125      	bne.n	80056c4 <prvTraceError+0x5c>
	{
		/* Will never reach this point more than once, since we verify if errorCode has already been set */
		errorCode = errCode;
 8005678:	4b14      	ldr	r3, [pc, #80]	; (80056cc <prvTraceError+0x64>)
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	601a      	str	r2, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 800567e:	4b13      	ldr	r3, [pc, #76]	; (80056cc <prvTraceError+0x64>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3b01      	subs	r3, #1
 8005684:	2201      	movs	r2, #1
 8005686:	409a      	lsls	r2, r3
 8005688:	0013      	movs	r3, r2
 800568a:	001a      	movs	r2, r3
 800568c:	4b10      	ldr	r3, [pc, #64]	; (80056d0 <prvTraceError+0x68>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	431a      	orrs	r2, r3
 8005692:	4b0f      	ldr	r3, [pc, #60]	; (80056d0 <prvTraceError+0x68>)
 8005694:	601a      	str	r2, [r3, #0]

		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8005696:	4b0f      	ldr	r3, [pc, #60]	; (80056d4 <prvTraceError+0x6c>)
 8005698:	681c      	ldr	r4, [r3, #0]
 800569a:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <prvTraceError+0x64>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	0018      	movs	r0, r3
 80056a0:	f7ff fa74 	bl	8004b8c <prvTraceGetError>
 80056a4:	0003      	movs	r3, r0
 80056a6:	001a      	movs	r2, r3
 80056a8:	0021      	movs	r1, r4
 80056aa:	2090      	movs	r0, #144	; 0x90
 80056ac:	f7ff fd50 	bl	8005150 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 80056b0:	4b08      	ldr	r3, [pc, #32]	; (80056d4 <prvTraceError+0x6c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <prvTraceError+0x70>)
 80056b6:	0019      	movs	r1, r3
 80056b8:	2090      	movs	r0, #144	; 0x90
 80056ba:	f7ff fd49 	bl	8005150 <prvTraceStoreSimpleStringEventHelper>

		prvSetRecorderEnabled(0);
 80056be:	2000      	movs	r0, #0
 80056c0:	f7fe ffa6 	bl	8004610 <prvSetRecorderEnabled>
	}
}
 80056c4:	46c0      	nop			; (mov r8, r8)
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b003      	add	sp, #12
 80056ca:	bd90      	pop	{r4, r7, pc}
 80056cc:	200038d4 	.word	0x200038d4
 80056d0:	20003288 	.word	0x20003288
 80056d4:	20001ed4 	.word	0x20001ed4
 80056d8:	08006f20 	.word	0x08006f20

080056dc <prvGetTimestamp32>:
#endif
#endif

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
#if ((TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_INCR) || (TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_DECR))
	return TRC_HWTC_COUNT;
#endif
	
#if ((TRC_HWTC_TYPE == TRC_OS_TIMER_INCR) || (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR))
	uint32_t ticks = TRACE_GET_OS_TICKS();
 80056e2:	4b07      	ldr	r3, [pc, #28]	; (8005700 <prvGetTimestamp32+0x24>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	607b      	str	r3, [r7, #4]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 80056e8:	4b06      	ldr	r3, [pc, #24]	; (8005704 <prvGetTimestamp32+0x28>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	021b      	lsls	r3, r3, #8
 80056ee:	0a1a      	lsrs	r2, r3, #8
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	061b      	lsls	r3, r3, #24
 80056f4:	18d3      	adds	r3, r2, r3
#endif
}
 80056f6:	0018      	movs	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	b002      	add	sp, #8
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	200038e4 	.word	0x200038e4
 8005704:	e000e018 	.word	0xe000e018

08005708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	0002      	movs	r2, r0
 8005710:	1dfb      	adds	r3, r7, #7
 8005712:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005714:	1dfb      	adds	r3, r7, #7
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b7f      	cmp	r3, #127	; 0x7f
 800571a:	d809      	bhi.n	8005730 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800571c:	1dfb      	adds	r3, r7, #7
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	001a      	movs	r2, r3
 8005722:	231f      	movs	r3, #31
 8005724:	401a      	ands	r2, r3
 8005726:	4b04      	ldr	r3, [pc, #16]	; (8005738 <__NVIC_EnableIRQ+0x30>)
 8005728:	2101      	movs	r1, #1
 800572a:	4091      	lsls	r1, r2
 800572c:	000a      	movs	r2, r1
 800572e:	601a      	str	r2, [r3, #0]
  }
}
 8005730:	46c0      	nop			; (mov r8, r8)
 8005732:	46bd      	mov	sp, r7
 8005734:	b002      	add	sp, #8
 8005736:	bd80      	pop	{r7, pc}
 8005738:	e000e100 	.word	0xe000e100

0800573c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800573c:	b590      	push	{r4, r7, lr}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	0002      	movs	r2, r0
 8005744:	6039      	str	r1, [r7, #0]
 8005746:	1dfb      	adds	r3, r7, #7
 8005748:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800574a:	1dfb      	adds	r3, r7, #7
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b7f      	cmp	r3, #127	; 0x7f
 8005750:	d828      	bhi.n	80057a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005752:	4a2f      	ldr	r2, [pc, #188]	; (8005810 <__NVIC_SetPriority+0xd4>)
 8005754:	1dfb      	adds	r3, r7, #7
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	b25b      	sxtb	r3, r3
 800575a:	089b      	lsrs	r3, r3, #2
 800575c:	33c0      	adds	r3, #192	; 0xc0
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	589b      	ldr	r3, [r3, r2]
 8005762:	1dfa      	adds	r2, r7, #7
 8005764:	7812      	ldrb	r2, [r2, #0]
 8005766:	0011      	movs	r1, r2
 8005768:	2203      	movs	r2, #3
 800576a:	400a      	ands	r2, r1
 800576c:	00d2      	lsls	r2, r2, #3
 800576e:	21ff      	movs	r1, #255	; 0xff
 8005770:	4091      	lsls	r1, r2
 8005772:	000a      	movs	r2, r1
 8005774:	43d2      	mvns	r2, r2
 8005776:	401a      	ands	r2, r3
 8005778:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	019b      	lsls	r3, r3, #6
 800577e:	22ff      	movs	r2, #255	; 0xff
 8005780:	401a      	ands	r2, r3
 8005782:	1dfb      	adds	r3, r7, #7
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	0018      	movs	r0, r3
 8005788:	2303      	movs	r3, #3
 800578a:	4003      	ands	r3, r0
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005790:	481f      	ldr	r0, [pc, #124]	; (8005810 <__NVIC_SetPriority+0xd4>)
 8005792:	1dfb      	adds	r3, r7, #7
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	b25b      	sxtb	r3, r3
 8005798:	089b      	lsrs	r3, r3, #2
 800579a:	430a      	orrs	r2, r1
 800579c:	33c0      	adds	r3, #192	; 0xc0
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80057a2:	e031      	b.n	8005808 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80057a4:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <__NVIC_SetPriority+0xd8>)
 80057a6:	1dfb      	adds	r3, r7, #7
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	0019      	movs	r1, r3
 80057ac:	230f      	movs	r3, #15
 80057ae:	400b      	ands	r3, r1
 80057b0:	3b08      	subs	r3, #8
 80057b2:	089b      	lsrs	r3, r3, #2
 80057b4:	3306      	adds	r3, #6
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	18d3      	adds	r3, r2, r3
 80057ba:	3304      	adds	r3, #4
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	1dfa      	adds	r2, r7, #7
 80057c0:	7812      	ldrb	r2, [r2, #0]
 80057c2:	0011      	movs	r1, r2
 80057c4:	2203      	movs	r2, #3
 80057c6:	400a      	ands	r2, r1
 80057c8:	00d2      	lsls	r2, r2, #3
 80057ca:	21ff      	movs	r1, #255	; 0xff
 80057cc:	4091      	lsls	r1, r2
 80057ce:	000a      	movs	r2, r1
 80057d0:	43d2      	mvns	r2, r2
 80057d2:	401a      	ands	r2, r3
 80057d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	019b      	lsls	r3, r3, #6
 80057da:	22ff      	movs	r2, #255	; 0xff
 80057dc:	401a      	ands	r2, r3
 80057de:	1dfb      	adds	r3, r7, #7
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	0018      	movs	r0, r3
 80057e4:	2303      	movs	r3, #3
 80057e6:	4003      	ands	r3, r0
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80057ec:	4809      	ldr	r0, [pc, #36]	; (8005814 <__NVIC_SetPriority+0xd8>)
 80057ee:	1dfb      	adds	r3, r7, #7
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	001c      	movs	r4, r3
 80057f4:	230f      	movs	r3, #15
 80057f6:	4023      	ands	r3, r4
 80057f8:	3b08      	subs	r3, #8
 80057fa:	089b      	lsrs	r3, r3, #2
 80057fc:	430a      	orrs	r2, r1
 80057fe:	3306      	adds	r3, #6
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	18c3      	adds	r3, r0, r3
 8005804:	3304      	adds	r3, #4
 8005806:	601a      	str	r2, [r3, #0]
}
 8005808:	46c0      	nop			; (mov r8, r8)
 800580a:	46bd      	mov	sp, r7
 800580c:	b003      	add	sp, #12
 800580e:	bd90      	pop	{r4, r7, pc}
 8005810:	e000e100 	.word	0xe000e100
 8005814:	e000ed00 	.word	0xe000ed00

08005818 <main>:
EventGroupHandle_t taskSync;
// Function to configure the system clock
static void SystemClock_Config();

// Main program
int main() {
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af02      	add	r7, sp, #8
    // Configure System Clock
    SystemClock_Config();
 800581e:	f000 ff35 	bl	800668c <SystemClock_Config>
    // Initialize Timer for delays
    // BSP_DELAY_TIM_init();

    // Initialize Debug Console
    BSP_Console_Init();
 8005822:	f000 fffd 	bl	8006820 <BSP_Console_Init>

    // Start Trace Recording
    vTraceEnable(TRC_START);
 8005826:	2001      	movs	r0, #1
 8005828:	f7fe fd48 	bl	80042bc <vTraceEnable>

    // Create kernel objects to hold console messages
    // Size 10 (twice the amount of tasks we have) to make sure there's enough room
    xSubscribeQueue = xQueueCreate(10, sizeof(subscribe_message_t *));
 800582c:	2200      	movs	r2, #0
 800582e:	2104      	movs	r1, #4
 8005830:	200a      	movs	r0, #10
 8005832:	f7fb f8f9 	bl	8000a28 <xQueueGenericCreate>
 8005836:	0002      	movs	r2, r0
 8005838:	4b71      	ldr	r3, [pc, #452]	; (8005a00 <main+0x1e8>)
 800583a:	601a      	str	r2, [r3, #0]
    xPublishQueue = xQueueCreate(10, sizeof(command_message_t *));
 800583c:	2200      	movs	r2, #0
 800583e:	2104      	movs	r1, #4
 8005840:	200a      	movs	r0, #10
 8005842:	f7fb f8f1 	bl	8000a28 <xQueueGenericCreate>
 8005846:	0002      	movs	r2, r0
 8005848:	4b6e      	ldr	r3, [pc, #440]	; (8005a04 <main+0x1ec>)
 800584a:	601a      	str	r2, [r3, #0]

    // 5 semaphores are used to publish/subscribe sensor updates for each module
    S_SendBox = xSemaphoreCreateBinary();
 800584c:	2203      	movs	r2, #3
 800584e:	2100      	movs	r1, #0
 8005850:	2001      	movs	r0, #1
 8005852:	f7fb f8e9 	bl	8000a28 <xQueueGenericCreate>
 8005856:	0002      	movs	r2, r0
 8005858:	4b6b      	ldr	r3, [pc, #428]	; (8005a08 <main+0x1f0>)
 800585a:	601a      	str	r2, [r3, #0]
    S_Push = xSemaphoreCreateBinary();
 800585c:	2203      	movs	r2, #3
 800585e:	2100      	movs	r1, #0
 8005860:	2001      	movs	r0, #1
 8005862:	f7fb f8e1 	bl	8000a28 <xQueueGenericCreate>
 8005866:	0002      	movs	r2, r0
 8005868:	4b68      	ldr	r3, [pc, #416]	; (8005a0c <main+0x1f4>)
 800586a:	601a      	str	r2, [r3, #0]
    S_Palete = xSemaphoreCreateBinary();
 800586c:	2203      	movs	r2, #3
 800586e:	2100      	movs	r1, #0
 8005870:	2001      	movs	r0, #1
 8005872:	f7fb f8d9 	bl	8000a28 <xQueueGenericCreate>
 8005876:	0002      	movs	r2, r0
 8005878:	4b65      	ldr	r3, [pc, #404]	; (8005a10 <main+0x1f8>)
 800587a:	601a      	str	r2, [r3, #0]
    S_Elevador = xSemaphoreCreateBinary();
 800587c:	2203      	movs	r2, #3
 800587e:	2100      	movs	r1, #0
 8005880:	2001      	movs	r0, #1
 8005882:	f7fb f8d1 	bl	8000a28 <xQueueGenericCreate>
 8005886:	0002      	movs	r2, r0
 8005888:	4b62      	ldr	r3, [pc, #392]	; (8005a14 <main+0x1fc>)
 800588a:	601a      	str	r2, [r3, #0]
    S_Estado = xSemaphoreCreateBinary();
 800588c:	2203      	movs	r2, #3
 800588e:	2100      	movs	r1, #0
 8005890:	2001      	movs	r0, #1
 8005892:	f7fb f8c9 	bl	8000a28 <xQueueGenericCreate>
 8005896:	0002      	movs	r2, r0
 8005898:	4b5f      	ldr	r3, [pc, #380]	; (8005a18 <main+0x200>)
 800589a:	601a      	str	r2, [r3, #0]

    // Mutex for synchronization between task "poussoir" and "etau"
    M_Push = xSemaphoreCreateMutex();
 800589c:	2001      	movs	r0, #1
 800589e:	f7fb f9b7 	bl	8000c10 <xQueueCreateMutex>
 80058a2:	0002      	movs	r2, r0
 80058a4:	4b5d      	ldr	r3, [pc, #372]	; (8005a1c <main+0x204>)
 80058a6:	601a      	str	r2, [r3, #0]

    // Semaphore for DMA (Direct Memory Access) Transfer Complete
    xSem_DMA_TC = xSemaphoreCreateBinary();
 80058a8:	2203      	movs	r2, #3
 80058aa:	2100      	movs	r1, #0
 80058ac:	2001      	movs	r0, #1
 80058ae:	f7fb f8bb 	bl	8000a28 <xQueueGenericCreate>
 80058b2:	0002      	movs	r2, r0
 80058b4:	4b5a      	ldr	r3, [pc, #360]	; (8005a20 <main+0x208>)
 80058b6:	601a      	str	r2, [r3, #0]

    // Create Event Group
    taskSync = xEventGroupCreate();
 80058b8:	f7fa fd9c 	bl	80003f4 <xEventGroupCreate>
 80058bc:	0002      	movs	r2, r0
 80058be:	4b59      	ldr	r3, [pc, #356]	; (8005a24 <main+0x20c>)
 80058c0:	601a      	str	r2, [r3, #0]

    // Give a nice name to queues/semaphores and mutex in the trace recorder
    vTraceSetQueueName(xSubscribeQueue, "Subscribe Queue");
 80058c2:	4b4f      	ldr	r3, [pc, #316]	; (8005a00 <main+0x1e8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a58      	ldr	r2, [pc, #352]	; (8005a28 <main+0x210>)
 80058c8:	0011      	movs	r1, r2
 80058ca:	0018      	movs	r0, r3
 80058cc:	f7fe fd7a 	bl	80043c4 <vTraceSetQueueName>
    vTraceSetQueueName(xPublishQueue, "Publish Queue");
 80058d0:	4b4c      	ldr	r3, [pc, #304]	; (8005a04 <main+0x1ec>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a55      	ldr	r2, [pc, #340]	; (8005a2c <main+0x214>)
 80058d6:	0011      	movs	r1, r2
 80058d8:	0018      	movs	r0, r3
 80058da:	f7fe fd73 	bl	80043c4 <vTraceSetQueueName>

    vTraceSetMutexName(M_Push, "Mutex Stock poussoir");
 80058de:	4b4f      	ldr	r3, [pc, #316]	; (8005a1c <main+0x204>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a53      	ldr	r2, [pc, #332]	; (8005a30 <main+0x218>)
 80058e4:	0011      	movs	r1, r2
 80058e6:	0018      	movs	r0, r3
 80058e8:	f7fe fd8a 	bl	8004400 <vTraceSetMutexName>

    vTraceSetSemaphoreName(S_SendBox, "S_SendBox");
 80058ec:	4b46      	ldr	r3, [pc, #280]	; (8005a08 <main+0x1f0>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a50      	ldr	r2, [pc, #320]	; (8005a34 <main+0x21c>)
 80058f2:	0011      	movs	r1, r2
 80058f4:	0018      	movs	r0, r3
 80058f6:	f7fe fd74 	bl	80043e2 <vTraceSetSemaphoreName>
    vTraceSetSemaphoreName(S_Push, "S_Push");
 80058fa:	4b44      	ldr	r3, [pc, #272]	; (8005a0c <main+0x1f4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a4e      	ldr	r2, [pc, #312]	; (8005a38 <main+0x220>)
 8005900:	0011      	movs	r1, r2
 8005902:	0018      	movs	r0, r3
 8005904:	f7fe fd6d 	bl	80043e2 <vTraceSetSemaphoreName>
    vTraceSetSemaphoreName(S_Palete, "S_Palete");
 8005908:	4b41      	ldr	r3, [pc, #260]	; (8005a10 <main+0x1f8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a4b      	ldr	r2, [pc, #300]	; (8005a3c <main+0x224>)
 800590e:	0011      	movs	r1, r2
 8005910:	0018      	movs	r0, r3
 8005912:	f7fe fd66 	bl	80043e2 <vTraceSetSemaphoreName>
    vTraceSetSemaphoreName(S_Elevador, "S_Elevador");
 8005916:	4b3f      	ldr	r3, [pc, #252]	; (8005a14 <main+0x1fc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a49      	ldr	r2, [pc, #292]	; (8005a40 <main+0x228>)
 800591c:	0011      	movs	r1, r2
 800591e:	0018      	movs	r0, r3
 8005920:	f7fe fd5f 	bl	80043e2 <vTraceSetSemaphoreName>
    vTraceSetSemaphoreName(S_Estado, "S_Estado");
 8005924:	4b3c      	ldr	r3, [pc, #240]	; (8005a18 <main+0x200>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a46      	ldr	r2, [pc, #280]	; (8005a44 <main+0x22c>)
 800592a:	0011      	movs	r1, r2
 800592c:	0018      	movs	r0, r3
 800592e:	f7fe fd58 	bl	80043e2 <vTraceSetSemaphoreName>

    vTraceSetSemaphoreName(xSem_DMA_TC, "xSEM_DMA_TC");
 8005932:	4b3b      	ldr	r3, [pc, #236]	; (8005a20 <main+0x208>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a44      	ldr	r2, [pc, #272]	; (8005a48 <main+0x230>)
 8005938:	0011      	movs	r1, r2
 800593a:	0018      	movs	r0, r3
 800593c:	f7fe fd51 	bl	80043e2 <vTraceSetSemaphoreName>

    command_message_t *pm;
    command_message_t actuator_write_buffer;

    // Activate conveyors, carton distribution, carton turner, barrier, remover, etc.
    FACTORY_IO_Actuators_Set(
 8005940:	1d3b      	adds	r3, r7, #4
 8005942:	4942      	ldr	r1, [pc, #264]	; (8005a4c <main+0x234>)
 8005944:	4842      	ldr	r0, [pc, #264]	; (8005a50 <main+0x238>)
 8005946:	001a      	movs	r2, r3
 8005948:	f001 f826 	bl	8006998 <FACTORY_IO_Actuators_Set>
        A1_ON | A2_ON | A11_ON | A12_OFF | A14_ON | A18_ON | A19_ON,
        A1_Msk | A2_Msk | A11_Msk | A12_Msk | A14_Msk | A18_Msk | A19_Msk,
        actuator_write_buffer
    );

    pm = &actuator_write_buffer;
 800594c:	1d3b      	adds	r3, r7, #4
 800594e:	60fb      	str	r3, [r7, #12]
    xQueueSendToBack(xPublishQueue, &pm, 0);
 8005950:	4b2c      	ldr	r3, [pc, #176]	; (8005a04 <main+0x1ec>)
 8005952:	6818      	ldr	r0, [r3, #0]
 8005954:	230c      	movs	r3, #12
 8005956:	18f9      	adds	r1, r7, r3
 8005958:	2300      	movs	r3, #0
 800595a:	2200      	movs	r2, #0
 800595c:	f7fb f974 	bl	8000c48 <xQueueGenericSend>

    // Default synchronization to 1
    xEventGroupSetBits(taskSync, BOXES_SENDED);
 8005960:	4b30      	ldr	r3, [pc, #192]	; (8005a24 <main+0x20c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2108      	movs	r1, #8
 8005966:	0018      	movs	r0, r3
 8005968:	f7fa fe86 	bl	8000678 <xEventGroupSetBits>

    // Create Tasks
    xTaskCreate(vSendBoxes, "vSendBoxes", 128, NULL, 5, NULL);
 800596c:	4939      	ldr	r1, [pc, #228]	; (8005a54 <main+0x23c>)
 800596e:	483a      	ldr	r0, [pc, #232]	; (8005a58 <main+0x240>)
 8005970:	2300      	movs	r3, #0
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	2305      	movs	r3, #5
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	2300      	movs	r3, #0
 800597a:	2280      	movs	r2, #128	; 0x80
 800597c:	f7fc f9e6 	bl	8001d4c <xTaskCreate>
    xTaskCreate(vPush, "vPush", 128, NULL, 4, NULL);
 8005980:	4936      	ldr	r1, [pc, #216]	; (8005a5c <main+0x244>)
 8005982:	4837      	ldr	r0, [pc, #220]	; (8005a60 <main+0x248>)
 8005984:	2300      	movs	r3, #0
 8005986:	9301      	str	r3, [sp, #4]
 8005988:	2304      	movs	r3, #4
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	2300      	movs	r3, #0
 800598e:	2280      	movs	r2, #128	; 0x80
 8005990:	f7fc f9dc 	bl	8001d4c <xTaskCreate>
    xTaskCreate(vPalete, "vPalete", 128, NULL, 1, NULL);
 8005994:	4933      	ldr	r1, [pc, #204]	; (8005a64 <main+0x24c>)
 8005996:	4834      	ldr	r0, [pc, #208]	; (8005a68 <main+0x250>)
 8005998:	2300      	movs	r3, #0
 800599a:	9301      	str	r3, [sp, #4]
 800599c:	2301      	movs	r3, #1
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	2300      	movs	r3, #0
 80059a2:	2280      	movs	r2, #128	; 0x80
 80059a4:	f7fc f9d2 	bl	8001d4c <xTaskCreate>
    xTaskCreate(vTask_Pub, "Task_Pub", 128, NULL, 7, NULL);
 80059a8:	4930      	ldr	r1, [pc, #192]	; (8005a6c <main+0x254>)
 80059aa:	4831      	ldr	r0, [pc, #196]	; (8005a70 <main+0x258>)
 80059ac:	2300      	movs	r3, #0
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	2307      	movs	r3, #7
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	2280      	movs	r2, #128	; 0x80
 80059b8:	f7fc f9c8 	bl	8001d4c <xTaskCreate>
    xTaskCreate(vTask_Write, "Task_Write", 128, NULL, 6, NULL);
 80059bc:	492d      	ldr	r1, [pc, #180]	; (8005a74 <main+0x25c>)
 80059be:	482e      	ldr	r0, [pc, #184]	; (8005a78 <main+0x260>)
 80059c0:	2300      	movs	r3, #0
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	2306      	movs	r3, #6
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	2300      	movs	r3, #0
 80059ca:	2280      	movs	r2, #128	; 0x80
 80059cc:	f7fc f9be 	bl	8001d4c <xTaskCreate>
    xTaskCreate(vElevador, "vElevador", 128, NULL, 2, NULL);
 80059d0:	492a      	ldr	r1, [pc, #168]	; (8005a7c <main+0x264>)
 80059d2:	482b      	ldr	r0, [pc, #172]	; (8005a80 <main+0x268>)
 80059d4:	2300      	movs	r3, #0
 80059d6:	9301      	str	r3, [sp, #4]
 80059d8:	2302      	movs	r3, #2
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	2300      	movs	r3, #0
 80059de:	2280      	movs	r2, #128	; 0x80
 80059e0:	f7fc f9b4 	bl	8001d4c <xTaskCreate>
    xTaskCreate(vEstado, "vEstado", 128, NULL, 3, NULL);
 80059e4:	4927      	ldr	r1, [pc, #156]	; (8005a84 <main+0x26c>)
 80059e6:	4828      	ldr	r0, [pc, #160]	; (8005a88 <main+0x270>)
 80059e8:	2300      	movs	r3, #0
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	2303      	movs	r3, #3
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	2300      	movs	r3, #0
 80059f2:	2280      	movs	r2, #128	; 0x80
 80059f4:	f7fc f9aa 	bl	8001d4c <xTaskCreate>

    // Start the Scheduler
    vTaskStartScheduler();
 80059f8:	f7fc fbe6 	bl	80021c8 <vTaskStartScheduler>

    while (1) {
 80059fc:	e7fe      	b.n	80059fc <main+0x1e4>
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	20003924 	.word	0x20003924
 8005a04:	20003928 	.word	0x20003928
 8005a08:	20003930 	.word	0x20003930
 8005a0c:	20003934 	.word	0x20003934
 8005a10:	20003938 	.word	0x20003938
 8005a14:	2000393c 	.word	0x2000393c
 8005a18:	20003940 	.word	0x20003940
 8005a1c:	2000392c 	.word	0x2000392c
 8005a20:	20003944 	.word	0x20003944
 8005a24:	20003948 	.word	0x20003948
 8005a28:	08006f44 	.word	0x08006f44
 8005a2c:	08006f54 	.word	0x08006f54
 8005a30:	08006f64 	.word	0x08006f64
 8005a34:	08006f7c 	.word	0x08006f7c
 8005a38:	08006f88 	.word	0x08006f88
 8005a3c:	08006f90 	.word	0x08006f90
 8005a40:	08006f9c 	.word	0x08006f9c
 8005a44:	08006fa8 	.word	0x08006fa8
 8005a48:	08006fb4 	.word	0x08006fb4
 8005a4c:	00313006 	.word	0x00313006
 8005a50:	00311006 	.word	0x00311006
 8005a54:	08006fc0 	.word	0x08006fc0
 8005a58:	08005a8d 	.word	0x08005a8d
 8005a5c:	08006fcc 	.word	0x08006fcc
 8005a60:	08005d2d 	.word	0x08005d2d
 8005a64:	08006fd4 	.word	0x08006fd4
 8005a68:	08005ea9 	.word	0x08005ea9
 8005a6c:	08006fdc 	.word	0x08006fdc
 8005a70:	080063f1 	.word	0x080063f1
 8005a74:	08006fe8 	.word	0x08006fe8
 8005a78:	080065d1 	.word	0x080065d1
 8005a7c:	08006ff4 	.word	0x08006ff4
 8005a80:	080061dd 	.word	0x080061dd
 8005a84:	08007000 	.word	0x08007000
 8005a88:	08006015 	.word	0x08006015

08005a8c <vSendBoxes>:
        // The program should never reach here...
    }
}
void vSendBoxes(void *pvParameters) {
 8005a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a8e:	b08d      	sub	sp, #52	; 0x34
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	6078      	str	r0, [r7, #4]

    subscribe_message_t sub;
    subscribe_message_t *sub_pm;

    // Activate carton distribution
    FACTORY_IO_Actuators_Set(A0_ON, A0_Msk, actuator_write_buffer);
 8005a94:	251c      	movs	r5, #28
 8005a96:	197b      	adds	r3, r7, r5
 8005a98:	001a      	movs	r2, r3
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	f000 ff7b 	bl	8006998 <FACTORY_IO_Actuators_Set>
    pm = &actuator_write_buffer;
 8005aa2:	197b      	adds	r3, r7, r5
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
    xQueueSendToBack(xPublishQueue, &pm, 0);
 8005aa6:	4b9c      	ldr	r3, [pc, #624]	; (8005d18 <vSendBoxes+0x28c>)
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	2324      	movs	r3, #36	; 0x24
 8005aac:	18f9      	adds	r1, r7, r3
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f7fb f8c9 	bl	8000c48 <xQueueGenericSend>

    sub.sem_id = &S_SendBox;
 8005ab6:	2410      	movs	r4, #16
 8005ab8:	193b      	adds	r3, r7, r4
 8005aba:	4a98      	ldr	r2, [pc, #608]	; (8005d1c <vSendBoxes+0x290>)
 8005abc:	601a      	str	r2, [r3, #0]
    sub.sensor_state = S0_ON;
 8005abe:	193b      	adds	r3, r7, r4
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	609a      	str	r2, [r3, #8]
    sub.sensor_mask = S0_Pos;
 8005ac4:	193b      	adds	r3, r7, r4
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	605a      	str	r2, [r3, #4]
    sub_pm = &sub;
 8005aca:	193b      	adds	r3, r7, r4
 8005acc:	60fb      	str	r3, [r7, #12]
    xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005ace:	4b94      	ldr	r3, [pc, #592]	; (8005d20 <vSendBoxes+0x294>)
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	260c      	movs	r6, #12
 8005ad4:	19b9      	adds	r1, r7, r6
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f7fb f8b5 	bl	8000c48 <xQueueGenericSend>
    xSemaphoreTake(S_SendBox, portMAX_DELAY);
 8005ade:	4b8f      	ldr	r3, [pc, #572]	; (8005d1c <vSendBoxes+0x290>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	4252      	negs	r2, r2
 8005ae6:	0011      	movs	r1, r2
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f7fb fdd5 	bl	8001698 <xQueueSemaphoreTake>

    // Carton 1 passing in front of the carton sensor
    sub.sem_id = &S_SendBox;
 8005aee:	193b      	adds	r3, r7, r4
 8005af0:	4a8a      	ldr	r2, [pc, #552]	; (8005d1c <vSendBoxes+0x290>)
 8005af2:	601a      	str	r2, [r3, #0]
    sub.sensor_state = S0_OFF;
 8005af4:	193b      	adds	r3, r7, r4
 8005af6:	2200      	movs	r2, #0
 8005af8:	609a      	str	r2, [r3, #8]
    sub.sensor_mask = S0_Pos;
 8005afa:	193b      	adds	r3, r7, r4
 8005afc:	2201      	movs	r2, #1
 8005afe:	605a      	str	r2, [r3, #4]
    sub_pm = &sub;
 8005b00:	193b      	adds	r3, r7, r4
 8005b02:	60fb      	str	r3, [r7, #12]
    xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005b04:	4b86      	ldr	r3, [pc, #536]	; (8005d20 <vSendBoxes+0x294>)
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	19b9      	adds	r1, r7, r6
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f7fb f89b 	bl	8000c48 <xQueueGenericSend>
    xSemaphoreTake(S_SendBox, portMAX_DELAY);
 8005b12:	4b82      	ldr	r3, [pc, #520]	; (8005d1c <vSendBoxes+0x290>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2201      	movs	r2, #1
 8005b18:	4252      	negs	r2, r2
 8005b1a:	0011      	movs	r1, r2
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	f7fb fdbb 	bl	8001698 <xQueueSemaphoreTake>

    sub.sensor_state = S0_ON;
 8005b22:	193b      	adds	r3, r7, r4
 8005b24:	2201      	movs	r2, #1
 8005b26:	609a      	str	r2, [r3, #8]
    sub_pm = &sub;
 8005b28:	193b      	adds	r3, r7, r4
 8005b2a:	60fb      	str	r3, [r7, #12]
    xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005b2c:	4b7c      	ldr	r3, [pc, #496]	; (8005d20 <vSendBoxes+0x294>)
 8005b2e:	6818      	ldr	r0, [r3, #0]
 8005b30:	19b9      	adds	r1, r7, r6
 8005b32:	2300      	movs	r3, #0
 8005b34:	2200      	movs	r2, #0
 8005b36:	f7fb f887 	bl	8000c48 <xQueueGenericSend>
    xSemaphoreTake(S_SendBox, portMAX_DELAY);
 8005b3a:	4b78      	ldr	r3, [pc, #480]	; (8005d1c <vSendBoxes+0x290>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	4252      	negs	r2, r2
 8005b42:	0011      	movs	r1, r2
 8005b44:	0018      	movs	r0, r3
 8005b46:	f7fb fda7 	bl	8001698 <xQueueSemaphoreTake>

    sub.sensor_state = S0_OFF;
 8005b4a:	193b      	adds	r3, r7, r4
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	609a      	str	r2, [r3, #8]
    sub_pm = &sub;
 8005b50:	193b      	adds	r3, r7, r4
 8005b52:	60fb      	str	r3, [r7, #12]
    xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005b54:	4b72      	ldr	r3, [pc, #456]	; (8005d20 <vSendBoxes+0x294>)
 8005b56:	6818      	ldr	r0, [r3, #0]
 8005b58:	19b9      	adds	r1, r7, r6
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f7fb f873 	bl	8000c48 <xQueueGenericSend>
    xSemaphoreTake(S_SendBox, portMAX_DELAY);
 8005b62:	4b6e      	ldr	r3, [pc, #440]	; (8005d1c <vSendBoxes+0x290>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2201      	movs	r2, #1
 8005b68:	4252      	negs	r2, r2
 8005b6a:	0011      	movs	r1, r2
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f7fb fd93 	bl	8001698 <xQueueSemaphoreTake>

    // Deactivate carton distribution
    FACTORY_IO_Actuators_Set(A0_OFF, A0_Msk, actuator_write_buffer);
 8005b72:	197b      	adds	r3, r7, r5
 8005b74:	001a      	movs	r2, r3
 8005b76:	2101      	movs	r1, #1
 8005b78:	2000      	movs	r0, #0
 8005b7a:	f000 ff0d 	bl	8006998 <FACTORY_IO_Actuators_Set>
    pm = &actuator_write_buffer;
 8005b7e:	197b      	adds	r3, r7, r5
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
    xQueueSendToBack(xPublishQueue, &pm, 0);
 8005b82:	4b65      	ldr	r3, [pc, #404]	; (8005d18 <vSendBoxes+0x28c>)
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	2324      	movs	r3, #36	; 0x24
 8005b88:	18f9      	adds	r1, r7, r3
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f7fb f85b 	bl	8000c48 <xQueueGenericSend>

    while (1) {
        free_heap_size = xPortGetFreeHeapSize(); // Measure free heap size
 8005b92:	f7fd ff31 	bl	80039f8 <xPortGetFreeHeapSize>
 8005b96:	0002      	movs	r2, r0
 8005b98:	4b62      	ldr	r3, [pc, #392]	; (8005d24 <vSendBoxes+0x298>)
 8005b9a:	601a      	str	r2, [r3, #0]

        // Carton 1 passing in front of the palettizer entry sensor
        sub.sem_id = &S_SendBox;
 8005b9c:	2410      	movs	r4, #16
 8005b9e:	193b      	adds	r3, r7, r4
 8005ba0:	4a5e      	ldr	r2, [pc, #376]	; (8005d1c <vSendBoxes+0x290>)
 8005ba2:	601a      	str	r2, [r3, #0]
        sub.sensor_state = S2_OFF;
 8005ba4:	193b      	adds	r3, r7, r4
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	609a      	str	r2, [r3, #8]
        sub.sensor_mask = S2_Pos;
 8005baa:	193b      	adds	r3, r7, r4
 8005bac:	2204      	movs	r2, #4
 8005bae:	605a      	str	r2, [r3, #4]
        sub_pm = &sub;
 8005bb0:	193b      	adds	r3, r7, r4
 8005bb2:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005bb4:	4b5a      	ldr	r3, [pc, #360]	; (8005d20 <vSendBoxes+0x294>)
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	250c      	movs	r5, #12
 8005bba:	1979      	adds	r1, r7, r5
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f7fb f842 	bl	8000c48 <xQueueGenericSend>
        xSemaphoreTake(S_SendBox, portMAX_DELAY);
 8005bc4:	4b55      	ldr	r3, [pc, #340]	; (8005d1c <vSendBoxes+0x290>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	4252      	negs	r2, r2
 8005bcc:	0011      	movs	r1, r2
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f7fb fd62 	bl	8001698 <xQueueSemaphoreTake>

        // End of Carton 1 passing in front of the palettizer entry sensor
        sub.sensor_state = S2_ON;
 8005bd4:	193b      	adds	r3, r7, r4
 8005bd6:	2204      	movs	r2, #4
 8005bd8:	609a      	str	r2, [r3, #8]
        sub_pm = &sub;
 8005bda:	193b      	adds	r3, r7, r4
 8005bdc:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005bde:	4b50      	ldr	r3, [pc, #320]	; (8005d20 <vSendBoxes+0x294>)
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	1979      	adds	r1, r7, r5
 8005be4:	2300      	movs	r3, #0
 8005be6:	2200      	movs	r2, #0
 8005be8:	f7fb f82e 	bl	8000c48 <xQueueGenericSend>
        xSemaphoreTake(S_SendBox, portMAX_DELAY);
 8005bec:	4b4b      	ldr	r3, [pc, #300]	; (8005d1c <vSendBoxes+0x290>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	4252      	negs	r2, r2
 8005bf4:	0011      	movs	r1, r2
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f7fb fd4e 	bl	8001698 <xQueueSemaphoreTake>

        // Carton 2 passing in front of the palettizer entry sensor
        sub.sensor_state = S2_OFF;
 8005bfc:	193b      	adds	r3, r7, r4
 8005bfe:	2200      	movs	r2, #0
 8005c00:	609a      	str	r2, [r3, #8]
        sub_pm = &sub;
 8005c02:	193b      	adds	r3, r7, r4
 8005c04:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005c06:	4b46      	ldr	r3, [pc, #280]	; (8005d20 <vSendBoxes+0x294>)
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	1979      	adds	r1, r7, r5
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f7fb f81a 	bl	8000c48 <xQueueGenericSend>
        xSemaphoreTake(S_SendBox, portMAX_DELAY);
 8005c14:	4b41      	ldr	r3, [pc, #260]	; (8005d1c <vSendBoxes+0x290>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	4252      	negs	r2, r2
 8005c1c:	0011      	movs	r1, r2
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f7fb fd3a 	bl	8001698 <xQueueSemaphoreTake>

        vTaskDelay(20);
 8005c24:	2014      	movs	r0, #20
 8005c26:	f7fc fa95 	bl	8002154 <vTaskDelay>

        // Wait for synchronization indicating that the previous cartons have been pushed (initial state is 1)
        xEventGroupWaitBits(taskSync, BOXES_SENDED, pdTRUE, pdTRUE, portMAX_DELAY);
 8005c2a:	4b3f      	ldr	r3, [pc, #252]	; (8005d28 <vSendBoxes+0x29c>)
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	2301      	movs	r3, #1
 8005c30:	425b      	negs	r3, r3
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	2301      	movs	r3, #1
 8005c36:	2201      	movs	r2, #1
 8005c38:	2108      	movs	r1, #8
 8005c3a:	f7fa fc2f 	bl	800049c <xEventGroupWaitBits>

        // Open barrier and start carton distribution
        FACTORY_IO_Actuators_Set(A2_OFF | A0_ON, A2_Msk | A0_Msk, actuator_write_buffer);
 8005c3e:	261c      	movs	r6, #28
 8005c40:	19bb      	adds	r3, r7, r6
 8005c42:	001a      	movs	r2, r3
 8005c44:	2105      	movs	r1, #5
 8005c46:	2001      	movs	r0, #1
 8005c48:	f000 fea6 	bl	8006998 <FACTORY_IO_Actuators_Set>
        pm = &actuator_write_buffer;
 8005c4c:	19bb      	adds	r3, r7, r6
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
        xQueueSendToBack(xPublishQueue, &pm, 0);
 8005c50:	4b31      	ldr	r3, [pc, #196]	; (8005d18 <vSendBoxes+0x28c>)
 8005c52:	6818      	ldr	r0, [r3, #0]
 8005c54:	2324      	movs	r3, #36	; 0x24
 8005c56:	18f9      	adds	r1, r7, r3
 8005c58:	2300      	movs	r3, #0
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f7fa fff4 	bl	8000c48 <xQueueGenericSend>

        // Carton 1 passing in front of the carton sensor
        sub.sem_id = &S_SendBox;
 8005c60:	193b      	adds	r3, r7, r4
 8005c62:	4a2e      	ldr	r2, [pc, #184]	; (8005d1c <vSendBoxes+0x290>)
 8005c64:	601a      	str	r2, [r3, #0]
        sub.sensor_state = S0_OFF;
 8005c66:	193b      	adds	r3, r7, r4
 8005c68:	2200      	movs	r2, #0
 8005c6a:	609a      	str	r2, [r3, #8]
        sub.sensor_mask = S0_Pos;
 8005c6c:	193b      	adds	r3, r7, r4
 8005c6e:	2201      	movs	r2, #1
 8005c70:	605a      	str	r2, [r3, #4]
        sub_pm = &sub;
 8005c72:	193b      	adds	r3, r7, r4
 8005c74:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005c76:	4b2a      	ldr	r3, [pc, #168]	; (8005d20 <vSendBoxes+0x294>)
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	1979      	adds	r1, r7, r5
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f7fa ffe2 	bl	8000c48 <xQueueGenericSend>
        xSemaphoreTake(S_SendBox, portMAX_DELAY);
 8005c84:	4b25      	ldr	r3, [pc, #148]	; (8005d1c <vSendBoxes+0x290>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	4252      	negs	r2, r2
 8005c8c:	0011      	movs	r1, r2
 8005c8e:	0018      	movs	r0, r3
 8005c90:	f7fb fd02 	bl	8001698 <xQueueSemaphoreTake>

        sub.sensor_state = S0_ON;
 8005c94:	193b      	adds	r3, r7, r4
 8005c96:	2201      	movs	r2, #1
 8005c98:	609a      	str	r2, [r3, #8]
        sub_pm = &sub;
 8005c9a:	193b      	adds	r3, r7, r4
 8005c9c:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005c9e:	4b20      	ldr	r3, [pc, #128]	; (8005d20 <vSendBoxes+0x294>)
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	1979      	adds	r1, r7, r5
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f7fa ffce 	bl	8000c48 <xQueueGenericSend>
        xSemaphoreTake(S_SendBox, portMAX_DELAY);
 8005cac:	4b1b      	ldr	r3, [pc, #108]	; (8005d1c <vSendBoxes+0x290>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	4252      	negs	r2, r2
 8005cb4:	0011      	movs	r1, r2
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f7fb fcee 	bl	8001698 <xQueueSemaphoreTake>

        sub.sensor_state = S0_OFF;
 8005cbc:	193b      	adds	r3, r7, r4
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	609a      	str	r2, [r3, #8]
        sub_pm = &sub;
 8005cc2:	193b      	adds	r3, r7, r4
 8005cc4:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005cc6:	4b16      	ldr	r3, [pc, #88]	; (8005d20 <vSendBoxes+0x294>)
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	1979      	adds	r1, r7, r5
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f7fa ffba 	bl	8000c48 <xQueueGenericSend>
        xSemaphoreTake(S_SendBox, portMAX_DELAY);
 8005cd4:	4b11      	ldr	r3, [pc, #68]	; (8005d1c <vSendBoxes+0x290>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	4252      	negs	r2, r2
 8005cdc:	0011      	movs	r1, r2
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f7fb fcda 	bl	8001698 <xQueueSemaphoreTake>

        // Deactivate carton distribution and close barrier
        FACTORY_IO_Actuators_Set(A0_OFF | A2_ON, A0_Msk | A2_Msk, actuator_write_buffer);
 8005ce4:	19bb      	adds	r3, r7, r6
 8005ce6:	001a      	movs	r2, r3
 8005ce8:	2105      	movs	r1, #5
 8005cea:	2004      	movs	r0, #4
 8005cec:	f000 fe54 	bl	8006998 <FACTORY_IO_Actuators_Set>
        pm = &actuator_write_buffer;
 8005cf0:	19bb      	adds	r3, r7, r6
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
        xQueueSendToBack(xPublishQueue, &pm, 0);
 8005cf4:	4b08      	ldr	r3, [pc, #32]	; (8005d18 <vSendBoxes+0x28c>)
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	2324      	movs	r3, #36	; 0x24
 8005cfa:	18f9      	adds	r1, r7, r3
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f7fa ffa2 	bl	8000c48 <xQueueGenericSend>

        // Send synchronization signal indicating that cartons should be pushed
        xEventGroupSetBits(taskSync, SEND_BOXES);
 8005d04:	4b08      	ldr	r3, [pc, #32]	; (8005d28 <vSendBoxes+0x29c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2104      	movs	r1, #4
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f7fa fcb4 	bl	8000678 <xEventGroupSetBits>

        vTaskDelay(100 / TIMEBASE);
 8005d10:	200a      	movs	r0, #10
 8005d12:	f7fc fa1f 	bl	8002154 <vTaskDelay>
        free_heap_size = xPortGetFreeHeapSize(); // Measure free heap size
 8005d16:	e73c      	b.n	8005b92 <vSendBoxes+0x106>
 8005d18:	20003928 	.word	0x20003928
 8005d1c:	20003930 	.word	0x20003930
 8005d20:	20003924 	.word	0x20003924
 8005d24:	20003900 	.word	0x20003900
 8005d28:	20003948 	.word	0x20003948

08005d2c <vPush>:
    }
}
void vPush(void *pvParameters) {
 8005d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d2e:	b08d      	sub	sp, #52	; 0x34
 8005d30:	af02      	add	r7, sp, #8
 8005d32:	6078      	str	r0, [r7, #4]
    uint8_t stock_poussoir = 3;
 8005d34:	2327      	movs	r3, #39	; 0x27
 8005d36:	18fb      	adds	r3, r7, r3
 8005d38:	2203      	movs	r2, #3
 8005d3a:	701a      	strb	r2, [r3, #0]
    command_message_t actuator_write_buffer;
    command_message_t *pm;

    while (1) {
        // Acquire the Mutex
        xSemaphoreTake(M_Push, portMAX_DELAY);
 8005d3c:	4b55      	ldr	r3, [pc, #340]	; (8005e94 <vPush+0x168>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2201      	movs	r2, #1
 8005d42:	4252      	negs	r2, r2
 8005d44:	0011      	movs	r1, r2
 8005d46:	0018      	movs	r0, r3
 8005d48:	f7fb fca6 	bl	8001698 <xQueueSemaphoreTake>

        // The stock allows managing 3 batches of cartons to push
        // When the stock is 0, the mutex is released to "etau" so that it
        // releases the 6 cartons. Once that is done, the current task
        // (vPush) regains the Mutex, resets the stock to 3, and resumes its cycle.
        while (stock_poussoir != 0) {
 8005d4c:	e08e      	b.n	8005e6c <vPush+0x140>
            stock_poussoir--;
 8005d4e:	2127      	movs	r1, #39	; 0x27
 8005d50:	187b      	adds	r3, r7, r1
 8005d52:	781a      	ldrb	r2, [r3, #0]
 8005d54:	187b      	adds	r3, r7, r1
 8005d56:	3a01      	subs	r2, #1
 8005d58:	701a      	strb	r2, [r3, #0]

            // Wait for the arrival of cartons in front of the pusher
            xEventGroupWaitBits(taskSync, SEND_BOXES, pdTRUE, pdTRUE, portMAX_DELAY);
 8005d5a:	4b4f      	ldr	r3, [pc, #316]	; (8005e98 <vPush+0x16c>)
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	2301      	movs	r3, #1
 8005d60:	425b      	negs	r3, r3
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	2301      	movs	r3, #1
 8005d66:	2201      	movs	r2, #1
 8005d68:	2104      	movs	r1, #4
 8005d6a:	f7fa fb97 	bl	800049c <xEventGroupWaitBits>

            // Activate the pusher
            FACTORY_IO_Actuators_Set(A4_ON, A4_Msk, actuator_write_buffer);
 8005d6e:	250c      	movs	r5, #12
 8005d70:	197b      	adds	r3, r7, r5
 8005d72:	001a      	movs	r2, r3
 8005d74:	2110      	movs	r1, #16
 8005d76:	2010      	movs	r0, #16
 8005d78:	f000 fe0e 	bl	8006998 <FACTORY_IO_Actuators_Set>
            pm = &actuator_write_buffer;
 8005d7c:	197b      	adds	r3, r7, r5
 8005d7e:	60bb      	str	r3, [r7, #8]
            xQueueSendToBack(xPublishQueue, &pm, 0);
 8005d80:	4b46      	ldr	r3, [pc, #280]	; (8005e9c <vPush+0x170>)
 8005d82:	6818      	ldr	r0, [r3, #0]
 8005d84:	2308      	movs	r3, #8
 8005d86:	18f9      	adds	r1, r7, r3
 8005d88:	2300      	movs	r3, #0
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f7fa ff5c 	bl	8000c48 <xQueueGenericSend>

            // Wait for the pusher to reach its limit (deactivation and reactivation of the sensor)
            sub.sensor_mask = S4_Pos;
 8005d90:	2418      	movs	r4, #24
 8005d92:	193b      	adds	r3, r7, r4
 8005d94:	2210      	movs	r2, #16
 8005d96:	605a      	str	r2, [r3, #4]
            sub.sensor_state = S4_OFF;
 8005d98:	193b      	adds	r3, r7, r4
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	609a      	str	r2, [r3, #8]
            sub.sem_id = &S_Push;
 8005d9e:	193b      	adds	r3, r7, r4
 8005da0:	4a3f      	ldr	r2, [pc, #252]	; (8005ea0 <vPush+0x174>)
 8005da2:	601a      	str	r2, [r3, #0]
            sub_pm = &sub;
 8005da4:	193b      	adds	r3, r7, r4
 8005da6:	617b      	str	r3, [r7, #20]
            xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005da8:	4b3e      	ldr	r3, [pc, #248]	; (8005ea4 <vPush+0x178>)
 8005daa:	6818      	ldr	r0, [r3, #0]
 8005dac:	2614      	movs	r6, #20
 8005dae:	19b9      	adds	r1, r7, r6
 8005db0:	2300      	movs	r3, #0
 8005db2:	2200      	movs	r2, #0
 8005db4:	f7fa ff48 	bl	8000c48 <xQueueGenericSend>
            xSemaphoreTake(S_Push, portMAX_DELAY);
 8005db8:	4b39      	ldr	r3, [pc, #228]	; (8005ea0 <vPush+0x174>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	4252      	negs	r2, r2
 8005dc0:	0011      	movs	r1, r2
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	f7fb fc68 	bl	8001698 <xQueueSemaphoreTake>

            sub.sensor_state = S4_ON;
 8005dc8:	193b      	adds	r3, r7, r4
 8005dca:	2210      	movs	r2, #16
 8005dcc:	609a      	str	r2, [r3, #8]
            sub_pm = &sub;
 8005dce:	193b      	adds	r3, r7, r4
 8005dd0:	617b      	str	r3, [r7, #20]
            xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005dd2:	4b34      	ldr	r3, [pc, #208]	; (8005ea4 <vPush+0x178>)
 8005dd4:	6818      	ldr	r0, [r3, #0]
 8005dd6:	19b9      	adds	r1, r7, r6
 8005dd8:	2300      	movs	r3, #0
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f7fa ff34 	bl	8000c48 <xQueueGenericSend>
            xSemaphoreTake(S_Push, portMAX_DELAY);
 8005de0:	4b2f      	ldr	r3, [pc, #188]	; (8005ea0 <vPush+0x174>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2201      	movs	r2, #1
 8005de6:	4252      	negs	r2, r2
 8005de8:	0011      	movs	r1, r2
 8005dea:	0018      	movs	r0, r3
 8005dec:	f7fb fc54 	bl	8001698 <xQueueSemaphoreTake>

            // Deactivate the pusher
            FACTORY_IO_Actuators_Set(A4_OFF, A4_Msk, actuator_write_buffer);
 8005df0:	197b      	adds	r3, r7, r5
 8005df2:	001a      	movs	r2, r3
 8005df4:	2110      	movs	r1, #16
 8005df6:	2000      	movs	r0, #0
 8005df8:	f000 fdce 	bl	8006998 <FACTORY_IO_Actuators_Set>
            pm = &actuator_write_buffer;
 8005dfc:	197b      	adds	r3, r7, r5
 8005dfe:	60bb      	str	r3, [r7, #8]
            xQueueSendToBack(xPublishQueue, &pm, 0);
 8005e00:	4b26      	ldr	r3, [pc, #152]	; (8005e9c <vPush+0x170>)
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	2308      	movs	r3, #8
 8005e06:	18f9      	adds	r1, r7, r3
 8005e08:	2300      	movs	r3, #0
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f7fa ff1c 	bl	8000c48 <xQueueGenericSend>

            // Wait for the pusher to reach its limit (deactivation and reactivation of the sensor)
            sub.sensor_state = S4_OFF;
 8005e10:	193b      	adds	r3, r7, r4
 8005e12:	2200      	movs	r2, #0
 8005e14:	609a      	str	r2, [r3, #8]
            sub_pm = &sub;
 8005e16:	193b      	adds	r3, r7, r4
 8005e18:	617b      	str	r3, [r7, #20]
            xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005e1a:	4b22      	ldr	r3, [pc, #136]	; (8005ea4 <vPush+0x178>)
 8005e1c:	6818      	ldr	r0, [r3, #0]
 8005e1e:	19b9      	adds	r1, r7, r6
 8005e20:	2300      	movs	r3, #0
 8005e22:	2200      	movs	r2, #0
 8005e24:	f7fa ff10 	bl	8000c48 <xQueueGenericSend>
            xSemaphoreTake(S_Push, portMAX_DELAY);
 8005e28:	4b1d      	ldr	r3, [pc, #116]	; (8005ea0 <vPush+0x174>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	4252      	negs	r2, r2
 8005e30:	0011      	movs	r1, r2
 8005e32:	0018      	movs	r0, r3
 8005e34:	f7fb fc30 	bl	8001698 <xQueueSemaphoreTake>

            sub.sensor_state = S4_ON;
 8005e38:	193b      	adds	r3, r7, r4
 8005e3a:	2210      	movs	r2, #16
 8005e3c:	609a      	str	r2, [r3, #8]
            sub_pm = &sub;
 8005e3e:	193b      	adds	r3, r7, r4
 8005e40:	617b      	str	r3, [r7, #20]
            xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005e42:	4b18      	ldr	r3, [pc, #96]	; (8005ea4 <vPush+0x178>)
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	19b9      	adds	r1, r7, r6
 8005e48:	2300      	movs	r3, #0
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f7fa fefc 	bl	8000c48 <xQueueGenericSend>
            xSemaphoreTake(S_Push, portMAX_DELAY);
 8005e50:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <vPush+0x174>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2201      	movs	r2, #1
 8005e56:	4252      	negs	r2, r2
 8005e58:	0011      	movs	r1, r2
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f7fb fc1c 	bl	8001698 <xQueueSemaphoreTake>

            // Send synchronization signal: cartons pushed
            xEventGroupSetBits(taskSync, BOXES_SENDED);
 8005e60:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <vPush+0x16c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2108      	movs	r1, #8
 8005e66:	0018      	movs	r0, r3
 8005e68:	f7fa fc06 	bl	8000678 <xEventGroupSetBits>
        while (stock_poussoir != 0) {
 8005e6c:	2427      	movs	r4, #39	; 0x27
 8005e6e:	193b      	adds	r3, r7, r4
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d000      	beq.n	8005e78 <vPush+0x14c>
 8005e76:	e76a      	b.n	8005d4e <vPush+0x22>
        }

        // Once the 3 batches of cartons are pushed, release the semaphore to "etau"
        xSemaphoreGive(M_Push);
 8005e78:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <vPush+0x168>)
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	2200      	movs	r2, #0
 8005e80:	2100      	movs	r1, #0
 8005e82:	f7fa fee1 	bl	8000c48 <xQueueGenericSend>

        // Reset the carton stock
        stock_poussoir = 3;
 8005e86:	193b      	adds	r3, r7, r4
 8005e88:	2203      	movs	r2, #3
 8005e8a:	701a      	strb	r2, [r3, #0]

        vTaskDelay(100 / TIMEBASE);
 8005e8c:	200a      	movs	r0, #10
 8005e8e:	f7fc f961 	bl	8002154 <vTaskDelay>
        xSemaphoreTake(M_Push, portMAX_DELAY);
 8005e92:	e753      	b.n	8005d3c <vPush+0x10>
 8005e94:	2000392c 	.word	0x2000392c
 8005e98:	20003948 	.word	0x20003948
 8005e9c:	20003928 	.word	0x20003928
 8005ea0:	20003934 	.word	0x20003934
 8005ea4:	20003924 	.word	0x20003924

08005ea8 <vPalete>:
    }
}
void vPalete(void *pvParameters) {
 8005ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eaa:	b08d      	sub	sp, #52	; 0x34
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	6078      	str	r0, [r7, #4]
    command_message_t *pm;

    while (1) {
        // Activate both palette conveyors (A16 and A17)
        // Activate the distribution (A9)
        FACTORY_IO_Actuators_Set(A16_ON | A17_ON | A9_ON, A16_Msk | A17_Msk | A9_Msk, actuator_write_buffer);
 8005eb0:	2510      	movs	r5, #16
 8005eb2:	197b      	adds	r3, r7, r5
 8005eb4:	4952      	ldr	r1, [pc, #328]	; (8006000 <vPalete+0x158>)
 8005eb6:	4852      	ldr	r0, [pc, #328]	; (8006000 <vPalete+0x158>)
 8005eb8:	001a      	movs	r2, r3
 8005eba:	f000 fd6d 	bl	8006998 <FACTORY_IO_Actuators_Set>
        pm = &actuator_write_buffer;
 8005ebe:	197b      	adds	r3, r7, r5
 8005ec0:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xPublishQueue, &pm, 0);
 8005ec2:	4b50      	ldr	r3, [pc, #320]	; (8006004 <vPalete+0x15c>)
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	260c      	movs	r6, #12
 8005ec8:	19b9      	adds	r1, r7, r6
 8005eca:	2300      	movs	r3, #0
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f7fa febb 	bl	8000c48 <xQueueGenericSend>

        // Wait for the palette to arrive on the support (palette entry)
        sub.sensor_mask = S12_Pos;
 8005ed2:	241c      	movs	r4, #28
 8005ed4:	193b      	adds	r3, r7, r4
 8005ed6:	2280      	movs	r2, #128	; 0x80
 8005ed8:	0192      	lsls	r2, r2, #6
 8005eda:	605a      	str	r2, [r3, #4]
        sub.sensor_state = S12_ON;
 8005edc:	193b      	adds	r3, r7, r4
 8005ede:	2280      	movs	r2, #128	; 0x80
 8005ee0:	0192      	lsls	r2, r2, #6
 8005ee2:	609a      	str	r2, [r3, #8]
        sub.sem_id = &S_Palete;
 8005ee4:	193b      	adds	r3, r7, r4
 8005ee6:	4a48      	ldr	r2, [pc, #288]	; (8006008 <vPalete+0x160>)
 8005ee8:	601a      	str	r2, [r3, #0]
        sub_pm = &sub;
 8005eea:	193b      	adds	r3, r7, r4
 8005eec:	61bb      	str	r3, [r7, #24]
        xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005eee:	4b47      	ldr	r3, [pc, #284]	; (800600c <vPalete+0x164>)
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	2318      	movs	r3, #24
 8005ef4:	18f9      	adds	r1, r7, r3
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f7fa fea5 	bl	8000c48 <xQueueGenericSend>
        xSemaphoreTake(S_Palete, portMAX_DELAY);
 8005efe:	4b42      	ldr	r3, [pc, #264]	; (8006008 <vPalete+0x160>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2201      	movs	r2, #1
 8005f04:	4252      	negs	r2, r2
 8005f06:	0011      	movs	r1, r2
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f7fb fbc5 	bl	8001698 <xQueueSemaphoreTake>

        // Deactivate the distribution (A9) and activate palette loading (A10)
        FACTORY_IO_Actuators_Set(A9_OFF | A10_ON, A9_Msk | A10_Msk, actuator_write_buffer);
 8005f0e:	197a      	adds	r2, r7, r5
 8005f10:	23c0      	movs	r3, #192	; 0xc0
 8005f12:	0119      	lsls	r1, r3, #4
 8005f14:	2380      	movs	r3, #128	; 0x80
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f000 fd3d 	bl	8006998 <FACTORY_IO_Actuators_Set>
        pm = &actuator_write_buffer;
 8005f1e:	197b      	adds	r3, r7, r5
 8005f20:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xPublishQueue, &pm, 0);
 8005f22:	4b38      	ldr	r3, [pc, #224]	; (8006004 <vPalete+0x15c>)
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	19b9      	adds	r1, r7, r6
 8005f28:	2300      	movs	r3, #0
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f7fa fe8c 	bl	8000c48 <xQueueGenericSend>

        // Wait for the palette to reach the end of the support (palette exit)
        sub.sensor_mask = S9_Pos;
 8005f30:	193b      	adds	r3, r7, r4
 8005f32:	2280      	movs	r2, #128	; 0x80
 8005f34:	00d2      	lsls	r2, r2, #3
 8005f36:	605a      	str	r2, [r3, #4]
        sub.sensor_state = S9_ON;
 8005f38:	193b      	adds	r3, r7, r4
 8005f3a:	2280      	movs	r2, #128	; 0x80
 8005f3c:	00d2      	lsls	r2, r2, #3
 8005f3e:	609a      	str	r2, [r3, #8]
        sub.sem_id = &S_Palete;
 8005f40:	193b      	adds	r3, r7, r4
 8005f42:	4a31      	ldr	r2, [pc, #196]	; (8006008 <vPalete+0x160>)
 8005f44:	601a      	str	r2, [r3, #0]
        sub_pm = &sub;
 8005f46:	193b      	adds	r3, r7, r4
 8005f48:	61bb      	str	r3, [r7, #24]
        xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005f4a:	4b30      	ldr	r3, [pc, #192]	; (800600c <vPalete+0x164>)
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	2318      	movs	r3, #24
 8005f50:	18f9      	adds	r1, r7, r3
 8005f52:	2300      	movs	r3, #0
 8005f54:	2200      	movs	r2, #0
 8005f56:	f7fa fe77 	bl	8000c48 <xQueueGenericSend>
        xSemaphoreTake(S_Palete, portMAX_DELAY);
 8005f5a:	4b2b      	ldr	r3, [pc, #172]	; (8006008 <vPalete+0x160>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	4252      	negs	r2, r2
 8005f62:	0011      	movs	r1, r2
 8005f64:	0018      	movs	r0, r3
 8005f66:	f7fb fb97 	bl	8001698 <xQueueSemaphoreTake>

        // Deactivate the distribution, loading, and conveyor to the elevator
        FACTORY_IO_Actuators_Set(A10_OFF | A16_OFF, A10_Msk | A16_Msk, actuator_write_buffer);
 8005f6a:	197a      	adds	r2, r7, r5
 8005f6c:	2381      	movs	r3, #129	; 0x81
 8005f6e:	02db      	lsls	r3, r3, #11
 8005f70:	0019      	movs	r1, r3
 8005f72:	2000      	movs	r0, #0
 8005f74:	f000 fd10 	bl	8006998 <FACTORY_IO_Actuators_Set>
        pm = &actuator_write_buffer;
 8005f78:	197b      	adds	r3, r7, r5
 8005f7a:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xPublishQueue, &pm, 0);
 8005f7c:	4b21      	ldr	r3, [pc, #132]	; (8006004 <vPalete+0x15c>)
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	19b9      	adds	r1, r7, r6
 8005f82:	2300      	movs	r3, #0
 8005f84:	2200      	movs	r2, #0
 8005f86:	f7fa fe5f 	bl	8000c48 <xQueueGenericSend>

        // Send synchronization signal to indicate that the palette is in place
        xEventGroupSetBits(taskSync, ARRIVED_PALETE);
 8005f8a:	4b21      	ldr	r3, [pc, #132]	; (8006010 <vPalete+0x168>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2140      	movs	r1, #64	; 0x40
 8005f90:	0018      	movs	r0, r3
 8005f92:	f7fa fb71 	bl	8000678 <xEventGroupSetBits>

        // Wait for synchronization indicating that the palette is ready to be sent
        xEventGroupWaitBits(taskSync, SEND_PALETE, pdTRUE, pdTRUE, portMAX_DELAY);
 8005f96:	4b1e      	ldr	r3, [pc, #120]	; (8006010 <vPalete+0x168>)
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	425b      	negs	r3, r3
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	2180      	movs	r1, #128	; 0x80
 8005fa6:	f7fa fa79 	bl	800049c <xEventGroupWaitBits>

        // Activate palette loading
        FACTORY_IO_Actuators_Set(A10_ON, A10_Msk, actuator_write_buffer);
 8005faa:	197a      	adds	r2, r7, r5
 8005fac:	2380      	movs	r3, #128	; 0x80
 8005fae:	0119      	lsls	r1, r3, #4
 8005fb0:	2380      	movs	r3, #128	; 0x80
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	f000 fcef 	bl	8006998 <FACTORY_IO_Actuators_Set>
        pm = &actuator_write_buffer;
 8005fba:	197b      	adds	r3, r7, r5
 8005fbc:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xPublishQueue, &pm, 0);
 8005fbe:	4b11      	ldr	r3, [pc, #68]	; (8006004 <vPalete+0x15c>)
 8005fc0:	6818      	ldr	r0, [r3, #0]
 8005fc2:	19b9      	adds	r1, r7, r6
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f7fa fe3e 	bl	8000c48 <xQueueGenericSend>

        // Wait for the palette to leave
        sub.sensor_state = S9_OFF;
 8005fcc:	193b      	adds	r3, r7, r4
 8005fce:	2200      	movs	r2, #0
 8005fd0:	609a      	str	r2, [r3, #8]
        sub_pm = &sub;
 8005fd2:	193b      	adds	r3, r7, r4
 8005fd4:	61bb      	str	r3, [r7, #24]
        xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	; (800600c <vPalete+0x164>)
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	2318      	movs	r3, #24
 8005fdc:	18f9      	adds	r1, r7, r3
 8005fde:	2300      	movs	r3, #0
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f7fa fe31 	bl	8000c48 <xQueueGenericSend>
        xSemaphoreTake(S_Palete, portMAX_DELAY);
 8005fe6:	4b08      	ldr	r3, [pc, #32]	; (8006008 <vPalete+0x160>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2201      	movs	r2, #1
 8005fec:	4252      	negs	r2, r2
 8005fee:	0011      	movs	r1, r2
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f7fb fb51 	bl	8001698 <xQueueSemaphoreTake>

        vTaskDelay(100 / TIMEBASE);
 8005ff6:	200a      	movs	r0, #10
 8005ff8:	f7fc f8ac 	bl	8002154 <vTaskDelay>
        FACTORY_IO_Actuators_Set(A16_ON | A17_ON | A9_ON, A16_Msk | A17_Msk | A9_Msk, actuator_write_buffer);
 8005ffc:	e758      	b.n	8005eb0 <vPalete+0x8>
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	000c0400 	.word	0x000c0400
 8006004:	20003928 	.word	0x20003928
 8006008:	20003938 	.word	0x20003938
 800600c:	20003924 	.word	0x20003924
 8006010:	20003948 	.word	0x20003948

08006014 <vEstado>:
    }
}

void vEstado(void *pvParameters) {
 8006014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006016:	b08d      	sub	sp, #52	; 0x34
 8006018:	af02      	add	r7, sp, #8
 800601a:	6078      	str	r0, [r7, #4]
    // This delay ensures that this task does not take the Mutex
    // before the pusher task
    vTaskDelay(50 / TIMEBASE);
 800601c:	2005      	movs	r0, #5
 800601e:	f7fc f899 	bl	8002154 <vTaskDelay>
    command_message_t actuator_write_buffer;
    command_message_t *pm;

    while (1) {
        // Acquire the Mutex from the pusher task
        xSemaphoreTake(M_Push, portMAX_DELAY);
 8006022:	4b69      	ldr	r3, [pc, #420]	; (80061c8 <vEstado+0x1b4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2201      	movs	r2, #1
 8006028:	4252      	negs	r2, r2
 800602a:	0011      	movs	r1, r2
 800602c:	0018      	movs	r0, r3
 800602e:	f7fb fb33 	bl	8001698 <xQueueSemaphoreTake>

        // Activate the etau
        FACTORY_IO_Actuators_Set(A5_ON, A5_Msk, actuator_write_buffer);
 8006032:	2510      	movs	r5, #16
 8006034:	197b      	adds	r3, r7, r5
 8006036:	001a      	movs	r2, r3
 8006038:	2120      	movs	r1, #32
 800603a:	2020      	movs	r0, #32
 800603c:	f000 fcac 	bl	8006998 <FACTORY_IO_Actuators_Set>
        pm = &actuator_write_buffer;
 8006040:	197b      	adds	r3, r7, r5
 8006042:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xPublishQueue, &pm, 0);
 8006044:	4b61      	ldr	r3, [pc, #388]	; (80061cc <vEstado+0x1b8>)
 8006046:	6818      	ldr	r0, [r3, #0]
 8006048:	260c      	movs	r6, #12
 800604a:	19b9      	adds	r1, r7, r6
 800604c:	2300      	movs	r3, #0
 800604e:	2200      	movs	r2, #0
 8006050:	f7fa fdfa 	bl	8000c48 <xQueueGenericSend>

        // Wait for the etau to be tightened
        sub.sensor_mask = S5_Pos;
 8006054:	241c      	movs	r4, #28
 8006056:	193b      	adds	r3, r7, r4
 8006058:	2220      	movs	r2, #32
 800605a:	605a      	str	r2, [r3, #4]
        sub.sensor_state = S5_ON;
 800605c:	193b      	adds	r3, r7, r4
 800605e:	2220      	movs	r2, #32
 8006060:	609a      	str	r2, [r3, #8]
        sub.sem_id = &S_Estado;
 8006062:	193b      	adds	r3, r7, r4
 8006064:	4a5a      	ldr	r2, [pc, #360]	; (80061d0 <vEstado+0x1bc>)
 8006066:	601a      	str	r2, [r3, #0]
        sub_pm = &sub;
 8006068:	193b      	adds	r3, r7, r4
 800606a:	61bb      	str	r3, [r7, #24]
        xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800606c:	4b59      	ldr	r3, [pc, #356]	; (80061d4 <vEstado+0x1c0>)
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	2318      	movs	r3, #24
 8006072:	18f9      	adds	r1, r7, r3
 8006074:	2300      	movs	r3, #0
 8006076:	2200      	movs	r2, #0
 8006078:	f7fa fde6 	bl	8000c48 <xQueueGenericSend>
        xSemaphoreTake(S_Estado, portMAX_DELAY);
 800607c:	4b54      	ldr	r3, [pc, #336]	; (80061d0 <vEstado+0x1bc>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2201      	movs	r2, #1
 8006082:	4252      	negs	r2, r2
 8006084:	0011      	movs	r1, r2
 8006086:	0018      	movs	r0, r3
 8006088:	f7fb fb06 	bl	8001698 <xQueueSemaphoreTake>

        // Wait for the authorization to open the trap
        xEventGroupWaitBits(taskSync, OPEN_TRAPE, pdTRUE, pdTRUE, portMAX_DELAY);
 800608c:	4b52      	ldr	r3, [pc, #328]	; (80061d8 <vEstado+0x1c4>)
 800608e:	6818      	ldr	r0, [r3, #0]
 8006090:	2301      	movs	r3, #1
 8006092:	425b      	negs	r3, r3
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	2301      	movs	r3, #1
 8006098:	2201      	movs	r2, #1
 800609a:	2110      	movs	r1, #16
 800609c:	f7fa f9fe 	bl	800049c <xEventGroupWaitBits>

        // Open the trap
        FACTORY_IO_Actuators_Set(A3_ON, A3_Msk, actuator_write_buffer);
 80060a0:	197b      	adds	r3, r7, r5
 80060a2:	001a      	movs	r2, r3
 80060a4:	2108      	movs	r1, #8
 80060a6:	2008      	movs	r0, #8
 80060a8:	f000 fc76 	bl	8006998 <FACTORY_IO_Actuators_Set>
        pm = &actuator_write_buffer;
 80060ac:	197b      	adds	r3, r7, r5
 80060ae:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xPublishQueue, &pm, 0);
 80060b0:	4b46      	ldr	r3, [pc, #280]	; (80061cc <vEstado+0x1b8>)
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	19b9      	adds	r1, r7, r6
 80060b6:	2300      	movs	r3, #0
 80060b8:	2200      	movs	r2, #0
 80060ba:	f7fa fdc5 	bl	8000c48 <xQueueGenericSend>

        // Wait for the trap to be opened
        sub.sensor_mask = S3_Pos;
 80060be:	193b      	adds	r3, r7, r4
 80060c0:	2208      	movs	r2, #8
 80060c2:	605a      	str	r2, [r3, #4]
        sub.sensor_state = S3_ON;
 80060c4:	193b      	adds	r3, r7, r4
 80060c6:	2208      	movs	r2, #8
 80060c8:	609a      	str	r2, [r3, #8]
        sub_pm = &sub;
 80060ca:	193b      	adds	r3, r7, r4
 80060cc:	61bb      	str	r3, [r7, #24]
        xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80060ce:	4b41      	ldr	r3, [pc, #260]	; (80061d4 <vEstado+0x1c0>)
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	2318      	movs	r3, #24
 80060d4:	18f9      	adds	r1, r7, r3
 80060d6:	2300      	movs	r3, #0
 80060d8:	2200      	movs	r2, #0
 80060da:	f7fa fdb5 	bl	8000c48 <xQueueGenericSend>
        xSemaphoreTake(S_Estado, portMAX_DELAY);
 80060de:	4b3c      	ldr	r3, [pc, #240]	; (80061d0 <vEstado+0x1bc>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2201      	movs	r2, #1
 80060e4:	4252      	negs	r2, r2
 80060e6:	0011      	movs	r1, r2
 80060e8:	0018      	movs	r0, r3
 80060ea:	f7fb fad5 	bl	8001698 <xQueueSemaphoreTake>

        // Deactivate the etau to release the cartons
        FACTORY_IO_Actuators_Set(A5_OFF, A5_Msk, actuator_write_buffer);
 80060ee:	197b      	adds	r3, r7, r5
 80060f0:	001a      	movs	r2, r3
 80060f2:	2120      	movs	r1, #32
 80060f4:	2000      	movs	r0, #0
 80060f6:	f000 fc4f 	bl	8006998 <FACTORY_IO_Actuators_Set>
        pm = &actuator_write_buffer;
 80060fa:	197b      	adds	r3, r7, r5
 80060fc:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xPublishQueue, &pm, 0);
 80060fe:	4b33      	ldr	r3, [pc, #204]	; (80061cc <vEstado+0x1b8>)
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	19b9      	adds	r1, r7, r6
 8006104:	2300      	movs	r3, #0
 8006106:	2200      	movs	r2, #0
 8006108:	f7fa fd9e 	bl	8000c48 <xQueueGenericSend>

        // Wait for the etau to return to its initial position
        sub.sensor_mask = S5_Pos;
 800610c:	193b      	adds	r3, r7, r4
 800610e:	2220      	movs	r2, #32
 8006110:	605a      	str	r2, [r3, #4]
        sub.sensor_state = S5_OFF;
 8006112:	193b      	adds	r3, r7, r4
 8006114:	2200      	movs	r2, #0
 8006116:	609a      	str	r2, [r3, #8]
        sub_pm = &sub;
 8006118:	193b      	adds	r3, r7, r4
 800611a:	61bb      	str	r3, [r7, #24]
        xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800611c:	4b2d      	ldr	r3, [pc, #180]	; (80061d4 <vEstado+0x1c0>)
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	2318      	movs	r3, #24
 8006122:	18f9      	adds	r1, r7, r3
 8006124:	2300      	movs	r3, #0
 8006126:	2200      	movs	r2, #0
 8006128:	f7fa fd8e 	bl	8000c48 <xQueueGenericSend>
        xSemaphoreTake(S_Estado, portMAX_DELAY);
 800612c:	4b28      	ldr	r3, [pc, #160]	; (80061d0 <vEstado+0x1bc>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2201      	movs	r2, #1
 8006132:	4252      	negs	r2, r2
 8006134:	0011      	movs	r1, r2
 8006136:	0018      	movs	r0, r3
 8006138:	f7fb faae 	bl	8001698 <xQueueSemaphoreTake>

        // Synchronization to indicate that the cartons are deposited to the elevator
        xEventGroupSetBits(taskSync, BOXES_STOREDS);
 800613c:	4b26      	ldr	r3, [pc, #152]	; (80061d8 <vEstado+0x1c4>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2120      	movs	r1, #32
 8006142:	0018      	movs	r0, r3
 8006144:	f7fa fa98 	bl	8000678 <xEventGroupSetBits>

        // Delay to allow time for the cartons to fall and the elevator to
        // reposition (downward)
        vTaskDelay(500 / TIMEBASE);
 8006148:	2032      	movs	r0, #50	; 0x32
 800614a:	f7fc f803 	bl	8002154 <vTaskDelay>

        // Wait for synchronization allowing the trap to be closed
        xEventGroupWaitBits(taskSync, CLOSE_PORT, pdTRUE, pdTRUE, portMAX_DELAY);
 800614e:	4b22      	ldr	r3, [pc, #136]	; (80061d8 <vEstado+0x1c4>)
 8006150:	6818      	ldr	r0, [r3, #0]
 8006152:	2380      	movs	r3, #128	; 0x80
 8006154:	0059      	lsls	r1, r3, #1
 8006156:	2301      	movs	r3, #1
 8006158:	425b      	negs	r3, r3
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	2301      	movs	r3, #1
 800615e:	2201      	movs	r2, #1
 8006160:	f7fa f99c 	bl	800049c <xEventGroupWaitBits>

        // Close the trap
        FACTORY_IO_Actuators_Set(A3_OFF, A3_Msk, actuator_write_buffer);
 8006164:	197b      	adds	r3, r7, r5
 8006166:	001a      	movs	r2, r3
 8006168:	2108      	movs	r1, #8
 800616a:	2000      	movs	r0, #0
 800616c:	f000 fc14 	bl	8006998 <FACTORY_IO_Actuators_Set>
        pm = &actuator_write_buffer;
 8006170:	197b      	adds	r3, r7, r5
 8006172:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xPublishQueue, &pm, 0);
 8006174:	4b15      	ldr	r3, [pc, #84]	; (80061cc <vEstado+0x1b8>)
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	19b9      	adds	r1, r7, r6
 800617a:	2300      	movs	r3, #0
 800617c:	2200      	movs	r2, #0
 800617e:	f7fa fd63 	bl	8000c48 <xQueueGenericSend>

        // Wait for the trap to be closed
        sub.sensor_mask = S3_Pos;
 8006182:	193b      	adds	r3, r7, r4
 8006184:	2208      	movs	r2, #8
 8006186:	605a      	str	r2, [r3, #4]
        sub.sensor_state = S3_OFF;
 8006188:	193b      	adds	r3, r7, r4
 800618a:	2200      	movs	r2, #0
 800618c:	609a      	str	r2, [r3, #8]
        sub_pm = &sub;
 800618e:	193b      	adds	r3, r7, r4
 8006190:	61bb      	str	r3, [r7, #24]
        xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8006192:	4b10      	ldr	r3, [pc, #64]	; (80061d4 <vEstado+0x1c0>)
 8006194:	6818      	ldr	r0, [r3, #0]
 8006196:	2318      	movs	r3, #24
 8006198:	18f9      	adds	r1, r7, r3
 800619a:	2300      	movs	r3, #0
 800619c:	2200      	movs	r2, #0
 800619e:	f7fa fd53 	bl	8000c48 <xQueueGenericSend>
        xSemaphoreTake(S_Estado, portMAX_DELAY);
 80061a2:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <vEstado+0x1bc>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2201      	movs	r2, #1
 80061a8:	4252      	negs	r2, r2
 80061aa:	0011      	movs	r1, r2
 80061ac:	0018      	movs	r0, r3
 80061ae:	f7fb fa73 	bl	8001698 <xQueueSemaphoreTake>

        // Return the semaphore to the pusher task
        xSemaphoreGive(M_Push);
 80061b2:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <vEstado+0x1b4>)
 80061b4:	6818      	ldr	r0, [r3, #0]
 80061b6:	2300      	movs	r3, #0
 80061b8:	2200      	movs	r2, #0
 80061ba:	2100      	movs	r1, #0
 80061bc:	f7fa fd44 	bl	8000c48 <xQueueGenericSend>

        vTaskDelay(100 / TIMEBASE);
 80061c0:	200a      	movs	r0, #10
 80061c2:	f7fb ffc7 	bl	8002154 <vTaskDelay>
        xSemaphoreTake(M_Push, portMAX_DELAY);
 80061c6:	e72c      	b.n	8006022 <vEstado+0xe>
 80061c8:	2000392c 	.word	0x2000392c
 80061cc:	20003928 	.word	0x20003928
 80061d0:	20003940 	.word	0x20003940
 80061d4:	20003924 	.word	0x20003924
 80061d8:	20003948 	.word	0x20003948

080061dc <vElevador>:
    }
}

void vElevador(void *pvParameters) {
 80061dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061de:	b08d      	sub	sp, #52	; 0x34
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	6078      	str	r0, [r7, #4]
    command_message_t actuator_write_buffer;
    command_message_t *pm;

    while (1) {
        // Wait for a palette to arrive
        xEventGroupWaitBits(taskSync, ARRIVED_PALETE, pdTRUE, pdTRUE, portMAX_DELAY);
 80061e4:	4b7e      	ldr	r3, [pc, #504]	; (80063e0 <vElevador+0x204>)
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	2301      	movs	r3, #1
 80061ea:	425b      	negs	r3, r3
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	2301      	movs	r3, #1
 80061f0:	2201      	movs	r2, #1
 80061f2:	2140      	movs	r1, #64	; 0x40
 80061f4:	f7fa f952 	bl	800049c <xEventGroupWaitBits>

        // Move up to the limit
        FACTORY_IO_Actuators_Set(A6_ON | A8_ON, A6_Msk | A8_Msk, actuator_write_buffer);
 80061f8:	2410      	movs	r4, #16
 80061fa:	193a      	adds	r2, r7, r4
 80061fc:	2390      	movs	r3, #144	; 0x90
 80061fe:	0099      	lsls	r1, r3, #2
 8006200:	2390      	movs	r3, #144	; 0x90
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	0018      	movs	r0, r3
 8006206:	f000 fbc7 	bl	8006998 <FACTORY_IO_Actuators_Set>
        pm = &actuator_write_buffer;
 800620a:	193b      	adds	r3, r7, r4
 800620c:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xPublishQueue, &pm, 0);
 800620e:	4b75      	ldr	r3, [pc, #468]	; (80063e4 <vElevador+0x208>)
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	260c      	movs	r6, #12
 8006214:	19b9      	adds	r1, r7, r6
 8006216:	2300      	movs	r3, #0
 8006218:	2200      	movs	r2, #0
 800621a:	f7fa fd15 	bl	8000c48 <xQueueGenericSend>

        // Arrive at floor 1
        sub.sensor_mask = S7_Pos;
 800621e:	251c      	movs	r5, #28
 8006220:	197b      	adds	r3, r7, r5
 8006222:	2280      	movs	r2, #128	; 0x80
 8006224:	0052      	lsls	r2, r2, #1
 8006226:	605a      	str	r2, [r3, #4]
        sub.sensor_state = S7_ON;
 8006228:	197b      	adds	r3, r7, r5
 800622a:	2280      	movs	r2, #128	; 0x80
 800622c:	0052      	lsls	r2, r2, #1
 800622e:	609a      	str	r2, [r3, #8]
        sub.sem_id = &S_Elevador;
 8006230:	197b      	adds	r3, r7, r5
 8006232:	4a6d      	ldr	r2, [pc, #436]	; (80063e8 <vElevador+0x20c>)
 8006234:	601a      	str	r2, [r3, #0]
        sub_pm = &sub;
 8006236:	197b      	adds	r3, r7, r5
 8006238:	61bb      	str	r3, [r7, #24]
        xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800623a:	4b6c      	ldr	r3, [pc, #432]	; (80063ec <vElevador+0x210>)
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	2318      	movs	r3, #24
 8006240:	18f9      	adds	r1, r7, r3
 8006242:	2300      	movs	r3, #0
 8006244:	2200      	movs	r2, #0
 8006246:	f7fa fcff 	bl	8000c48 <xQueueGenericSend>
        xSemaphoreTake(S_Elevador, portMAX_DELAY);
 800624a:	4b67      	ldr	r3, [pc, #412]	; (80063e8 <vElevador+0x20c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2201      	movs	r2, #1
 8006250:	4252      	negs	r2, r2
 8006252:	0011      	movs	r1, r2
 8006254:	0018      	movs	r0, r3
 8006256:	f7fb fa1f 	bl	8001698 <xQueueSemaphoreTake>

        // Command to open the trap
        xEventGroupSetBits(taskSync, OPEN_TRAPE);
 800625a:	4b61      	ldr	r3, [pc, #388]	; (80063e0 <vElevador+0x204>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2110      	movs	r1, #16
 8006260:	0018      	movs	r0, r3
 8006262:	f7fa fa09 	bl	8000678 <xEventGroupSetBits>

        // Deactivate the upward movement and the top limit
        FACTORY_IO_Actuators_Set(A6_OFF | A8_OFF, A6_Msk | A8_Msk, actuator_write_buffer);
 8006266:	193a      	adds	r2, r7, r4
 8006268:	2390      	movs	r3, #144	; 0x90
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	0019      	movs	r1, r3
 800626e:	2000      	movs	r0, #0
 8006270:	f000 fb92 	bl	8006998 <FACTORY_IO_Actuators_Set>
        pm = &actuator_write_buffer;
 8006274:	193b      	adds	r3, r7, r4
 8006276:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xPublishQueue, &pm, 0);
 8006278:	4b5a      	ldr	r3, [pc, #360]	; (80063e4 <vElevador+0x208>)
 800627a:	6818      	ldr	r0, [r3, #0]
 800627c:	19b9      	adds	r1, r7, r6
 800627e:	2300      	movs	r3, #0
 8006280:	2200      	movs	r2, #0
 8006282:	f7fa fce1 	bl	8000c48 <xQueueGenericSend>

        // Wait for the deposit of 6 cartons
        xEventGroupWaitBits(taskSync, BOXES_STOREDS, pdTRUE, pdTRUE, portMAX_DELAY);
 8006286:	4b56      	ldr	r3, [pc, #344]	; (80063e0 <vElevador+0x204>)
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	2301      	movs	r3, #1
 800628c:	425b      	negs	r3, r3
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	2301      	movs	r3, #1
 8006292:	2201      	movs	r2, #1
 8006294:	2120      	movs	r1, #32
 8006296:	f7fa f901 	bl	800049c <xEventGroupWaitBits>

        // Move down
        FACTORY_IO_Actuators_Set(A7_ON, A7_Msk, actuator_write_buffer);
 800629a:	193a      	adds	r2, r7, r4
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	0059      	lsls	r1, r3, #1
 80062a0:	2380      	movs	r3, #128	; 0x80
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	0018      	movs	r0, r3
 80062a6:	f000 fb77 	bl	8006998 <FACTORY_IO_Actuators_Set>
        pm = &actuator_write_buffer;
 80062aa:	193b      	adds	r3, r7, r4
 80062ac:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xPublishQueue, &pm, 0);
 80062ae:	4b4d      	ldr	r3, [pc, #308]	; (80063e4 <vElevador+0x208>)
 80062b0:	6818      	ldr	r0, [r3, #0]
 80062b2:	19b9      	adds	r1, r7, r6
 80062b4:	2300      	movs	r3, #0
 80062b6:	2200      	movs	r2, #0
 80062b8:	f7fa fcc6 	bl	8000c48 <xQueueGenericSend>

        // Leave floor 7
        sub.sensor_mask = S7_Pos;
 80062bc:	197b      	adds	r3, r7, r5
 80062be:	2280      	movs	r2, #128	; 0x80
 80062c0:	0052      	lsls	r2, r2, #1
 80062c2:	605a      	str	r2, [r3, #4]
        sub.sensor_state = S7_OFF;
 80062c4:	197b      	adds	r3, r7, r5
 80062c6:	2200      	movs	r2, #0
 80062c8:	609a      	str	r2, [r3, #8]
        sub.sem_id = &S_Elevador;
 80062ca:	197b      	adds	r3, r7, r5
 80062cc:	4a46      	ldr	r2, [pc, #280]	; (80063e8 <vElevador+0x20c>)
 80062ce:	601a      	str	r2, [r3, #0]
        sub_pm = &sub;
 80062d0:	197b      	adds	r3, r7, r5
 80062d2:	61bb      	str	r3, [r7, #24]
        xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80062d4:	4b45      	ldr	r3, [pc, #276]	; (80063ec <vElevador+0x210>)
 80062d6:	6818      	ldr	r0, [r3, #0]
 80062d8:	2318      	movs	r3, #24
 80062da:	18f9      	adds	r1, r7, r3
 80062dc:	2300      	movs	r3, #0
 80062de:	2200      	movs	r2, #0
 80062e0:	f7fa fcb2 	bl	8000c48 <xQueueGenericSend>
        xSemaphoreTake(S_Elevador, portMAX_DELAY);
 80062e4:	4b40      	ldr	r3, [pc, #256]	; (80063e8 <vElevador+0x20c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2201      	movs	r2, #1
 80062ea:	4252      	negs	r2, r2
 80062ec:	0011      	movs	r1, r2
 80062ee:	0018      	movs	r0, r3
 80062f0:	f7fb f9d2 	bl	8001698 <xQueueSemaphoreTake>

        // Deactivate the descent
        FACTORY_IO_Actuators_Set(A7_OFF, A7_Msk, actuator_write_buffer);
 80062f4:	193a      	adds	r2, r7, r4
 80062f6:	2380      	movs	r3, #128	; 0x80
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	0019      	movs	r1, r3
 80062fc:	2000      	movs	r0, #0
 80062fe:	f000 fb4b 	bl	8006998 <FACTORY_IO_Actuators_Set>
        pm = &actuator_write_buffer;
 8006302:	193b      	adds	r3, r7, r4
 8006304:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xPublishQueue, &pm, 0);
 8006306:	4b37      	ldr	r3, [pc, #220]	; (80063e4 <vElevador+0x208>)
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	19b9      	adds	r1, r7, r6
 800630c:	2300      	movs	r3, #0
 800630e:	2200      	movs	r2, #0
 8006310:	f7fa fc9a 	bl	8000c48 <xQueueGenericSend>

        // Command to close the trap
        xEventGroupSetBits(taskSync, CLOSE_PORT);
 8006314:	4b32      	ldr	r3, [pc, #200]	; (80063e0 <vElevador+0x204>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2280      	movs	r2, #128	; 0x80
 800631a:	0052      	lsls	r2, r2, #1
 800631c:	0011      	movs	r1, r2
 800631e:	0018      	movs	r0, r3
 8006320:	f7fa f9aa 	bl	8000678 <xEventGroupSetBits>

        // Indicate readiness for a new trap opening
        xEventGroupSetBits(taskSync, OPEN_TRAPE);
 8006324:	4b2e      	ldr	r3, [pc, #184]	; (80063e0 <vElevador+0x204>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2110      	movs	r1, #16
 800632a:	0018      	movs	r0, r3
 800632c:	f7fa f9a4 	bl	8000678 <xEventGroupSetBits>

        // Wait for the deposit of 6 cartons
        xEventGroupWaitBits(taskSync, BOXES_STOREDS, pdTRUE, pdTRUE, portMAX_DELAY);
 8006330:	4b2b      	ldr	r3, [pc, #172]	; (80063e0 <vElevador+0x204>)
 8006332:	6818      	ldr	r0, [r3, #0]
 8006334:	2301      	movs	r3, #1
 8006336:	425b      	negs	r3, r3
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	2301      	movs	r3, #1
 800633c:	2201      	movs	r2, #1
 800633e:	2120      	movs	r1, #32
 8006340:	f7fa f8ac 	bl	800049c <xEventGroupWaitBits>

        // Move down to the limit
        FACTORY_IO_Actuators_Set(A7_ON | A8_ON, A7_Msk | A8_Msk, actuator_write_buffer);
 8006344:	193a      	adds	r2, r7, r4
 8006346:	23c0      	movs	r3, #192	; 0xc0
 8006348:	0099      	lsls	r1, r3, #2
 800634a:	23c0      	movs	r3, #192	; 0xc0
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	0018      	movs	r0, r3
 8006350:	f000 fb22 	bl	8006998 <FACTORY_IO_Actuators_Set>
        pm = &actuator_write_buffer;
 8006354:	193b      	adds	r3, r7, r4
 8006356:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xPublishQueue, &pm, 0);
 8006358:	4b22      	ldr	r3, [pc, #136]	; (80063e4 <vElevador+0x208>)
 800635a:	6818      	ldr	r0, [r3, #0]
 800635c:	19b9      	adds	r1, r7, r6
 800635e:	2300      	movs	r3, #0
 8006360:	2200      	movs	r2, #0
 8006362:	f7fa fc71 	bl	8000c48 <xQueueGenericSend>

        // Reach the ground floor
        sub.sensor_mask = S6_Pos;
 8006366:	197b      	adds	r3, r7, r5
 8006368:	2240      	movs	r2, #64	; 0x40
 800636a:	605a      	str	r2, [r3, #4]
        sub.sensor_state = S6_ON;
 800636c:	197b      	adds	r3, r7, r5
 800636e:	2240      	movs	r2, #64	; 0x40
 8006370:	609a      	str	r2, [r3, #8]
        sub.sem_id = &S_Elevador;
 8006372:	197b      	adds	r3, r7, r5
 8006374:	4a1c      	ldr	r2, [pc, #112]	; (80063e8 <vElevador+0x20c>)
 8006376:	601a      	str	r2, [r3, #0]
        sub_pm = &sub;
 8006378:	197b      	adds	r3, r7, r5
 800637a:	61bb      	str	r3, [r7, #24]
        xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <vElevador+0x210>)
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	2318      	movs	r3, #24
 8006382:	18f9      	adds	r1, r7, r3
 8006384:	2300      	movs	r3, #0
 8006386:	2200      	movs	r2, #0
 8006388:	f7fa fc5e 	bl	8000c48 <xQueueGenericSend>
        xSemaphoreTake(S_Elevador, portMAX_DELAY);
 800638c:	4b16      	ldr	r3, [pc, #88]	; (80063e8 <vElevador+0x20c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2201      	movs	r2, #1
 8006392:	4252      	negs	r2, r2
 8006394:	0011      	movs	r1, r2
 8006396:	0018      	movs	r0, r3
 8006398:	f7fb f97e 	bl	8001698 <xQueueSemaphoreTake>

        // Command to close the door
        xEventGroupSetBits(taskSync, CLOSE_PORT);
 800639c:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <vElevador+0x204>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2280      	movs	r2, #128	; 0x80
 80063a2:	0052      	lsls	r2, r2, #1
 80063a4:	0011      	movs	r1, r2
 80063a6:	0018      	movs	r0, r3
 80063a8:	f7fa f966 	bl	8000678 <xEventGroupSetBits>

        // Command to send the palette
        xEventGroupSetBits(taskSync, SEND_PALETE);
 80063ac:	4b0c      	ldr	r3, [pc, #48]	; (80063e0 <vElevador+0x204>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2180      	movs	r1, #128	; 0x80
 80063b2:	0018      	movs	r0, r3
 80063b4:	f7fa f960 	bl	8000678 <xEventGroupSetBits>

        // Deactivate the descent and the bottom limit
        FACTORY_IO_Actuators_Set(A7_OFF | A8_OFF, A7_Msk | A8_Msk, actuator_write_buffer);
 80063b8:	193a      	adds	r2, r7, r4
 80063ba:	23c0      	movs	r3, #192	; 0xc0
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	0019      	movs	r1, r3
 80063c0:	2000      	movs	r0, #0
 80063c2:	f000 fae9 	bl	8006998 <FACTORY_IO_Actuators_Set>
        pm = &actuator_write_buffer;
 80063c6:	193b      	adds	r3, r7, r4
 80063c8:	60fb      	str	r3, [r7, #12]
        xQueueSendToBack(xPublishQueue, &pm, 0);
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <vElevador+0x208>)
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	19b9      	adds	r1, r7, r6
 80063d0:	2300      	movs	r3, #0
 80063d2:	2200      	movs	r2, #0
 80063d4:	f7fa fc38 	bl	8000c48 <xQueueGenericSend>

        vTaskDelay(100 / TIMEBASE);
 80063d8:	200a      	movs	r0, #10
 80063da:	f7fb febb 	bl	8002154 <vTaskDelay>
        xEventGroupWaitBits(taskSync, ARRIVED_PALETE, pdTRUE, pdTRUE, portMAX_DELAY);
 80063de:	e701      	b.n	80061e4 <vElevador+0x8>
 80063e0:	20003948 	.word	0x20003948
 80063e4:	20003928 	.word	0x20003928
 80063e8:	2000393c 	.word	0x2000393c
 80063ec:	20003924 	.word	0x20003924

080063f0 <vTask_Pub>:
    }
}

void vTask_Pub(void *pvParameters) {
 80063f0:	b5b0      	push	{r4, r5, r7, lr}
 80063f2:	b098      	sub	sp, #96	; 0x60
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
    // Take the semaphores once to make sure they are empty
    xSemaphoreTake(S_SendBox, 0);
 80063f8:	4b6f      	ldr	r3, [pc, #444]	; (80065b8 <vTask_Pub+0x1c8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2100      	movs	r1, #0
 80063fe:	0018      	movs	r0, r3
 8006400:	f7fb f94a 	bl	8001698 <xQueueSemaphoreTake>
    xSemaphoreTake(S_Push, 0);
 8006404:	4b6d      	ldr	r3, [pc, #436]	; (80065bc <vTask_Pub+0x1cc>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2100      	movs	r1, #0
 800640a:	0018      	movs	r0, r3
 800640c:	f7fb f944 	bl	8001698 <xQueueSemaphoreTake>
    xSemaphoreTake(S_Palete, 0);
 8006410:	4b6b      	ldr	r3, [pc, #428]	; (80065c0 <vTask_Pub+0x1d0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2100      	movs	r1, #0
 8006416:	0018      	movs	r0, r3
 8006418:	f7fb f93e 	bl	8001698 <xQueueSemaphoreTake>
    xSemaphoreTake(S_Elevador, 0);
 800641c:	4b69      	ldr	r3, [pc, #420]	; (80065c4 <vTask_Pub+0x1d4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2100      	movs	r1, #0
 8006422:	0018      	movs	r0, r3
 8006424:	f7fb f938 	bl	8001698 <xQueueSemaphoreTake>
    xSemaphoreTake(S_Estado, 0);
 8006428:	4b67      	ldr	r3, [pc, #412]	; (80065c8 <vTask_Pub+0x1d8>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2100      	movs	r1, #0
 800642e:	0018      	movs	r0, r3
 8006430:	f7fb f932 	bl	8001698 <xQueueSemaphoreTake>
    // Status of the queue receive
    portBASE_TYPE xStatus;

    // Init array of subscribers
    subscribe_message_t Sub_DB[SUB_SIZE];
    for (int i = 0; i < SUB_SIZE; i++) {
 8006434:	2300      	movs	r3, #0
 8006436:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006438:	e01f      	b.n	800647a <vTask_Pub+0x8a>
        Sub_DB[i].sem_id = NULL;
 800643a:	2010      	movs	r0, #16
 800643c:	1839      	adds	r1, r7, r0
 800643e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006440:	0013      	movs	r3, r2
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	189b      	adds	r3, r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	2200      	movs	r2, #0
 800644a:	505a      	str	r2, [r3, r1]
        Sub_DB[i].sensor_mask = 0;
 800644c:	1839      	adds	r1, r7, r0
 800644e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006450:	0013      	movs	r3, r2
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	189b      	adds	r3, r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	18cb      	adds	r3, r1, r3
 800645a:	3304      	adds	r3, #4
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
        Sub_DB[i].sensor_state = 0;
 8006460:	1839      	adds	r1, r7, r0
 8006462:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006464:	0013      	movs	r3, r2
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	189b      	adds	r3, r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	18cb      	adds	r3, r1, r3
 800646e:	3308      	adds	r3, #8
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < SUB_SIZE; i++) {
 8006474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006476:	3301      	adds	r3, #1
 8006478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800647a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800647c:	2b04      	cmp	r3, #4
 800647e:	dddc      	ble.n	800643a <vTask_Pub+0x4a>
    }

    uint8_t counter = 0; // Counts the index of the sensor array
 8006480:	235b      	movs	r3, #91	; 0x5b
 8006482:	18fb      	adds	r3, r7, r3
 8006484:	2200      	movs	r2, #0
 8006486:	701a      	strb	r2, [r3, #0]

    // Initialize timing
    portTickType xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
 8006488:	f7fb ffb2 	bl	80023f0 <xTaskGetTickCount>
 800648c:	0003      	movs	r3, r0
 800648e:	60fb      	str	r3, [r7, #12]

    while (1) {
        xStatus = xQueueReceive(xSubscribeQueue, &message, 0);
 8006490:	4b4e      	ldr	r3, [pc, #312]	; (80065cc <vTask_Pub+0x1dc>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	224c      	movs	r2, #76	; 0x4c
 8006496:	18b9      	adds	r1, r7, r2
 8006498:	2200      	movs	r2, #0
 800649a:	0018      	movs	r0, r3
 800649c:	f7fa ff46 	bl	800132c <xQueueReceive>
 80064a0:	0003      	movs	r3, r0
 80064a2:	653b      	str	r3, [r7, #80]	; 0x50

        if (xStatus == pdPASS) {
 80064a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d12b      	bne.n	8006502 <vTask_Pub+0x112>
            // Local variable declaration
            counter = 0;
 80064aa:	215b      	movs	r1, #91	; 0x5b
 80064ac:	187b      	adds	r3, r7, r1
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]

            // Search for an available slot in the subscription array
            // and copy the subscription into Sub_DB
            for (counter = 0; counter < SUB_SIZE; counter++) {
 80064b2:	187b      	adds	r3, r7, r1
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
 80064b8:	e01e      	b.n	80064f8 <vTask_Pub+0x108>
                if (Sub_DB[counter].sem_id == NULL) {
 80064ba:	245b      	movs	r4, #91	; 0x5b
 80064bc:	193b      	adds	r3, r7, r4
 80064be:	781a      	ldrb	r2, [r3, #0]
 80064c0:	2510      	movs	r5, #16
 80064c2:	1979      	adds	r1, r7, r5
 80064c4:	0013      	movs	r3, r2
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	189b      	adds	r3, r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	585b      	ldr	r3, [r3, r1]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10c      	bne.n	80064ec <vTask_Pub+0xfc>
                    Sub_DB[counter] = *message;
 80064d2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80064d4:	193b      	adds	r3, r7, r4
 80064d6:	781a      	ldrb	r2, [r3, #0]
 80064d8:	1979      	adds	r1, r7, r5
 80064da:	0013      	movs	r3, r2
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	18cb      	adds	r3, r1, r3
 80064e4:	0002      	movs	r2, r0
 80064e6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80064e8:	c313      	stmia	r3!, {r0, r1, r4}
                    break;
 80064ea:	e00a      	b.n	8006502 <vTask_Pub+0x112>
            for (counter = 0; counter < SUB_SIZE; counter++) {
 80064ec:	215b      	movs	r1, #91	; 0x5b
 80064ee:	187b      	adds	r3, r7, r1
 80064f0:	781a      	ldrb	r2, [r3, #0]
 80064f2:	187b      	adds	r3, r7, r1
 80064f4:	3201      	adds	r2, #1
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	235b      	movs	r3, #91	; 0x5b
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d9db      	bls.n	80064ba <vTask_Pub+0xca>
                }
            }
        }

        // Scan the array of registered subscriptions
        for (int i = 0; i < SUB_SIZE; i++) {
 8006502:	2300      	movs	r3, #0
 8006504:	657b      	str	r3, [r7, #84]	; 0x54
 8006506:	e04c      	b.n	80065a2 <vTask_Pub+0x1b2>
            // Check for existing subscriptions
            if (Sub_DB[i].sem_id != NULL) {
 8006508:	2410      	movs	r4, #16
 800650a:	1939      	adds	r1, r7, r4
 800650c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800650e:	0013      	movs	r3, r2
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	189b      	adds	r3, r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	585b      	ldr	r3, [r3, r1]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d03f      	beq.n	800659c <vTask_Pub+0x1ac>
                // Check the sensor status to see if it matches the subscription
                if (FACTORY_IO_Sensors_Check(Sub_DB[i].sensor_mask, Sub_DB[i].sensor_state)) {
 800651c:	1939      	adds	r1, r7, r4
 800651e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006520:	0013      	movs	r3, r2
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	189b      	adds	r3, r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	18cb      	adds	r3, r1, r3
 800652a:	3304      	adds	r3, #4
 800652c:	6818      	ldr	r0, [r3, #0]
 800652e:	1939      	adds	r1, r7, r4
 8006530:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006532:	0013      	movs	r3, r2
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	189b      	adds	r3, r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	18cb      	adds	r3, r1, r3
 800653c:	3308      	adds	r3, #8
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	0019      	movs	r1, r3
 8006542:	f000 fa65 	bl	8006a10 <FACTORY_IO_Sensors_Check>
 8006546:	1e03      	subs	r3, r0, #0
 8006548:	d028      	beq.n	800659c <vTask_Pub+0x1ac>
                    // If so, give the corresponding semaphore
                    xSemaphoreGive(*Sub_DB[i].sem_id);
 800654a:	1939      	adds	r1, r7, r4
 800654c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800654e:	0013      	movs	r3, r2
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	189b      	adds	r3, r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	585b      	ldr	r3, [r3, r1]
 8006558:	6818      	ldr	r0, [r3, #0]
 800655a:	2300      	movs	r3, #0
 800655c:	2200      	movs	r2, #0
 800655e:	2100      	movs	r1, #0
 8006560:	f7fa fb72 	bl	8000c48 <xQueueGenericSend>

                    // Reset the subscription slot
                    Sub_DB[i].sem_id = NULL;
 8006564:	1939      	adds	r1, r7, r4
 8006566:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006568:	0013      	movs	r3, r2
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	189b      	adds	r3, r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	2200      	movs	r2, #0
 8006572:	505a      	str	r2, [r3, r1]
                    Sub_DB[i].sensor_mask = 0;
 8006574:	1939      	adds	r1, r7, r4
 8006576:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006578:	0013      	movs	r3, r2
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	189b      	adds	r3, r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	18cb      	adds	r3, r1, r3
 8006582:	3304      	adds	r3, #4
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]
                    Sub_DB[i].sensor_state = 0;
 8006588:	1939      	adds	r1, r7, r4
 800658a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800658c:	0013      	movs	r3, r2
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	189b      	adds	r3, r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	18cb      	adds	r3, r1, r3
 8006596:	3308      	adds	r3, #8
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < SUB_SIZE; i++) {
 800659c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800659e:	3301      	adds	r3, #1
 80065a0:	657b      	str	r3, [r7, #84]	; 0x54
 80065a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	ddaf      	ble.n	8006508 <vTask_Pub+0x118>
                }
            }
        }

        // Wait here for 100ms since the last wakeup
        vTaskDelayUntil(&xLastWakeTime, (100 / (portTICK_RATE_MS)));
 80065a8:	230c      	movs	r3, #12
 80065aa:	18fb      	adds	r3, r7, r3
 80065ac:	210a      	movs	r1, #10
 80065ae:	0018      	movs	r0, r3
 80065b0:	f7fb fd60 	bl	8002074 <vTaskDelayUntil>
        xStatus = xQueueReceive(xSubscribeQueue, &message, 0);
 80065b4:	e76c      	b.n	8006490 <vTask_Pub+0xa0>
 80065b6:	46c0      	nop			; (mov r8, r8)
 80065b8:	20003930 	.word	0x20003930
 80065bc:	20003934 	.word	0x20003934
 80065c0:	20003938 	.word	0x20003938
 80065c4:	2000393c 	.word	0x2000393c
 80065c8:	20003940 	.word	0x20003940
 80065cc:	20003924 	.word	0x20003924

080065d0 <vTask_Write>:
    }
}
void vTask_Write(void *pvParameters) {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
    command_message_t *message;

    uint8_t i = 0;
 80065d8:	230f      	movs	r3, #15
 80065da:	18fb      	adds	r3, r7, r3
 80065dc:	2200      	movs	r2, #0
 80065de:	701a      	strb	r2, [r3, #0]

    // Set priority level 1 for DMA1 interrupt -> reading the sensor values is our highest priority
    NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1);
 80065e0:	2106      	movs	r1, #6
 80065e2:	200b      	movs	r0, #11
 80065e4:	f7ff f8aa 	bl	800573c <__NVIC_SetPriority>

    // Enable DMA1 interrupts
    NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80065e8:	200b      	movs	r0, #11
 80065ea:	f7ff f88d 	bl	8005708 <__NVIC_EnableIRQ>

    while (1) {
        xQueueReceive(xPublishQueue, &message, portMAX_DELAY);
 80065ee:	4b22      	ldr	r3, [pc, #136]	; (8006678 <vTask_Write+0xa8>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2201      	movs	r2, #1
 80065f4:	4252      	negs	r2, r2
 80065f6:	2108      	movs	r1, #8
 80065f8:	1879      	adds	r1, r7, r1
 80065fa:	0018      	movs	r0, r3
 80065fc:	f7fa fe96 	bl	800132c <xQueueReceive>
        // The message was taken as expected

        for (i = 0; i < 7; i++) {
 8006600:	230f      	movs	r3, #15
 8006602:	18fb      	adds	r3, r7, r3
 8006604:	2200      	movs	r2, #0
 8006606:	701a      	strb	r2, [r3, #0]
 8006608:	e00d      	b.n	8006626 <vTask_Write+0x56>
            tx_dma_buffer[i] = (*message)[i];
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	200f      	movs	r0, #15
 800660e:	183b      	adds	r3, r7, r0
 8006610:	781a      	ldrb	r2, [r3, #0]
 8006612:	183b      	adds	r3, r7, r0
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	5c89      	ldrb	r1, [r1, r2]
 8006618:	4a18      	ldr	r2, [pc, #96]	; (800667c <vTask_Write+0xac>)
 800661a:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < 7; i++) {
 800661c:	183b      	adds	r3, r7, r0
 800661e:	781a      	ldrb	r2, [r3, #0]
 8006620:	183b      	adds	r3, r7, r0
 8006622:	3201      	adds	r2, #1
 8006624:	701a      	strb	r2, [r3, #0]
 8006626:	230f      	movs	r3, #15
 8006628:	18fb      	adds	r3, r7, r3
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b06      	cmp	r3, #6
 800662e:	d9ec      	bls.n	800660a <vTask_Write+0x3a>
        }

        // Set Memory Buffer size
        DMA1_Channel4->CNDTR = 7;
 8006630:	4b13      	ldr	r3, [pc, #76]	; (8006680 <vTask_Write+0xb0>)
 8006632:	2207      	movs	r2, #7
 8006634:	605a      	str	r2, [r3, #4]

        // Enable DMA1 Channel 4
        DMA1_Channel4->CCR |= DMA_CCR_EN;
 8006636:	4b12      	ldr	r3, [pc, #72]	; (8006680 <vTask_Write+0xb0>)
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	4b11      	ldr	r3, [pc, #68]	; (8006680 <vTask_Write+0xb0>)
 800663c:	2101      	movs	r1, #1
 800663e:	430a      	orrs	r2, r1
 8006640:	601a      	str	r2, [r3, #0]

        // Enable USART2 DMA Request on TX
        USART2->CR3 |= USART_CR3_DMAT;
 8006642:	4b10      	ldr	r3, [pc, #64]	; (8006684 <vTask_Write+0xb4>)
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <vTask_Write+0xb4>)
 8006648:	2180      	movs	r1, #128	; 0x80
 800664a:	430a      	orrs	r2, r1
 800664c:	609a      	str	r2, [r3, #8]

        xSemaphoreTake(xSem_DMA_TC, portMAX_DELAY);
 800664e:	4b0e      	ldr	r3, [pc, #56]	; (8006688 <vTask_Write+0xb8>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2201      	movs	r2, #1
 8006654:	4252      	negs	r2, r2
 8006656:	0011      	movs	r1, r2
 8006658:	0018      	movs	r0, r3
 800665a:	f7fb f81d 	bl	8001698 <xQueueSemaphoreTake>

        // Disable DMA1 Channel 4
        DMA1_Channel4->CCR &= ~DMA_CCR_EN;
 800665e:	4b08      	ldr	r3, [pc, #32]	; (8006680 <vTask_Write+0xb0>)
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b07      	ldr	r3, [pc, #28]	; (8006680 <vTask_Write+0xb0>)
 8006664:	2101      	movs	r1, #1
 8006666:	438a      	bics	r2, r1
 8006668:	601a      	str	r2, [r3, #0]

        // Disable USART2 DMA Request on TX
        USART2->CR3 &= ~USART_CR3_DMAT;
 800666a:	4b06      	ldr	r3, [pc, #24]	; (8006684 <vTask_Write+0xb4>)
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	4b05      	ldr	r3, [pc, #20]	; (8006684 <vTask_Write+0xb4>)
 8006670:	2180      	movs	r1, #128	; 0x80
 8006672:	438a      	bics	r2, r1
 8006674:	609a      	str	r2, [r3, #8]
        xQueueReceive(xPublishQueue, &message, portMAX_DELAY);
 8006676:	e7ba      	b.n	80065ee <vTask_Write+0x1e>
 8006678:	20003928 	.word	0x20003928
 800667c:	20003904 	.word	0x20003904
 8006680:	40020044 	.word	0x40020044
 8006684:	40004400 	.word	0x40004400
 8006688:	20003944 	.word	0x20003944

0800668c <SystemClock_Config>:
    }
}

static void SystemClock_Config()
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]

	timeout = 1000000;
 8006696:	4b44      	ldr	r3, [pc, #272]	; (80067a8 <SystemClock_Config+0x11c>)
 8006698:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 800669a:	4b44      	ldr	r3, [pc, #272]	; (80067ac <SystemClock_Config+0x120>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b43      	ldr	r3, [pc, #268]	; (80067ac <SystemClock_Config+0x120>)
 80066a0:	2180      	movs	r1, #128	; 0x80
 80066a2:	02c9      	lsls	r1, r1, #11
 80066a4:	430a      	orrs	r2, r1
 80066a6:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 80066a8:	4b40      	ldr	r3, [pc, #256]	; (80067ac <SystemClock_Config+0x120>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	4b3f      	ldr	r3, [pc, #252]	; (80067ac <SystemClock_Config+0x120>)
 80066ae:	2180      	movs	r1, #128	; 0x80
 80066b0:	0249      	lsls	r1, r1, #9
 80066b2:	430a      	orrs	r2, r1
 80066b4:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 80066b6:	4b3d      	ldr	r3, [pc, #244]	; (80067ac <SystemClock_Config+0x120>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	2380      	movs	r3, #128	; 0x80
 80066bc:	029b      	lsls	r3, r3, #10
 80066be:	4013      	ands	r3, r2
 80066c0:	60bb      	str	r3, [r7, #8]
		timeout--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d102      	bne.n	80066d4 <SystemClock_Config+0x48>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1f0      	bne.n	80066b6 <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 80066d4:	4b35      	ldr	r3, [pc, #212]	; (80067ac <SystemClock_Config+0x120>)
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	4b34      	ldr	r3, [pc, #208]	; (80067ac <SystemClock_Config+0x120>)
 80066da:	4935      	ldr	r1, [pc, #212]	; (80067b0 <SystemClock_Config+0x124>)
 80066dc:	400a      	ands	r2, r1
 80066de:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x08 <<RCC_CFGR_PLLSRC_Pos);
 80066e0:	4b32      	ldr	r3, [pc, #200]	; (80067ac <SystemClock_Config+0x120>)
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	4b31      	ldr	r3, [pc, #196]	; (80067ac <SystemClock_Config+0x120>)
 80066e6:	2180      	movs	r1, #128	; 0x80
 80066e8:	02c9      	lsls	r1, r1, #11
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = RCC_CFGR_HPRE_DIV8;
 80066ee:	4b2f      	ldr	r3, [pc, #188]	; (80067ac <SystemClock_Config+0x120>)
 80066f0:	22a0      	movs	r2, #160	; 0xa0
 80066f2:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 80066f4:	4b2d      	ldr	r3, [pc, #180]	; (80067ac <SystemClock_Config+0x120>)
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	4b2c      	ldr	r3, [pc, #176]	; (80067ac <SystemClock_Config+0x120>)
 80066fa:	492e      	ldr	r1, [pc, #184]	; (80067b4 <SystemClock_Config+0x128>)
 80066fc:	400a      	ands	r2, r1
 80066fe:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x00 <<RCC_CFGR_PLLMUL_Pos);
 8006700:	4a2a      	ldr	r2, [pc, #168]	; (80067ac <SystemClock_Config+0x120>)
 8006702:	4b2a      	ldr	r3, [pc, #168]	; (80067ac <SystemClock_Config+0x120>)
 8006704:	6852      	ldr	r2, [r2, #4]
 8006706:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 8006708:	4b28      	ldr	r3, [pc, #160]	; (80067ac <SystemClock_Config+0x120>)
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	4b27      	ldr	r3, [pc, #156]	; (80067ac <SystemClock_Config+0x120>)
 800670e:	2180      	movs	r1, #128	; 0x80
 8006710:	0449      	lsls	r1, r1, #17
 8006712:	430a      	orrs	r2, r1
 8006714:	601a      	str	r2, [r3, #0]

	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8006716:	4b25      	ldr	r3, [pc, #148]	; (80067ac <SystemClock_Config+0x120>)
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	2380      	movs	r3, #128	; 0x80
 800671c:	049b      	lsls	r3, r3, #18
 800671e:	4013      	ands	r3, r2
 8006720:	607b      	str	r3, [r7, #4]
		timeout--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3b01      	subs	r3, #1
 8006726:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d102      	bne.n	8006734 <SystemClock_Config+0xa8>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1f0      	bne.n	8006716 <SystemClock_Config+0x8a>

        // Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8006734:	4b1d      	ldr	r3, [pc, #116]	; (80067ac <SystemClock_Config+0x120>)
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	4b1c      	ldr	r3, [pc, #112]	; (80067ac <SystemClock_Config+0x120>)
 800673a:	21f0      	movs	r1, #240	; 0xf0
 800673c:	438a      	bics	r2, r1
 800673e:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV8;
 8006740:	4b1a      	ldr	r3, [pc, #104]	; (80067ac <SystemClock_Config+0x120>)
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	4b19      	ldr	r3, [pc, #100]	; (80067ac <SystemClock_Config+0x120>)
 8006746:	21a0      	movs	r1, #160	; 0xa0
 8006748:	430a      	orrs	r2, r1
 800674a:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 800674c:	4b17      	ldr	r3, [pc, #92]	; (80067ac <SystemClock_Config+0x120>)
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	4b16      	ldr	r3, [pc, #88]	; (80067ac <SystemClock_Config+0x120>)
 8006752:	4919      	ldr	r1, [pc, #100]	; (80067b8 <SystemClock_Config+0x12c>)
 8006754:	400a      	ands	r2, r1
 8006756:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8006758:	4a14      	ldr	r2, [pc, #80]	; (80067ac <SystemClock_Config+0x120>)
 800675a:	4b14      	ldr	r3, [pc, #80]	; (80067ac <SystemClock_Config+0x120>)
 800675c:	6852      	ldr	r2, [r2, #4]
 800675e:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8006760:	4b16      	ldr	r3, [pc, #88]	; (80067bc <SystemClock_Config+0x130>)
 8006762:	2211      	movs	r2, #17
 8006764:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8006766:	4b11      	ldr	r3, [pc, #68]	; (80067ac <SystemClock_Config+0x120>)
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	4b10      	ldr	r3, [pc, #64]	; (80067ac <SystemClock_Config+0x120>)
 800676c:	2103      	movs	r1, #3
 800676e:	438a      	bics	r2, r1
 8006770:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8006772:	4b0e      	ldr	r3, [pc, #56]	; (80067ac <SystemClock_Config+0x120>)
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	4b0d      	ldr	r3, [pc, #52]	; (80067ac <SystemClock_Config+0x120>)
 8006778:	2102      	movs	r1, #2
 800677a:	430a      	orrs	r2, r1
 800677c:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 800677e:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <SystemClock_Config+0x120>)
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	220c      	movs	r2, #12
 8006784:	4013      	ands	r3, r2
 8006786:	603b      	str	r3, [r7, #0]
		timeout--;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3b01      	subs	r3, #1
 800678c:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b08      	cmp	r3, #8
 8006792:	d002      	beq.n	800679a <SystemClock_Config+0x10e>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f1      	bne.n	800677e <SystemClock_Config+0xf2>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 800679a:	f000 f999 	bl	8006ad0 <SystemCoreClockUpdate>
}
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	46bd      	mov	sp, r7
 80067a2:	b004      	add	sp, #16
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	46c0      	nop			; (mov r8, r8)
 80067a8:	000f4240 	.word	0x000f4240
 80067ac:	40021000 	.word	0x40021000
 80067b0:	fffe7fff 	.word	0xfffe7fff
 80067b4:	ffc3ffff 	.word	0xffc3ffff
 80067b8:	fffff8ff 	.word	0xfffff8ff
 80067bc:	40022000 	.word	0x40022000

080067c0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
}
 80067c4:	46c0      	nop			; (mov r8, r8)
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80067ce:	e7fe      	b.n	80067ce <HardFault_Handler+0x4>

080067d0 <DMA1_Channel4_5_6_7_IRQHandler>:
/*
 * This function handles DMA2 interrupt request.
 */
extern xSemaphoreHandle xSem_DMA_TC;

void DMA1_Channel4_5_6_7_IRQHandler(){
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80067d6:	2300      	movs	r3, #0
 80067d8:	607b      	str	r3, [r7, #4]

	if((DMA1->ISR & DMA_ISR_TCIF4_Msk) != 0){
 80067da:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <DMA1_Channel4_5_6_7_IRQHandler+0x44>)
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	2380      	movs	r3, #128	; 0x80
 80067e0:	019b      	lsls	r3, r3, #6
 80067e2:	4013      	ands	r3, r2
 80067e4:	d011      	beq.n	800680a <DMA1_Channel4_5_6_7_IRQHandler+0x3a>
		// Clear DMA4 interrupt by writing a '1'
		DMA1->IFCR = DMA_IFCR_CTCIF4;
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <DMA1_Channel4_5_6_7_IRQHandler+0x44>)
 80067e8:	2280      	movs	r2, #128	; 0x80
 80067ea:	0192      	lsls	r2, r2, #6
 80067ec:	605a      	str	r2, [r3, #4]

		// Do what you need
		xSemaphoreGiveFromISR(xSem_DMA_TC, &xHigherPriorityTaskWoken);
 80067ee:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <DMA1_Channel4_5_6_7_IRQHandler+0x48>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	1d3a      	adds	r2, r7, #4
 80067f4:	0011      	movs	r1, r2
 80067f6:	0018      	movs	r0, r3
 80067f8:	f7fa fcc8 	bl	800118c <xQueueGiveFromISR>

		// Perform a context switch to the waiting task
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <DMA1_Channel4_5_6_7_IRQHandler+0x3a>
 8006802:	4b06      	ldr	r3, [pc, #24]	; (800681c <DMA1_Channel4_5_6_7_IRQHandler+0x4c>)
 8006804:	2280      	movs	r2, #128	; 0x80
 8006806:	0552      	lsls	r2, r2, #21
 8006808:	601a      	str	r2, [r3, #0]
	}
}
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	46bd      	mov	sp, r7
 800680e:	b002      	add	sp, #8
 8006810:	bd80      	pop	{r7, pc}
 8006812:	46c0      	nop			; (mov r8, r8)
 8006814:	40020000 	.word	0x40020000
 8006818:	20003944 	.word	0x20003944
 800681c:	e000ed04 	.word	0xe000ed04

08006820 <BSP_Console_Init>:
 * TX -> PA2 (AF1)
 * RX -> PA3 (AF1)
 */

void BSP_Console_Init()
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8006824:	4b53      	ldr	r3, [pc, #332]	; (8006974 <BSP_Console_Init+0x154>)
 8006826:	695a      	ldr	r2, [r3, #20]
 8006828:	4b52      	ldr	r3, [pc, #328]	; (8006974 <BSP_Console_Init+0x154>)
 800682a:	2180      	movs	r1, #128	; 0x80
 800682c:	0289      	lsls	r1, r1, #10
 800682e:	430a      	orrs	r2, r1
 8006830:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 8006832:	2390      	movs	r3, #144	; 0x90
 8006834:	05db      	lsls	r3, r3, #23
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	2390      	movs	r3, #144	; 0x90
 800683a:	05db      	lsls	r3, r3, #23
 800683c:	21f0      	movs	r1, #240	; 0xf0
 800683e:	438a      	bics	r2, r1
 8006840:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 8006842:	2390      	movs	r3, #144	; 0x90
 8006844:	05db      	lsls	r3, r3, #23
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	2390      	movs	r3, #144	; 0x90
 800684a:	05db      	lsls	r3, r3, #23
 800684c:	21a0      	movs	r1, #160	; 0xa0
 800684e:	430a      	orrs	r2, r1
 8006850:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 8006852:	2390      	movs	r3, #144	; 0x90
 8006854:	05db      	lsls	r3, r3, #23
 8006856:	6a1a      	ldr	r2, [r3, #32]
 8006858:	2390      	movs	r3, #144	; 0x90
 800685a:	05db      	lsls	r3, r3, #23
 800685c:	4946      	ldr	r1, [pc, #280]	; (8006978 <BSP_Console_Init+0x158>)
 800685e:	400a      	ands	r2, r1
 8006860:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 8006862:	2390      	movs	r3, #144	; 0x90
 8006864:	05db      	lsls	r3, r3, #23
 8006866:	6a1a      	ldr	r2, [r3, #32]
 8006868:	2390      	movs	r3, #144	; 0x90
 800686a:	05db      	lsls	r3, r3, #23
 800686c:	2188      	movs	r1, #136	; 0x88
 800686e:	0149      	lsls	r1, r1, #5
 8006870:	430a      	orrs	r2, r1
 8006872:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8006874:	4b3f      	ldr	r3, [pc, #252]	; (8006974 <BSP_Console_Init+0x154>)
 8006876:	69da      	ldr	r2, [r3, #28]
 8006878:	4b3e      	ldr	r3, [pc, #248]	; (8006974 <BSP_Console_Init+0x154>)
 800687a:	2180      	movs	r1, #128	; 0x80
 800687c:	0289      	lsls	r1, r1, #10
 800687e:	430a      	orrs	r2, r1
 8006880:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 8006882:	4b3e      	ldr	r3, [pc, #248]	; (800697c <BSP_Console_Init+0x15c>)
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8006888:	4b3c      	ldr	r3, [pc, #240]	; (800697c <BSP_Console_Init+0x15c>)
 800688a:	2200      	movs	r2, #0
 800688c:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 800688e:	4b3b      	ldr	r3, [pc, #236]	; (800697c <BSP_Console_Init+0x15c>)
 8006890:	2200      	movs	r2, #0
 8006892:	609a      	str	r2, [r3, #8]

	// Baud Rate = 57600
	// With OVER8=0 and Fck=1MHz, USARTDIV = 48E6/9600 = 17

	//USART2->CR1 |=USART_CR1_OVER8_Msk;
	USART2->BRR = 17;//For 1MHz
 8006894:	4b39      	ldr	r3, [pc, #228]	; (800697c <BSP_Console_Init+0x15c>)
 8006896:	2211      	movs	r2, #17
 8006898:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 800689a:	4b38      	ldr	r3, [pc, #224]	; (800697c <BSP_Console_Init+0x15c>)
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	4b37      	ldr	r3, [pc, #220]	; (800697c <BSP_Console_Init+0x15c>)
 80068a0:	210c      	movs	r1, #12
 80068a2:	430a      	orrs	r2, r1
 80068a4:	601a      	str	r2, [r3, #0]

	// Setup TX on DMA Channel 4 //

	// Start DMA clock
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80068a6:	4b33      	ldr	r3, [pc, #204]	; (8006974 <BSP_Console_Init+0x154>)
 80068a8:	695a      	ldr	r2, [r3, #20]
 80068aa:	4b32      	ldr	r3, [pc, #200]	; (8006974 <BSP_Console_Init+0x154>)
 80068ac:	2101      	movs	r1, #1
 80068ae:	430a      	orrs	r2, r1
 80068b0:	615a      	str	r2, [r3, #20]

	// Reset DMA1 Channel 4 configuration
	DMA1_Channel4->CCR = 0x00000000;
 80068b2:	4b33      	ldr	r3, [pc, #204]	; (8006980 <BSP_Console_Init+0x160>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]

	// Set direction Memory -> Peripheral
	DMA1_Channel4->CCR = DMA_CCR_DIR;
 80068b8:	4b31      	ldr	r3, [pc, #196]	; (8006980 <BSP_Console_Init+0x160>)
 80068ba:	2210      	movs	r2, #16
 80068bc:	601a      	str	r2, [r3, #0]

	// Peripheral is USART2 TDR
	DMA1_Channel4->CPAR = (uint32_t)&USART2->TDR;
 80068be:	4b30      	ldr	r3, [pc, #192]	; (8006980 <BSP_Console_Init+0x160>)
 80068c0:	4a30      	ldr	r2, [pc, #192]	; (8006984 <BSP_Console_Init+0x164>)
 80068c2:	609a      	str	r2, [r3, #8]

	// Peripheral data size is 8-bit (byte)
	DMA1_Channel4->CCR |= (0x00 <<DMA_CCR_PSIZE_Pos);
 80068c4:	4a2e      	ldr	r2, [pc, #184]	; (8006980 <BSP_Console_Init+0x160>)
 80068c6:	4b2e      	ldr	r3, [pc, #184]	; (8006980 <BSP_Console_Init+0x160>)
 80068c8:	6812      	ldr	r2, [r2, #0]
 80068ca:	601a      	str	r2, [r3, #0]

	// Enable Transfer complete interrupt enable
	DMA1_Channel4->CCR |= DMA_CCR_TCIE;
 80068cc:	4b2c      	ldr	r3, [pc, #176]	; (8006980 <BSP_Console_Init+0x160>)
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	4b2b      	ldr	r3, [pc, #172]	; (8006980 <BSP_Console_Init+0x160>)
 80068d2:	2102      	movs	r1, #2
 80068d4:	430a      	orrs	r2, r1
 80068d6:	601a      	str	r2, [r3, #0]

	// Memory is tx_dma_buffer
	DMA1_Channel4->CMAR = (uint32_t)tx_dma_buffer;
 80068d8:	4b29      	ldr	r3, [pc, #164]	; (8006980 <BSP_Console_Init+0x160>)
 80068da:	4a2b      	ldr	r2, [pc, #172]	; (8006988 <BSP_Console_Init+0x168>)
 80068dc:	60da      	str	r2, [r3, #12]

	// Memory data size is 8-bit (byte)
	DMA1_Channel4->CCR |= (0x00 <<DMA_CCR_MSIZE_Pos);
 80068de:	4a28      	ldr	r2, [pc, #160]	; (8006980 <BSP_Console_Init+0x160>)
 80068e0:	4b27      	ldr	r3, [pc, #156]	; (8006980 <BSP_Console_Init+0x160>)
 80068e2:	6812      	ldr	r2, [r2, #0]
 80068e4:	601a      	str	r2, [r3, #0]

	// Enable auto-increment Memory address
	DMA1_Channel4->CCR |= DMA_CCR_MINC;
 80068e6:	4b26      	ldr	r3, [pc, #152]	; (8006980 <BSP_Console_Init+0x160>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	4b25      	ldr	r3, [pc, #148]	; (8006980 <BSP_Console_Init+0x160>)
 80068ec:	2180      	movs	r1, #128	; 0x80
 80068ee:	430a      	orrs	r2, r1
 80068f0:	601a      	str	r2, [r3, #0]

	// Setup RX on DMA Channel 5 //

	// Reset DMA1 Channel 5 configuration
	DMA1_Channel5->CCR = 0x00000000;
 80068f2:	4b26      	ldr	r3, [pc, #152]	; (800698c <BSP_Console_Init+0x16c>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]

	// Set direction Peripheral -> Memory
	DMA1_Channel5->CCR &= ~DMA_CCR_DIR;
 80068f8:	4b24      	ldr	r3, [pc, #144]	; (800698c <BSP_Console_Init+0x16c>)
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	4b23      	ldr	r3, [pc, #140]	; (800698c <BSP_Console_Init+0x16c>)
 80068fe:	2110      	movs	r1, #16
 8006900:	438a      	bics	r2, r1
 8006902:	601a      	str	r2, [r3, #0]

	// Peripheral is USART2 RDR
	DMA1_Channel5->CPAR = (uint32_t)&USART2->RDR;
 8006904:	4b21      	ldr	r3, [pc, #132]	; (800698c <BSP_Console_Init+0x16c>)
 8006906:	4a22      	ldr	r2, [pc, #136]	; (8006990 <BSP_Console_Init+0x170>)
 8006908:	609a      	str	r2, [r3, #8]

	// Peripheral data size is 8-bit (byte)
	DMA1_Channel5->CCR |= (0x00 <<DMA_CCR_PSIZE_Pos);
 800690a:	4a20      	ldr	r2, [pc, #128]	; (800698c <BSP_Console_Init+0x16c>)
 800690c:	4b1f      	ldr	r3, [pc, #124]	; (800698c <BSP_Console_Init+0x16c>)
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	601a      	str	r2, [r3, #0]

	// Disable auto-increment Peripheral address
	DMA1_Channel5->CCR &= ~DMA_CCR_PINC;
 8006912:	4b1e      	ldr	r3, [pc, #120]	; (800698c <BSP_Console_Init+0x16c>)
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	4b1d      	ldr	r3, [pc, #116]	; (800698c <BSP_Console_Init+0x16c>)
 8006918:	2140      	movs	r1, #64	; 0x40
 800691a:	438a      	bics	r2, r1
 800691c:	601a      	str	r2, [r3, #0]

	// Memory is rx_dma_buffer
	DMA1_Channel5->CMAR = (uint32_t)rx_dma_buffer;
 800691e:	4b1b      	ldr	r3, [pc, #108]	; (800698c <BSP_Console_Init+0x16c>)
 8006920:	4a1c      	ldr	r2, [pc, #112]	; (8006994 <BSP_Console_Init+0x174>)
 8006922:	60da      	str	r2, [r3, #12]

	// Memory data size is 8-bit (byte)
	DMA1_Channel5->CCR |= (0x00 <<DMA_CCR_MSIZE_Pos);
 8006924:	4a19      	ldr	r2, [pc, #100]	; (800698c <BSP_Console_Init+0x16c>)
 8006926:	4b19      	ldr	r3, [pc, #100]	; (800698c <BSP_Console_Init+0x16c>)
 8006928:	6812      	ldr	r2, [r2, #0]
 800692a:	601a      	str	r2, [r3, #0]

	// Enable auto-increment Memory address
	DMA1_Channel5->CCR |= DMA_CCR_MINC;
 800692c:	4b17      	ldr	r3, [pc, #92]	; (800698c <BSP_Console_Init+0x16c>)
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	4b16      	ldr	r3, [pc, #88]	; (800698c <BSP_Console_Init+0x16c>)
 8006932:	2180      	movs	r1, #128	; 0x80
 8006934:	430a      	orrs	r2, r1
 8006936:	601a      	str	r2, [r3, #0]

	// Set Memory Buffer size
	DMA1_Channel5->CNDTR = FRAME_LENGTH;
 8006938:	4b14      	ldr	r3, [pc, #80]	; (800698c <BSP_Console_Init+0x16c>)
 800693a:	220e      	movs	r2, #14
 800693c:	605a      	str	r2, [r3, #4]

	// DMA mode is circular
	DMA1_Channel5->CCR |= DMA_CCR_CIRC;
 800693e:	4b13      	ldr	r3, [pc, #76]	; (800698c <BSP_Console_Init+0x16c>)
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	4b12      	ldr	r3, [pc, #72]	; (800698c <BSP_Console_Init+0x16c>)
 8006944:	2120      	movs	r1, #32
 8006946:	430a      	orrs	r2, r1
 8006948:	601a      	str	r2, [r3, #0]

	// Enable DMA1 Channel 5
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 800694a:	4b10      	ldr	r3, [pc, #64]	; (800698c <BSP_Console_Init+0x16c>)
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	4b0f      	ldr	r3, [pc, #60]	; (800698c <BSP_Console_Init+0x16c>)
 8006950:	2101      	movs	r1, #1
 8006952:	430a      	orrs	r2, r1
 8006954:	601a      	str	r2, [r3, #0]

	// Enable USART2 DMA Request on RX
	USART2->CR3 |= USART_CR3_DMAR;
 8006956:	4b09      	ldr	r3, [pc, #36]	; (800697c <BSP_Console_Init+0x15c>)
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	4b08      	ldr	r3, [pc, #32]	; (800697c <BSP_Console_Init+0x15c>)
 800695c:	2140      	movs	r1, #64	; 0x40
 800695e:	430a      	orrs	r2, r1
 8006960:	609a      	str	r2, [r3, #8]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 8006962:	4b06      	ldr	r3, [pc, #24]	; (800697c <BSP_Console_Init+0x15c>)
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	4b05      	ldr	r3, [pc, #20]	; (800697c <BSP_Console_Init+0x15c>)
 8006968:	2101      	movs	r1, #1
 800696a:	430a      	orrs	r2, r1
 800696c:	601a      	str	r2, [r3, #0]
}
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	40021000 	.word	0x40021000
 8006978:	ffff00ff 	.word	0xffff00ff
 800697c:	40004400 	.word	0x40004400
 8006980:	40020044 	.word	0x40020044
 8006984:	40004428 	.word	0x40004428
 8006988:	20003904 	.word	0x20003904
 800698c:	40020058 	.word	0x40020058
 8006990:	40004424 	.word	0x40004424
 8006994:	20003914 	.word	0x20003914

08006998 <FACTORY_IO_Actuators_Set>:
 * FACTORY_IO_Actuators_Set
 */
extern uint8_t rx_dma_buffer[FRAME_LENGTH];
extern uint8_t tx_dma_buffer[FRAME_LENGTH];
void FACTORY_IO_Actuators_Set(uint32_t cmd, uint32_t msk, uint8_t* buffer)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
	static uint32_t current_actuators_state;

	current_actuators_state = ((current_actuators_state & ~msk) | cmd);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	43da      	mvns	r2, r3
 80069a8:	4b18      	ldr	r3, [pc, #96]	; (8006a0c <FACTORY_IO_Actuators_Set+0x74>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	401a      	ands	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	431a      	orrs	r2, r3
 80069b2:	4b16      	ldr	r3, [pc, #88]	; (8006a0c <FACTORY_IO_Actuators_Set+0x74>)
 80069b4:	601a      	str	r2, [r3, #0]

	// Prepare frame buffer
	buffer[0] = TAG_ACTUATORS; 							// Actuators tag
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	22ad      	movs	r2, #173	; 0xad
 80069ba:	701a      	strb	r2, [r3, #0]

	buffer[1] = (uint8_t) (current_actuators_state & 0x000000FF);			// data byte #1
 80069bc:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <FACTORY_IO_Actuators_Set+0x74>)
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3301      	adds	r3, #1
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	701a      	strb	r2, [r3, #0]
	buffer[2] = (uint8_t)((current_actuators_state & 0x0000FF00) >>8U );	// data byte #2
 80069c8:	4b10      	ldr	r3, [pc, #64]	; (8006a0c <FACTORY_IO_Actuators_Set+0x74>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	0a1a      	lsrs	r2, r3, #8
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3302      	adds	r3, #2
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	701a      	strb	r2, [r3, #0]
	buffer[3] = (uint8_t)((current_actuators_state & 0x00FF0000) >>16U);	// data byte #2
 80069d6:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <FACTORY_IO_Actuators_Set+0x74>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	0c1a      	lsrs	r2, r3, #16
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3303      	adds	r3, #3
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	701a      	strb	r2, [r3, #0]
	buffer[4] = (uint8_t)((current_actuators_state & 0xFF000000) >>24U);	// data byte #2
 80069e4:	4b09      	ldr	r3, [pc, #36]	; (8006a0c <FACTORY_IO_Actuators_Set+0x74>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	0e1a      	lsrs	r2, r3, #24
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3304      	adds	r3, #4
 80069ee:	b2d2      	uxtb	r2, r2
 80069f0:	701a      	strb	r2, [r3, #0]

	buffer[5] = 0x00;									// CRC (not yet implemented)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	3305      	adds	r3, #5
 80069f6:	2200      	movs	r2, #0
 80069f8:	701a      	strb	r2, [r3, #0]
	buffer[6] = '\n';									// End byte
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3306      	adds	r3, #6
 80069fe:	220a      	movs	r2, #10
 8006a00:	701a      	strb	r2, [r3, #0]
}
 8006a02:	46c0      	nop			; (mov r8, r8)
 8006a04:	46bd      	mov	sp, r7
 8006a06:	b004      	add	sp, #16
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	2000394c 	.word	0x2000394c

08006a10 <FACTORY_IO_Sensors_Check>:
/*
 * FACTORY_IO_Sensors_Check
 */

uint8_t	FACTORY_IO_Sensors_Check(uint32_t msk, uint32_t desired_state)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
	uint32_t	sstates;

	// Build 32-bit sensors states representation
	sstates = 0x00000000;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]

	sstates |= rx_dma_buffer[1];
 8006a1e:	4b14      	ldr	r3, [pc, #80]	; (8006a70 <FACTORY_IO_Sensors_Check+0x60>)
 8006a20:	785b      	ldrb	r3, [r3, #1]
 8006a22:	001a      	movs	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
	sstates |= (rx_dma_buffer[2] <<8U );
 8006a2a:	4b11      	ldr	r3, [pc, #68]	; (8006a70 <FACTORY_IO_Sensors_Check+0x60>)
 8006a2c:	789b      	ldrb	r3, [r3, #2]
 8006a2e:	021b      	lsls	r3, r3, #8
 8006a30:	001a      	movs	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
	sstates |= (rx_dma_buffer[3] <<16U);
 8006a38:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <FACTORY_IO_Sensors_Check+0x60>)
 8006a3a:	78db      	ldrb	r3, [r3, #3]
 8006a3c:	041b      	lsls	r3, r3, #16
 8006a3e:	001a      	movs	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]
	sstates |= (rx_dma_buffer[4] <<24U);
 8006a46:	4b0a      	ldr	r3, [pc, #40]	; (8006a70 <FACTORY_IO_Sensors_Check+0x60>)
 8006a48:	791b      	ldrb	r3, [r3, #4]
 8006a4a:	061b      	lsls	r3, r3, #24
 8006a4c:	001a      	movs	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]

	// Perform logical comparison with mask
	if ((sstates & msk) == desired_state)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d101      	bne.n	8006a64 <FACTORY_IO_Sensors_Check+0x54>
	{
		return 1;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e000      	b.n	8006a66 <FACTORY_IO_Sensors_Check+0x56>
	}

	else
	{
		return 0;
 8006a64:	2300      	movs	r3, #0
	}
}
 8006a66:	0018      	movs	r0, r3
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	b004      	add	sp, #16
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	20003914 	.word	0x20003914

08006a74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006a74:	480d      	ldr	r0, [pc, #52]	; (8006aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006a76:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006a78:	f000 f825 	bl	8006ac6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006a7c:	480c      	ldr	r0, [pc, #48]	; (8006ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8006a7e:	490d      	ldr	r1, [pc, #52]	; (8006ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006a80:	4a0d      	ldr	r2, [pc, #52]	; (8006ab8 <LoopForever+0xe>)
  movs r3, #0
 8006a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a84:	e002      	b.n	8006a8c <LoopCopyDataInit>

08006a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a8a:	3304      	adds	r3, #4

08006a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a90:	d3f9      	bcc.n	8006a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a92:	4a0a      	ldr	r2, [pc, #40]	; (8006abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8006a94:	4c0a      	ldr	r4, [pc, #40]	; (8006ac0 <LoopForever+0x16>)
  movs r3, #0
 8006a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a98:	e001      	b.n	8006a9e <LoopFillZerobss>

08006a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a9c:	3204      	adds	r2, #4

08006a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006aa0:	d3fb      	bcc.n	8006a9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006aa2:	f000 f8a3 	bl	8006bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006aa6:	f7fe feb7 	bl	8005818 <main>

08006aaa <LoopForever>:

LoopForever:
    b LoopForever
 8006aaa:	e7fe      	b.n	8006aaa <LoopForever>
  ldr   r0, =_estack
 8006aac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8006ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ab4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8006ab8:	08007084 	.word	0x08007084
  ldr r2, =_sbss
 8006abc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8006ac0:	20003950 	.word	0x20003950

08006ac4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006ac4:	e7fe      	b.n	8006ac4 <ADC1_COMP_IRQHandler>

08006ac6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8006aca:	46c0      	nop			; (mov r8, r8)
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	2300      	movs	r3, #0
 8006adc:	60bb      	str	r3, [r7, #8]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8006ae6:	4b38      	ldr	r3, [pc, #224]	; (8006bc8 <SystemCoreClockUpdate+0xf8>)
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	220c      	movs	r2, #12
 8006aec:	4013      	ands	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2b08      	cmp	r3, #8
 8006af4:	d011      	beq.n	8006b1a <SystemCoreClockUpdate+0x4a>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d84f      	bhi.n	8006b9c <SystemCoreClockUpdate+0xcc>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <SystemCoreClockUpdate+0x3a>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d004      	beq.n	8006b12 <SystemCoreClockUpdate+0x42>
 8006b08:	e048      	b.n	8006b9c <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8006b0a:	4b30      	ldr	r3, [pc, #192]	; (8006bcc <SystemCoreClockUpdate+0xfc>)
 8006b0c:	4a30      	ldr	r2, [pc, #192]	; (8006bd0 <SystemCoreClockUpdate+0x100>)
 8006b0e:	601a      	str	r2, [r3, #0]
      break;
 8006b10:	e048      	b.n	8006ba4 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8006b12:	4b2e      	ldr	r3, [pc, #184]	; (8006bcc <SystemCoreClockUpdate+0xfc>)
 8006b14:	4a2e      	ldr	r2, [pc, #184]	; (8006bd0 <SystemCoreClockUpdate+0x100>)
 8006b16:	601a      	str	r2, [r3, #0]
      break;
 8006b18:	e044      	b.n	8006ba4 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8006b1a:	4b2b      	ldr	r3, [pc, #172]	; (8006bc8 <SystemCoreClockUpdate+0xf8>)
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	23f0      	movs	r3, #240	; 0xf0
 8006b20:	039b      	lsls	r3, r3, #14
 8006b22:	4013      	ands	r3, r2
 8006b24:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8006b26:	4b28      	ldr	r3, [pc, #160]	; (8006bc8 <SystemCoreClockUpdate+0xf8>)
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	23c0      	movs	r3, #192	; 0xc0
 8006b2c:	025b      	lsls	r3, r3, #9
 8006b2e:	4013      	ands	r3, r2
 8006b30:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	0c9b      	lsrs	r3, r3, #18
 8006b36:	3302      	adds	r3, #2
 8006b38:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8006b3a:	4b23      	ldr	r3, [pc, #140]	; (8006bc8 <SystemCoreClockUpdate+0xf8>)
 8006b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3e:	220f      	movs	r2, #15
 8006b40:	4013      	ands	r3, r2
 8006b42:	3301      	adds	r3, #1
 8006b44:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	2380      	movs	r3, #128	; 0x80
 8006b4a:	025b      	lsls	r3, r3, #9
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d10a      	bne.n	8006b66 <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	481f      	ldr	r0, [pc, #124]	; (8006bd0 <SystemCoreClockUpdate+0x100>)
 8006b54:	f7f9 fad8 	bl	8000108 <__udivsi3>
 8006b58:	0003      	movs	r3, r0
 8006b5a:	001a      	movs	r2, r3
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	435a      	muls	r2, r3
 8006b60:	4b1a      	ldr	r3, [pc, #104]	; (8006bcc <SystemCoreClockUpdate+0xfc>)
 8006b62:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 8006b64:	e01e      	b.n	8006ba4 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	23c0      	movs	r3, #192	; 0xc0
 8006b6a:	025b      	lsls	r3, r3, #9
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d10a      	bne.n	8006b86 <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	4818      	ldr	r0, [pc, #96]	; (8006bd4 <SystemCoreClockUpdate+0x104>)
 8006b74:	f7f9 fac8 	bl	8000108 <__udivsi3>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	001a      	movs	r2, r3
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	435a      	muls	r2, r3
 8006b80:	4b12      	ldr	r3, [pc, #72]	; (8006bcc <SystemCoreClockUpdate+0xfc>)
 8006b82:	601a      	str	r2, [r3, #0]
      break;
 8006b84:	e00e      	b.n	8006ba4 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	4811      	ldr	r0, [pc, #68]	; (8006bd0 <SystemCoreClockUpdate+0x100>)
 8006b8a:	f7f9 fabd 	bl	8000108 <__udivsi3>
 8006b8e:	0003      	movs	r3, r0
 8006b90:	001a      	movs	r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	435a      	muls	r2, r3
 8006b96:	4b0d      	ldr	r3, [pc, #52]	; (8006bcc <SystemCoreClockUpdate+0xfc>)
 8006b98:	601a      	str	r2, [r3, #0]
      break;
 8006b9a:	e003      	b.n	8006ba4 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8006b9c:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <SystemCoreClockUpdate+0xfc>)
 8006b9e:	4a0c      	ldr	r2, [pc, #48]	; (8006bd0 <SystemCoreClockUpdate+0x100>)
 8006ba0:	601a      	str	r2, [r3, #0]
      break;
 8006ba2:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8006ba4:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <SystemCoreClockUpdate+0xf8>)
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	091b      	lsrs	r3, r3, #4
 8006baa:	220f      	movs	r2, #15
 8006bac:	4013      	ands	r3, r2
 8006bae:	4a0a      	ldr	r2, [pc, #40]	; (8006bd8 <SystemCoreClockUpdate+0x108>)
 8006bb0:	5cd3      	ldrb	r3, [r2, r3]
 8006bb2:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <SystemCoreClockUpdate+0xfc>)
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	40da      	lsrs	r2, r3
 8006bbc:	4b03      	ldr	r3, [pc, #12]	; (8006bcc <SystemCoreClockUpdate+0xfc>)
 8006bbe:	601a      	str	r2, [r3, #0]
}
 8006bc0:	46c0      	nop			; (mov r8, r8)
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	b004      	add	sp, #16
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	20000018 	.word	0x20000018
 8006bd0:	007a1200 	.word	0x007a1200
 8006bd4:	02dc6c00 	.word	0x02dc6c00
 8006bd8:	0800706c 	.word	0x0800706c

08006bdc <memset>:
 8006bdc:	0003      	movs	r3, r0
 8006bde:	1882      	adds	r2, r0, r2
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d100      	bne.n	8006be6 <memset+0xa>
 8006be4:	4770      	bx	lr
 8006be6:	7019      	strb	r1, [r3, #0]
 8006be8:	3301      	adds	r3, #1
 8006bea:	e7f9      	b.n	8006be0 <memset+0x4>

08006bec <__libc_init_array>:
 8006bec:	b570      	push	{r4, r5, r6, lr}
 8006bee:	2600      	movs	r6, #0
 8006bf0:	4c0c      	ldr	r4, [pc, #48]	; (8006c24 <__libc_init_array+0x38>)
 8006bf2:	4d0d      	ldr	r5, [pc, #52]	; (8006c28 <__libc_init_array+0x3c>)
 8006bf4:	1b64      	subs	r4, r4, r5
 8006bf6:	10a4      	asrs	r4, r4, #2
 8006bf8:	42a6      	cmp	r6, r4
 8006bfa:	d109      	bne.n	8006c10 <__libc_init_array+0x24>
 8006bfc:	2600      	movs	r6, #0
 8006bfe:	f000 f823 	bl	8006c48 <_init>
 8006c02:	4c0a      	ldr	r4, [pc, #40]	; (8006c2c <__libc_init_array+0x40>)
 8006c04:	4d0a      	ldr	r5, [pc, #40]	; (8006c30 <__libc_init_array+0x44>)
 8006c06:	1b64      	subs	r4, r4, r5
 8006c08:	10a4      	asrs	r4, r4, #2
 8006c0a:	42a6      	cmp	r6, r4
 8006c0c:	d105      	bne.n	8006c1a <__libc_init_array+0x2e>
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}
 8006c10:	00b3      	lsls	r3, r6, #2
 8006c12:	58eb      	ldr	r3, [r5, r3]
 8006c14:	4798      	blx	r3
 8006c16:	3601      	adds	r6, #1
 8006c18:	e7ee      	b.n	8006bf8 <__libc_init_array+0xc>
 8006c1a:	00b3      	lsls	r3, r6, #2
 8006c1c:	58eb      	ldr	r3, [r5, r3]
 8006c1e:	4798      	blx	r3
 8006c20:	3601      	adds	r6, #1
 8006c22:	e7f2      	b.n	8006c0a <__libc_init_array+0x1e>
 8006c24:	0800707c 	.word	0x0800707c
 8006c28:	0800707c 	.word	0x0800707c
 8006c2c:	08007080 	.word	0x08007080
 8006c30:	0800707c 	.word	0x0800707c

08006c34 <memcpy>:
 8006c34:	2300      	movs	r3, #0
 8006c36:	b510      	push	{r4, lr}
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d100      	bne.n	8006c3e <memcpy+0xa>
 8006c3c:	bd10      	pop	{r4, pc}
 8006c3e:	5ccc      	ldrb	r4, [r1, r3]
 8006c40:	54c4      	strb	r4, [r0, r3]
 8006c42:	3301      	adds	r3, #1
 8006c44:	e7f8      	b.n	8006c38 <memcpy+0x4>
	...

08006c48 <_init>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	46c0      	nop			; (mov r8, r8)
 8006c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4e:	bc08      	pop	{r3}
 8006c50:	469e      	mov	lr, r3
 8006c52:	4770      	bx	lr

08006c54 <_fini>:
 8006c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5a:	bc08      	pop	{r3}
 8006c5c:	469e      	mov	lr, r3
 8006c5e:	4770      	bx	lr
