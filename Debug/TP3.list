
TP3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f98  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08005058  08005058  00015058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080053e0  080053e0  000153e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080053e4  080053e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080053e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000038d4  20000018  080053fc  00020018  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  200038ec  080053fc  000238ec  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015802  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002954  00000000  00000000  00035881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000d3b0  00000000  00000000  000381d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000008b8  00000000  00000000  00045588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001a1c  00000000  00000000  00045e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00002e92  00000000  00000000  0004785c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017974  00000000  00000000  0004a6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00071e19  00000000  00000000  00062062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00001ab4  00000000  00000000  000d3e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004f  00000000  00000000  000d5930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005040 	.word	0x08005040

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08005040 	.word	0x08005040

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000220:	0003      	movs	r3, r0
 8000222:	3308      	adds	r3, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000224:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000226:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000228:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800022a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800022c:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800022e:	4252      	negs	r2, r2
 8000230:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000232:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000234:	4770      	bx	lr
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000238:	2300      	movs	r3, #0
 800023a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000240:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000242:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8000244:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000246:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	689a      	ldr	r2, [r3, #8]
 800024a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800024c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800024e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8000250:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000252:	3301      	adds	r3, #1
 8000254:	6003      	str	r3, [r0, #0]
}
 8000256:	4770      	bx	lr

08000258 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000258:	0003      	movs	r3, r0
{
 800025a:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800025c:	680d      	ldr	r5, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800025e:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 8000260:	1c6a      	adds	r2, r5, #1
 8000262:	d00d      	beq.n	8000280 <vListInsert+0x28>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000264:	001c      	movs	r4, r3
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	42aa      	cmp	r2, r5
 800026c:	d9fa      	bls.n	8000264 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800026e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000270:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8000272:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 8000274:	608c      	str	r4, [r1, #8]
	( pxList->uxNumberOfItems )++;
 8000276:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 8000278:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800027a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800027c:	6003      	str	r3, [r0, #0]
}
 800027e:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 8000280:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8000282:	6863      	ldr	r3, [r4, #4]
 8000284:	e7f3      	b.n	800026e <vListInsert+0x16>
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000288:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800028a:	6841      	ldr	r1, [r0, #4]
 800028c:	6882      	ldr	r2, [r0, #8]
 800028e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000290:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000292:	6859      	ldr	r1, [r3, #4]
 8000294:	4281      	cmp	r1, r0
 8000296:	d006      	beq.n	80002a6 <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000298:	2200      	movs	r2, #0
 800029a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	3a01      	subs	r2, #1
 80002a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80002a2:	6818      	ldr	r0, [r3, #0]
}
 80002a4:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	e7f6      	b.n	8000298 <uxListRemove+0x10>
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80002ac:	b570      	push	{r4, r5, r6, lr}
 80002ae:	0016      	movs	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80002b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80002b2:	0004      	movs	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80002b4:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d106      	bne.n	80002c8 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80002ba:	6806      	ldr	r6, [r0, #0]
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d028      	beq.n	8000312 <prvCopyDataToQueue+0x66>
 80002c0:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 80002c2:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80002c4:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	d10e      	bne.n	80002ea <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80002cc:	6840      	ldr	r0, [r0, #4]
 80002ce:	f004 fead 	bl	800502c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80002d2:	6863      	ldr	r3, [r4, #4]
 80002d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80002d6:	189b      	adds	r3, r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80002d8:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80002da:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80002dc:	4293      	cmp	r3, r2
 80002de:	d3ef      	bcc.n	80002c0 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80002e0:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 80002e2:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80002e4:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80002e6:	3501      	adds	r5, #1
 80002e8:	e7ec      	b.n	80002c4 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80002ea:	68c0      	ldr	r0, [r0, #12]
 80002ec:	f004 fe9e 	bl	800502c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80002f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80002f2:	68e3      	ldr	r3, [r4, #12]
 80002f4:	4251      	negs	r1, r2
 80002f6:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80002f8:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80002fa:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d202      	bcs.n	8000306 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000300:	68a3      	ldr	r3, [r4, #8]
 8000302:	185b      	adds	r3, r3, r1
 8000304:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8000306:	2e02      	cmp	r6, #2
 8000308:	d1da      	bne.n	80002c0 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800030a:	2d00      	cmp	r5, #0
 800030c:	d1d9      	bne.n	80002c2 <prvCopyDataToQueue+0x16>
 800030e:	3501      	adds	r5, #1
 8000310:	e7d7      	b.n	80002c2 <prvCopyDataToQueue+0x16>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000312:	6880      	ldr	r0, [r0, #8]
 8000314:	f001 ffde 	bl	80022d4 <xTaskPriorityDisinherit>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000318:	3501      	adds	r5, #1
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800031a:	60a6      	str	r6, [r4, #8]
 800031c:	e7d2      	b.n	80002c4 <prvCopyDataToQueue+0x18>
 800031e:	46c0      	nop			; (mov r8, r8)

08000320 <xQueueGenericCreate>:
	{
 8000320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000322:	46c6      	mov	lr, r8
 8000324:	0005      	movs	r5, r0
 8000326:	000e      	movs	r6, r1
 8000328:	0017      	movs	r7, r2
 800032a:	b500      	push	{lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800032c:	2800      	cmp	r0, #0
 800032e:	d101      	bne.n	8000334 <xQueueGenericCreate+0x14>
 8000330:	b672      	cpsid	i
 8000332:	e7fe      	b.n	8000332 <xQueueGenericCreate+0x12>
		if( uxItemSize == ( UBaseType_t ) 0 )
 8000334:	2900      	cmp	r1, #0
 8000336:	d138      	bne.n	80003aa <xQueueGenericCreate+0x8a>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000338:	2050      	movs	r0, #80	; 0x50
 800033a:	f002 fb35 	bl	80029a8 <pvPortMalloc>
 800033e:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 8000340:	d03e      	beq.n	80003c0 <xQueueGenericCreate+0xa0>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000342:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8000344:	6426      	str	r6, [r4, #64]	; 0x40
	pxNewQueue->uxLength = uxQueueLength;
 8000346:	63e5      	str	r5, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 8000348:	f002 fad8 	bl	80028fc <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800034c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800034e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000350:	6822      	ldr	r2, [r4, #0]
 8000352:	434b      	muls	r3, r1
 8000354:	18d0      	adds	r0, r2, r3
 8000356:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000358:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800035a:	1a5b      	subs	r3, r3, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800035c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800035e:	18d2      	adds	r2, r2, r3
 8000360:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000362:	23ff      	movs	r3, #255	; 0xff
 8000364:	2244      	movs	r2, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000366:	63a0      	str	r0, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000368:	0020      	movs	r0, r4
		pxQueue->cRxLock = queueUNLOCKED;
 800036a:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800036c:	3201      	adds	r2, #1
 800036e:	54a3      	strb	r3, [r4, r2]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000370:	3010      	adds	r0, #16
 8000372:	f7ff ff55 	bl	8000220 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000376:	0020      	movs	r0, r4
 8000378:	3024      	adds	r0, #36	; 0x24
 800037a:	f7ff ff51 	bl	8000220 <vListInitialise>
	taskEXIT_CRITICAL();
 800037e:	f002 fac9 	bl	8002914 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 8000382:	234c      	movs	r3, #76	; 0x4c
 8000384:	54e7      	strb	r7, [r4, r3]
 8000386:	4698      	mov	r8, r3
	traceQUEUE_CREATE( pxNewQueue );
 8000388:	4b34      	ldr	r3, [pc, #208]	; (800045c <xQueueGenericCreate+0x13c>)
 800038a:	0020      	movs	r0, r4
 800038c:	8819      	ldrh	r1, [r3, #0]
 800038e:	f002 fe8b 	bl	80030a8 <prvTraceSetQueueNumberHigh16>
 8000392:	f002 ff03 	bl	800319c <prvTraceGetCurrentTaskHandle>
 8000396:	f002 fe6d 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 800039a:	4e31      	ldr	r6, [pc, #196]	; (8000460 <xQueueGenericCreate+0x140>)
 800039c:	8833      	ldrh	r3, [r6, #0]
 800039e:	4203      	tst	r3, r0
 80003a0:	d12a      	bne.n	80003f8 <xQueueGenericCreate+0xd8>
	}
 80003a2:	0020      	movs	r0, r4
 80003a4:	bc80      	pop	{r7}
 80003a6:	46b8      	mov	r8, r7
 80003a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003aa:	0008      	movs	r0, r1
 80003ac:	4368      	muls	r0, r5
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80003ae:	3050      	adds	r0, #80	; 0x50
 80003b0:	f002 fafa 	bl	80029a8 <pvPortMalloc>
 80003b4:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 80003b6:	d003      	beq.n	80003c0 <xQueueGenericCreate+0xa0>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003b8:	0003      	movs	r3, r0
 80003ba:	3350      	adds	r3, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80003bc:	6003      	str	r3, [r0, #0]
 80003be:	e7c1      	b.n	8000344 <xQueueGenericCreate+0x24>
			traceQUEUE_CREATE_FAILED( ucQueueType );
 80003c0:	f002 feec 	bl	800319c <prvTraceGetCurrentTaskHandle>
 80003c4:	f002 fe56 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 80003c8:	4b25      	ldr	r3, [pc, #148]	; (8000460 <xQueueGenericCreate+0x140>)
 80003ca:	2400      	movs	r4, #0
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	4203      	tst	r3, r0
 80003d0:	d0e7      	beq.n	80003a2 <xQueueGenericCreate+0x82>
 80003d2:	2f03      	cmp	r7, #3
 80003d4:	d03c      	beq.n	8000450 <xQueueGenericCreate+0x130>
 80003d6:	d808      	bhi.n	80003ea <xQueueGenericCreate+0xca>
 80003d8:	2f00      	cmp	r7, #0
 80003da:	d028      	beq.n	800042e <xQueueGenericCreate+0x10e>
 80003dc:	2f01      	cmp	r7, #1
 80003de:	d1e0      	bne.n	80003a2 <xQueueGenericCreate+0x82>
 80003e0:	2100      	movs	r1, #0
 80003e2:	2043      	movs	r0, #67	; 0x43
 80003e4:	f003 f8b0 	bl	8003548 <prvTraceStoreEvent1>
 80003e8:	e7db      	b.n	80003a2 <xQueueGenericCreate+0x82>
 80003ea:	2f04      	cmp	r7, #4
 80003ec:	d1d9      	bne.n	80003a2 <xQueueGenericCreate+0x82>
 80003ee:	2100      	movs	r1, #0
 80003f0:	2047      	movs	r0, #71	; 0x47
 80003f2:	f003 f8a9 	bl	8003548 <prvTraceStoreEvent1>
 80003f6:	e7d4      	b.n	80003a2 <xQueueGenericCreate+0x82>
	traceQUEUE_CREATE( pxNewQueue );
 80003f8:	0020      	movs	r0, r4
 80003fa:	f002 fe4f 	bl	800309c <prvTraceGetQueueNumberHigh16>
 80003fe:	8833      	ldrh	r3, [r6, #0]
 8000400:	4203      	tst	r3, r0
 8000402:	d0ce      	beq.n	80003a2 <xQueueGenericCreate+0x82>
 8000404:	4643      	mov	r3, r8
 8000406:	5ce3      	ldrb	r3, [r4, r3]
 8000408:	2b03      	cmp	r3, #3
 800040a:	d01c      	beq.n	8000446 <xQueueGenericCreate+0x126>
 800040c:	d808      	bhi.n	8000420 <xQueueGenericCreate+0x100>
 800040e:	2b00      	cmp	r3, #0
 8000410:	d013      	beq.n	800043a <xQueueGenericCreate+0x11a>
 8000412:	2b01      	cmp	r3, #1
 8000414:	d1c5      	bne.n	80003a2 <xQueueGenericCreate+0x82>
 8000416:	0021      	movs	r1, r4
 8000418:	2013      	movs	r0, #19
 800041a:	f003 f895 	bl	8003548 <prvTraceStoreEvent1>
 800041e:	e7c0      	b.n	80003a2 <xQueueGenericCreate+0x82>
 8000420:	2b04      	cmp	r3, #4
 8000422:	d1be      	bne.n	80003a2 <xQueueGenericCreate+0x82>
 8000424:	0021      	movs	r1, r4
 8000426:	2017      	movs	r0, #23
 8000428:	f003 f88e 	bl	8003548 <prvTraceStoreEvent1>
 800042c:	e7b9      	b.n	80003a2 <xQueueGenericCreate+0x82>
			traceQUEUE_CREATE_FAILED( ucQueueType );
 800042e:	002a      	movs	r2, r5
 8000430:	2100      	movs	r1, #0
 8000432:	2041      	movs	r0, #65	; 0x41
 8000434:	f003 f8f4 	bl	8003620 <prvTraceStoreEvent2>
 8000438:	e7b3      	b.n	80003a2 <xQueueGenericCreate+0x82>
	traceQUEUE_CREATE( pxNewQueue );
 800043a:	002a      	movs	r2, r5
 800043c:	0021      	movs	r1, r4
 800043e:	2011      	movs	r0, #17
 8000440:	f003 f8ee 	bl	8003620 <prvTraceStoreEvent2>
 8000444:	e7ad      	b.n	80003a2 <xQueueGenericCreate+0x82>
 8000446:	0021      	movs	r1, r4
 8000448:	2012      	movs	r0, #18
 800044a:	f003 f87d 	bl	8003548 <prvTraceStoreEvent1>
 800044e:	e7a8      	b.n	80003a2 <xQueueGenericCreate+0x82>
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8000450:	2100      	movs	r1, #0
 8000452:	2042      	movs	r0, #66	; 0x42
 8000454:	f003 f878 	bl	8003548 <prvTraceStoreEvent1>
 8000458:	e7a3      	b.n	80003a2 <xQueueGenericCreate+0x82>
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	20000004 	.word	0x20000004
 8000460:	20000006 	.word	0x20000006

08000464 <xQueueGenericSend>:
{
 8000464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000466:	46de      	mov	lr, fp
 8000468:	4645      	mov	r5, r8
 800046a:	4657      	mov	r7, sl
 800046c:	464e      	mov	r6, r9
 800046e:	b5e0      	push	{r5, r6, r7, lr}
 8000470:	b085      	sub	sp, #20
 8000472:	1e04      	subs	r4, r0, #0
 8000474:	4688      	mov	r8, r1
 8000476:	469b      	mov	fp, r3
 8000478:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800047a:	d100      	bne.n	800047e <xQueueGenericSend+0x1a>
 800047c:	e100      	b.n	8000680 <xQueueGenericSend+0x21c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800047e:	2900      	cmp	r1, #0
 8000480:	d010      	beq.n	80004a4 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000482:	465b      	mov	r3, fp
 8000484:	2b02      	cmp	r3, #2
 8000486:	d104      	bne.n	8000492 <xQueueGenericSend+0x2e>
 8000488:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800048a:	2b01      	cmp	r3, #1
 800048c:	d001      	beq.n	8000492 <xQueueGenericSend+0x2e>
 800048e:	b672      	cpsid	i
 8000490:	e7fe      	b.n	8000490 <xQueueGenericSend+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000492:	f001 fea3 	bl	80021dc <xTaskGetSchedulerState>
 8000496:	2800      	cmp	r0, #0
 8000498:	d109      	bne.n	80004ae <xQueueGenericSend+0x4a>
 800049a:	9b01      	ldr	r3, [sp, #4]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d006      	beq.n	80004ae <xQueueGenericSend+0x4a>
 80004a0:	b672      	cpsid	i
 80004a2:	e7fe      	b.n	80004a2 <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80004a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d0eb      	beq.n	8000482 <xQueueGenericSend+0x1e>
 80004aa:	b672      	cpsid	i
 80004ac:	e7fe      	b.n	80004ac <xQueueGenericSend+0x48>
 80004ae:	465a      	mov	r2, fp
 80004b0:	23c2      	movs	r3, #194	; 0xc2
 80004b2:	2a00      	cmp	r2, #0
 80004b4:	d100      	bne.n	80004b8 <xQueueGenericSend+0x54>
 80004b6:	e0fb      	b.n	80006b0 <xQueueGenericSend+0x24c>
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	469a      	mov	sl, r3
 80004bc:	4bb8      	ldr	r3, [pc, #736]	; (80007a0 <xQueueGenericSend+0x33c>)
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80004be:	0025      	movs	r5, r4
{
 80004c0:	2600      	movs	r6, #0
 80004c2:	4699      	mov	r9, r3
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80004c4:	3524      	adds	r5, #36	; 0x24
		taskENTER_CRITICAL();
 80004c6:	f002 fa19 	bl	80028fc <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80004ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80004cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d200      	bcs.n	80004d4 <xQueueGenericSend+0x70>
 80004d2:	e0ef      	b.n	80006b4 <xQueueGenericSend+0x250>
 80004d4:	465b      	mov	r3, fp
 80004d6:	2b02      	cmp	r3, #2
 80004d8:	d100      	bne.n	80004dc <xQueueGenericSend+0x78>
 80004da:	e0eb      	b.n	80006b4 <xQueueGenericSend+0x250>
				if( xTicksToWait == ( TickType_t ) 0 )
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d100      	bne.n	80004e4 <xQueueGenericSend+0x80>
 80004e2:	e107      	b.n	80006f4 <xQueueGenericSend+0x290>
				else if( xEntryTimeSet == pdFALSE )
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d100      	bne.n	80004ea <xQueueGenericSend+0x86>
 80004e8:	e0c6      	b.n	8000678 <xQueueGenericSend+0x214>
		taskEXIT_CRITICAL();
 80004ea:	f002 fa13 	bl	8002914 <vPortExitCritical>
		vTaskSuspendAll();
 80004ee:	f001 fabb 	bl	8001a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80004f2:	f002 fa03 	bl	80028fc <vPortEnterCritical>
 80004f6:	2244      	movs	r2, #68	; 0x44
 80004f8:	5ca3      	ldrb	r3, [r4, r2]
 80004fa:	b25b      	sxtb	r3, r3
 80004fc:	3301      	adds	r3, #1
 80004fe:	d101      	bne.n	8000504 <xQueueGenericSend+0xa0>
 8000500:	2300      	movs	r3, #0
 8000502:	54a3      	strb	r3, [r4, r2]
 8000504:	2245      	movs	r2, #69	; 0x45
 8000506:	5ca3      	ldrb	r3, [r4, r2]
 8000508:	b25b      	sxtb	r3, r3
 800050a:	3301      	adds	r3, #1
 800050c:	d101      	bne.n	8000512 <xQueueGenericSend+0xae>
 800050e:	2300      	movs	r3, #0
 8000510:	54a3      	strb	r3, [r4, r2]
 8000512:	f002 f9ff 	bl	8002914 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000516:	a901      	add	r1, sp, #4
 8000518:	a802      	add	r0, sp, #8
 800051a:	f001 fe0f 	bl	800213c <xTaskCheckForTimeOut>
 800051e:	2800      	cmp	r0, #0
 8000520:	d000      	beq.n	8000524 <xQueueGenericSend+0xc0>
 8000522:	e0f3      	b.n	800070c <xQueueGenericSend+0x2a8>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000524:	f002 f9ea 	bl	80028fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000528:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800052a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800052c:	429a      	cmp	r2, r3
 800052e:	d049      	beq.n	80005c4 <xQueueGenericSend+0x160>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8000530:	f002 f9f0 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 8000534:	f002 f9e2 	bl	80028fc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8000538:	2345      	movs	r3, #69	; 0x45
 800053a:	5ce6      	ldrb	r6, [r4, r3]
 800053c:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800053e:	2e00      	cmp	r6, #0
 8000540:	dc05      	bgt.n	800054e <xQueueGenericSend+0xea>
 8000542:	e013      	b.n	800056c <xQueueGenericSend+0x108>
			--cTxLock;
 8000544:	3e01      	subs	r6, #1
 8000546:	b2f2      	uxtb	r2, r6
 8000548:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800054a:	2a00      	cmp	r2, #0
 800054c:	d00e      	beq.n	800056c <xQueueGenericSend+0x108>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800054e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000550:	2b00      	cmp	r3, #0
 8000552:	d00b      	beq.n	800056c <xQueueGenericSend+0x108>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000554:	0028      	movs	r0, r5
 8000556:	f001 fd97 	bl	8002088 <xTaskRemoveFromEventList>
 800055a:	2800      	cmp	r0, #0
 800055c:	d0f2      	beq.n	8000544 <xQueueGenericSend+0xe0>
						vTaskMissedYield();
 800055e:	3e01      	subs	r6, #1
 8000560:	f001 fe26 	bl	80021b0 <vTaskMissedYield>
			--cTxLock;
 8000564:	b2f2      	uxtb	r2, r6
 8000566:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000568:	2a00      	cmp	r2, #0
 800056a:	d1f0      	bne.n	800054e <xQueueGenericSend+0xea>
		pxQueue->cTxLock = queueUNLOCKED;
 800056c:	2345      	movs	r3, #69	; 0x45
 800056e:	22ff      	movs	r2, #255	; 0xff
 8000570:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8000572:	f002 f9cf 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 8000576:	f002 f9c1 	bl	80028fc <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800057a:	2344      	movs	r3, #68	; 0x44
 800057c:	5ce7      	ldrb	r7, [r4, r3]
 800057e:	b27f      	sxtb	r7, r7
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000580:	2f00      	cmp	r7, #0
 8000582:	dd16      	ble.n	80005b2 <xQueueGenericSend+0x14e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000584:	0026      	movs	r6, r4
 8000586:	3610      	adds	r6, #16
 8000588:	e004      	b.n	8000594 <xQueueGenericSend+0x130>
				--cRxLock;
 800058a:	3f01      	subs	r7, #1
 800058c:	b2fb      	uxtb	r3, r7
 800058e:	b27f      	sxtb	r7, r7
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000590:	2b00      	cmp	r3, #0
 8000592:	d00e      	beq.n	80005b2 <xQueueGenericSend+0x14e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000594:	6923      	ldr	r3, [r4, #16]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00b      	beq.n	80005b2 <xQueueGenericSend+0x14e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800059a:	0030      	movs	r0, r6
 800059c:	f001 fd74 	bl	8002088 <xTaskRemoveFromEventList>
 80005a0:	2800      	cmp	r0, #0
 80005a2:	d0f2      	beq.n	800058a <xQueueGenericSend+0x126>
					vTaskMissedYield();
 80005a4:	3f01      	subs	r7, #1
 80005a6:	f001 fe03 	bl	80021b0 <vTaskMissedYield>
				--cRxLock;
 80005aa:	b2fb      	uxtb	r3, r7
 80005ac:	b27f      	sxtb	r7, r7
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1f0      	bne.n	8000594 <xQueueGenericSend+0x130>
		pxQueue->cRxLock = queueUNLOCKED;
 80005b2:	2344      	movs	r3, #68	; 0x44
 80005b4:	22ff      	movs	r2, #255	; 0xff
 80005b6:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 80005b8:	f002 f9ac 	bl	8002914 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80005bc:	f001 fbe0 	bl	8001d80 <xTaskResumeAll>
{
 80005c0:	2601      	movs	r6, #1
 80005c2:	e780      	b.n	80004c6 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 80005c4:	f002 f9a6 	bl	8002914 <vPortExitCritical>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80005c8:	f002 fde8 	bl	800319c <prvTraceGetCurrentTaskHandle>
 80005cc:	f002 fd52 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 80005d0:	464b      	mov	r3, r9
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	4203      	tst	r3, r0
 80005d6:	d155      	bne.n	8000684 <xQueueGenericSend+0x220>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80005d8:	0026      	movs	r6, r4
 80005da:	3610      	adds	r6, #16
 80005dc:	0030      	movs	r0, r6
 80005de:	9901      	ldr	r1, [sp, #4]
 80005e0:	f001 fca8 	bl	8001f34 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80005e4:	f002 f98a 	bl	80028fc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80005e8:	2345      	movs	r3, #69	; 0x45
 80005ea:	5ce7      	ldrb	r7, [r4, r3]
 80005ec:	b27f      	sxtb	r7, r7
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80005ee:	2f00      	cmp	r7, #0
 80005f0:	dc05      	bgt.n	80005fe <xQueueGenericSend+0x19a>
 80005f2:	e013      	b.n	800061c <xQueueGenericSend+0x1b8>
			--cTxLock;
 80005f4:	3f01      	subs	r7, #1
 80005f6:	b2fa      	uxtb	r2, r7
 80005f8:	b27f      	sxtb	r7, r7
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80005fa:	2a00      	cmp	r2, #0
 80005fc:	d00e      	beq.n	800061c <xQueueGenericSend+0x1b8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80005fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <xQueueGenericSend+0x1b8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000604:	0028      	movs	r0, r5
 8000606:	f001 fd3f 	bl	8002088 <xTaskRemoveFromEventList>
 800060a:	2800      	cmp	r0, #0
 800060c:	d0f2      	beq.n	80005f4 <xQueueGenericSend+0x190>
						vTaskMissedYield();
 800060e:	3f01      	subs	r7, #1
 8000610:	f001 fdce 	bl	80021b0 <vTaskMissedYield>
			--cTxLock;
 8000614:	b2fa      	uxtb	r2, r7
 8000616:	b27f      	sxtb	r7, r7
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000618:	2a00      	cmp	r2, #0
 800061a:	d1f0      	bne.n	80005fe <xQueueGenericSend+0x19a>
		pxQueue->cTxLock = queueUNLOCKED;
 800061c:	2345      	movs	r3, #69	; 0x45
 800061e:	22ff      	movs	r2, #255	; 0xff
 8000620:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8000622:	f002 f977 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 8000626:	f002 f969 	bl	80028fc <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800062a:	2344      	movs	r3, #68	; 0x44
 800062c:	5ce7      	ldrb	r7, [r4, r3]
 800062e:	b27f      	sxtb	r7, r7
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000630:	2f00      	cmp	r7, #0
 8000632:	dc05      	bgt.n	8000640 <xQueueGenericSend+0x1dc>
 8000634:	e013      	b.n	800065e <xQueueGenericSend+0x1fa>
				--cRxLock;
 8000636:	3f01      	subs	r7, #1
 8000638:	b2fa      	uxtb	r2, r7
 800063a:	b27f      	sxtb	r7, r7
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800063c:	2a00      	cmp	r2, #0
 800063e:	d00e      	beq.n	800065e <xQueueGenericSend+0x1fa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000640:	6923      	ldr	r3, [r4, #16]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d00b      	beq.n	800065e <xQueueGenericSend+0x1fa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000646:	0030      	movs	r0, r6
 8000648:	f001 fd1e 	bl	8002088 <xTaskRemoveFromEventList>
 800064c:	2800      	cmp	r0, #0
 800064e:	d0f2      	beq.n	8000636 <xQueueGenericSend+0x1d2>
					vTaskMissedYield();
 8000650:	3f01      	subs	r7, #1
 8000652:	f001 fdad 	bl	80021b0 <vTaskMissedYield>
				--cRxLock;
 8000656:	b2fa      	uxtb	r2, r7
 8000658:	b27f      	sxtb	r7, r7
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800065a:	2a00      	cmp	r2, #0
 800065c:	d1f0      	bne.n	8000640 <xQueueGenericSend+0x1dc>
		pxQueue->cRxLock = queueUNLOCKED;
 800065e:	2344      	movs	r3, #68	; 0x44
 8000660:	22ff      	movs	r2, #255	; 0xff
 8000662:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8000664:	f002 f956 	bl	8002914 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8000668:	f001 fb8a 	bl	8001d80 <xTaskResumeAll>
 800066c:	2800      	cmp	r0, #0
 800066e:	d1a7      	bne.n	80005c0 <xQueueGenericSend+0x15c>
					portYIELD_WITHIN_API();
 8000670:	f002 f938 	bl	80028e4 <vPortYield>
{
 8000674:	2601      	movs	r6, #1
 8000676:	e726      	b.n	80004c6 <xQueueGenericSend+0x62>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000678:	a802      	add	r0, sp, #8
 800067a:	f001 fd53 	bl	8002124 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800067e:	e734      	b.n	80004ea <xQueueGenericSend+0x86>
	configASSERT( pxQueue );
 8000680:	b672      	cpsid	i
 8000682:	e7fe      	b.n	8000682 <xQueueGenericSend+0x21e>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8000684:	0020      	movs	r0, r4
 8000686:	f002 fd09 	bl	800309c <prvTraceGetQueueNumberHigh16>
 800068a:	464b      	mov	r3, r9
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	4203      	tst	r3, r0
 8000690:	d0a2      	beq.n	80005d8 <xQueueGenericSend+0x174>
 8000692:	234c      	movs	r3, #76	; 0x4c
 8000694:	5ce3      	ldrb	r3, [r4, r3]
 8000696:	2b03      	cmp	r3, #3
 8000698:	d829      	bhi.n	80006ee <xQueueGenericSend+0x28a>
 800069a:	2b01      	cmp	r3, #1
 800069c:	d900      	bls.n	80006a0 <xQueueGenericSend+0x23c>
 800069e:	e0b2      	b.n	8000806 <xQueueGenericSend+0x3a2>
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d100      	bne.n	80006a6 <xQueueGenericSend+0x242>
 80006a4:	e0b5      	b.n	8000812 <xQueueGenericSend+0x3ae>
 80006a6:	0021      	movs	r1, r4
 80006a8:	2058      	movs	r0, #88	; 0x58
 80006aa:	f002 ff4d 	bl	8003548 <prvTraceStoreEvent1>
 80006ae:	e793      	b.n	80005d8 <xQueueGenericSend+0x174>
 80006b0:	2356      	movs	r3, #86	; 0x56
 80006b2:	e701      	b.n	80004b8 <xQueueGenericSend+0x54>
				traceQUEUE_SEND( pxQueue );
 80006b4:	f002 fd72 	bl	800319c <prvTraceGetCurrentTaskHandle>
 80006b8:	f002 fcdc 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 80006bc:	464b      	mov	r3, r9
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	4203      	tst	r3, r0
 80006c2:	d000      	beq.n	80006c6 <xQueueGenericSend+0x262>
 80006c4:	e06e      	b.n	80007a4 <xQueueGenericSend+0x340>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80006c6:	465a      	mov	r2, fp
 80006c8:	4641      	mov	r1, r8
 80006ca:	0020      	movs	r0, r4
 80006cc:	f7ff fdee 	bl	80002ac <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80006d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d15e      	bne.n	8000794 <xQueueGenericSend+0x330>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80006d6:	2800      	cmp	r0, #0
 80006d8:	d159      	bne.n	800078e <xQueueGenericSend+0x32a>
				taskEXIT_CRITICAL();
 80006da:	f002 f91b 	bl	8002914 <vPortExitCritical>
				return pdPASS;
 80006de:	2001      	movs	r0, #1
}
 80006e0:	b005      	add	sp, #20
 80006e2:	bcf0      	pop	{r4, r5, r6, r7}
 80006e4:	46bb      	mov	fp, r7
 80006e6:	46b2      	mov	sl, r6
 80006e8:	46a9      	mov	r9, r5
 80006ea:	46a0      	mov	r8, r4
 80006ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	d0d9      	beq.n	80006a6 <xQueueGenericSend+0x242>
 80006f2:	e771      	b.n	80005d8 <xQueueGenericSend+0x174>
					taskEXIT_CRITICAL();
 80006f4:	f002 f90e 	bl	8002914 <vPortExitCritical>
			traceQUEUE_SEND_FAILED( pxQueue );
 80006f8:	f002 fd50 	bl	800319c <prvTraceGetCurrentTaskHandle>
 80006fc:	f002 fcba 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8000700:	464b      	mov	r3, r9
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	4203      	tst	r3, r0
 8000706:	d162      	bne.n	80007ce <xQueueGenericSend+0x36a>
			return errQUEUE_FULL;
 8000708:	2000      	movs	r0, #0
			traceQUEUE_SEND_FAILED( pxQueue );
 800070a:	e7e9      	b.n	80006e0 <xQueueGenericSend+0x27c>
	taskENTER_CRITICAL();
 800070c:	f002 f8f6 	bl	80028fc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8000710:	2345      	movs	r3, #69	; 0x45
 8000712:	5ce5      	ldrb	r5, [r4, r3]
 8000714:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000716:	2d00      	cmp	r5, #0
 8000718:	dd12      	ble.n	8000740 <xQueueGenericSend+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800071a:	0026      	movs	r6, r4
 800071c:	3624      	adds	r6, #36	; 0x24
 800071e:	e004      	b.n	800072a <xQueueGenericSend+0x2c6>
			--cTxLock;
 8000720:	3d01      	subs	r5, #1
 8000722:	b2ea      	uxtb	r2, r5
 8000724:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000726:	2a00      	cmp	r2, #0
 8000728:	d00a      	beq.n	8000740 <xQueueGenericSend+0x2dc>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800072a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800072c:	2b00      	cmp	r3, #0
 800072e:	d007      	beq.n	8000740 <xQueueGenericSend+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000730:	0030      	movs	r0, r6
 8000732:	f001 fca9 	bl	8002088 <xTaskRemoveFromEventList>
 8000736:	2800      	cmp	r0, #0
 8000738:	d0f2      	beq.n	8000720 <xQueueGenericSend+0x2bc>
						vTaskMissedYield();
 800073a:	f001 fd39 	bl	80021b0 <vTaskMissedYield>
 800073e:	e7ef      	b.n	8000720 <xQueueGenericSend+0x2bc>
		pxQueue->cTxLock = queueUNLOCKED;
 8000740:	2345      	movs	r3, #69	; 0x45
 8000742:	22ff      	movs	r2, #255	; 0xff
 8000744:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8000746:	f002 f8e5 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 800074a:	f002 f8d7 	bl	80028fc <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800074e:	2344      	movs	r3, #68	; 0x44
 8000750:	5ce5      	ldrb	r5, [r4, r3]
 8000752:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000754:	2d00      	cmp	r5, #0
 8000756:	dd12      	ble.n	800077e <xQueueGenericSend+0x31a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000758:	0026      	movs	r6, r4
 800075a:	3610      	adds	r6, #16
 800075c:	e004      	b.n	8000768 <xQueueGenericSend+0x304>
				--cRxLock;
 800075e:	3d01      	subs	r5, #1
 8000760:	b2ea      	uxtb	r2, r5
 8000762:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000764:	2a00      	cmp	r2, #0
 8000766:	d00a      	beq.n	800077e <xQueueGenericSend+0x31a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000768:	6923      	ldr	r3, [r4, #16]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d007      	beq.n	800077e <xQueueGenericSend+0x31a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800076e:	0030      	movs	r0, r6
 8000770:	f001 fc8a 	bl	8002088 <xTaskRemoveFromEventList>
 8000774:	2800      	cmp	r0, #0
 8000776:	d0f2      	beq.n	800075e <xQueueGenericSend+0x2fa>
					vTaskMissedYield();
 8000778:	f001 fd1a 	bl	80021b0 <vTaskMissedYield>
 800077c:	e7ef      	b.n	800075e <xQueueGenericSend+0x2fa>
		pxQueue->cRxLock = queueUNLOCKED;
 800077e:	2344      	movs	r3, #68	; 0x44
 8000780:	22ff      	movs	r2, #255	; 0xff
 8000782:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8000784:	f002 f8c6 	bl	8002914 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8000788:	f001 fafa 	bl	8001d80 <xTaskResumeAll>
 800078c:	e7b4      	b.n	80006f8 <xQueueGenericSend+0x294>
							queueYIELD_IF_USING_PREEMPTION();
 800078e:	f002 f8a9 	bl	80028e4 <vPortYield>
 8000792:	e7a2      	b.n	80006da <xQueueGenericSend+0x276>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000794:	0020      	movs	r0, r4
 8000796:	3024      	adds	r0, #36	; 0x24
 8000798:	f001 fc76 	bl	8002088 <xTaskRemoveFromEventList>
 800079c:	e79b      	b.n	80006d6 <xQueueGenericSend+0x272>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	20000006 	.word	0x20000006
				traceQUEUE_SEND( pxQueue );
 80007a4:	0020      	movs	r0, r4
 80007a6:	f002 fc79 	bl	800309c <prvTraceGetQueueNumberHigh16>
 80007aa:	464b      	mov	r3, r9
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	4203      	tst	r3, r0
 80007b0:	d100      	bne.n	80007b4 <xQueueGenericSend+0x350>
 80007b2:	e788      	b.n	80006c6 <xQueueGenericSend+0x262>
 80007b4:	234c      	movs	r3, #76	; 0x4c
 80007b6:	5ce3      	ldrb	r3, [r4, r3]
 80007b8:	2b03      	cmp	r3, #3
 80007ba:	d830      	bhi.n	800081e <xQueueGenericSend+0x3ba>
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d83a      	bhi.n	8000836 <xQueueGenericSend+0x3d2>
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d03f      	beq.n	8000844 <xQueueGenericSend+0x3e0>
 80007c4:	0021      	movs	r1, r4
 80007c6:	2052      	movs	r0, #82	; 0x52
 80007c8:	f002 febe 	bl	8003548 <prvTraceStoreEvent1>
 80007cc:	e77b      	b.n	80006c6 <xQueueGenericSend+0x262>
			traceQUEUE_SEND_FAILED( pxQueue );
 80007ce:	0020      	movs	r0, r4
 80007d0:	f002 fc64 	bl	800309c <prvTraceGetQueueNumberHigh16>
 80007d4:	464b      	mov	r3, r9
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	4203      	tst	r3, r0
 80007da:	d095      	beq.n	8000708 <xQueueGenericSend+0x2a4>
 80007dc:	234c      	movs	r3, #76	; 0x4c
 80007de:	5ce3      	ldrb	r3, [r4, r3]
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d81f      	bhi.n	8000824 <xQueueGenericSend+0x3c0>
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d83a      	bhi.n	800085e <xQueueGenericSend+0x3fa>
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d11e      	bne.n	800082a <xQueueGenericSend+0x3c6>
 80007ec:	4658      	mov	r0, fp
 80007ee:	4243      	negs	r3, r0
 80007f0:	4158      	adcs	r0, r3
 80007f2:	236d      	movs	r3, #109	; 0x6d
 80007f4:	4240      	negs	r0, r0
 80007f6:	4398      	bics	r0, r3
 80007f8:	30c1      	adds	r0, #193	; 0xc1
 80007fa:	0021      	movs	r1, r4
 80007fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007fe:	f002 ff0f 	bl	8003620 <prvTraceStoreEvent2>
			return errQUEUE_FULL;
 8000802:	2000      	movs	r0, #0
			traceQUEUE_SEND_FAILED( pxQueue );
 8000804:	e76c      	b.n	80006e0 <xQueueGenericSend+0x27c>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8000806:	0021      	movs	r1, r4
 8000808:	2057      	movs	r0, #87	; 0x57
 800080a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800080c:	f002 ff08 	bl	8003620 <prvTraceStoreEvent2>
 8000810:	e6e2      	b.n	80005d8 <xQueueGenericSend+0x174>
 8000812:	0021      	movs	r1, r4
 8000814:	4650      	mov	r0, sl
 8000816:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000818:	f002 ff02 	bl	8003620 <prvTraceStoreEvent2>
 800081c:	e6dc      	b.n	80005d8 <xQueueGenericSend+0x174>
				traceQUEUE_SEND( pxQueue );
 800081e:	2b04      	cmp	r3, #4
 8000820:	d0d0      	beq.n	80007c4 <xQueueGenericSend+0x360>
 8000822:	e750      	b.n	80006c6 <xQueueGenericSend+0x262>
					traceQUEUE_SEND_FAILED( pxQueue );
 8000824:	2b04      	cmp	r3, #4
 8000826:	d000      	beq.n	800082a <xQueueGenericSend+0x3c6>
 8000828:	e76e      	b.n	8000708 <xQueueGenericSend+0x2a4>
 800082a:	2055      	movs	r0, #85	; 0x55
 800082c:	0021      	movs	r1, r4
 800082e:	f002 fe8b 	bl	8003548 <prvTraceStoreEvent1>
					return errQUEUE_FULL;
 8000832:	2000      	movs	r0, #0
					traceQUEUE_SEND_FAILED( pxQueue );
 8000834:	e754      	b.n	80006e0 <xQueueGenericSend+0x27c>
				traceQUEUE_SEND( pxQueue );
 8000836:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000838:	0021      	movs	r1, r4
 800083a:	2051      	movs	r0, #81	; 0x51
 800083c:	3201      	adds	r2, #1
 800083e:	f002 feef 	bl	8003620 <prvTraceStoreEvent2>
 8000842:	e740      	b.n	80006c6 <xQueueGenericSend+0x262>
 8000844:	465b      	mov	r3, fp
 8000846:	4258      	negs	r0, r3
 8000848:	4158      	adcs	r0, r3
 800084a:	236f      	movs	r3, #111	; 0x6f
 800084c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800084e:	4240      	negs	r0, r0
 8000850:	4398      	bics	r0, r3
 8000852:	0021      	movs	r1, r4
 8000854:	30c0      	adds	r0, #192	; 0xc0
 8000856:	3201      	adds	r2, #1
 8000858:	f002 fee2 	bl	8003620 <prvTraceStoreEvent2>
 800085c:	e733      	b.n	80006c6 <xQueueGenericSend+0x262>
			traceQUEUE_SEND_FAILED( pxQueue );
 800085e:	2054      	movs	r0, #84	; 0x54
 8000860:	0021      	movs	r1, r4
 8000862:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000864:	f002 fedc 	bl	8003620 <prvTraceStoreEvent2>
			return errQUEUE_FULL;
 8000868:	2000      	movs	r0, #0
 800086a:	e739      	b.n	80006e0 <xQueueGenericSend+0x27c>

0800086c <xQueueCreateMutex>:
	{
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	0005      	movs	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000870:	2050      	movs	r0, #80	; 0x50
 8000872:	f002 f899 	bl	80029a8 <pvPortMalloc>
 8000876:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 8000878:	d04d      	beq.n	8000916 <xQueueCreateMutex+0xaa>
	pxNewQueue->uxLength = uxQueueLength;
 800087a:	2301      	movs	r3, #1
	pxNewQueue->uxItemSize = uxItemSize;
 800087c:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
 800087e:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000880:	6406      	str	r6, [r0, #64]	; 0x40
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000882:	6000      	str	r0, [r0, #0]
	taskENTER_CRITICAL();
 8000884:	f002 f83a 	bl	80028fc <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000888:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800088a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800088c:	6822      	ldr	r2, [r4, #0]
 800088e:	434b      	muls	r3, r1
 8000890:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000892:	1a5b      	subs	r3, r3, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000894:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000896:	18d2      	adds	r2, r2, r3
 8000898:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800089a:	23ff      	movs	r3, #255	; 0xff
 800089c:	2244      	movs	r2, #68	; 0x44
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800089e:	60a0      	str	r0, [r4, #8]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80008a0:	0020      	movs	r0, r4
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80008a2:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80008a4:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80008a6:	3201      	adds	r2, #1
 80008a8:	54a3      	strb	r3, [r4, r2]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80008aa:	3010      	adds	r0, #16
 80008ac:	f7ff fcb8 	bl	8000220 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80008b0:	0020      	movs	r0, r4
 80008b2:	3024      	adds	r0, #36	; 0x24
 80008b4:	f7ff fcb4 	bl	8000220 <vListInitialise>
	taskEXIT_CRITICAL();
 80008b8:	f002 f82c 	bl	8002914 <vPortExitCritical>
	traceQUEUE_CREATE( pxNewQueue );
 80008bc:	4b32      	ldr	r3, [pc, #200]	; (8000988 <xQueueCreateMutex+0x11c>)
		pxNewQueue->ucQueueType = ucQueueType;
 80008be:	364c      	adds	r6, #76	; 0x4c
	traceQUEUE_CREATE( pxNewQueue );
 80008c0:	8819      	ldrh	r1, [r3, #0]
 80008c2:	0020      	movs	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80008c4:	55a5      	strb	r5, [r4, r6]
	traceQUEUE_CREATE( pxNewQueue );
 80008c6:	f002 fbef 	bl	80030a8 <prvTraceSetQueueNumberHigh16>
 80008ca:	f002 fc67 	bl	800319c <prvTraceGetCurrentTaskHandle>
 80008ce:	f002 fbd1 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 80008d2:	4d2e      	ldr	r5, [pc, #184]	; (800098c <xQueueCreateMutex+0x120>)
 80008d4:	882b      	ldrh	r3, [r5, #0]
 80008d6:	4203      	tst	r3, r0
 80008d8:	d10a      	bne.n	80008f0 <xQueueCreateMutex+0x84>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80008da:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	0020      	movs	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80008e2:	60a3      	str	r3, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80008e4:	6023      	str	r3, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80008e6:	60e3      	str	r3, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80008e8:	f7ff fdbc 	bl	8000464 <xQueueGenericSend>
	}
 80008ec:	0020      	movs	r0, r4
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
	traceQUEUE_CREATE( pxNewQueue );
 80008f0:	0020      	movs	r0, r4
 80008f2:	f002 fbd3 	bl	800309c <prvTraceGetQueueNumberHigh16>
 80008f6:	882b      	ldrh	r3, [r5, #0]
 80008f8:	4203      	tst	r3, r0
 80008fa:	d0ee      	beq.n	80008da <xQueueCreateMutex+0x6e>
 80008fc:	5da3      	ldrb	r3, [r4, r6]
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d03c      	beq.n	800097c <xQueueCreateMutex+0x110>
 8000902:	d823      	bhi.n	800094c <xQueueCreateMutex+0xe0>
 8000904:	2b00      	cmp	r3, #0
 8000906:	d033      	beq.n	8000970 <xQueueCreateMutex+0x104>
 8000908:	2b01      	cmp	r3, #1
 800090a:	d1e6      	bne.n	80008da <xQueueCreateMutex+0x6e>
 800090c:	0021      	movs	r1, r4
 800090e:	2013      	movs	r0, #19
 8000910:	f002 fe1a 	bl	8003548 <prvTraceStoreEvent1>
 8000914:	e7e1      	b.n	80008da <xQueueCreateMutex+0x6e>
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8000916:	f002 fc41 	bl	800319c <prvTraceGetCurrentTaskHandle>
 800091a:	f002 fbab 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <xQueueCreateMutex+0x120>)
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	4203      	tst	r3, r0
 8000924:	d0e2      	beq.n	80008ec <xQueueCreateMutex+0x80>
 8000926:	2d03      	cmp	r5, #3
 8000928:	d017      	beq.n	800095a <xQueueCreateMutex+0xee>
 800092a:	d808      	bhi.n	800093e <xQueueCreateMutex+0xd2>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d019      	beq.n	8000964 <xQueueCreateMutex+0xf8>
 8000930:	2d01      	cmp	r5, #1
 8000932:	d1db      	bne.n	80008ec <xQueueCreateMutex+0x80>
 8000934:	2100      	movs	r1, #0
 8000936:	2043      	movs	r0, #67	; 0x43
 8000938:	f002 fe06 	bl	8003548 <prvTraceStoreEvent1>
 800093c:	e7d6      	b.n	80008ec <xQueueCreateMutex+0x80>
 800093e:	2d04      	cmp	r5, #4
 8000940:	d1d4      	bne.n	80008ec <xQueueCreateMutex+0x80>
 8000942:	2100      	movs	r1, #0
 8000944:	2047      	movs	r0, #71	; 0x47
 8000946:	f002 fdff 	bl	8003548 <prvTraceStoreEvent1>
 800094a:	e7cf      	b.n	80008ec <xQueueCreateMutex+0x80>
	traceQUEUE_CREATE( pxNewQueue );
 800094c:	2b04      	cmp	r3, #4
 800094e:	d1c4      	bne.n	80008da <xQueueCreateMutex+0x6e>
 8000950:	0021      	movs	r1, r4
 8000952:	2017      	movs	r0, #23
 8000954:	f002 fdf8 	bl	8003548 <prvTraceStoreEvent1>
 8000958:	e7bf      	b.n	80008da <xQueueCreateMutex+0x6e>
			traceQUEUE_CREATE_FAILED( ucQueueType );
 800095a:	2100      	movs	r1, #0
 800095c:	2042      	movs	r0, #66	; 0x42
 800095e:	f002 fdf3 	bl	8003548 <prvTraceStoreEvent1>
 8000962:	e7c3      	b.n	80008ec <xQueueCreateMutex+0x80>
 8000964:	2201      	movs	r2, #1
 8000966:	2100      	movs	r1, #0
 8000968:	2041      	movs	r0, #65	; 0x41
 800096a:	f002 fe59 	bl	8003620 <prvTraceStoreEvent2>
 800096e:	e7bd      	b.n	80008ec <xQueueCreateMutex+0x80>
	traceQUEUE_CREATE( pxNewQueue );
 8000970:	2201      	movs	r2, #1
 8000972:	0021      	movs	r1, r4
 8000974:	2011      	movs	r0, #17
 8000976:	f002 fe53 	bl	8003620 <prvTraceStoreEvent2>
 800097a:	e7ae      	b.n	80008da <xQueueCreateMutex+0x6e>
 800097c:	0021      	movs	r1, r4
 800097e:	2012      	movs	r0, #18
 8000980:	f002 fde2 	bl	8003548 <prvTraceStoreEvent1>
 8000984:	e7a9      	b.n	80008da <xQueueCreateMutex+0x6e>
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	20000004 	.word	0x20000004
 800098c:	20000006 	.word	0x20000006

08000990 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 8000990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000992:	46c6      	mov	lr, r8
 8000994:	0004      	movs	r4, r0
 8000996:	000d      	movs	r5, r1
 8000998:	b500      	push	{lr}
	configASSERT( pxQueue );
 800099a:	2800      	cmp	r0, #0
 800099c:	d037      	beq.n	8000a0e <xQueueGiveFromISR+0x7e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800099e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <xQueueGiveFromISR+0x18>
 80009a4:	b672      	cpsid	i
 80009a6:	e7fe      	b.n	80009a6 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80009a8:	6803      	ldr	r3, [r0, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d031      	beq.n	8000a12 <xQueueGiveFromISR+0x82>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80009ae:	f001 ffbf 	bl	8002930 <ulSetInterruptMaskFromISR>
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80009b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80009b4:	0006      	movs	r6, r0
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80009b6:	4698      	mov	r8, r3
		if( uxMessagesWaiting < pxQueue->uxLength )
 80009b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80009ba:	4598      	cmp	r8, r3
 80009bc:	d22e      	bcs.n	8000a1c <xQueueGiveFromISR+0x8c>
			const int8_t cTxLock = pxQueue->cTxLock;
 80009be:	2345      	movs	r3, #69	; 0x45
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80009c0:	0020      	movs	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80009c2:	5ce7      	ldrb	r7, [r4, r3]
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80009c4:	f002 fb6a 	bl	800309c <prvTraceGetQueueNumberHigh16>
 80009c8:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <xQueueGiveFromISR+0xf0>)
			const int8_t cTxLock = pxQueue->cTxLock;
 80009ca:	b27f      	sxtb	r7, r7
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	4203      	tst	r3, r0
 80009d0:	d00c      	beq.n	80009ec <xQueueGiveFromISR+0x5c>
 80009d2:	234c      	movs	r3, #76	; 0x4c
 80009d4:	5ce3      	ldrb	r3, [r4, r3]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d035      	beq.n	8000a46 <xQueueGiveFromISR+0xb6>
 80009da:	3b02      	subs	r3, #2
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d805      	bhi.n	80009ec <xQueueGiveFromISR+0x5c>
 80009e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80009e2:	0021      	movs	r1, r4
 80009e4:	205a      	movs	r0, #90	; 0x5a
 80009e6:	3201      	adds	r2, #1
 80009e8:	f002 fe1a 	bl	8003620 <prvTraceStoreEvent2>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80009ec:	4643      	mov	r3, r8
 80009ee:	3301      	adds	r3, #1
 80009f0:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80009f2:	1c7b      	adds	r3, r7, #1
 80009f4:	d034      	beq.n	8000a60 <xQueueGiveFromISR+0xd0>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80009f6:	2345      	movs	r3, #69	; 0x45
 80009f8:	3701      	adds	r7, #1
 80009fa:	b27f      	sxtb	r7, r7
 80009fc:	54e7      	strb	r7, [r4, r3]
			xReturn = pdPASS;
 80009fe:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8000a00:	0030      	movs	r0, r6
 8000a02:	f001 ff99 	bl	8002938 <vClearInterruptMaskFromISR>
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 8000a06:	0028      	movs	r0, r5
 8000a08:	bc80      	pop	{r7}
 8000a0a:	46b8      	mov	r8, r7
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 8000a0e:	b672      	cpsid	i
 8000a10:	e7fe      	b.n	8000a10 <xQueueGiveFromISR+0x80>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000a12:	6883      	ldr	r3, [r0, #8]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0ca      	beq.n	80009ae <xQueueGiveFromISR+0x1e>
 8000a18:	b672      	cpsid	i
 8000a1a:	e7fe      	b.n	8000a1a <xQueueGiveFromISR+0x8a>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000a1c:	0020      	movs	r0, r4
 8000a1e:	f002 fb3d 	bl	800309c <prvTraceGetQueueNumberHigh16>
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <xQueueGiveFromISR+0xf0>)
			xReturn = errQUEUE_FULL;
 8000a24:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	4203      	tst	r3, r0
 8000a2a:	d0e9      	beq.n	8000a00 <xQueueGiveFromISR+0x70>
 8000a2c:	234c      	movs	r3, #76	; 0x4c
 8000a2e:	5ce3      	ldrb	r3, [r4, r3]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d00f      	beq.n	8000a54 <xQueueGiveFromISR+0xc4>
 8000a34:	3b02      	subs	r3, #2
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d8e2      	bhi.n	8000a00 <xQueueGiveFromISR+0x70>
 8000a3a:	0021      	movs	r1, r4
 8000a3c:	205d      	movs	r0, #93	; 0x5d
 8000a3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000a40:	f002 fdee 	bl	8003620 <prvTraceStoreEvent2>
 8000a44:	e7dc      	b.n	8000a00 <xQueueGiveFromISR+0x70>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000a46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000a48:	0021      	movs	r1, r4
 8000a4a:	2059      	movs	r0, #89	; 0x59
 8000a4c:	3201      	adds	r2, #1
 8000a4e:	f002 fde7 	bl	8003620 <prvTraceStoreEvent2>
 8000a52:	e7cb      	b.n	80009ec <xQueueGiveFromISR+0x5c>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000a54:	0021      	movs	r1, r4
 8000a56:	205c      	movs	r0, #92	; 0x5c
 8000a58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000a5a:	f002 fde1 	bl	8003620 <prvTraceStoreEvent2>
 8000a5e:	e7cf      	b.n	8000a00 <xQueueGiveFromISR+0x70>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d0cb      	beq.n	80009fe <xQueueGiveFromISR+0x6e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a66:	0020      	movs	r0, r4
 8000a68:	3024      	adds	r0, #36	; 0x24
 8000a6a:	f001 fb0d 	bl	8002088 <xTaskRemoveFromEventList>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	d0c5      	beq.n	80009fe <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	d0c3      	beq.n	80009fe <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000a76:	2301      	movs	r3, #1
 8000a78:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 8000a7a:	2501      	movs	r5, #1
 8000a7c:	e7c0      	b.n	8000a00 <xQueueGiveFromISR+0x70>
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	20000006 	.word	0x20000006

08000a84 <xQueueReceive>:
{
 8000a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a86:	4646      	mov	r6, r8
 8000a88:	46d6      	mov	lr, sl
 8000a8a:	464f      	mov	r7, r9
 8000a8c:	b5c0      	push	{r6, r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	1e04      	subs	r4, r0, #0
 8000a92:	4688      	mov	r8, r1
 8000a94:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8000a96:	d100      	bne.n	8000a9a <xQueueReceive+0x16>
 8000a98:	e175      	b.n	8000d86 <xQueueReceive+0x302>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a9a:	2900      	cmp	r1, #0
 8000a9c:	d100      	bne.n	8000aa0 <xQueueReceive+0x1c>
 8000a9e:	e0a6      	b.n	8000bee <xQueueReceive+0x16a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000aa0:	f001 fb9c 	bl	80021dc <xTaskGetSchedulerState>
 8000aa4:	2800      	cmp	r0, #0
 8000aa6:	d100      	bne.n	8000aaa <xQueueReceive+0x26>
 8000aa8:	e0a7      	b.n	8000bfa <xQueueReceive+0x176>
		taskENTER_CRITICAL();
 8000aaa:	f001 ff27 	bl	80028fc <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000aae:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ab0:	2d00      	cmp	r5, #0
 8000ab2:	d000      	beq.n	8000ab6 <xQueueReceive+0x32>
 8000ab4:	e1b9      	b.n	8000e2a <xQueueReceive+0x3a6>
				if( xTicksToWait == ( TickType_t ) 0 )
 8000ab6:	9b01      	ldr	r3, [sp, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d100      	bne.n	8000abe <xQueueReceive+0x3a>
 8000abc:	e1b8      	b.n	8000e30 <xQueueReceive+0x3ac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000abe:	a802      	add	r0, sp, #8
 8000ac0:	f001 fb30 	bl	8002124 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000ac4:	4bbb      	ldr	r3, [pc, #748]	; (8000db4 <xQueueReceive+0x330>)
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ac6:	0026      	movs	r6, r4
 8000ac8:	4699      	mov	r9, r3
		prvLockQueue( pxQueue );
 8000aca:	2744      	movs	r7, #68	; 0x44
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000acc:	3624      	adds	r6, #36	; 0x24
		taskEXIT_CRITICAL();
 8000ace:	f001 ff21 	bl	8002914 <vPortExitCritical>
		vTaskSuspendAll();
 8000ad2:	f000 ffc9 	bl	8001a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ad6:	f001 ff11 	bl	80028fc <vPortEnterCritical>
 8000ada:	5de3      	ldrb	r3, [r4, r7]
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	3301      	adds	r3, #1
 8000ae0:	d101      	bne.n	8000ae6 <xQueueReceive+0x62>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	55e3      	strb	r3, [r4, r7]
 8000ae6:	2245      	movs	r2, #69	; 0x45
 8000ae8:	5ca3      	ldrb	r3, [r4, r2]
 8000aea:	b25b      	sxtb	r3, r3
 8000aec:	3301      	adds	r3, #1
 8000aee:	d101      	bne.n	8000af4 <xQueueReceive+0x70>
 8000af0:	2300      	movs	r3, #0
 8000af2:	54a3      	strb	r3, [r4, r2]
 8000af4:	f001 ff0e 	bl	8002914 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000af8:	a901      	add	r1, sp, #4
 8000afa:	a802      	add	r0, sp, #8
 8000afc:	f001 fb1e 	bl	800213c <xTaskCheckForTimeOut>
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d000      	beq.n	8000b06 <xQueueReceive+0x82>
 8000b04:	e07f      	b.n	8000c06 <xQueueReceive+0x182>
	taskENTER_CRITICAL();
 8000b06:	f001 fef9 	bl	80028fc <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000b0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d100      	bne.n	8000b12 <xQueueReceive+0x8e>
 8000b10:	e0e0      	b.n	8000cd4 <xQueueReceive+0x250>
	taskEXIT_CRITICAL();
 8000b12:	f001 feff 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 8000b16:	f001 fef1 	bl	80028fc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8000b1a:	2345      	movs	r3, #69	; 0x45
 8000b1c:	5ce5      	ldrb	r5, [r4, r3]
 8000b1e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	dc05      	bgt.n	8000b30 <xQueueReceive+0xac>
 8000b24:	e013      	b.n	8000b4e <xQueueReceive+0xca>
			--cTxLock;
 8000b26:	3d01      	subs	r5, #1
 8000b28:	b2ea      	uxtb	r2, r5
 8000b2a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	d00e      	beq.n	8000b4e <xQueueReceive+0xca>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d00b      	beq.n	8000b4e <xQueueReceive+0xca>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b36:	0030      	movs	r0, r6
 8000b38:	f001 faa6 	bl	8002088 <xTaskRemoveFromEventList>
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d0f2      	beq.n	8000b26 <xQueueReceive+0xa2>
						vTaskMissedYield();
 8000b40:	3d01      	subs	r5, #1
 8000b42:	f001 fb35 	bl	80021b0 <vTaskMissedYield>
			--cTxLock;
 8000b46:	b2ea      	uxtb	r2, r5
 8000b48:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	d1f0      	bne.n	8000b30 <xQueueReceive+0xac>
		pxQueue->cTxLock = queueUNLOCKED;
 8000b4e:	2345      	movs	r3, #69	; 0x45
 8000b50:	22ff      	movs	r2, #255	; 0xff
 8000b52:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8000b54:	f001 fede 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 8000b58:	f001 fed0 	bl	80028fc <vPortEnterCritical>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	469a      	mov	sl, r3
		int8_t cRxLock = pxQueue->cRxLock;
 8000b60:	5de5      	ldrb	r5, [r4, r7]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b62:	44a2      	add	sl, r4
		int8_t cRxLock = pxQueue->cRxLock;
 8000b64:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	dc05      	bgt.n	8000b76 <xQueueReceive+0xf2>
 8000b6a:	e013      	b.n	8000b94 <xQueueReceive+0x110>
				--cRxLock;
 8000b6c:	3d01      	subs	r5, #1
 8000b6e:	b2ea      	uxtb	r2, r5
 8000b70:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b72:	2a00      	cmp	r2, #0
 8000b74:	d00e      	beq.n	8000b94 <xQueueReceive+0x110>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b76:	6923      	ldr	r3, [r4, #16]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00b      	beq.n	8000b94 <xQueueReceive+0x110>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b7c:	4650      	mov	r0, sl
 8000b7e:	f001 fa83 	bl	8002088 <xTaskRemoveFromEventList>
 8000b82:	2800      	cmp	r0, #0
 8000b84:	d0f2      	beq.n	8000b6c <xQueueReceive+0xe8>
					vTaskMissedYield();
 8000b86:	3d01      	subs	r5, #1
 8000b88:	f001 fb12 	bl	80021b0 <vTaskMissedYield>
				--cRxLock;
 8000b8c:	b2ea      	uxtb	r2, r5
 8000b8e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	d1f0      	bne.n	8000b76 <xQueueReceive+0xf2>
		pxQueue->cRxLock = queueUNLOCKED;
 8000b94:	23ff      	movs	r3, #255	; 0xff
 8000b96:	55e3      	strb	r3, [r4, r7]
	taskEXIT_CRITICAL();
 8000b98:	f001 febc 	bl	8002914 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8000b9c:	f001 f8f0 	bl	8001d80 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8000ba0:	f001 feac 	bl	80028fc <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ba4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d100      	bne.n	8000bac <xQueueReceive+0x128>
 8000baa:	e07e      	b.n	8000caa <xQueueReceive+0x226>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000bac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d00a      	beq.n	8000bc8 <xQueueReceive+0x144>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000bb2:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000bb4:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000bb6:	1889      	adds	r1, r1, r2
 8000bb8:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d301      	bcc.n	8000bc2 <xQueueReceive+0x13e>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000bbe:	6821      	ldr	r1, [r4, #0]
 8000bc0:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000bc2:	4640      	mov	r0, r8
 8000bc4:	f004 fa32 	bl	800502c <memcpy>
				traceQUEUE_RECEIVE( pxQueue );
 8000bc8:	f002 fae8 	bl	800319c <prvTraceGetCurrentTaskHandle>
 8000bcc:	f002 fa52 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8000bd0:	464b      	mov	r3, r9
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	4203      	tst	r3, r0
 8000bd6:	d000      	beq.n	8000bda <xQueueReceive+0x156>
 8000bd8:	e137      	b.n	8000e4a <xQueueReceive+0x3c6>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000bda:	3d01      	subs	r5, #1
 8000bdc:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000bde:	6923      	ldr	r3, [r4, #16]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d000      	beq.n	8000be6 <xQueueReceive+0x162>
 8000be4:	e127      	b.n	8000e36 <xQueueReceive+0x3b2>
				taskEXIT_CRITICAL();
 8000be6:	f001 fe95 	bl	8002914 <vPortExitCritical>
				return pdPASS;
 8000bea:	2001      	movs	r0, #1
 8000bec:	e06c      	b.n	8000cc8 <xQueueReceive+0x244>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000bee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d100      	bne.n	8000bf6 <xQueueReceive+0x172>
 8000bf4:	e754      	b.n	8000aa0 <xQueueReceive+0x1c>
 8000bf6:	b672      	cpsid	i
 8000bf8:	e7fe      	b.n	8000bf8 <xQueueReceive+0x174>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000bfa:	9b01      	ldr	r3, [sp, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d100      	bne.n	8000c02 <xQueueReceive+0x17e>
 8000c00:	e753      	b.n	8000aaa <xQueueReceive+0x26>
 8000c02:	b672      	cpsid	i
 8000c04:	e7fe      	b.n	8000c04 <xQueueReceive+0x180>
	taskENTER_CRITICAL();
 8000c06:	f001 fe79 	bl	80028fc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8000c0a:	2345      	movs	r3, #69	; 0x45
 8000c0c:	5ce5      	ldrb	r5, [r4, r3]
 8000c0e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	dc05      	bgt.n	8000c20 <xQueueReceive+0x19c>
 8000c14:	e013      	b.n	8000c3e <xQueueReceive+0x1ba>
			--cTxLock;
 8000c16:	3d01      	subs	r5, #1
 8000c18:	b2ea      	uxtb	r2, r5
 8000c1a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d00e      	beq.n	8000c3e <xQueueReceive+0x1ba>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d00b      	beq.n	8000c3e <xQueueReceive+0x1ba>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c26:	0030      	movs	r0, r6
 8000c28:	f001 fa2e 	bl	8002088 <xTaskRemoveFromEventList>
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	d0f2      	beq.n	8000c16 <xQueueReceive+0x192>
						vTaskMissedYield();
 8000c30:	3d01      	subs	r5, #1
 8000c32:	f001 fabd 	bl	80021b0 <vTaskMissedYield>
			--cTxLock;
 8000c36:	b2ea      	uxtb	r2, r5
 8000c38:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d1f0      	bne.n	8000c20 <xQueueReceive+0x19c>
		pxQueue->cTxLock = queueUNLOCKED;
 8000c3e:	2345      	movs	r3, #69	; 0x45
 8000c40:	22ff      	movs	r2, #255	; 0xff
 8000c42:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8000c44:	f001 fe66 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 8000c48:	f001 fe58 	bl	80028fc <vPortEnterCritical>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c4c:	2310      	movs	r3, #16
 8000c4e:	469a      	mov	sl, r3
		int8_t cRxLock = pxQueue->cRxLock;
 8000c50:	5de5      	ldrb	r5, [r4, r7]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c52:	44a2      	add	sl, r4
		int8_t cRxLock = pxQueue->cRxLock;
 8000c54:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	dc05      	bgt.n	8000c66 <xQueueReceive+0x1e2>
 8000c5a:	e013      	b.n	8000c84 <xQueueReceive+0x200>
				--cRxLock;
 8000c5c:	3d01      	subs	r5, #1
 8000c5e:	b2ea      	uxtb	r2, r5
 8000c60:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	d00e      	beq.n	8000c84 <xQueueReceive+0x200>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c66:	6923      	ldr	r3, [r4, #16]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d00b      	beq.n	8000c84 <xQueueReceive+0x200>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c6c:	4650      	mov	r0, sl
 8000c6e:	f001 fa0b 	bl	8002088 <xTaskRemoveFromEventList>
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d0f2      	beq.n	8000c5c <xQueueReceive+0x1d8>
					vTaskMissedYield();
 8000c76:	3d01      	subs	r5, #1
 8000c78:	f001 fa9a 	bl	80021b0 <vTaskMissedYield>
				--cRxLock;
 8000c7c:	b2ea      	uxtb	r2, r5
 8000c7e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	d1f0      	bne.n	8000c66 <xQueueReceive+0x1e2>
		pxQueue->cRxLock = queueUNLOCKED;
 8000c84:	23ff      	movs	r3, #255	; 0xff
 8000c86:	55e3      	strb	r3, [r4, r7]
	taskEXIT_CRITICAL();
 8000c88:	f001 fe44 	bl	8002914 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8000c8c:	f001 f878 	bl	8001d80 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8000c90:	f001 fe34 	bl	80028fc <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000c94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00b      	beq.n	8000cb2 <xQueueReceive+0x22e>
	taskEXIT_CRITICAL();
 8000c9a:	f001 fe3b 	bl	8002914 <vPortExitCritical>
		taskENTER_CRITICAL();
 8000c9e:	f001 fe2d 	bl	80028fc <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ca2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d000      	beq.n	8000caa <xQueueReceive+0x226>
 8000ca8:	e780      	b.n	8000bac <xQueueReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8000caa:	9b01      	ldr	r3, [sp, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d000      	beq.n	8000cb2 <xQueueReceive+0x22e>
 8000cb0:	e70d      	b.n	8000ace <xQueueReceive+0x4a>
	taskEXIT_CRITICAL();
 8000cb2:	f001 fe2f 	bl	8002914 <vPortExitCritical>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000cb6:	f002 fa71 	bl	800319c <prvTraceGetCurrentTaskHandle>
 8000cba:	f002 f9db 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8000cbe:	464b      	mov	r3, r9
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	4203      	tst	r3, r0
 8000cc4:	d161      	bne.n	8000d8a <xQueueReceive+0x306>
				return errQUEUE_EMPTY;
 8000cc6:	2000      	movs	r0, #0
}
 8000cc8:	b004      	add	sp, #16
 8000cca:	bce0      	pop	{r5, r6, r7}
 8000ccc:	46ba      	mov	sl, r7
 8000cce:	46b1      	mov	r9, r6
 8000cd0:	46a8      	mov	r8, r5
 8000cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	taskEXIT_CRITICAL();
 8000cd4:	f001 fe1e 	bl	8002914 <vPortExitCritical>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000cd8:	f002 fa60 	bl	800319c <prvTraceGetCurrentTaskHandle>
 8000cdc:	f002 f9ca 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8000ce0:	464b      	mov	r3, r9
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	4203      	tst	r3, r0
 8000ce6:	d16a      	bne.n	8000dbe <xQueueReceive+0x33a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000ce8:	0030      	movs	r0, r6
 8000cea:	9901      	ldr	r1, [sp, #4]
 8000cec:	f001 f922 	bl	8001f34 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8000cf0:	f001 fe04 	bl	80028fc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8000cf4:	2345      	movs	r3, #69	; 0x45
 8000cf6:	5ce5      	ldrb	r5, [r4, r3]
 8000cf8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	dc05      	bgt.n	8000d0a <xQueueReceive+0x286>
 8000cfe:	e013      	b.n	8000d28 <xQueueReceive+0x2a4>
			--cTxLock;
 8000d00:	3d01      	subs	r5, #1
 8000d02:	b2ea      	uxtb	r2, r5
 8000d04:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	d00e      	beq.n	8000d28 <xQueueReceive+0x2a4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d00b      	beq.n	8000d28 <xQueueReceive+0x2a4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d10:	0030      	movs	r0, r6
 8000d12:	f001 f9b9 	bl	8002088 <xTaskRemoveFromEventList>
 8000d16:	2800      	cmp	r0, #0
 8000d18:	d0f2      	beq.n	8000d00 <xQueueReceive+0x27c>
						vTaskMissedYield();
 8000d1a:	3d01      	subs	r5, #1
 8000d1c:	f001 fa48 	bl	80021b0 <vTaskMissedYield>
			--cTxLock;
 8000d20:	b2ea      	uxtb	r2, r5
 8000d22:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	d1f0      	bne.n	8000d0a <xQueueReceive+0x286>
		pxQueue->cTxLock = queueUNLOCKED;
 8000d28:	2345      	movs	r3, #69	; 0x45
 8000d2a:	22ff      	movs	r2, #255	; 0xff
 8000d2c:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8000d2e:	f001 fdf1 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 8000d32:	f001 fde3 	bl	80028fc <vPortEnterCritical>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d36:	2310      	movs	r3, #16
 8000d38:	469a      	mov	sl, r3
		int8_t cRxLock = pxQueue->cRxLock;
 8000d3a:	5de5      	ldrb	r5, [r4, r7]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d3c:	44a2      	add	sl, r4
		int8_t cRxLock = pxQueue->cRxLock;
 8000d3e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d40:	2d00      	cmp	r5, #0
 8000d42:	dc05      	bgt.n	8000d50 <xQueueReceive+0x2cc>
 8000d44:	e013      	b.n	8000d6e <xQueueReceive+0x2ea>
				--cRxLock;
 8000d46:	3d01      	subs	r5, #1
 8000d48:	b2ea      	uxtb	r2, r5
 8000d4a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d4c:	2a00      	cmp	r2, #0
 8000d4e:	d00e      	beq.n	8000d6e <xQueueReceive+0x2ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d50:	6923      	ldr	r3, [r4, #16]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d00b      	beq.n	8000d6e <xQueueReceive+0x2ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d56:	4650      	mov	r0, sl
 8000d58:	f001 f996 	bl	8002088 <xTaskRemoveFromEventList>
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	d0f2      	beq.n	8000d46 <xQueueReceive+0x2c2>
					vTaskMissedYield();
 8000d60:	3d01      	subs	r5, #1
 8000d62:	f001 fa25 	bl	80021b0 <vTaskMissedYield>
				--cRxLock;
 8000d66:	b2ea      	uxtb	r2, r5
 8000d68:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	d1f0      	bne.n	8000d50 <xQueueReceive+0x2cc>
		pxQueue->cRxLock = queueUNLOCKED;
 8000d6e:	23ff      	movs	r3, #255	; 0xff
 8000d70:	55e3      	strb	r3, [r4, r7]
	taskEXIT_CRITICAL();
 8000d72:	f001 fdcf 	bl	8002914 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8000d76:	f001 f803 	bl	8001d80 <xTaskResumeAll>
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d000      	beq.n	8000d80 <xQueueReceive+0x2fc>
 8000d7e:	e78e      	b.n	8000c9e <xQueueReceive+0x21a>
					portYIELD_WITHIN_API();
 8000d80:	f001 fdb0 	bl	80028e4 <vPortYield>
		taskENTER_CRITICAL();
 8000d84:	e78b      	b.n	8000c9e <xQueueReceive+0x21a>
	configASSERT( ( pxQueue ) );
 8000d86:	b672      	cpsid	i
 8000d88:	e7fe      	b.n	8000d88 <xQueueReceive+0x304>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d8a:	0020      	movs	r0, r4
 8000d8c:	f002 f986 	bl	800309c <prvTraceGetQueueNumberHigh16>
 8000d90:	464b      	mov	r3, r9
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	4203      	tst	r3, r0
 8000d96:	d096      	beq.n	8000cc6 <xQueueReceive+0x242>
 8000d98:	234c      	movs	r3, #76	; 0x4c
 8000d9a:	5ce3      	ldrb	r3, [r4, r3]
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d80b      	bhi.n	8000db8 <xQueueReceive+0x334>
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d833      	bhi.n	8000e0c <xQueueReceive+0x388>
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d022      	beq.n	8000dee <xQueueReceive+0x36a>
 8000da8:	0021      	movs	r1, r4
 8000daa:	2065      	movs	r0, #101	; 0x65
 8000dac:	9a01      	ldr	r2, [sp, #4]
 8000dae:	f002 fc37 	bl	8003620 <prvTraceStoreEvent2>
 8000db2:	e788      	b.n	8000cc6 <xQueueReceive+0x242>
 8000db4:	20000006 	.word	0x20000006
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d0f5      	beq.n	8000da8 <xQueueReceive+0x324>
 8000dbc:	e783      	b.n	8000cc6 <xQueueReceive+0x242>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000dbe:	0020      	movs	r0, r4
 8000dc0:	f002 f96c 	bl	800309c <prvTraceGetQueueNumberHigh16>
 8000dc4:	464b      	mov	r3, r9
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	4203      	tst	r3, r0
 8000dca:	d08d      	beq.n	8000ce8 <xQueueReceive+0x264>
 8000dcc:	234c      	movs	r3, #76	; 0x4c
 8000dce:	5ce3      	ldrb	r3, [r4, r3]
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d809      	bhi.n	8000de8 <xQueueReceive+0x364>
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d821      	bhi.n	8000e1c <xQueueReceive+0x398>
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d010      	beq.n	8000dfe <xQueueReceive+0x37a>
 8000ddc:	0021      	movs	r1, r4
 8000dde:	2068      	movs	r0, #104	; 0x68
 8000de0:	9a01      	ldr	r2, [sp, #4]
 8000de2:	f002 fc1d 	bl	8003620 <prvTraceStoreEvent2>
 8000de6:	e77f      	b.n	8000ce8 <xQueueReceive+0x264>
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d0f7      	beq.n	8000ddc <xQueueReceive+0x358>
 8000dec:	e77c      	b.n	8000ce8 <xQueueReceive+0x264>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000dee:	2063      	movs	r0, #99	; 0x63
 8000df0:	0021      	movs	r1, r4
 8000df2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000df4:	9a01      	ldr	r2, [sp, #4]
 8000df6:	f002 fc83 	bl	8003700 <prvTraceStoreEvent3>
				return errQUEUE_EMPTY;
 8000dfa:	2000      	movs	r0, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000dfc:	e764      	b.n	8000cc8 <xQueueReceive+0x244>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000dfe:	0021      	movs	r1, r4
 8000e00:	2066      	movs	r0, #102	; 0x66
 8000e02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e04:	9a01      	ldr	r2, [sp, #4]
 8000e06:	f002 fc7b 	bl	8003700 <prvTraceStoreEvent3>
 8000e0a:	e76d      	b.n	8000ce8 <xQueueReceive+0x264>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e0c:	2064      	movs	r0, #100	; 0x64
 8000e0e:	0021      	movs	r1, r4
 8000e10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e12:	9a01      	ldr	r2, [sp, #4]
 8000e14:	f002 fc74 	bl	8003700 <prvTraceStoreEvent3>
				return errQUEUE_EMPTY;
 8000e18:	2000      	movs	r0, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e1a:	e755      	b.n	8000cc8 <xQueueReceive+0x244>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000e1c:	0021      	movs	r1, r4
 8000e1e:	2067      	movs	r0, #103	; 0x67
 8000e20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e22:	9a01      	ldr	r2, [sp, #4]
 8000e24:	f002 fc6c 	bl	8003700 <prvTraceStoreEvent3>
 8000e28:	e75e      	b.n	8000ce8 <xQueueReceive+0x264>
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <xQueueReceive+0x418>)
 8000e2c:	4699      	mov	r9, r3
 8000e2e:	e6bd      	b.n	8000bac <xQueueReceive+0x128>
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <xQueueReceive+0x418>)
 8000e32:	4699      	mov	r9, r3
 8000e34:	e73d      	b.n	8000cb2 <xQueueReceive+0x22e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e36:	0020      	movs	r0, r4
 8000e38:	3010      	adds	r0, #16
 8000e3a:	f001 f925 	bl	8002088 <xTaskRemoveFromEventList>
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	d100      	bne.n	8000e44 <xQueueReceive+0x3c0>
 8000e42:	e6d0      	b.n	8000be6 <xQueueReceive+0x162>
						queueYIELD_IF_USING_PREEMPTION();
 8000e44:	f001 fd4e 	bl	80028e4 <vPortYield>
 8000e48:	e6cd      	b.n	8000be6 <xQueueReceive+0x162>
				traceQUEUE_RECEIVE( pxQueue );
 8000e4a:	0020      	movs	r0, r4
 8000e4c:	f002 f926 	bl	800309c <prvTraceGetQueueNumberHigh16>
 8000e50:	464b      	mov	r3, r9
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	4203      	tst	r3, r0
 8000e56:	d100      	bne.n	8000e5a <xQueueReceive+0x3d6>
 8000e58:	e6bf      	b.n	8000bda <xQueueReceive+0x156>
 8000e5a:	234c      	movs	r3, #76	; 0x4c
 8000e5c:	5ce3      	ldrb	r3, [r4, r3]
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d809      	bhi.n	8000e76 <xQueueReceive+0x3f2>
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d812      	bhi.n	8000e8c <xQueueReceive+0x408>
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d008      	beq.n	8000e7c <xQueueReceive+0x3f8>
 8000e6a:	0021      	movs	r1, r4
 8000e6c:	2062      	movs	r0, #98	; 0x62
 8000e6e:	9a01      	ldr	r2, [sp, #4]
 8000e70:	f002 fbd6 	bl	8003620 <prvTraceStoreEvent2>
 8000e74:	e6b1      	b.n	8000bda <xQueueReceive+0x156>
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	d0f7      	beq.n	8000e6a <xQueueReceive+0x3e6>
 8000e7a:	e6ae      	b.n	8000bda <xQueueReceive+0x156>
 8000e7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e7e:	0021      	movs	r1, r4
 8000e80:	2060      	movs	r0, #96	; 0x60
 8000e82:	9a01      	ldr	r2, [sp, #4]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	f002 fc3b 	bl	8003700 <prvTraceStoreEvent3>
 8000e8a:	e6a6      	b.n	8000bda <xQueueReceive+0x156>
 8000e8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e8e:	0021      	movs	r1, r4
 8000e90:	2061      	movs	r0, #97	; 0x61
 8000e92:	9a01      	ldr	r2, [sp, #4]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	f002 fc33 	bl	8003700 <prvTraceStoreEvent3>
 8000e9a:	e69e      	b.n	8000bda <xQueueReceive+0x156>
 8000e9c:	20000006 	.word	0x20000006

08000ea0 <xQueueSemaphoreTake>:
{
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	464f      	mov	r7, r9
 8000ea6:	4646      	mov	r6, r8
 8000ea8:	b5c0      	push	{r6, r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	1e04      	subs	r4, r0, #0
 8000eae:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8000eb0:	d05b      	beq.n	8000f6a <xQueueSemaphoreTake+0xca>
	configASSERT( pxQueue->uxItemSize == 0 );
 8000eb2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <xQueueSemaphoreTake+0x1c>
 8000eb8:	b672      	cpsid	i
 8000eba:	e7fe      	b.n	8000eba <xQueueSemaphoreTake+0x1a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000ebc:	f001 f98e 	bl	80021dc <xTaskGetSchedulerState>
 8000ec0:	1e05      	subs	r5, r0, #0
 8000ec2:	d054      	beq.n	8000f6e <xQueueSemaphoreTake+0xce>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	469a      	mov	sl, r3
 8000eca:	4bba      	ldr	r3, [pc, #744]	; (80011b4 <xQueueSemaphoreTake+0x314>)
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ecc:	0026      	movs	r6, r4
 8000ece:	4698      	mov	r8, r3
 8000ed0:	3624      	adds	r6, #36	; 0x24
		taskENTER_CRITICAL();
 8000ed2:	f001 fd13 	bl	80028fc <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000ed6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ed8:	4699      	mov	r9, r3
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d000      	beq.n	8000ee0 <xQueueSemaphoreTake+0x40>
 8000ede:	e18e      	b.n	80011fe <xQueueSemaphoreTake+0x35e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8000ee0:	9b01      	ldr	r3, [sp, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d100      	bne.n	8000ee8 <xQueueSemaphoreTake+0x48>
 8000ee6:	e185      	b.n	80011f4 <xQueueSemaphoreTake+0x354>
				else if( xEntryTimeSet == pdFALSE )
 8000ee8:	2d00      	cmp	r5, #0
 8000eea:	d100      	bne.n	8000eee <xQueueSemaphoreTake+0x4e>
 8000eec:	e094      	b.n	8001018 <xQueueSemaphoreTake+0x178>
		taskEXIT_CRITICAL();
 8000eee:	f001 fd11 	bl	8002914 <vPortExitCritical>
		vTaskSuspendAll();
 8000ef2:	f000 fdb9 	bl	8001a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ef6:	f001 fd01 	bl	80028fc <vPortEnterCritical>
 8000efa:	2244      	movs	r2, #68	; 0x44
 8000efc:	5ca3      	ldrb	r3, [r4, r2]
 8000efe:	b25b      	sxtb	r3, r3
 8000f00:	3301      	adds	r3, #1
 8000f02:	d101      	bne.n	8000f08 <xQueueSemaphoreTake+0x68>
 8000f04:	2300      	movs	r3, #0
 8000f06:	54a3      	strb	r3, [r4, r2]
 8000f08:	2245      	movs	r2, #69	; 0x45
 8000f0a:	5ca3      	ldrb	r3, [r4, r2]
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	3301      	adds	r3, #1
 8000f10:	d101      	bne.n	8000f16 <xQueueSemaphoreTake+0x76>
 8000f12:	2300      	movs	r3, #0
 8000f14:	54a3      	strb	r3, [r4, r2]
 8000f16:	f001 fcfd 	bl	8002914 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000f1a:	a901      	add	r1, sp, #4
 8000f1c:	a802      	add	r0, sp, #8
 8000f1e:	f001 f90d 	bl	800213c <xTaskCheckForTimeOut>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d129      	bne.n	8000f7a <xQueueSemaphoreTake+0xda>
	taskENTER_CRITICAL();
 8000f26:	f001 fce9 	bl	80028fc <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000f2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d100      	bne.n	8000f32 <xQueueSemaphoreTake+0x92>
 8000f30:	e0b6      	b.n	80010a0 <xQueueSemaphoreTake+0x200>
	taskEXIT_CRITICAL();
 8000f32:	f001 fcef 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 8000f36:	f001 fce1 	bl	80028fc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8000f3a:	2345      	movs	r3, #69	; 0x45
 8000f3c:	5ce5      	ldrb	r5, [r4, r3]
 8000f3e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	dc06      	bgt.n	8000f52 <xQueueSemaphoreTake+0xb2>
 8000f44:	e084      	b.n	8001050 <xQueueSemaphoreTake+0x1b0>
			--cTxLock;
 8000f46:	3d01      	subs	r5, #1
 8000f48:	b2ea      	uxtb	r2, r5
 8000f4a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f4c:	2a00      	cmp	r2, #0
 8000f4e:	d100      	bne.n	8000f52 <xQueueSemaphoreTake+0xb2>
 8000f50:	e07e      	b.n	8001050 <xQueueSemaphoreTake+0x1b0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d100      	bne.n	8000f5a <xQueueSemaphoreTake+0xba>
 8000f58:	e07a      	b.n	8001050 <xQueueSemaphoreTake+0x1b0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f5a:	0030      	movs	r0, r6
 8000f5c:	f001 f894 	bl	8002088 <xTaskRemoveFromEventList>
 8000f60:	2800      	cmp	r0, #0
 8000f62:	d0f0      	beq.n	8000f46 <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
 8000f64:	f001 f924 	bl	80021b0 <vTaskMissedYield>
 8000f68:	e7ed      	b.n	8000f46 <xQueueSemaphoreTake+0xa6>
	configASSERT( ( pxQueue ) );
 8000f6a:	b672      	cpsid	i
 8000f6c:	e7fe      	b.n	8000f6c <xQueueSemaphoreTake+0xcc>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000f6e:	9b01      	ldr	r3, [sp, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d100      	bne.n	8000f76 <xQueueSemaphoreTake+0xd6>
 8000f74:	e0eb      	b.n	800114e <xQueueSemaphoreTake+0x2ae>
 8000f76:	b672      	cpsid	i
 8000f78:	e7fe      	b.n	8000f78 <xQueueSemaphoreTake+0xd8>
	taskENTER_CRITICAL();
 8000f7a:	f001 fcbf 	bl	80028fc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8000f7e:	2345      	movs	r3, #69	; 0x45
 8000f80:	5ce5      	ldrb	r5, [r4, r3]
 8000f82:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f84:	2d00      	cmp	r5, #0
 8000f86:	dc05      	bgt.n	8000f94 <xQueueSemaphoreTake+0xf4>
 8000f88:	e013      	b.n	8000fb2 <xQueueSemaphoreTake+0x112>
			--cTxLock;
 8000f8a:	3d01      	subs	r5, #1
 8000f8c:	b2ea      	uxtb	r2, r5
 8000f8e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	d00e      	beq.n	8000fb2 <xQueueSemaphoreTake+0x112>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00b      	beq.n	8000fb2 <xQueueSemaphoreTake+0x112>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f9a:	0030      	movs	r0, r6
 8000f9c:	f001 f874 	bl	8002088 <xTaskRemoveFromEventList>
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d0f2      	beq.n	8000f8a <xQueueSemaphoreTake+0xea>
						vTaskMissedYield();
 8000fa4:	3d01      	subs	r5, #1
 8000fa6:	f001 f903 	bl	80021b0 <vTaskMissedYield>
			--cTxLock;
 8000faa:	b2ea      	uxtb	r2, r5
 8000fac:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	d1f0      	bne.n	8000f94 <xQueueSemaphoreTake+0xf4>
		pxQueue->cTxLock = queueUNLOCKED;
 8000fb2:	2345      	movs	r3, #69	; 0x45
 8000fb4:	22ff      	movs	r2, #255	; 0xff
 8000fb6:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8000fb8:	f001 fcac 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 8000fbc:	f001 fc9e 	bl	80028fc <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8000fc0:	2344      	movs	r3, #68	; 0x44
 8000fc2:	5ce5      	ldrb	r5, [r4, r3]
 8000fc4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fc6:	2d00      	cmp	r5, #0
 8000fc8:	dd16      	ble.n	8000ff8 <xQueueSemaphoreTake+0x158>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fca:	0027      	movs	r7, r4
 8000fcc:	3710      	adds	r7, #16
 8000fce:	e004      	b.n	8000fda <xQueueSemaphoreTake+0x13a>
				--cRxLock;
 8000fd0:	3d01      	subs	r5, #1
 8000fd2:	b2ea      	uxtb	r2, r5
 8000fd4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fd6:	2a00      	cmp	r2, #0
 8000fd8:	d00e      	beq.n	8000ff8 <xQueueSemaphoreTake+0x158>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fda:	6923      	ldr	r3, [r4, #16]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00b      	beq.n	8000ff8 <xQueueSemaphoreTake+0x158>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fe0:	0038      	movs	r0, r7
 8000fe2:	f001 f851 	bl	8002088 <xTaskRemoveFromEventList>
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	d0f2      	beq.n	8000fd0 <xQueueSemaphoreTake+0x130>
					vTaskMissedYield();
 8000fea:	3d01      	subs	r5, #1
 8000fec:	f001 f8e0 	bl	80021b0 <vTaskMissedYield>
				--cRxLock;
 8000ff0:	b2ea      	uxtb	r2, r5
 8000ff2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ff4:	2a00      	cmp	r2, #0
 8000ff6:	d1f0      	bne.n	8000fda <xQueueSemaphoreTake+0x13a>
		pxQueue->cRxLock = queueUNLOCKED;
 8000ff8:	2344      	movs	r3, #68	; 0x44
 8000ffa:	22ff      	movs	r2, #255	; 0xff
 8000ffc:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8000ffe:	f001 fc89 	bl	8002914 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8001002:	f000 febd 	bl	8001d80 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8001006:	f001 fc79 	bl	80028fc <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800100a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800100c:	2b00      	cmp	r3, #0
 800100e:	d007      	beq.n	8001020 <xQueueSemaphoreTake+0x180>
	taskEXIT_CRITICAL();
 8001010:	f001 fc80 	bl	8002914 <vPortExitCritical>
	return xReturn;
 8001014:	2501      	movs	r5, #1
 8001016:	e75c      	b.n	8000ed2 <xQueueSemaphoreTake+0x32>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001018:	a802      	add	r0, sp, #8
 800101a:	f001 f883 	bl	8002124 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800101e:	e766      	b.n	8000eee <xQueueSemaphoreTake+0x4e>
	taskEXIT_CRITICAL();
 8001020:	f001 fc78 	bl	8002914 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8001024:	4653      	mov	r3, sl
 8001026:	2b00      	cmp	r3, #0
 8001028:	d000      	beq.n	800102c <xQueueSemaphoreTake+0x18c>
 800102a:	e0c5      	b.n	80011b8 <xQueueSemaphoreTake+0x318>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800102c:	f002 f8b6 	bl	800319c <prvTraceGetCurrentTaskHandle>
 8001030:	f002 f820 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8001034:	4643      	mov	r3, r8
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	4203      	tst	r3, r0
 800103a:	d000      	beq.n	800103e <xQueueSemaphoreTake+0x19e>
 800103c:	e0a1      	b.n	8001182 <xQueueSemaphoreTake+0x2e2>
				return errQUEUE_EMPTY;
 800103e:	2300      	movs	r3, #0
 8001040:	469a      	mov	sl, r3
}
 8001042:	4650      	mov	r0, sl
 8001044:	b004      	add	sp, #16
 8001046:	bce0      	pop	{r5, r6, r7}
 8001048:	46ba      	mov	sl, r7
 800104a:	46b1      	mov	r9, r6
 800104c:	46a8      	mov	r8, r5
 800104e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxQueue->cTxLock = queueUNLOCKED;
 8001050:	2345      	movs	r3, #69	; 0x45
 8001052:	22ff      	movs	r2, #255	; 0xff
 8001054:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8001056:	f001 fc5d 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 800105a:	f001 fc4f 	bl	80028fc <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800105e:	2344      	movs	r3, #68	; 0x44
 8001060:	5ce5      	ldrb	r5, [r4, r3]
 8001062:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001064:	2d00      	cmp	r5, #0
 8001066:	dd12      	ble.n	800108e <xQueueSemaphoreTake+0x1ee>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001068:	0027      	movs	r7, r4
 800106a:	3710      	adds	r7, #16
 800106c:	e004      	b.n	8001078 <xQueueSemaphoreTake+0x1d8>
				--cRxLock;
 800106e:	3d01      	subs	r5, #1
 8001070:	b2ea      	uxtb	r2, r5
 8001072:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001074:	2a00      	cmp	r2, #0
 8001076:	d00a      	beq.n	800108e <xQueueSemaphoreTake+0x1ee>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001078:	6923      	ldr	r3, [r4, #16]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <xQueueSemaphoreTake+0x1ee>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800107e:	0038      	movs	r0, r7
 8001080:	f001 f802 	bl	8002088 <xTaskRemoveFromEventList>
 8001084:	2800      	cmp	r0, #0
 8001086:	d0f2      	beq.n	800106e <xQueueSemaphoreTake+0x1ce>
					vTaskMissedYield();
 8001088:	f001 f892 	bl	80021b0 <vTaskMissedYield>
 800108c:	e7ef      	b.n	800106e <xQueueSemaphoreTake+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
 800108e:	2344      	movs	r3, #68	; 0x44
 8001090:	22ff      	movs	r2, #255	; 0xff
 8001092:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8001094:	f001 fc3e 	bl	8002914 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8001098:	2501      	movs	r5, #1
 800109a:	f000 fe71 	bl	8001d80 <xTaskResumeAll>
 800109e:	e718      	b.n	8000ed2 <xQueueSemaphoreTake+0x32>
	taskEXIT_CRITICAL();
 80010a0:	f001 fc38 	bl	8002914 <vPortExitCritical>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80010a4:	f002 f87a 	bl	800319c <prvTraceGetCurrentTaskHandle>
 80010a8:	f001 ffe4 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 80010ac:	4643      	mov	r3, r8
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	4203      	tst	r3, r0
 80010b2:	d14f      	bne.n	8001154 <xQueueSemaphoreTake+0x2b4>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d100      	bne.n	80010bc <xQueueSemaphoreTake+0x21c>
 80010ba:	e08c      	b.n	80011d6 <xQueueSemaphoreTake+0x336>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80010bc:	0030      	movs	r0, r6
 80010be:	9901      	ldr	r1, [sp, #4]
 80010c0:	f000 ff38 	bl	8001f34 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80010c4:	f001 fc1a 	bl	80028fc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80010c8:	2345      	movs	r3, #69	; 0x45
 80010ca:	5ce5      	ldrb	r5, [r4, r3]
 80010cc:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	dc05      	bgt.n	80010de <xQueueSemaphoreTake+0x23e>
 80010d2:	e00f      	b.n	80010f4 <xQueueSemaphoreTake+0x254>
			--cTxLock;
 80010d4:	3d01      	subs	r5, #1
 80010d6:	b2ea      	uxtb	r2, r5
 80010d8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80010da:	2a00      	cmp	r2, #0
 80010dc:	d00a      	beq.n	80010f4 <xQueueSemaphoreTake+0x254>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d007      	beq.n	80010f4 <xQueueSemaphoreTake+0x254>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010e4:	0030      	movs	r0, r6
 80010e6:	f000 ffcf 	bl	8002088 <xTaskRemoveFromEventList>
 80010ea:	2800      	cmp	r0, #0
 80010ec:	d0f2      	beq.n	80010d4 <xQueueSemaphoreTake+0x234>
						vTaskMissedYield();
 80010ee:	f001 f85f 	bl	80021b0 <vTaskMissedYield>
 80010f2:	e7ef      	b.n	80010d4 <xQueueSemaphoreTake+0x234>
		pxQueue->cTxLock = queueUNLOCKED;
 80010f4:	2345      	movs	r3, #69	; 0x45
 80010f6:	22ff      	movs	r2, #255	; 0xff
 80010f8:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 80010fa:	f001 fc0b 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 80010fe:	f001 fbfd 	bl	80028fc <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001102:	2344      	movs	r3, #68	; 0x44
 8001104:	5ce5      	ldrb	r5, [r4, r3]
 8001106:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001108:	2d00      	cmp	r5, #0
 800110a:	dd12      	ble.n	8001132 <xQueueSemaphoreTake+0x292>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800110c:	0027      	movs	r7, r4
 800110e:	3710      	adds	r7, #16
 8001110:	e004      	b.n	800111c <xQueueSemaphoreTake+0x27c>
				--cRxLock;
 8001112:	3d01      	subs	r5, #1
 8001114:	b2ea      	uxtb	r2, r5
 8001116:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001118:	2a00      	cmp	r2, #0
 800111a:	d00a      	beq.n	8001132 <xQueueSemaphoreTake+0x292>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800111c:	6923      	ldr	r3, [r4, #16]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d007      	beq.n	8001132 <xQueueSemaphoreTake+0x292>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001122:	0038      	movs	r0, r7
 8001124:	f000 ffb0 	bl	8002088 <xTaskRemoveFromEventList>
 8001128:	2800      	cmp	r0, #0
 800112a:	d0f2      	beq.n	8001112 <xQueueSemaphoreTake+0x272>
					vTaskMissedYield();
 800112c:	f001 f840 	bl	80021b0 <vTaskMissedYield>
 8001130:	e7ef      	b.n	8001112 <xQueueSemaphoreTake+0x272>
		pxQueue->cRxLock = queueUNLOCKED;
 8001132:	2344      	movs	r3, #68	; 0x44
 8001134:	22ff      	movs	r2, #255	; 0xff
 8001136:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8001138:	f001 fbec 	bl	8002914 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800113c:	f000 fe20 	bl	8001d80 <xTaskResumeAll>
 8001140:	2800      	cmp	r0, #0
 8001142:	d000      	beq.n	8001146 <xQueueSemaphoreTake+0x2a6>
 8001144:	e766      	b.n	8001014 <xQueueSemaphoreTake+0x174>
					portYIELD_WITHIN_API();
 8001146:	f001 fbcd 	bl	80028e4 <vPortYield>
 800114a:	2501      	movs	r5, #1
 800114c:	e6c1      	b.n	8000ed2 <xQueueSemaphoreTake+0x32>
 800114e:	2300      	movs	r3, #0
 8001150:	469a      	mov	sl, r3
 8001152:	e6ba      	b.n	8000eca <xQueueSemaphoreTake+0x2a>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8001154:	0020      	movs	r0, r4
 8001156:	f001 ffa1 	bl	800309c <prvTraceGetQueueNumberHigh16>
 800115a:	4643      	mov	r3, r8
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	4203      	tst	r3, r0
 8001160:	d0a8      	beq.n	80010b4 <xQueueSemaphoreTake+0x214>
 8001162:	234c      	movs	r3, #76	; 0x4c
 8001164:	5ce3      	ldrb	r3, [r4, r3]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d83e      	bhi.n	80011e8 <xQueueSemaphoreTake+0x348>
 800116a:	2b01      	cmp	r3, #1
 800116c:	d900      	bls.n	8001170 <xQueueSemaphoreTake+0x2d0>
 800116e:	e09f      	b.n	80012b0 <xQueueSemaphoreTake+0x410>
 8001170:	2b00      	cmp	r3, #0
 8001172:	d100      	bne.n	8001176 <xQueueSemaphoreTake+0x2d6>
 8001174:	e0a3      	b.n	80012be <xQueueSemaphoreTake+0x41e>
 8001176:	0021      	movs	r1, r4
 8001178:	2068      	movs	r0, #104	; 0x68
 800117a:	9a01      	ldr	r2, [sp, #4]
 800117c:	f002 fa50 	bl	8003620 <prvTraceStoreEvent2>
 8001180:	e798      	b.n	80010b4 <xQueueSemaphoreTake+0x214>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001182:	0020      	movs	r0, r4
 8001184:	f001 ff8a 	bl	800309c <prvTraceGetQueueNumberHigh16>
 8001188:	4643      	mov	r3, r8
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	4203      	tst	r3, r0
 800118e:	d100      	bne.n	8001192 <xQueueSemaphoreTake+0x2f2>
 8001190:	e755      	b.n	800103e <xQueueSemaphoreTake+0x19e>
 8001192:	234c      	movs	r3, #76	; 0x4c
 8001194:	5ce3      	ldrb	r3, [r4, r3]
 8001196:	2b03      	cmp	r3, #3
 8001198:	d829      	bhi.n	80011ee <xQueueSemaphoreTake+0x34e>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d900      	bls.n	80011a0 <xQueueSemaphoreTake+0x300>
 800119e:	e09e      	b.n	80012de <xQueueSemaphoreTake+0x43e>
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d100      	bne.n	80011a6 <xQueueSemaphoreTake+0x306>
 80011a4:	e092      	b.n	80012cc <xQueueSemaphoreTake+0x42c>
 80011a6:	0021      	movs	r1, r4
 80011a8:	2065      	movs	r0, #101	; 0x65
 80011aa:	9a01      	ldr	r2, [sp, #4]
 80011ac:	f002 fa38 	bl	8003620 <prvTraceStoreEvent2>
 80011b0:	e745      	b.n	800103e <xQueueSemaphoreTake+0x19e>
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	20000006 	.word	0x20000006
						taskENTER_CRITICAL();
 80011b8:	f001 fba0 	bl	80028fc <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80011bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80011be:	2900      	cmp	r1, #0
 80011c0:	d003      	beq.n	80011ca <xQueueSemaphoreTake+0x32a>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80011c2:	2105      	movs	r1, #5
 80011c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80011ca:	68a0      	ldr	r0, [r4, #8]
 80011cc:	f001 f8da 	bl	8002384 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80011d0:	f001 fba0 	bl	8002914 <vPortExitCritical>
 80011d4:	e72a      	b.n	800102c <xQueueSemaphoreTake+0x18c>
						taskENTER_CRITICAL();
 80011d6:	f001 fb91 	bl	80028fc <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80011da:	68a0      	ldr	r0, [r4, #8]
 80011dc:	f001 f80e 	bl	80021fc <xTaskPriorityInherit>
 80011e0:	4682      	mov	sl, r0
						taskEXIT_CRITICAL();
 80011e2:	f001 fb97 	bl	8002914 <vPortExitCritical>
 80011e6:	e769      	b.n	80010bc <xQueueSemaphoreTake+0x21c>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d0c4      	beq.n	8001176 <xQueueSemaphoreTake+0x2d6>
 80011ec:	e762      	b.n	80010b4 <xQueueSemaphoreTake+0x214>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d0d9      	beq.n	80011a6 <xQueueSemaphoreTake+0x306>
 80011f2:	e724      	b.n	800103e <xQueueSemaphoreTake+0x19e>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80011f4:	4653      	mov	r3, sl
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d017      	beq.n	800122a <xQueueSemaphoreTake+0x38a>
 80011fa:	b672      	cpsid	i
 80011fc:	e7fe      	b.n	80011fc <xQueueSemaphoreTake+0x35c>
				traceQUEUE_RECEIVE( pxQueue );
 80011fe:	f001 ffcd 	bl	800319c <prvTraceGetCurrentTaskHandle>
 8001202:	f001 ff37 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8001206:	4643      	mov	r3, r8
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	4203      	tst	r3, r0
 800120c:	d13b      	bne.n	8001286 <xQueueSemaphoreTake+0x3e6>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800120e:	464b      	mov	r3, r9
 8001210:	3b01      	subs	r3, #1
 8001212:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001214:	6823      	ldr	r3, [r4, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d031      	beq.n	800127e <xQueueSemaphoreTake+0x3de>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800121a:	6923      	ldr	r3, [r4, #16]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d125      	bne.n	800126c <xQueueSemaphoreTake+0x3cc>
				taskEXIT_CRITICAL();
 8001220:	f001 fb78 	bl	8002914 <vPortExitCritical>
				return pdPASS;
 8001224:	2301      	movs	r3, #1
 8001226:	469a      	mov	sl, r3
 8001228:	e70b      	b.n	8001042 <xQueueSemaphoreTake+0x1a2>
					taskEXIT_CRITICAL();
 800122a:	f001 fb73 	bl	8002914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800122e:	f001 ffb5 	bl	800319c <prvTraceGetCurrentTaskHandle>
 8001232:	f001 ff1f 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8001236:	4643      	mov	r3, r8
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	4203      	tst	r3, r0
 800123c:	d100      	bne.n	8001240 <xQueueSemaphoreTake+0x3a0>
 800123e:	e6fe      	b.n	800103e <xQueueSemaphoreTake+0x19e>
 8001240:	0020      	movs	r0, r4
 8001242:	f001 ff2b 	bl	800309c <prvTraceGetQueueNumberHigh16>
 8001246:	4643      	mov	r3, r8
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	4203      	tst	r3, r0
 800124c:	d100      	bne.n	8001250 <xQueueSemaphoreTake+0x3b0>
 800124e:	e6f6      	b.n	800103e <xQueueSemaphoreTake+0x19e>
 8001250:	234c      	movs	r3, #76	; 0x4c
 8001252:	5ce3      	ldrb	r3, [r4, r3]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d85d      	bhi.n	8001314 <xQueueSemaphoreTake+0x474>
 8001258:	2b01      	cmp	r3, #1
 800125a:	d854      	bhi.n	8001306 <xQueueSemaphoreTake+0x466>
 800125c:	2b00      	cmp	r3, #0
 800125e:	d05c      	beq.n	800131a <xQueueSemaphoreTake+0x47a>
 8001260:	0021      	movs	r1, r4
 8001262:	2065      	movs	r0, #101	; 0x65
 8001264:	9a01      	ldr	r2, [sp, #4]
 8001266:	f002 f9db 	bl	8003620 <prvTraceStoreEvent2>
 800126a:	e6ea      	b.n	8001042 <xQueueSemaphoreTake+0x1a2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800126c:	0020      	movs	r0, r4
 800126e:	3010      	adds	r0, #16
 8001270:	f000 ff0a 	bl	8002088 <xTaskRemoveFromEventList>
 8001274:	2800      	cmp	r0, #0
 8001276:	d0d3      	beq.n	8001220 <xQueueSemaphoreTake+0x380>
						queueYIELD_IF_USING_PREEMPTION();
 8001278:	f001 fb34 	bl	80028e4 <vPortYield>
 800127c:	e7d0      	b.n	8001220 <xQueueSemaphoreTake+0x380>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800127e:	f001 f8e3 	bl	8002448 <pvTaskIncrementMutexHeldCount>
 8001282:	60a0      	str	r0, [r4, #8]
 8001284:	e7c9      	b.n	800121a <xQueueSemaphoreTake+0x37a>
				traceQUEUE_RECEIVE( pxQueue );
 8001286:	0020      	movs	r0, r4
 8001288:	f001 ff08 	bl	800309c <prvTraceGetQueueNumberHigh16>
 800128c:	4643      	mov	r3, r8
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	4203      	tst	r3, r0
 8001292:	d0bc      	beq.n	800120e <xQueueSemaphoreTake+0x36e>
 8001294:	234c      	movs	r3, #76	; 0x4c
 8001296:	5ce3      	ldrb	r3, [r4, r3]
 8001298:	2b03      	cmp	r3, #3
 800129a:	d829      	bhi.n	80012f0 <xQueueSemaphoreTake+0x450>
 800129c:	2b01      	cmp	r3, #1
 800129e:	d82a      	bhi.n	80012f6 <xQueueSemaphoreTake+0x456>
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d041      	beq.n	8001328 <xQueueSemaphoreTake+0x488>
 80012a4:	0021      	movs	r1, r4
 80012a6:	2062      	movs	r0, #98	; 0x62
 80012a8:	9a01      	ldr	r2, [sp, #4]
 80012aa:	f002 f9b9 	bl	8003620 <prvTraceStoreEvent2>
 80012ae:	e7ae      	b.n	800120e <xQueueSemaphoreTake+0x36e>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80012b0:	0021      	movs	r1, r4
 80012b2:	2067      	movs	r0, #103	; 0x67
 80012b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012b6:	9a01      	ldr	r2, [sp, #4]
 80012b8:	f002 fa22 	bl	8003700 <prvTraceStoreEvent3>
 80012bc:	e6fa      	b.n	80010b4 <xQueueSemaphoreTake+0x214>
 80012be:	0021      	movs	r1, r4
 80012c0:	2066      	movs	r0, #102	; 0x66
 80012c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012c4:	9a01      	ldr	r2, [sp, #4]
 80012c6:	f002 fa1b 	bl	8003700 <prvTraceStoreEvent3>
 80012ca:	e6f3      	b.n	80010b4 <xQueueSemaphoreTake+0x214>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80012cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012ce:	0021      	movs	r1, r4
 80012d0:	2063      	movs	r0, #99	; 0x63
 80012d2:	9a01      	ldr	r2, [sp, #4]
 80012d4:	f002 fa14 	bl	8003700 <prvTraceStoreEvent3>
				return errQUEUE_EMPTY;
 80012d8:	2300      	movs	r3, #0
 80012da:	469a      	mov	sl, r3
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80012dc:	e6b1      	b.n	8001042 <xQueueSemaphoreTake+0x1a2>
 80012de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012e0:	0021      	movs	r1, r4
 80012e2:	2064      	movs	r0, #100	; 0x64
 80012e4:	9a01      	ldr	r2, [sp, #4]
 80012e6:	f002 fa0b 	bl	8003700 <prvTraceStoreEvent3>
				return errQUEUE_EMPTY;
 80012ea:	2300      	movs	r3, #0
 80012ec:	469a      	mov	sl, r3
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80012ee:	e6a8      	b.n	8001042 <xQueueSemaphoreTake+0x1a2>
				traceQUEUE_RECEIVE( pxQueue );
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d0d7      	beq.n	80012a4 <xQueueSemaphoreTake+0x404>
 80012f4:	e78b      	b.n	800120e <xQueueSemaphoreTake+0x36e>
 80012f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012f8:	0021      	movs	r1, r4
 80012fa:	2061      	movs	r0, #97	; 0x61
 80012fc:	9a01      	ldr	r2, [sp, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	f002 f9fe 	bl	8003700 <prvTraceStoreEvent3>
 8001304:	e783      	b.n	800120e <xQueueSemaphoreTake+0x36e>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001306:	0021      	movs	r1, r4
 8001308:	2064      	movs	r0, #100	; 0x64
 800130a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800130c:	9a01      	ldr	r2, [sp, #4]
 800130e:	f002 f9f7 	bl	8003700 <prvTraceStoreEvent3>
 8001312:	e696      	b.n	8001042 <xQueueSemaphoreTake+0x1a2>
 8001314:	2b04      	cmp	r3, #4
 8001316:	d0a3      	beq.n	8001260 <xQueueSemaphoreTake+0x3c0>
 8001318:	e691      	b.n	800103e <xQueueSemaphoreTake+0x19e>
 800131a:	0021      	movs	r1, r4
 800131c:	2063      	movs	r0, #99	; 0x63
 800131e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001320:	9a01      	ldr	r2, [sp, #4]
 8001322:	f002 f9ed 	bl	8003700 <prvTraceStoreEvent3>
 8001326:	e68c      	b.n	8001042 <xQueueSemaphoreTake+0x1a2>
				traceQUEUE_RECEIVE( pxQueue );
 8001328:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800132a:	0021      	movs	r1, r4
 800132c:	2060      	movs	r0, #96	; 0x60
 800132e:	9a01      	ldr	r2, [sp, #4]
 8001330:	3b01      	subs	r3, #1
 8001332:	f002 f9e5 	bl	8003700 <prvTraceStoreEvent3>
 8001336:	e76a      	b.n	800120e <xQueueSemaphoreTake+0x36e>

08001338 <uxQueueGetQueueNumber>:
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8001338:	6c80      	ldr	r0, [r0, #72]	; 0x48
	}
 800133a:	4770      	bx	lr

0800133c <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 800133c:	6481      	str	r1, [r0, #72]	; 0x48
	}
 800133e:	4770      	bx	lr

08001340 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001340:	b570      	push	{r4, r5, r6, lr}
 8001342:	0005      	movs	r5, r0
 8001344:	0016      	movs	r6, r2
 8001346:	000c      	movs	r4, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001348:	f001 fad8 	bl	80028fc <vPortEnterCritical>
 800134c:	2244      	movs	r2, #68	; 0x44
 800134e:	5cab      	ldrb	r3, [r5, r2]
 8001350:	b25b      	sxtb	r3, r3
 8001352:	3301      	adds	r3, #1
 8001354:	d101      	bne.n	800135a <vQueueWaitForMessageRestricted+0x1a>
 8001356:	2300      	movs	r3, #0
 8001358:	54ab      	strb	r3, [r5, r2]
 800135a:	2245      	movs	r2, #69	; 0x45
 800135c:	5cab      	ldrb	r3, [r5, r2]
 800135e:	b25b      	sxtb	r3, r3
 8001360:	3301      	adds	r3, #1
 8001362:	d101      	bne.n	8001368 <vQueueWaitForMessageRestricted+0x28>
 8001364:	2300      	movs	r3, #0
 8001366:	54ab      	strb	r3, [r5, r2]
 8001368:	f001 fad4 	bl	8002914 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800136c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800136e:	2b00      	cmp	r3, #0
 8001370:	d046      	beq.n	8001400 <vQueueWaitForMessageRestricted+0xc0>
	taskENTER_CRITICAL();
 8001372:	f001 fac3 	bl	80028fc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001376:	2345      	movs	r3, #69	; 0x45
 8001378:	5cec      	ldrb	r4, [r5, r3]
 800137a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800137c:	2c00      	cmp	r4, #0
 800137e:	dd16      	ble.n	80013ae <vQueueWaitForMessageRestricted+0x6e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001380:	002e      	movs	r6, r5
 8001382:	3624      	adds	r6, #36	; 0x24
 8001384:	e004      	b.n	8001390 <vQueueWaitForMessageRestricted+0x50>
			--cTxLock;
 8001386:	3c01      	subs	r4, #1
 8001388:	b2e2      	uxtb	r2, r4
 800138a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800138c:	2a00      	cmp	r2, #0
 800138e:	d00e      	beq.n	80013ae <vQueueWaitForMessageRestricted+0x6e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001390:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00b      	beq.n	80013ae <vQueueWaitForMessageRestricted+0x6e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001396:	0030      	movs	r0, r6
 8001398:	f000 fe76 	bl	8002088 <xTaskRemoveFromEventList>
 800139c:	2800      	cmp	r0, #0
 800139e:	d0f2      	beq.n	8001386 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 80013a0:	3c01      	subs	r4, #1
 80013a2:	f000 ff05 	bl	80021b0 <vTaskMissedYield>
			--cTxLock;
 80013a6:	b2e2      	uxtb	r2, r4
 80013a8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80013aa:	2a00      	cmp	r2, #0
 80013ac:	d1f0      	bne.n	8001390 <vQueueWaitForMessageRestricted+0x50>
		pxQueue->cTxLock = queueUNLOCKED;
 80013ae:	2345      	movs	r3, #69	; 0x45
 80013b0:	22ff      	movs	r2, #255	; 0xff
 80013b2:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 80013b4:	f001 faae 	bl	8002914 <vPortExitCritical>
	taskENTER_CRITICAL();
 80013b8:	f001 faa0 	bl	80028fc <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80013bc:	2344      	movs	r3, #68	; 0x44
 80013be:	5cec      	ldrb	r4, [r5, r3]
 80013c0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013c2:	2c00      	cmp	r4, #0
 80013c4:	dd16      	ble.n	80013f4 <vQueueWaitForMessageRestricted+0xb4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013c6:	002e      	movs	r6, r5
 80013c8:	3610      	adds	r6, #16
 80013ca:	e004      	b.n	80013d6 <vQueueWaitForMessageRestricted+0x96>
				--cRxLock;
 80013cc:	3c01      	subs	r4, #1
 80013ce:	b2e2      	uxtb	r2, r4
 80013d0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	d00e      	beq.n	80013f4 <vQueueWaitForMessageRestricted+0xb4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013d6:	692b      	ldr	r3, [r5, #16]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00b      	beq.n	80013f4 <vQueueWaitForMessageRestricted+0xb4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013dc:	0030      	movs	r0, r6
 80013de:	f000 fe53 	bl	8002088 <xTaskRemoveFromEventList>
 80013e2:	2800      	cmp	r0, #0
 80013e4:	d0f2      	beq.n	80013cc <vQueueWaitForMessageRestricted+0x8c>
					vTaskMissedYield();
 80013e6:	3c01      	subs	r4, #1
 80013e8:	f000 fee2 	bl	80021b0 <vTaskMissedYield>
				--cRxLock;
 80013ec:	b2e2      	uxtb	r2, r4
 80013ee:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013f0:	2a00      	cmp	r2, #0
 80013f2:	d1f0      	bne.n	80013d6 <vQueueWaitForMessageRestricted+0x96>
		pxQueue->cRxLock = queueUNLOCKED;
 80013f4:	2344      	movs	r3, #68	; 0x44
 80013f6:	22ff      	movs	r2, #255	; 0xff
 80013f8:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 80013fa:	f001 fa8b 	bl	8002914 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001400:	0028      	movs	r0, r5
 8001402:	0032      	movs	r2, r6
 8001404:	0021      	movs	r1, r4
 8001406:	3024      	adds	r0, #36	; 0x24
 8001408:	f000 fdd2 	bl	8001fb0 <vTaskPlaceOnEventListRestricted>
 800140c:	e7b1      	b.n	8001372 <vQueueWaitForMessageRestricted+0x32>
 800140e:	46c0      	nop			; (mov r8, r8)

08001410 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001412:	46c6      	mov	lr, r8
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <prvIdleTask+0x50>)
 8001416:	b500      	push	{lr}
 8001418:	4698      	mov	r8, r3
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800141a:	4d12      	ldr	r5, [pc, #72]	; (8001464 <prvIdleTask+0x54>)
 800141c:	4f12      	ldr	r7, [pc, #72]	; (8001468 <prvIdleTask+0x58>)
 800141e:	4e13      	ldr	r6, [pc, #76]	; (800146c <prvIdleTask+0x5c>)
 8001420:	e014      	b.n	800144c <prvIdleTask+0x3c>
		{
			taskENTER_CRITICAL();
 8001422:	f001 fa6b 	bl	80028fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800142a:	1d20      	adds	r0, r4, #4
 800142c:	f7fe ff2c 	bl	8000288 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001430:	6833      	ldr	r3, [r6, #0]
 8001432:	3b01      	subs	r3, #1
 8001434:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001436:	682b      	ldr	r3, [r5, #0]
 8001438:	3b01      	subs	r3, #1
 800143a:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 800143c:	f001 fa6a 	bl	8002914 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001440:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001442:	f001 fb01 	bl	8002a48 <vPortFree>
			vPortFree( pxTCB );
 8001446:	0020      	movs	r0, r4
 8001448:	f001 fafe 	bl	8002a48 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800144c:	682b      	ldr	r3, [r5, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1e7      	bne.n	8001422 <prvIdleTask+0x12>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001452:	4643      	mov	r3, r8
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d9f8      	bls.n	800144c <prvIdleTask+0x3c>
				taskYIELD();
 800145a:	f001 fa43 	bl	80028e4 <vPortYield>
 800145e:	e7f5      	b.n	800144c <prvIdleTask+0x3c>
 8001460:	20000040 	.word	0x20000040
 8001464:	200000a8 	.word	0x200000a8
 8001468:	2000011c 	.word	0x2000011c
 800146c:	200000a4 	.word	0x200000a4

08001470 <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 8001470:	2200      	movs	r2, #0
 8001472:	4b33      	ldr	r3, [pc, #204]	; (8001540 <vTaskSwitchContext.part.0+0xd0>)
void vTaskSwitchContext( void )
 8001474:	b570      	push	{r4, r5, r6, lr}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001476:	4c33      	ldr	r4, [pc, #204]	; (8001544 <vTaskSwitchContext.part.0+0xd4>)
		xYieldPending = pdFALSE;
 8001478:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800147a:	6822      	ldr	r2, [r4, #0]
 800147c:	4932      	ldr	r1, [pc, #200]	; (8001548 <vTaskSwitchContext.part.0+0xd8>)
 800147e:	0093      	lsls	r3, r2, #2
 8001480:	1898      	adds	r0, r3, r2
 8001482:	0080      	lsls	r0, r0, #2
 8001484:	5808      	ldr	r0, [r1, r0]
 8001486:	2800      	cmp	r0, #0
 8001488:	d12f      	bne.n	80014ea <vTaskSwitchContext.part.0+0x7a>
 800148a:	2a00      	cmp	r2, #0
 800148c:	d02a      	beq.n	80014e4 <vTaskSwitchContext.part.0+0x74>
 800148e:	1e50      	subs	r0, r2, #1
 8001490:	0083      	lsls	r3, r0, #2
 8001492:	181d      	adds	r5, r3, r0
 8001494:	00ad      	lsls	r5, r5, #2
 8001496:	594d      	ldr	r5, [r1, r5]
 8001498:	2d00      	cmp	r5, #0
 800149a:	d125      	bne.n	80014e8 <vTaskSwitchContext.part.0+0x78>
 800149c:	2800      	cmp	r0, #0
 800149e:	d021      	beq.n	80014e4 <vTaskSwitchContext.part.0+0x74>
 80014a0:	1e90      	subs	r0, r2, #2
 80014a2:	0083      	lsls	r3, r0, #2
 80014a4:	181d      	adds	r5, r3, r0
 80014a6:	00ad      	lsls	r5, r5, #2
 80014a8:	594d      	ldr	r5, [r1, r5]
 80014aa:	2d00      	cmp	r5, #0
 80014ac:	d11c      	bne.n	80014e8 <vTaskSwitchContext.part.0+0x78>
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d018      	beq.n	80014e4 <vTaskSwitchContext.part.0+0x74>
 80014b2:	1ed0      	subs	r0, r2, #3
 80014b4:	0083      	lsls	r3, r0, #2
 80014b6:	181d      	adds	r5, r3, r0
 80014b8:	00ad      	lsls	r5, r5, #2
 80014ba:	594d      	ldr	r5, [r1, r5]
 80014bc:	2d00      	cmp	r5, #0
 80014be:	d113      	bne.n	80014e8 <vTaskSwitchContext.part.0+0x78>
 80014c0:	2800      	cmp	r0, #0
 80014c2:	d00f      	beq.n	80014e4 <vTaskSwitchContext.part.0+0x74>
 80014c4:	1f10      	subs	r0, r2, #4
 80014c6:	0083      	lsls	r3, r0, #2
 80014c8:	181d      	adds	r5, r3, r0
 80014ca:	00ad      	lsls	r5, r5, #2
 80014cc:	594d      	ldr	r5, [r1, r5]
 80014ce:	2d00      	cmp	r5, #0
 80014d0:	d10a      	bne.n	80014e8 <vTaskSwitchContext.part.0+0x78>
 80014d2:	2800      	cmp	r0, #0
 80014d4:	d006      	beq.n	80014e4 <vTaskSwitchContext.part.0+0x74>
 80014d6:	3a05      	subs	r2, #5
 80014d8:	0093      	lsls	r3, r2, #2
 80014da:	1898      	adds	r0, r3, r2
 80014dc:	0080      	lsls	r0, r0, #2
 80014de:	5808      	ldr	r0, [r1, r0]
 80014e0:	2800      	cmp	r0, #0
 80014e2:	d102      	bne.n	80014ea <vTaskSwitchContext.part.0+0x7a>
 80014e4:	b672      	cpsid	i
 80014e6:	e7fe      	b.n	80014e6 <vTaskSwitchContext.part.0+0x76>
 80014e8:	0002      	movs	r2, r0
 80014ea:	189b      	adds	r3, r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	18cd      	adds	r5, r1, r3
 80014f0:	6868      	ldr	r0, [r5, #4]
 80014f2:	3308      	adds	r3, #8
 80014f4:	6840      	ldr	r0, [r0, #4]
 80014f6:	18c9      	adds	r1, r1, r3
 80014f8:	6068      	str	r0, [r5, #4]
 80014fa:	4288      	cmp	r0, r1
 80014fc:	d01d      	beq.n	800153a <vTaskSwitchContext.part.0+0xca>
 80014fe:	68c3      	ldr	r3, [r0, #12]
 8001500:	4d12      	ldr	r5, [pc, #72]	; (800154c <vTaskSwitchContext.part.0+0xdc>)
 8001502:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
 8001504:	2301      	movs	r3, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001506:	6022      	str	r2, [r4, #0]
		traceTASK_SWITCHED_IN();
 8001508:	4c11      	ldr	r4, [pc, #68]	; (8001550 <vTaskSwitchContext.part.0+0xe0>)
 800150a:	6023      	str	r3, [r4, #0]
 800150c:	f001 fe46 	bl	800319c <prvTraceGetCurrentTaskHandle>
 8001510:	f001 fdb0 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <vTaskSwitchContext.part.0+0xe4>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	4203      	tst	r3, r0
 800151a:	d102      	bne.n	8001522 <vTaskSwitchContext.part.0+0xb2>
 800151c:	2302      	movs	r3, #2
 800151e:	6023      	str	r3, [r4, #0]
}
 8001520:	bd70      	pop	{r4, r5, r6, pc}
		traceTASK_SWITCHED_IN();
 8001522:	6828      	ldr	r0, [r5, #0]
 8001524:	f001 fe3e 	bl	80031a4 <prvIsNewTCB>
 8001528:	2800      	cmp	r0, #0
 800152a:	d0f7      	beq.n	800151c <vTaskSwitchContext.part.0+0xac>
 800152c:	6829      	ldr	r1, [r5, #0]
 800152e:	682b      	ldr	r3, [r5, #0]
 8001530:	2037      	movs	r0, #55	; 0x37
 8001532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001534:	f002 f874 	bl	8003620 <prvTraceStoreEvent2>
 8001538:	e7f0      	b.n	800151c <vTaskSwitchContext.part.0+0xac>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800153a:	6840      	ldr	r0, [r0, #4]
 800153c:	6068      	str	r0, [r5, #4]
 800153e:	e7de      	b.n	80014fe <vTaskSwitchContext.part.0+0x8e>
 8001540:	20000134 	.word	0x20000134
 8001544:	200000b8 	.word	0x200000b8
 8001548:	20000040 	.word	0x20000040
 800154c:	20000034 	.word	0x20000034
 8001550:	200038a0 	.word	0x200038a0
 8001554:	20000006 	.word	0x20000006

08001558 <xTaskCreate>:
	{
 8001558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800155a:	464e      	mov	r6, r9
 800155c:	4645      	mov	r5, r8
 800155e:	46de      	mov	lr, fp
 8001560:	4657      	mov	r7, sl
 8001562:	b5e0      	push	{r5, r6, r7, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001564:	0096      	lsls	r6, r2, #2
	{
 8001566:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001568:	0030      	movs	r0, r6
	{
 800156a:	000d      	movs	r5, r1
 800156c:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800156e:	f001 fa1b 	bl	80029a8 <pvPortMalloc>
 8001572:	1e07      	subs	r7, r0, #0
			if( pxStack != NULL )
 8001574:	d100      	bne.n	8001578 <xTaskCreate+0x20>
 8001576:	e0cd      	b.n	8001714 <xTaskCreate+0x1bc>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001578:	2058      	movs	r0, #88	; 0x58
 800157a:	f001 fa15 	bl	80029a8 <pvPortMalloc>
 800157e:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 8001580:	d100      	bne.n	8001584 <xTaskCreate+0x2c>
 8001582:	e0de      	b.n	8001742 <xTaskCreate+0x1ea>
					pxNewTCB->pxStack = pxStack;
 8001584:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001586:	0032      	movs	r2, r6
 8001588:	21a5      	movs	r1, #165	; 0xa5
 800158a:	0038      	movs	r0, r7
 800158c:	f003 fd22 	bl	8004fd4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001590:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001592:	469a      	mov	sl, r3
	if( pcName != NULL )
 8001594:	2d00      	cmp	r5, #0
 8001596:	d100      	bne.n	800159a <xTaskCreate+0x42>
 8001598:	e0e1      	b.n	800175e <xTaskCreate+0x206>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800159a:	2234      	movs	r2, #52	; 0x34
 800159c:	782b      	ldrb	r3, [r5, #0]
 800159e:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d02a      	beq.n	80015fa <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015a4:	786b      	ldrb	r3, [r5, #1]
 80015a6:	3201      	adds	r2, #1
 80015a8:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d025      	beq.n	80015fa <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015ae:	78ab      	ldrb	r3, [r5, #2]
 80015b0:	3201      	adds	r2, #1
 80015b2:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d020      	beq.n	80015fa <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015b8:	78eb      	ldrb	r3, [r5, #3]
 80015ba:	3201      	adds	r2, #1
 80015bc:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d01b      	beq.n	80015fa <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015c2:	792b      	ldrb	r3, [r5, #4]
 80015c4:	3201      	adds	r2, #1
 80015c6:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d016      	beq.n	80015fa <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015cc:	796b      	ldrb	r3, [r5, #5]
 80015ce:	3201      	adds	r2, #1
 80015d0:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d011      	beq.n	80015fa <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015d6:	79ab      	ldrb	r3, [r5, #6]
 80015d8:	3201      	adds	r2, #1
 80015da:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00c      	beq.n	80015fa <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015e0:	79eb      	ldrb	r3, [r5, #7]
 80015e2:	3201      	adds	r2, #1
 80015e4:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d007      	beq.n	80015fa <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015ea:	7a2b      	ldrb	r3, [r5, #8]
 80015ec:	3201      	adds	r2, #1
 80015ee:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015f4:	233d      	movs	r3, #61	; 0x3d
 80015f6:	7a6a      	ldrb	r2, [r5, #9]
 80015f8:	54e2      	strb	r2, [r4, r3]
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80015fa:	233d      	movs	r3, #61	; 0x3d
 80015fc:	2200      	movs	r2, #0
 80015fe:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001600:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001602:	2f04      	cmp	r7, #4
 8001604:	d900      	bls.n	8001608 <xTaskCreate+0xb0>
 8001606:	e088      	b.n	800171a <xTaskCreate+0x1c2>
		pxNewTCB->uxMutexesHeld = 0;
 8001608:	2300      	movs	r3, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800160a:	1d25      	adds	r5, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800160c:	64e3      	str	r3, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800160e:	0028      	movs	r0, r5
	pxNewTCB->uxPriority = uxPriority;
 8001610:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001612:	64a7      	str	r7, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8001614:	469b      	mov	fp, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001616:	f7fe fe0f 	bl	8000238 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800161a:	0020      	movs	r0, r4
 800161c:	3018      	adds	r0, #24
 800161e:	f7fe fe0b 	bl	8000238 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001622:	2305      	movs	r3, #5
 8001624:	1bdb      	subs	r3, r3, r7
 8001626:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8001628:	465b      	mov	r3, fp
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800162a:	465a      	mov	r2, fp
		pxNewTCB->ulNotifiedValue = 0;
 800162c:	6523      	str	r3, [r4, #80]	; 0x50
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800162e:	1f30      	subs	r0, r6, #4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001630:	3354      	adds	r3, #84	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001632:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001634:	6264      	str	r4, [r4, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001636:	4450      	add	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001638:	54e2      	strb	r2, [r4, r3]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800163a:	3b4d      	subs	r3, #77	; 0x4d
 800163c:	4398      	bics	r0, r3
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800163e:	464a      	mov	r2, r9
 8001640:	4641      	mov	r1, r8
 8001642:	f001 f907 	bl	8002854 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8001646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001648:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800164a:	2b00      	cmp	r3, #0
 800164c:	d000      	beq.n	8001650 <xTaskCreate+0xf8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800164e:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8001650:	f001 f954 	bl	80028fc <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001654:	4a58      	ldr	r2, [pc, #352]	; (80017b8 <xTaskCreate+0x260>)
		if( pxCurrentTCB == NULL )
 8001656:	4f59      	ldr	r7, [pc, #356]	; (80017bc <xTaskCreate+0x264>)
		uxCurrentNumberOfTasks++;
 8001658:	6813      	ldr	r3, [r2, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d100      	bne.n	8001666 <xTaskCreate+0x10e>
 8001664:	e073      	b.n	800174e <xTaskCreate+0x1f6>
			if( xSchedulerRunning == pdFALSE )
 8001666:	4b56      	ldr	r3, [pc, #344]	; (80017c0 <xTaskCreate+0x268>)
 8001668:	4698      	mov	r8, r3
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d105      	bne.n	800167c <xTaskCreate+0x124>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001674:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001676:	429a      	cmp	r2, r3
 8001678:	d800      	bhi.n	800167c <xTaskCreate+0x124>
					pxCurrentTCB = pxNewTCB;
 800167a:	603c      	str	r4, [r7, #0]
 800167c:	4e51      	ldr	r6, [pc, #324]	; (80017c4 <xTaskCreate+0x26c>)
		uxTaskNumber++;
 800167e:	4a52      	ldr	r2, [pc, #328]	; (80017c8 <xTaskCreate+0x270>)
		traceTASK_CREATE( pxNewTCB );
 8001680:	0020      	movs	r0, r4
		uxTaskNumber++;
 8001682:	6813      	ldr	r3, [r2, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001688:	6423      	str	r3, [r4, #64]	; 0x40
		traceTASK_CREATE( pxNewTCB );
 800168a:	2334      	movs	r3, #52	; 0x34
 800168c:	4699      	mov	r9, r3
 800168e:	44a1      	add	r9, r4
 8001690:	4649      	mov	r1, r9
 8001692:	f002 f8ad 	bl	80037f0 <prvTraceSaveObjectSymbol>
 8001696:	0020      	movs	r0, r4
 8001698:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800169a:	f002 f913 	bl	80038c4 <prvTraceSaveObjectData>
 800169e:	464a      	mov	r2, r9
 80016a0:	0023      	movs	r3, r4
 80016a2:	2103      	movs	r1, #3
 80016a4:	2001      	movs	r0, #1
 80016a6:	f001 fead 	bl	8003404 <prvTraceStoreStringEvent>
 80016aa:	4b48      	ldr	r3, [pc, #288]	; (80017cc <xTaskCreate+0x274>)
 80016ac:	0020      	movs	r0, r4
 80016ae:	8819      	ldrh	r1, [r3, #0]
 80016b0:	f001 fce6 	bl	8003080 <prvTraceSetTaskNumberHigh16>
 80016b4:	f001 fd72 	bl	800319c <prvTraceGetCurrentTaskHandle>
 80016b8:	f001 fcdc 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 80016bc:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <xTaskCreate+0x278>)
 80016be:	4699      	mov	r9, r3
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	4203      	tst	r3, r0
 80016c4:	d130      	bne.n	8001728 <xTaskCreate+0x1d0>
		prvAddTaskToReadyList( pxNewTCB );
 80016c6:	0020      	movs	r0, r4
 80016c8:	f001 fcd4 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 80016cc:	464b      	mov	r3, r9
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	4203      	tst	r3, r0
 80016d2:	d124      	bne.n	800171e <xTaskCreate+0x1c6>
 80016d4:	4b3f      	ldr	r3, [pc, #252]	; (80017d4 <xTaskCreate+0x27c>)
 80016d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016d8:	6819      	ldr	r1, [r3, #0]
 80016da:	428a      	cmp	r2, r1
 80016dc:	d900      	bls.n	80016e0 <xTaskCreate+0x188>
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	0093      	lsls	r3, r2, #2
 80016e2:	189b      	adds	r3, r3, r2
 80016e4:	0098      	lsls	r0, r3, #2
 80016e6:	0029      	movs	r1, r5
 80016e8:	1830      	adds	r0, r6, r0
 80016ea:	f7fe fda9 	bl	8000240 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80016ee:	f001 f911 	bl	8002914 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80016f2:	4643      	mov	r3, r8
 80016f4:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 80016f6:	2501      	movs	r5, #1
	if( xSchedulerRunning != pdFALSE )
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <xTaskCreate+0x1ae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001700:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001702:	429a      	cmp	r2, r3
 8001704:	d32e      	bcc.n	8001764 <xTaskCreate+0x20c>
	}
 8001706:	0028      	movs	r0, r5
 8001708:	bcf0      	pop	{r4, r5, r6, r7}
 800170a:	46bb      	mov	fp, r7
 800170c:	46b2      	mov	sl, r6
 800170e:	46a9      	mov	r9, r5
 8001710:	46a0      	mov	r8, r4
 8001712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001714:	2501      	movs	r5, #1
 8001716:	426d      	negs	r5, r5
 8001718:	e7f5      	b.n	8001706 <xTaskCreate+0x1ae>
 800171a:	2704      	movs	r7, #4
 800171c:	e774      	b.n	8001608 <xTaskCreate+0xb0>
		prvAddTaskToReadyList( pxNewTCB );
 800171e:	0021      	movs	r1, r4
 8001720:	2030      	movs	r0, #48	; 0x30
 8001722:	f001 ff11 	bl	8003548 <prvTraceStoreEvent1>
 8001726:	e7d5      	b.n	80016d4 <xTaskCreate+0x17c>
		traceTASK_CREATE( pxNewTCB );
 8001728:	0020      	movs	r0, r4
 800172a:	f001 fca3 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 800172e:	464b      	mov	r3, r9
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	4203      	tst	r3, r0
 8001734:	d0c7      	beq.n	80016c6 <xTaskCreate+0x16e>
 8001736:	0021      	movs	r1, r4
 8001738:	2010      	movs	r0, #16
 800173a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800173c:	f001 ff70 	bl	8003620 <prvTraceStoreEvent2>
 8001740:	e7c1      	b.n	80016c6 <xTaskCreate+0x16e>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001742:	2501      	movs	r5, #1
					vPortFree( pxStack );
 8001744:	0038      	movs	r0, r7
 8001746:	f001 f97f 	bl	8002a48 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800174a:	426d      	negs	r5, r5
 800174c:	e7db      	b.n	8001706 <xTaskCreate+0x1ae>
			pxCurrentTCB = pxNewTCB;
 800174e:	603c      	str	r4, [r7, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001750:	6813      	ldr	r3, [r2, #0]
 8001752:	4e1c      	ldr	r6, [pc, #112]	; (80017c4 <xTaskCreate+0x26c>)
 8001754:	2b01      	cmp	r3, #1
 8001756:	d008      	beq.n	800176a <xTaskCreate+0x212>
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <xTaskCreate+0x268>)
 800175a:	4698      	mov	r8, r3
}
 800175c:	e78f      	b.n	800167e <xTaskCreate+0x126>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800175e:	2334      	movs	r3, #52	; 0x34
 8001760:	54e5      	strb	r5, [r4, r3]
 8001762:	e74d      	b.n	8001600 <xTaskCreate+0xa8>
			taskYIELD_IF_USING_PREEMPTION();
 8001764:	f001 f8be 	bl	80028e4 <vPortYield>
 8001768:	e7cd      	b.n	8001706 <xTaskCreate+0x1ae>
 800176a:	2364      	movs	r3, #100	; 0x64
 800176c:	4699      	mov	r9, r3
 800176e:	46b0      	mov	r8, r6
 8001770:	44b1      	add	r9, r6
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001772:	4640      	mov	r0, r8
 8001774:	f7fe fd54 	bl	8000220 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001778:	2314      	movs	r3, #20
 800177a:	469c      	mov	ip, r3
 800177c:	44e0      	add	r8, ip
 800177e:	45c1      	cmp	r9, r8
 8001780:	d1f7      	bne.n	8001772 <xTaskCreate+0x21a>
	vListInitialise( &xDelayedTaskList1 );
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <xTaskCreate+0x280>)
 8001784:	4699      	mov	r9, r3
 8001786:	0018      	movs	r0, r3
 8001788:	f7fe fd4a 	bl	8000220 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <xTaskCreate+0x284>)
 800178e:	0018      	movs	r0, r3
 8001790:	4698      	mov	r8, r3
 8001792:	f7fe fd45 	bl	8000220 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001796:	4812      	ldr	r0, [pc, #72]	; (80017e0 <xTaskCreate+0x288>)
 8001798:	f7fe fd42 	bl	8000220 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800179c:	4811      	ldr	r0, [pc, #68]	; (80017e4 <xTaskCreate+0x28c>)
 800179e:	f7fe fd3f 	bl	8000220 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80017a2:	4811      	ldr	r0, [pc, #68]	; (80017e8 <xTaskCreate+0x290>)
 80017a4:	f7fe fd3c 	bl	8000220 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80017a8:	464a      	mov	r2, r9
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <xTaskCreate+0x294>)
 80017ac:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80017ae:	4642      	mov	r2, r8
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <xTaskCreate+0x298>)
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	e7d0      	b.n	8001758 <xTaskCreate+0x200>
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	200000a4 	.word	0x200000a4
 80017bc:	20000034 	.word	0x20000034
 80017c0:	20000104 	.word	0x20000104
 80017c4:	20000040 	.word	0x20000040
 80017c8:	200000b4 	.word	0x200000b4
 80017cc:	20000004 	.word	0x20000004
 80017d0:	20000006 	.word	0x20000006
 80017d4:	200000b8 	.word	0x200000b8
 80017d8:	200000bc 	.word	0x200000bc
 80017dc:	200000d0 	.word	0x200000d0
 80017e0:	200000f0 	.word	0x200000f0
 80017e4:	2000011c 	.word	0x2000011c
 80017e8:	20000108 	.word	0x20000108
 80017ec:	20000038 	.word	0x20000038
 80017f0:	2000003c 	.word	0x2000003c

080017f4 <vTaskStartScheduler>:
{
 80017f4:	b5f0      	push	{r4, r5, r6, r7, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80017f6:	208c      	movs	r0, #140	; 0x8c
{
 80017f8:	46d6      	mov	lr, sl
 80017fa:	464f      	mov	r7, r9
 80017fc:	4646      	mov	r6, r8
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80017fe:	0040      	lsls	r0, r0, #1
{
 8001800:	b5c0      	push	{r6, r7, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001802:	f001 f8d1 	bl	80029a8 <pvPortMalloc>
 8001806:	1e05      	subs	r5, r0, #0
			if( pxStack != NULL )
 8001808:	d100      	bne.n	800180c <vTaskStartScheduler+0x18>
 800180a:	e098      	b.n	800193e <vTaskStartScheduler+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800180c:	2058      	movs	r0, #88	; 0x58
 800180e:	f001 f8cb 	bl	80029a8 <pvPortMalloc>
 8001812:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 8001814:	d100      	bne.n	8001818 <vTaskStartScheduler+0x24>
 8001816:	e08f      	b.n	8001938 <vTaskStartScheduler+0x144>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001818:	228c      	movs	r2, #140	; 0x8c
 800181a:	21a5      	movs	r1, #165	; 0xa5
 800181c:	0052      	lsls	r2, r2, #1
					pxNewTCB->pxStack = pxStack;
 800181e:	6305      	str	r5, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001820:	0028      	movs	r0, r5
 8001822:	f003 fbd7 	bl	8004fd4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001826:	2334      	movs	r3, #52	; 0x34
 8001828:	4698      	mov	r8, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800182a:	4b7a      	ldr	r3, [pc, #488]	; (8001a14 <vTaskStartScheduler+0x220>)
 800182c:	2500      	movs	r5, #0
 800182e:	6363      	str	r3, [r4, #52]	; 0x34
 8001830:	2338      	movs	r3, #56	; 0x38
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001832:	6b26      	ldr	r6, [r4, #48]	; 0x30
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001834:	1d27      	adds	r7, r4, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001836:	54e5      	strb	r5, [r4, r3]
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001838:	3305      	adds	r3, #5
 800183a:	54e5      	strb	r5, [r4, r3]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800183c:	0038      	movs	r0, r7
	pxNewTCB->uxPriority = uxPriority;
 800183e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001840:	64a5      	str	r5, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8001842:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001844:	f7fe fcf8 	bl	8000238 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001848:	0020      	movs	r0, r4
 800184a:	3018      	adds	r0, #24
 800184c:	f7fe fcf4 	bl	8000238 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001850:	2305      	movs	r3, #5
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001852:	0030      	movs	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001854:	61a3      	str	r3, [r4, #24]
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001856:	3015      	adds	r0, #21
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001858:	334f      	adds	r3, #79	; 0x4f
		pxNewTCB->ulNotifiedValue = 0;
 800185a:	6525      	str	r5, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800185c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800185e:	6264      	str	r4, [r4, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001860:	30ff      	adds	r0, #255	; 0xff
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001862:	54e5      	strb	r5, [r4, r3]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001864:	3b4d      	subs	r3, #77	; 0x4d
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001866:	2200      	movs	r2, #0
 8001868:	496b      	ldr	r1, [pc, #428]	; (8001a18 <vTaskStartScheduler+0x224>)
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800186a:	4398      	bics	r0, r3
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800186c:	f000 fff2 	bl	8002854 <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001870:	4b6a      	ldr	r3, [pc, #424]	; (8001a1c <vTaskStartScheduler+0x228>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001872:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001874:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8001876:	f001 f841 	bl	80028fc <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800187a:	4a69      	ldr	r2, [pc, #420]	; (8001a20 <vTaskStartScheduler+0x22c>)
		if( pxCurrentTCB == NULL )
 800187c:	4d69      	ldr	r5, [pc, #420]	; (8001a24 <vTaskStartScheduler+0x230>)
		uxCurrentNumberOfTasks++;
 800187e:	6813      	ldr	r3, [r2, #0]
 8001880:	44a0      	add	r8, r4
 8001882:	3301      	adds	r3, #1
 8001884:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001886:	682b      	ldr	r3, [r5, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d100      	bne.n	800188e <vTaskStartScheduler+0x9a>
 800188c:	e091      	b.n	80019b2 <vTaskStartScheduler+0x1be>
			if( xSchedulerRunning == pdFALSE )
 800188e:	4e66      	ldr	r6, [pc, #408]	; (8001a28 <vTaskStartScheduler+0x234>)
 8001890:	6833      	ldr	r3, [r6, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d105      	bne.n	80018a2 <vTaskStartScheduler+0xae>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001896:	682b      	ldr	r3, [r5, #0]
 8001898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800189a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800189c:	429a      	cmp	r2, r3
 800189e:	d800      	bhi.n	80018a2 <vTaskStartScheduler+0xae>
					pxCurrentTCB = pxNewTCB;
 80018a0:	602c      	str	r4, [r5, #0]
 80018a2:	4b62      	ldr	r3, [pc, #392]	; (8001a2c <vTaskStartScheduler+0x238>)
 80018a4:	4699      	mov	r9, r3
		uxTaskNumber++;
 80018a6:	4a62      	ldr	r2, [pc, #392]	; (8001a30 <vTaskStartScheduler+0x23c>)
		traceTASK_CREATE( pxNewTCB );
 80018a8:	4641      	mov	r1, r8
		uxTaskNumber++;
 80018aa:	6813      	ldr	r3, [r2, #0]
		traceTASK_CREATE( pxNewTCB );
 80018ac:	0020      	movs	r0, r4
		uxTaskNumber++;
 80018ae:	3301      	adds	r3, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80018b0:	6423      	str	r3, [r4, #64]	; 0x40
		uxTaskNumber++;
 80018b2:	6013      	str	r3, [r2, #0]
		traceTASK_CREATE( pxNewTCB );
 80018b4:	f001 ff9c 	bl	80037f0 <prvTraceSaveObjectSymbol>
 80018b8:	0020      	movs	r0, r4
 80018ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80018bc:	f002 f802 	bl	80038c4 <prvTraceSaveObjectData>
 80018c0:	4642      	mov	r2, r8
 80018c2:	0023      	movs	r3, r4
 80018c4:	2103      	movs	r1, #3
 80018c6:	2001      	movs	r0, #1
 80018c8:	f001 fd9c 	bl	8003404 <prvTraceStoreStringEvent>
 80018cc:	4b59      	ldr	r3, [pc, #356]	; (8001a34 <vTaskStartScheduler+0x240>)
 80018ce:	0020      	movs	r0, r4
 80018d0:	8819      	ldrh	r1, [r3, #0]
 80018d2:	f001 fbd5 	bl	8003080 <prvTraceSetTaskNumberHigh16>
 80018d6:	f001 fc61 	bl	800319c <prvTraceGetCurrentTaskHandle>
 80018da:	f001 fbcb 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 80018de:	4b56      	ldr	r3, [pc, #344]	; (8001a38 <vTaskStartScheduler+0x244>)
 80018e0:	4698      	mov	r8, r3
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	4203      	tst	r3, r0
 80018e6:	d14b      	bne.n	8001980 <vTaskStartScheduler+0x18c>
		prvAddTaskToReadyList( pxNewTCB );
 80018e8:	0020      	movs	r0, r4
 80018ea:	f001 fbc3 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 80018ee:	4643      	mov	r3, r8
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	4203      	tst	r3, r0
 80018f4:	d13f      	bne.n	8001976 <vTaskStartScheduler+0x182>
 80018f6:	4b51      	ldr	r3, [pc, #324]	; (8001a3c <vTaskStartScheduler+0x248>)
 80018f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018fa:	6819      	ldr	r1, [r3, #0]
 80018fc:	428a      	cmp	r2, r1
 80018fe:	d838      	bhi.n	8001972 <vTaskStartScheduler+0x17e>
 8001900:	0093      	lsls	r3, r2, #2
 8001902:	189b      	adds	r3, r3, r2
 8001904:	0098      	lsls	r0, r3, #2
 8001906:	0039      	movs	r1, r7
 8001908:	4448      	add	r0, r9
 800190a:	f7fe fc99 	bl	8000240 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800190e:	f001 f801 	bl	8002914 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001912:	6833      	ldr	r3, [r6, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d004      	beq.n	8001922 <vTaskStartScheduler+0x12e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001918:	682b      	ldr	r3, [r5, #0]
 800191a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800191c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800191e:	429a      	cmp	r2, r3
 8001920:	d34f      	bcc.n	80019c2 <vTaskStartScheduler+0x1ce>
			xReturn = xTimerCreateTimerTask();
 8001922:	f000 ff27 	bl	8002774 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8001926:	2801      	cmp	r0, #1
 8001928:	d00b      	beq.n	8001942 <vTaskStartScheduler+0x14e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800192a:	3001      	adds	r0, #1
 800192c:	d007      	beq.n	800193e <vTaskStartScheduler+0x14a>
}
 800192e:	bce0      	pop	{r5, r6, r7}
 8001930:	46ba      	mov	sl, r7
 8001932:	46b1      	mov	r9, r6
 8001934:	46a8      	mov	r8, r5
 8001936:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 8001938:	0028      	movs	r0, r5
 800193a:	f001 f885 	bl	8002a48 <vPortFree>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800193e:	b672      	cpsid	i
 8001940:	e7fe      	b.n	8001940 <vTaskStartScheduler+0x14c>
		portDISABLE_INTERRUPTS();
 8001942:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8001944:	2201      	movs	r2, #1
 8001946:	4b3e      	ldr	r3, [pc, #248]	; (8001a40 <vTaskStartScheduler+0x24c>)
 8001948:	4252      	negs	r2, r2
 800194a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800194c:	2200      	movs	r2, #0
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <vTaskStartScheduler+0x250>)
		traceTASK_SWITCHED_IN();
 8001950:	4c3d      	ldr	r4, [pc, #244]	; (8001a48 <vTaskStartScheduler+0x254>)
		xSchedulerRunning = pdTRUE;
 8001952:	6030      	str	r0, [r6, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001954:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
 8001956:	6020      	str	r0, [r4, #0]
 8001958:	f001 fc20 	bl	800319c <prvTraceGetCurrentTaskHandle>
 800195c:	f001 fb8a 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8001960:	4643      	mov	r3, r8
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	4203      	tst	r3, r0
 8001966:	d118      	bne.n	800199a <vTaskStartScheduler+0x1a6>
 8001968:	2302      	movs	r3, #2
 800196a:	6023      	str	r3, [r4, #0]
		if( xPortStartScheduler() != pdFALSE )
 800196c:	f000 ff84 	bl	8002878 <xPortStartScheduler>
 8001970:	e7dd      	b.n	800192e <vTaskStartScheduler+0x13a>
		prvAddTaskToReadyList( pxNewTCB );
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	e7c4      	b.n	8001900 <vTaskStartScheduler+0x10c>
 8001976:	0021      	movs	r1, r4
 8001978:	2030      	movs	r0, #48	; 0x30
 800197a:	f001 fde5 	bl	8003548 <prvTraceStoreEvent1>
 800197e:	e7ba      	b.n	80018f6 <vTaskStartScheduler+0x102>
		traceTASK_CREATE( pxNewTCB );
 8001980:	0020      	movs	r0, r4
 8001982:	f001 fb77 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8001986:	4643      	mov	r3, r8
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	4203      	tst	r3, r0
 800198c:	d0ac      	beq.n	80018e8 <vTaskStartScheduler+0xf4>
 800198e:	0021      	movs	r1, r4
 8001990:	2010      	movs	r0, #16
 8001992:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001994:	f001 fe44 	bl	8003620 <prvTraceStoreEvent2>
 8001998:	e7a6      	b.n	80018e8 <vTaskStartScheduler+0xf4>
		traceTASK_SWITCHED_IN();
 800199a:	6828      	ldr	r0, [r5, #0]
 800199c:	f001 fc02 	bl	80031a4 <prvIsNewTCB>
 80019a0:	2800      	cmp	r0, #0
 80019a2:	d0e1      	beq.n	8001968 <vTaskStartScheduler+0x174>
 80019a4:	6829      	ldr	r1, [r5, #0]
 80019a6:	682b      	ldr	r3, [r5, #0]
 80019a8:	2037      	movs	r0, #55	; 0x37
 80019aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ac:	f001 fe38 	bl	8003620 <prvTraceStoreEvent2>
 80019b0:	e7da      	b.n	8001968 <vTaskStartScheduler+0x174>
			pxCurrentTCB = pxNewTCB;
 80019b2:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80019b4:	6813      	ldr	r3, [r2, #0]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d006      	beq.n	80019c8 <vTaskStartScheduler+0x1d4>
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <vTaskStartScheduler+0x238>)
 80019bc:	4e1a      	ldr	r6, [pc, #104]	; (8001a28 <vTaskStartScheduler+0x234>)
 80019be:	4699      	mov	r9, r3
 80019c0:	e771      	b.n	80018a6 <vTaskStartScheduler+0xb2>
			taskYIELD_IF_USING_PREEMPTION();
 80019c2:	f000 ff8f 	bl	80028e4 <vPortYield>
		if( xReturn == pdPASS )
 80019c6:	e7ac      	b.n	8001922 <vTaskStartScheduler+0x12e>
 80019c8:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <vTaskStartScheduler+0x238>)
 80019ca:	4699      	mov	r9, r3
 80019cc:	001e      	movs	r6, r3
 80019ce:	2364      	movs	r3, #100	; 0x64
 80019d0:	444b      	add	r3, r9
 80019d2:	469a      	mov	sl, r3
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019d4:	0030      	movs	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019d6:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019d8:	f7fe fc22 	bl	8000220 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019dc:	45b2      	cmp	sl, r6
 80019de:	d1f9      	bne.n	80019d4 <vTaskStartScheduler+0x1e0>
	vListInitialise( &xDelayedTaskList1 );
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <vTaskStartScheduler+0x258>)
 80019e2:	469a      	mov	sl, r3
 80019e4:	0018      	movs	r0, r3
 80019e6:	f7fe fc1b 	bl	8000220 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80019ea:	4e19      	ldr	r6, [pc, #100]	; (8001a50 <vTaskStartScheduler+0x25c>)
 80019ec:	0030      	movs	r0, r6
 80019ee:	f7fe fc17 	bl	8000220 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80019f2:	4818      	ldr	r0, [pc, #96]	; (8001a54 <vTaskStartScheduler+0x260>)
 80019f4:	f7fe fc14 	bl	8000220 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80019f8:	4817      	ldr	r0, [pc, #92]	; (8001a58 <vTaskStartScheduler+0x264>)
 80019fa:	f7fe fc11 	bl	8000220 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80019fe:	4817      	ldr	r0, [pc, #92]	; (8001a5c <vTaskStartScheduler+0x268>)
 8001a00:	f7fe fc0e 	bl	8000220 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001a04:	4652      	mov	r2, sl
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <vTaskStartScheduler+0x26c>)
 8001a08:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <vTaskStartScheduler+0x270>)
 8001a0c:	601e      	str	r6, [r3, #0]
 8001a0e:	4e06      	ldr	r6, [pc, #24]	; (8001a28 <vTaskStartScheduler+0x234>)
}
 8001a10:	e749      	b.n	80018a6 <vTaskStartScheduler+0xb2>
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	454c4449 	.word	0x454c4449
 8001a18:	08001411 	.word	0x08001411
 8001a1c:	200000e4 	.word	0x200000e4
 8001a20:	200000a4 	.word	0x200000a4
 8001a24:	20000034 	.word	0x20000034
 8001a28:	20000104 	.word	0x20000104
 8001a2c:	20000040 	.word	0x20000040
 8001a30:	200000b4 	.word	0x200000b4
 8001a34:	20000004 	.word	0x20000004
 8001a38:	20000006 	.word	0x20000006
 8001a3c:	200000b8 	.word	0x200000b8
 8001a40:	200000e8 	.word	0x200000e8
 8001a44:	20000130 	.word	0x20000130
 8001a48:	200038a0 	.word	0x200038a0
 8001a4c:	200000bc 	.word	0x200000bc
 8001a50:	200000d0 	.word	0x200000d0
 8001a54:	200000f0 	.word	0x200000f0
 8001a58:	2000011c 	.word	0x2000011c
 8001a5c:	20000108 	.word	0x20000108
 8001a60:	20000038 	.word	0x20000038
 8001a64:	2000003c 	.word	0x2000003c

08001a68 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001a68:	4a02      	ldr	r2, [pc, #8]	; (8001a74 <vTaskSuspendAll+0xc>)
 8001a6a:	6813      	ldr	r3, [r2, #0]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	4770      	bx	lr
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	200000b0 	.word	0x200000b0

08001a78 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8001a78:	4b01      	ldr	r3, [pc, #4]	; (8001a80 <xTaskGetTickCount+0x8>)
 8001a7a:	6818      	ldr	r0, [r3, #0]
}
 8001a7c:	4770      	bx	lr
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	20000130 	.word	0x20000130

08001a84 <xTaskIncrementTick>:
{
 8001a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a86:	46de      	mov	lr, fp
 8001a88:	4657      	mov	r7, sl
 8001a8a:	464e      	mov	r6, r9
 8001a8c:	4645      	mov	r5, r8
 8001a8e:	b5e0      	push	{r5, r6, r7, lr}
	traceTASK_INCREMENT_TICK( xTickCount );
 8001a90:	4b60      	ldr	r3, [pc, #384]	; (8001c14 <xTaskIncrementTick+0x190>)
{
 8001a92:	b083      	sub	sp, #12
	traceTASK_INCREMENT_TICK( xTickCount );
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	2a01      	cmp	r2, #1
 8001a98:	d05d      	beq.n	8001b56 <xTaskIncrementTick+0xd2>
 8001a9a:	4a5f      	ldr	r2, [pc, #380]	; (8001c18 <xTaskIncrementTick+0x194>)
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	2a00      	cmp	r2, #0
 8001aa0:	d059      	beq.n	8001b56 <xTaskIncrementTick+0xd2>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d15d      	bne.n	8001b64 <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001aa8:	4b5c      	ldr	r3, [pc, #368]	; (8001c1c <xTaskIncrementTick+0x198>)
 8001aaa:	681e      	ldr	r6, [r3, #0]
 8001aac:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8001aae:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001ab0:	2e00      	cmp	r6, #0
 8001ab2:	d06b      	beq.n	8001b8c <xTaskIncrementTick+0x108>
 8001ab4:	4b5a      	ldr	r3, [pc, #360]	; (8001c20 <xTaskIncrementTick+0x19c>)
 8001ab6:	469a      	mov	sl, r3
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ab8:	4653      	mov	r3, sl
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	42b3      	cmp	r3, r6
 8001abe:	d900      	bls.n	8001ac2 <xTaskIncrementTick+0x3e>
 8001ac0:	e07d      	b.n	8001bbe <xTaskIncrementTick+0x13a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ac2:	4f58      	ldr	r7, [pc, #352]	; (8001c24 <xTaskIncrementTick+0x1a0>)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d100      	bne.n	8001ace <xTaskIncrementTick+0x4a>
 8001acc:	e08c      	b.n	8001be8 <xTaskIncrementTick+0x164>
BaseType_t xSwitchRequired = pdFALSE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4698      	mov	r8, r3
 8001ad2:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <xTaskIncrementTick+0x1a4>)
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	4b55      	ldr	r3, [pc, #340]	; (8001c2c <xTaskIncrementTick+0x1a8>)
 8001ad8:	469b      	mov	fp, r3
					prvAddTaskToReadyList( pxTCB );
 8001ada:	4b55      	ldr	r3, [pc, #340]	; (8001c30 <xTaskIncrementTick+0x1ac>)
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	4b55      	ldr	r3, [pc, #340]	; (8001c34 <xTaskIncrementTick+0x1b0>)
 8001ae0:	4699      	mov	r9, r3
 8001ae2:	e01b      	b.n	8001b1c <xTaskIncrementTick+0x98>
 8001ae4:	464a      	mov	r2, r9
 8001ae6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <xTaskIncrementTick+0x6e>
 8001aee:	464a      	mov	r2, r9
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	0098      	lsls	r0, r3, #2
 8001af4:	18c0      	adds	r0, r0, r3
 8001af6:	9b00      	ldr	r3, [sp, #0]
 8001af8:	0080      	lsls	r0, r0, #2
 8001afa:	469c      	mov	ip, r3
 8001afc:	0029      	movs	r1, r5
 8001afe:	4460      	add	r0, ip
 8001b00:	f7fe fb9e 	bl	8000240 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b04:	465b      	mov	r3, fp
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d301      	bcc.n	8001b14 <xTaskIncrementTick+0x90>
							xSwitchRequired = pdTRUE;
 8001b10:	2301      	movs	r3, #1
 8001b12:	4698      	mov	r8, r3
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d06b      	beq.n	8001bf4 <xTaskIncrementTick+0x170>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b22:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8001b24:	429e      	cmp	r6, r3
 8001b26:	d36a      	bcc.n	8001bfe <xTaskIncrementTick+0x17a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b28:	1d25      	adds	r5, r4, #4
 8001b2a:	0028      	movs	r0, r5
 8001b2c:	f7fe fbac 	bl	8000288 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b36:	0020      	movs	r0, r4
 8001b38:	3018      	adds	r0, #24
 8001b3a:	f7fe fba5 	bl	8000288 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b3e:	0020      	movs	r0, r4
 8001b40:	f001 fa98 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8001b44:	9b01      	ldr	r3, [sp, #4]
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	4203      	tst	r3, r0
 8001b4a:	d0cb      	beq.n	8001ae4 <xTaskIncrementTick+0x60>
 8001b4c:	0021      	movs	r1, r4
 8001b4e:	2030      	movs	r0, #48	; 0x30
 8001b50:	f001 fcfa 	bl	8003548 <prvTraceStoreEvent1>
 8001b54:	e7c6      	b.n	8001ae4 <xTaskIncrementTick+0x60>
	traceTASK_INCREMENT_TICK( xTickCount );
 8001b56:	4938      	ldr	r1, [pc, #224]	; (8001c38 <xTaskIncrementTick+0x1b4>)
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b58:	681b      	ldr	r3, [r3, #0]
	traceTASK_INCREMENT_TICK( xTickCount );
 8001b5a:	680a      	ldr	r2, [r1, #0]
 8001b5c:	3201      	adds	r2, #1
 8001b5e:	600a      	str	r2, [r1, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0a1      	beq.n	8001aa8 <xTaskIncrementTick+0x24>
		++uxPendedTicks;
 8001b64:	4a2c      	ldr	r2, [pc, #176]	; (8001c18 <xTaskIncrementTick+0x194>)
 8001b66:	6813      	ldr	r3, [r2, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	4698      	mov	r8, r3
		if( xYieldPending != pdFALSE )
 8001b70:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <xTaskIncrementTick+0x1b8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <xTaskIncrementTick+0xf8>
			xSwitchRequired = pdTRUE;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	4698      	mov	r8, r3
}
 8001b7c:	4640      	mov	r0, r8
 8001b7e:	b003      	add	sp, #12
 8001b80:	bcf0      	pop	{r4, r5, r6, r7}
 8001b82:	46bb      	mov	fp, r7
 8001b84:	46b2      	mov	sl, r6
 8001b86:	46a9      	mov	r9, r5
 8001b88:	46a0      	mov	r8, r4
 8001b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			taskSWITCH_DELAYED_LISTS();
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <xTaskIncrementTick+0x1a0>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d126      	bne.n	8001be4 <xTaskIncrementTick+0x160>
 8001b96:	4a2a      	ldr	r2, [pc, #168]	; (8001c40 <xTaskIncrementTick+0x1bc>)
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	6810      	ldr	r0, [r2, #0]
 8001b9c:	6018      	str	r0, [r3, #0]
 8001b9e:	6011      	str	r1, [r2, #0]
 8001ba0:	4928      	ldr	r1, [pc, #160]	; (8001c44 <xTaskIncrementTick+0x1c0>)
 8001ba2:	680a      	ldr	r2, [r1, #0]
 8001ba4:	3201      	adds	r2, #1
 8001ba6:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	2a00      	cmp	r2, #0
 8001bae:	d129      	bne.n	8001c04 <xTaskIncrementTick+0x180>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <xTaskIncrementTick+0x19c>)
 8001bb2:	469a      	mov	sl, r3
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	4652      	mov	r2, sl
 8001bb8:	425b      	negs	r3, r3
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	e77c      	b.n	8001ab8 <xTaskIncrementTick+0x34>
BaseType_t xSwitchRequired = pdFALSE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	4698      	mov	r8, r3
 8001bc2:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <xTaskIncrementTick+0x1a4>)
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <xTaskIncrementTick+0x1a8>)
 8001bc8:	469b      	mov	fp, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001bca:	465b      	mov	r3, fp
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd0:	0093      	lsls	r3, r2, #2
 8001bd2:	189b      	adds	r3, r3, r2
 8001bd4:	9a00      	ldr	r2, [sp, #0]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	58d3      	ldr	r3, [r2, r3]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d9c8      	bls.n	8001b70 <xTaskIncrementTick+0xec>
				xSwitchRequired = pdTRUE;
 8001bde:	2301      	movs	r3, #1
 8001be0:	4698      	mov	r8, r3
 8001be2:	e7c5      	b.n	8001b70 <xTaskIncrementTick+0xec>
			taskSWITCH_DELAYED_LISTS();
 8001be4:	b672      	cpsid	i
 8001be6:	e7fe      	b.n	8001be6 <xTaskIncrementTick+0x162>
BaseType_t xSwitchRequired = pdFALSE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	4698      	mov	r8, r3
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <xTaskIncrementTick+0x1a4>)
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <xTaskIncrementTick+0x1a8>)
 8001bf2:	469b      	mov	fp, r3
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	4652      	mov	r2, sl
 8001bf8:	425b      	negs	r3, r3
 8001bfa:	6013      	str	r3, [r2, #0]
					break;
 8001bfc:	e7e5      	b.n	8001bca <xTaskIncrementTick+0x146>
						xNextTaskUnblockTime = xItemValue;
 8001bfe:	4652      	mov	r2, sl
 8001c00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001c02:	e7e2      	b.n	8001bca <xTaskIncrementTick+0x146>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c04:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <xTaskIncrementTick+0x19c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c08:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c0a:	4692      	mov	sl, r2
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	6013      	str	r3, [r2, #0]
	}
}
 8001c12:	e751      	b.n	8001ab8 <xTaskIncrementTick+0x34>
 8001c14:	200000b0 	.word	0x200000b0
 8001c18:	200000ac 	.word	0x200000ac
 8001c1c:	20000130 	.word	0x20000130
 8001c20:	200000e8 	.word	0x200000e8
 8001c24:	20000038 	.word	0x20000038
 8001c28:	20000040 	.word	0x20000040
 8001c2c:	20000034 	.word	0x20000034
 8001c30:	20000006 	.word	0x20000006
 8001c34:	200000b8 	.word	0x200000b8
 8001c38:	200038a4 	.word	0x200038a4
 8001c3c:	20000134 	.word	0x20000134
 8001c40:	2000003c 	.word	0x2000003c
 8001c44:	200000ec 	.word	0x200000ec

08001c48 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8001c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4a:	46de      	mov	lr, fp
 8001c4c:	4657      	mov	r7, sl
 8001c4e:	464e      	mov	r6, r9
 8001c50:	4645      	mov	r5, r8
 8001c52:	b5e0      	push	{r5, r6, r7, lr}
	taskENTER_CRITICAL();
 8001c54:	f000 fe52 	bl	80028fc <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001c58:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <xTaskResumeAll.part.0+0x10c>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	3a01      	subs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d15b      	bne.n	8001d1e <xTaskResumeAll.part.0+0xd6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c66:	4b3c      	ldr	r3, [pc, #240]	; (8001d58 <xTaskResumeAll.part.0+0x110>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d057      	beq.n	8001d1e <xTaskResumeAll.part.0+0xd6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c6e:	4e3b      	ldr	r6, [pc, #236]	; (8001d5c <xTaskResumeAll.part.0+0x114>)
 8001c70:	6833      	ldr	r3, [r6, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d06a      	beq.n	8001d4c <xTaskResumeAll.part.0+0x104>
 8001c76:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <xTaskResumeAll.part.0+0x118>)
 8001c78:	4f3a      	ldr	r7, [pc, #232]	; (8001d64 <xTaskResumeAll.part.0+0x11c>)
 8001c7a:	469a      	mov	sl, r3
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <xTaskResumeAll.part.0+0x120>)
 8001c7e:	4699      	mov	r9, r3
 8001c80:	4b3a      	ldr	r3, [pc, #232]	; (8001d6c <xTaskResumeAll.part.0+0x124>)
 8001c82:	4698      	mov	r8, r3
 8001c84:	4b3a      	ldr	r3, [pc, #232]	; (8001d70 <xTaskResumeAll.part.0+0x128>)
 8001c86:	469b      	mov	fp, r3
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c88:	68f3      	ldr	r3, [r6, #12]
 8001c8a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c8c:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c8e:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c90:	3018      	adds	r0, #24
 8001c92:	f7fe faf9 	bl	8000288 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c96:	0028      	movs	r0, r5
 8001c98:	f7fe faf6 	bl	8000288 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001c9c:	0020      	movs	r0, r4
 8001c9e:	f001 f9e9 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8001ca2:	4653      	mov	r3, sl
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	4203      	tst	r3, r0
 8001ca8:	d147      	bne.n	8001d3a <xTaskResumeAll.part.0+0xf2>
 8001caa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d900      	bls.n	8001cb4 <xTaskResumeAll.part.0+0x6c>
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	0098      	lsls	r0, r3, #2
 8001cb6:	18c0      	adds	r0, r0, r3
 8001cb8:	0080      	lsls	r0, r0, #2
 8001cba:	0029      	movs	r1, r5
 8001cbc:	4448      	add	r0, r9
 8001cbe:	f7fe fabf 	bl	8000240 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001cc2:	4643      	mov	r3, r8
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d331      	bcc.n	8001d32 <xTaskResumeAll.part.0+0xea>
						xYieldPending = pdTRUE;
 8001cce:	465b      	mov	r3, fp
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001cd4:	6833      	ldr	r3, [r6, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1d6      	bne.n	8001c88 <xTaskResumeAll.part.0+0x40>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <xTaskResumeAll.part.0+0x12c>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	2a00      	cmp	r2, #0
 8001ce2:	d02f      	beq.n	8001d44 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <xTaskResumeAll.part.0+0x130>)
 8001cee:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001cf0:	4e22      	ldr	r6, [pc, #136]	; (8001d7c <xTaskResumeAll.part.0+0x134>)
 8001cf2:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001cf4:	2c00      	cmp	r4, #0
 8001cf6:	d00a      	beq.n	8001d0e <xTaskResumeAll.part.0+0xc6>
								xYieldPending = pdTRUE;
 8001cf8:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001cfa:	f7ff fec3 	bl	8001a84 <xTaskIncrementTick>
 8001cfe:	2800      	cmp	r0, #0
 8001d00:	d001      	beq.n	8001d06 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 8001d02:	465b      	mov	r3, fp
 8001d04:	601d      	str	r5, [r3, #0]
							--uxPendedCounts;
 8001d06:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001d08:	2c00      	cmp	r4, #0
 8001d0a:	d1f6      	bne.n	8001cfa <xTaskResumeAll.part.0+0xb2>
						uxPendedTicks = 0;
 8001d0c:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8001d0e:	465b      	mov	r3, fp
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <xTaskResumeAll.part.0+0xd6>
					taskYIELD_IF_USING_PREEMPTION();
 8001d16:	f000 fde5 	bl	80028e4 <vPortYield>
						xAlreadyYielded = pdTRUE;
 8001d1a:	2401      	movs	r4, #1
 8001d1c:	e000      	b.n	8001d20 <xTaskResumeAll.part.0+0xd8>
BaseType_t xAlreadyYielded = pdFALSE;
 8001d1e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001d20:	f000 fdf8 	bl	8002914 <vPortExitCritical>
}
 8001d24:	0020      	movs	r0, r4
 8001d26:	bcf0      	pop	{r4, r5, r6, r7}
 8001d28:	46bb      	mov	fp, r7
 8001d2a:	46b2      	mov	sl, r6
 8001d2c:	46a9      	mov	r9, r5
 8001d2e:	46a0      	mov	r8, r4
 8001d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d32:	6833      	ldr	r3, [r6, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1a7      	bne.n	8001c88 <xTaskResumeAll.part.0+0x40>
 8001d38:	e7cf      	b.n	8001cda <xTaskResumeAll.part.0+0x92>
					prvAddTaskToReadyList( pxTCB );
 8001d3a:	0021      	movs	r1, r4
 8001d3c:	2030      	movs	r0, #48	; 0x30
 8001d3e:	f001 fc03 	bl	8003548 <prvTraceStoreEvent1>
 8001d42:	e7b2      	b.n	8001caa <xTaskResumeAll.part.0+0x62>
		xNextTaskUnblockTime = portMAX_DELAY;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <xTaskResumeAll.part.0+0x130>)
 8001d46:	3a01      	subs	r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	e7d1      	b.n	8001cf0 <xTaskResumeAll.part.0+0xa8>
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <xTaskResumeAll.part.0+0x128>)
 8001d4e:	469b      	mov	fp, r3
 8001d50:	e7ce      	b.n	8001cf0 <xTaskResumeAll.part.0+0xa8>
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	200000b0 	.word	0x200000b0
 8001d58:	200000a4 	.word	0x200000a4
 8001d5c:	200000f0 	.word	0x200000f0
 8001d60:	20000006 	.word	0x20000006
 8001d64:	200000b8 	.word	0x200000b8
 8001d68:	20000040 	.word	0x20000040
 8001d6c:	20000034 	.word	0x20000034
 8001d70:	20000134 	.word	0x20000134
 8001d74:	20000038 	.word	0x20000038
 8001d78:	200000e8 	.word	0x200000e8
 8001d7c:	200000ac 	.word	0x200000ac

08001d80 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <xTaskResumeAll+0x14>)
{
 8001d82:	b510      	push	{r4, lr}
	configASSERT( uxSchedulerSuspended );
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <xTaskResumeAll+0xe>
 8001d8a:	b672      	cpsid	i
 8001d8c:	e7fe      	b.n	8001d8c <xTaskResumeAll+0xc>
 8001d8e:	f7ff ff5b 	bl	8001c48 <xTaskResumeAll.part.0>
}
 8001d92:	bd10      	pop	{r4, pc}
 8001d94:	200000b0 	.word	0x200000b0

08001d98 <vTaskDelayUntil>:
	{
 8001d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d9a:	46c6      	mov	lr, r8
 8001d9c:	b500      	push	{lr}
		configASSERT( pxPreviousWakeTime );
 8001d9e:	2800      	cmp	r0, #0
 8001da0:	d018      	beq.n	8001dd4 <vTaskDelayUntil+0x3c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8001da2:	2900      	cmp	r1, #0
 8001da4:	d101      	bne.n	8001daa <vTaskDelayUntil+0x12>
 8001da6:	b672      	cpsid	i
 8001da8:	e7fe      	b.n	8001da8 <vTaskDelayUntil+0x10>
		configASSERT( uxSchedulerSuspended == 0 );
 8001daa:	4d2a      	ldr	r5, [pc, #168]	; (8001e54 <vTaskDelayUntil+0xbc>)
 8001dac:	682b      	ldr	r3, [r5, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d112      	bne.n	8001dd8 <vTaskDelayUntil+0x40>
	++uxSchedulerSuspended;
 8001db2:	682b      	ldr	r3, [r5, #0]
 8001db4:	3301      	adds	r3, #1
 8001db6:	602b      	str	r3, [r5, #0]
			const TickType_t xConstTickCount = xTickCount;
 8001db8:	4f27      	ldr	r7, [pc, #156]	; (8001e58 <vTaskDelayUntil+0xc0>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001dba:	6803      	ldr	r3, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 8001dbc:	683e      	ldr	r6, [r7, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001dbe:	185c      	adds	r4, r3, r1
			if( xConstTickCount < *pxPreviousWakeTime )
 8001dc0:	42b3      	cmp	r3, r6
 8001dc2:	d90b      	bls.n	8001ddc <vTaskDelayUntil+0x44>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001dc4:	42a3      	cmp	r3, r4
 8001dc6:	d80b      	bhi.n	8001de0 <vTaskDelayUntil+0x48>
			*pxPreviousWakeTime = xTimeToWake;
 8001dc8:	6004      	str	r4, [r0, #0]
	configASSERT( uxSchedulerSuspended );
 8001dca:	682b      	ldr	r3, [r5, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d12b      	bne.n	8001e28 <vTaskDelayUntil+0x90>
 8001dd0:	b672      	cpsid	i
 8001dd2:	e7fe      	b.n	8001dd2 <vTaskDelayUntil+0x3a>
		configASSERT( pxPreviousWakeTime );
 8001dd4:	b672      	cpsid	i
 8001dd6:	e7fe      	b.n	8001dd6 <vTaskDelayUntil+0x3e>
		configASSERT( uxSchedulerSuspended == 0 );
 8001dd8:	b672      	cpsid	i
 8001dda:	e7fe      	b.n	8001dda <vTaskDelayUntil+0x42>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001ddc:	42a3      	cmp	r3, r4
 8001dde:	d801      	bhi.n	8001de4 <vTaskDelayUntil+0x4c>
 8001de0:	42a6      	cmp	r6, r4
 8001de2:	d2f1      	bcs.n	8001dc8 <vTaskDelayUntil+0x30>
			*pxPreviousWakeTime = xTimeToWake;
 8001de4:	6004      	str	r4, [r0, #0]
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8001de6:	f001 f9d9 	bl	800319c <prvTraceGetCurrentTaskHandle>
 8001dea:	f001 f943 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <vTaskDelayUntil+0xc4>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	4203      	tst	r3, r0
 8001df4:	d129      	bne.n	8001e4a <vTaskDelayUntil+0xb2>
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001df6:	683b      	ldr	r3, [r7, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001df8:	4f19      	ldr	r7, [pc, #100]	; (8001e60 <vTaskDelayUntil+0xc8>)
const TickType_t xConstTickCount = xTickCount;
 8001dfa:	4698      	mov	r8, r3
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001dfc:	6838      	ldr	r0, [r7, #0]
 8001dfe:	1b9e      	subs	r6, r3, r6
 8001e00:	3004      	adds	r0, #4
 8001e02:	f7fe fa41 	bl	8000288 <uxListRemove>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001e06:	683b      	ldr	r3, [r7, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001e08:	19a6      	adds	r6, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001e0a:	605e      	str	r6, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8001e0c:	45b0      	cmp	r8, r6
 8001e0e:	d812      	bhi.n	8001e36 <vTaskDelayUntil+0x9e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <vTaskDelayUntil+0xcc>)
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	6839      	ldr	r1, [r7, #0]
 8001e16:	3104      	adds	r1, #4
 8001e18:	f7fe fa1e 	bl	8000258 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <vTaskDelayUntil+0xd0>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4296      	cmp	r6, r2
 8001e22:	d2d2      	bcs.n	8001dca <vTaskDelayUntil+0x32>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8001e24:	601e      	str	r6, [r3, #0]
 8001e26:	e7d0      	b.n	8001dca <vTaskDelayUntil+0x32>
 8001e28:	f7ff ff0e 	bl	8001c48 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	d009      	beq.n	8001e44 <vTaskDelayUntil+0xac>
	}
 8001e30:	bc80      	pop	{r7}
 8001e32:	46b8      	mov	r8, r7
 8001e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <vTaskDelayUntil+0xd4>)
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	6839      	ldr	r1, [r7, #0]
 8001e3c:	3104      	adds	r1, #4
 8001e3e:	f7fe fa0b 	bl	8000258 <vListInsert>
 8001e42:	e7c2      	b.n	8001dca <vTaskDelayUntil+0x32>
			portYIELD_WITHIN_API();
 8001e44:	f000 fd4e 	bl	80028e4 <vPortYield>
	}
 8001e48:	e7f2      	b.n	8001e30 <vTaskDelayUntil+0x98>
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8001e4a:	0021      	movs	r1, r4
 8001e4c:	2079      	movs	r0, #121	; 0x79
 8001e4e:	f001 fb7b 	bl	8003548 <prvTraceStoreEvent1>
 8001e52:	e7d0      	b.n	8001df6 <vTaskDelayUntil+0x5e>
 8001e54:	200000b0 	.word	0x200000b0
 8001e58:	20000130 	.word	0x20000130
 8001e5c:	20000006 	.word	0x20000006
 8001e60:	20000034 	.word	0x20000034
 8001e64:	20000038 	.word	0x20000038
 8001e68:	200000e8 	.word	0x200000e8
 8001e6c:	2000003c 	.word	0x2000003c

08001e70 <vTaskDelay>:
	{
 8001e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e72:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001e74:	d030      	beq.n	8001ed8 <vTaskDelay+0x68>
			configASSERT( uxSchedulerSuspended == 0 );
 8001e76:	4d20      	ldr	r5, [pc, #128]	; (8001ef8 <vTaskDelay+0x88>)
 8001e78:	682b      	ldr	r3, [r5, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <vTaskDelay+0x12>
 8001e7e:	b672      	cpsid	i
 8001e80:	e7fe      	b.n	8001e80 <vTaskDelay+0x10>
	++uxSchedulerSuspended;
 8001e82:	682b      	ldr	r3, [r5, #0]
 8001e84:	3301      	adds	r3, #1
 8001e86:	602b      	str	r3, [r5, #0]
				traceTASK_DELAY();
 8001e88:	f001 f988 	bl	800319c <prvTraceGetCurrentTaskHandle>
 8001e8c:	f001 f8f2 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8001e90:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <vTaskDelay+0x8c>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	4203      	tst	r3, r0
 8001e96:	d129      	bne.n	8001eec <vTaskDelay+0x7c>
const TickType_t xConstTickCount = xTickCount;
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <vTaskDelay+0x90>)
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e9a:	4e1a      	ldr	r6, [pc, #104]	; (8001f04 <vTaskDelay+0x94>)
const TickType_t xConstTickCount = xTickCount;
 8001e9c:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e9e:	6830      	ldr	r0, [r6, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001ea0:	19e4      	adds	r4, r4, r7
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ea2:	3004      	adds	r0, #4
 8001ea4:	f7fe f9f0 	bl	8000288 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001ea8:	6833      	ldr	r3, [r6, #0]
 8001eaa:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001eac:	42a7      	cmp	r7, r4
 8001eae:	d816      	bhi.n	8001ede <vTaskDelay+0x6e>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <vTaskDelay+0x98>)
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	6831      	ldr	r1, [r6, #0]
 8001eb6:	3104      	adds	r1, #4
 8001eb8:	f7fe f9ce 	bl	8000258 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <vTaskDelay+0x9c>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4294      	cmp	r4, r2
 8001ec2:	d200      	bcs.n	8001ec6 <vTaskDelay+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8001ec4:	601c      	str	r4, [r3, #0]
	configASSERT( uxSchedulerSuspended );
 8001ec6:	682b      	ldr	r3, [r5, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <vTaskDelay+0x60>
 8001ecc:	b672      	cpsid	i
 8001ece:	e7fe      	b.n	8001ece <vTaskDelay+0x5e>
 8001ed0:	f7ff feba 	bl	8001c48 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	d101      	bne.n	8001edc <vTaskDelay+0x6c>
			portYIELD_WITHIN_API();
 8001ed8:	f000 fd04 	bl	80028e4 <vPortYield>
	}
 8001edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <vTaskDelay+0xa0>)
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	6831      	ldr	r1, [r6, #0]
 8001ee4:	3104      	adds	r1, #4
 8001ee6:	f7fe f9b7 	bl	8000258 <vListInsert>
 8001eea:	e7ec      	b.n	8001ec6 <vTaskDelay+0x56>
				traceTASK_DELAY();
 8001eec:	0021      	movs	r1, r4
 8001eee:	207a      	movs	r0, #122	; 0x7a
 8001ef0:	f001 fb2a 	bl	8003548 <prvTraceStoreEvent1>
 8001ef4:	e7d0      	b.n	8001e98 <vTaskDelay+0x28>
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	200000b0 	.word	0x200000b0
 8001efc:	20000006 	.word	0x20000006
 8001f00:	20000130 	.word	0x20000130
 8001f04:	20000034 	.word	0x20000034
 8001f08:	20000038 	.word	0x20000038
 8001f0c:	200000e8 	.word	0x200000e8
 8001f10:	2000003c 	.word	0x2000003c

08001f14 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <vTaskSwitchContext+0x18>)
{
 8001f16:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <vTaskSwitchContext+0x1c>)
 8001f22:	601a      	str	r2, [r3, #0]
}
 8001f24:	bd10      	pop	{r4, pc}
 8001f26:	f7ff faa3 	bl	8001470 <vTaskSwitchContext.part.0>
 8001f2a:	e7fb      	b.n	8001f24 <vTaskSwitchContext+0x10>
 8001f2c:	200000b0 	.word	0x200000b0
 8001f30:	20000134 	.word	0x20000134

08001f34 <vTaskPlaceOnEventList>:
{
 8001f34:	b570      	push	{r4, r5, r6, lr}
 8001f36:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	d01d      	beq.n	8001f78 <vTaskPlaceOnEventList+0x44>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f3c:	4d16      	ldr	r5, [pc, #88]	; (8001f98 <vTaskPlaceOnEventList+0x64>)
 8001f3e:	6829      	ldr	r1, [r5, #0]
 8001f40:	3118      	adds	r1, #24
 8001f42:	f7fe f989 	bl	8000258 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <vTaskPlaceOnEventList+0x68>)
 8001f48:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f4a:	6828      	ldr	r0, [r5, #0]
 8001f4c:	3004      	adds	r0, #4
 8001f4e:	f7fe f99b 	bl	8000288 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001f52:	1c63      	adds	r3, r4, #1
 8001f54:	d012      	beq.n	8001f7c <vTaskPlaceOnEventList+0x48>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f56:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001f58:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f5a:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001f5c:	42a6      	cmp	r6, r4
 8001f5e:	d813      	bhi.n	8001f88 <vTaskPlaceOnEventList+0x54>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <vTaskPlaceOnEventList+0x6c>)
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	6829      	ldr	r1, [r5, #0]
 8001f66:	3104      	adds	r1, #4
 8001f68:	f7fe f976 	bl	8000258 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <vTaskPlaceOnEventList+0x70>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4294      	cmp	r4, r2
 8001f72:	d208      	bcs.n	8001f86 <vTaskPlaceOnEventList+0x52>
					xNextTaskUnblockTime = xTimeToWake;
 8001f74:	601c      	str	r4, [r3, #0]
}
 8001f76:	e006      	b.n	8001f86 <vTaskPlaceOnEventList+0x52>
	configASSERT( pxEventList );
 8001f78:	b672      	cpsid	i
 8001f7a:	e7fe      	b.n	8001f7a <vTaskPlaceOnEventList+0x46>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f7c:	6829      	ldr	r1, [r5, #0]
 8001f7e:	480a      	ldr	r0, [pc, #40]	; (8001fa8 <vTaskPlaceOnEventList+0x74>)
 8001f80:	3104      	adds	r1, #4
 8001f82:	f7fe f95d 	bl	8000240 <vListInsertEnd>
}
 8001f86:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <vTaskPlaceOnEventList+0x78>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	6829      	ldr	r1, [r5, #0]
 8001f8e:	3104      	adds	r1, #4
 8001f90:	f7fe f962 	bl	8000258 <vListInsert>
 8001f94:	e7f7      	b.n	8001f86 <vTaskPlaceOnEventList+0x52>
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	20000034 	.word	0x20000034
 8001f9c:	20000130 	.word	0x20000130
 8001fa0:	20000038 	.word	0x20000038
 8001fa4:	200000e8 	.word	0x200000e8
 8001fa8:	20000108 	.word	0x20000108
 8001fac:	2000003c 	.word	0x2000003c

08001fb0 <vTaskPlaceOnEventListRestricted>:
	{
 8001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	0015      	movs	r5, r2
		configASSERT( pxEventList );
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	d034      	beq.n	8002024 <vTaskPlaceOnEventListRestricted+0x74>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001fba:	4e2c      	ldr	r6, [pc, #176]	; (800206c <vTaskPlaceOnEventListRestricted+0xbc>)
 8001fbc:	6831      	ldr	r1, [r6, #0]
 8001fbe:	3118      	adds	r1, #24
 8001fc0:	f7fe f93e 	bl	8000240 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8001fc4:	2d00      	cmp	r5, #0
 8001fc6:	d013      	beq.n	8001ff0 <vTaskPlaceOnEventListRestricted+0x40>
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001fc8:	f001 f8e8 	bl	800319c <prvTraceGetCurrentTaskHandle>
 8001fcc:	f001 f852 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <vTaskPlaceOnEventListRestricted+0xc0>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	4203      	tst	r3, r0
 8001fd6:	d127      	bne.n	8002028 <vTaskPlaceOnEventListRestricted+0x78>
const TickType_t xConstTickCount = xTickCount;
 8001fd8:	4b26      	ldr	r3, [pc, #152]	; (8002074 <vTaskPlaceOnEventListRestricted+0xc4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001fdc:	6830      	ldr	r0, [r6, #0]
 8001fde:	3004      	adds	r0, #4
 8001fe0:	f7fe f952 	bl	8000288 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fe4:	6831      	ldr	r1, [r6, #0]
 8001fe6:	4824      	ldr	r0, [pc, #144]	; (8002078 <vTaskPlaceOnEventListRestricted+0xc8>)
 8001fe8:	3104      	adds	r1, #4
 8001fea:	f7fe f929 	bl	8000240 <vListInsertEnd>
	}
 8001fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001ff0:	f001 f8d4 	bl	800319c <prvTraceGetCurrentTaskHandle>
 8001ff4:	f001 f83e 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <vTaskPlaceOnEventListRestricted+0xc0>)
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	4203      	tst	r3, r0
 8001ffe:	d115      	bne.n	800202c <vTaskPlaceOnEventListRestricted+0x7c>
const TickType_t xConstTickCount = xTickCount;
 8002000:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <vTaskPlaceOnEventListRestricted+0xc4>)
 8002002:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002004:	6830      	ldr	r0, [r6, #0]
 8002006:	3004      	adds	r0, #4
 8002008:	f7fe f93e 	bl	8000288 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800200c:	6833      	ldr	r3, [r6, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 800200e:	193c      	adds	r4, r7, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002010:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002012:	42bc      	cmp	r4, r7
 8002014:	d21e      	bcs.n	8002054 <vTaskPlaceOnEventListRestricted+0xa4>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002016:	4b19      	ldr	r3, [pc, #100]	; (800207c <vTaskPlaceOnEventListRestricted+0xcc>)
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	6831      	ldr	r1, [r6, #0]
 800201c:	3104      	adds	r1, #4
 800201e:	f7fe f91b 	bl	8000258 <vListInsert>
 8002022:	e7e4      	b.n	8001fee <vTaskPlaceOnEventListRestricted+0x3e>
		configASSERT( pxEventList );
 8002024:	b672      	cpsid	i
 8002026:	e7fe      	b.n	8002026 <vTaskPlaceOnEventListRestricted+0x76>
			xTicksToWait = portMAX_DELAY;
 8002028:	2401      	movs	r4, #1
 800202a:	4264      	negs	r4, r4
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800202c:	4f11      	ldr	r7, [pc, #68]	; (8002074 <vTaskPlaceOnEventListRestricted+0xc4>)
 800202e:	2079      	movs	r0, #121	; 0x79
 8002030:	6839      	ldr	r1, [r7, #0]
 8002032:	1909      	adds	r1, r1, r4
 8002034:	f001 fa88 	bl	8003548 <prvTraceStoreEvent1>
const TickType_t xConstTickCount = xTickCount;
 8002038:	683f      	ldr	r7, [r7, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800203a:	6830      	ldr	r0, [r6, #0]
 800203c:	3004      	adds	r0, #4
 800203e:	f7fe f923 	bl	8000288 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002042:	1c63      	adds	r3, r4, #1
 8002044:	d1e2      	bne.n	800200c <vTaskPlaceOnEventListRestricted+0x5c>
 8002046:	2d00      	cmp	r5, #0
 8002048:	d1cc      	bne.n	8001fe4 <vTaskPlaceOnEventListRestricted+0x34>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800204a:	6833      	ldr	r3, [r6, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 800204c:	193c      	adds	r4, r7, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800204e:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002050:	42bc      	cmp	r4, r7
 8002052:	d3e0      	bcc.n	8002016 <vTaskPlaceOnEventListRestricted+0x66>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <vTaskPlaceOnEventListRestricted+0xd0>)
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	6831      	ldr	r1, [r6, #0]
 800205a:	3104      	adds	r1, #4
 800205c:	f7fe f8fc 	bl	8000258 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <vTaskPlaceOnEventListRestricted+0xd4>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4294      	cmp	r4, r2
 8002066:	d2c2      	bcs.n	8001fee <vTaskPlaceOnEventListRestricted+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
 8002068:	601c      	str	r4, [r3, #0]
	}
 800206a:	e7c0      	b.n	8001fee <vTaskPlaceOnEventListRestricted+0x3e>
 800206c:	20000034 	.word	0x20000034
 8002070:	20000006 	.word	0x20000006
 8002074:	20000130 	.word	0x20000130
 8002078:	20000108 	.word	0x20000108
 800207c:	2000003c 	.word	0x2000003c
 8002080:	20000038 	.word	0x20000038
 8002084:	200000e8 	.word	0x200000e8

08002088 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002088:	68c3      	ldr	r3, [r0, #12]
{
 800208a:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800208c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800208e:	2c00      	cmp	r4, #0
 8002090:	d032      	beq.n	80020f8 <xTaskRemoveFromEventList+0x70>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002092:	0025      	movs	r5, r4
 8002094:	3518      	adds	r5, #24
 8002096:	0028      	movs	r0, r5
 8002098:	f7fe f8f6 	bl	8000288 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800209c:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <xTaskRemoveFromEventList+0x80>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00f      	beq.n	80020c4 <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80020a4:	0029      	movs	r1, r5
 80020a6:	4819      	ldr	r0, [pc, #100]	; (800210c <xTaskRemoveFromEventList+0x84>)
 80020a8:	f7fe f8ca 	bl	8000240 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80020ac:	4b18      	ldr	r3, [pc, #96]	; (8002110 <xTaskRemoveFromEventList+0x88>)
 80020ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80020b0:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 80020b2:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d903      	bls.n	80020c2 <xTaskRemoveFromEventList+0x3a>
		xYieldPending = pdTRUE;
 80020ba:	2201      	movs	r2, #1
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <xTaskRemoveFromEventList+0x8c>)
		xReturn = pdTRUE;
 80020be:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 80020c0:	601a      	str	r2, [r3, #0]
}
 80020c2:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80020c4:	1d25      	adds	r5, r4, #4
 80020c6:	0028      	movs	r0, r5
 80020c8:	f7fe f8de 	bl	8000288 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80020cc:	0020      	movs	r0, r4
 80020ce:	f000 ffd1 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <xTaskRemoveFromEventList+0x90>)
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	4203      	tst	r3, r0
 80020d8:	d110      	bne.n	80020fc <xTaskRemoveFromEventList+0x74>
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <xTaskRemoveFromEventList+0x94>)
 80020dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4291      	cmp	r1, r2
 80020e2:	d900      	bls.n	80020e6 <xTaskRemoveFromEventList+0x5e>
 80020e4:	6019      	str	r1, [r3, #0]
 80020e6:	008a      	lsls	r2, r1, #2
 80020e8:	1852      	adds	r2, r2, r1
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <xTaskRemoveFromEventList+0x98>)
 80020ec:	0090      	lsls	r0, r2, #2
 80020ee:	0029      	movs	r1, r5
 80020f0:	1818      	adds	r0, r3, r0
 80020f2:	f7fe f8a5 	bl	8000240 <vListInsertEnd>
 80020f6:	e7d9      	b.n	80020ac <xTaskRemoveFromEventList+0x24>
	configASSERT( pxUnblockedTCB );
 80020f8:	b672      	cpsid	i
 80020fa:	e7fe      	b.n	80020fa <xTaskRemoveFromEventList+0x72>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80020fc:	0021      	movs	r1, r4
 80020fe:	2030      	movs	r0, #48	; 0x30
 8002100:	f001 fa22 	bl	8003548 <prvTraceStoreEvent1>
 8002104:	e7e9      	b.n	80020da <xTaskRemoveFromEventList+0x52>
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	200000b0 	.word	0x200000b0
 800210c:	200000f0 	.word	0x200000f0
 8002110:	20000034 	.word	0x20000034
 8002114:	20000134 	.word	0x20000134
 8002118:	20000006 	.word	0x20000006
 800211c:	200000b8 	.word	0x200000b8
 8002120:	20000040 	.word	0x20000040

08002124 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <vTaskInternalSetTimeOutState+0x10>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800212a:	4b03      	ldr	r3, [pc, #12]	; (8002138 <vTaskInternalSetTimeOutState+0x14>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6043      	str	r3, [r0, #4]
}
 8002130:	4770      	bx	lr
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	200000ec 	.word	0x200000ec
 8002138:	20000130 	.word	0x20000130

0800213c <xTaskCheckForTimeOut>:
{
 800213c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213e:	46c6      	mov	lr, r8
 8002140:	0004      	movs	r4, r0
 8002142:	000d      	movs	r5, r1
 8002144:	b500      	push	{lr}
	configASSERT( pxTimeOut );
 8002146:	2800      	cmp	r0, #0
 8002148:	d025      	beq.n	8002196 <xTaskCheckForTimeOut+0x5a>
	configASSERT( pxTicksToWait );
 800214a:	2900      	cmp	r1, #0
 800214c:	d021      	beq.n	8002192 <xTaskCheckForTimeOut+0x56>
	taskENTER_CRITICAL();
 800214e:	f000 fbd5 	bl	80028fc <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002152:	4a15      	ldr	r2, [pc, #84]	; (80021a8 <xTaskCheckForTimeOut+0x6c>)
			if( *pxTicksToWait == portMAX_DELAY )
 8002154:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8002156:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8002158:	1c58      	adds	r0, r3, #1
 800215a:	d01e      	beq.n	800219a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800215c:	4f13      	ldr	r7, [pc, #76]	; (80021ac <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800215e:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002160:	683e      	ldr	r6, [r7, #0]
 8002162:	46b0      	mov	r8, r6
 8002164:	6826      	ldr	r6, [r4, #0]
 8002166:	4546      	cmp	r6, r8
 8002168:	d002      	beq.n	8002170 <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
 800216a:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800216c:	4288      	cmp	r0, r1
 800216e:	d90a      	bls.n	8002186 <xTaskCheckForTimeOut+0x4a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002170:	1a0e      	subs	r6, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002172:	42b3      	cmp	r3, r6
 8002174:	d913      	bls.n	800219e <xTaskCheckForTimeOut+0x62>
			xReturn = pdFALSE;
 8002176:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 8002178:	1a5b      	subs	r3, r3, r1
 800217a:	181b      	adds	r3, r3, r0
 800217c:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002182:	6813      	ldr	r3, [r2, #0]
 8002184:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 8002186:	f000 fbc5 	bl	8002914 <vPortExitCritical>
}
 800218a:	0030      	movs	r0, r6
 800218c:	bc80      	pop	{r7}
 800218e:	46b8      	mov	r8, r7
 8002190:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
 8002192:	b672      	cpsid	i
 8002194:	e7fe      	b.n	8002194 <xTaskCheckForTimeOut+0x58>
	configASSERT( pxTimeOut );
 8002196:	b672      	cpsid	i
 8002198:	e7fe      	b.n	8002198 <xTaskCheckForTimeOut+0x5c>
				xReturn = pdFALSE;
 800219a:	2600      	movs	r6, #0
 800219c:	e7f3      	b.n	8002186 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
 800219e:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 80021a0:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 80021a2:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80021a4:	e7ef      	b.n	8002186 <xTaskCheckForTimeOut+0x4a>
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	20000130 	.word	0x20000130
 80021ac:	200000ec 	.word	0x200000ec

080021b0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80021b0:	2201      	movs	r2, #1
 80021b2:	4b01      	ldr	r3, [pc, #4]	; (80021b8 <vTaskMissedYield+0x8>)
 80021b4:	601a      	str	r2, [r3, #0]
}
 80021b6:	4770      	bx	lr
 80021b8:	20000134 	.word	0x20000134

080021bc <uxTaskGetTaskNumber>:
		if( xTask != NULL )
 80021bc:	2800      	cmp	r0, #0
 80021be:	d001      	beq.n	80021c4 <uxTaskGetTaskNumber+0x8>
			uxReturn = pxTCB->uxTaskNumber;
 80021c0:	6c40      	ldr	r0, [r0, #68]	; 0x44
	}
 80021c2:	4770      	bx	lr
			uxReturn = 0U;
 80021c4:	2000      	movs	r0, #0
		return uxReturn;
 80021c6:	e7fc      	b.n	80021c2 <uxTaskGetTaskNumber+0x6>

080021c8 <vTaskSetTaskNumber>:
		if( xTask != NULL )
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d000      	beq.n	80021ce <vTaskSetTaskNumber+0x6>
			pxTCB->uxTaskNumber = uxHandle;
 80021cc:	6441      	str	r1, [r0, #68]	; 0x44
	}
 80021ce:	4770      	bx	lr

080021d0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80021d0:	4b01      	ldr	r3, [pc, #4]	; (80021d8 <xTaskGetCurrentTaskHandle+0x8>)
 80021d2:	6818      	ldr	r0, [r3, #0]
	}
 80021d4:	4770      	bx	lr
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	20000034 	.word	0x20000034

080021dc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 80021de:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d004      	beq.n	80021f0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <xTaskGetSchedulerState+0x1c>)
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	4243      	negs	r3, r0
 80021ec:	4158      	adcs	r0, r3
 80021ee:	0040      	lsls	r0, r0, #1
	}
 80021f0:	4770      	bx	lr
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	20000104 	.word	0x20000104
 80021f8:	200000b0 	.word	0x200000b0

080021fc <xTaskPriorityInherit>:
	{
 80021fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fe:	46c6      	mov	lr, r8
 8002200:	0004      	movs	r4, r0
 8002202:	b500      	push	{lr}
		if( pxMutexHolder != NULL )
 8002204:	2800      	cmp	r0, #0
 8002206:	d02b      	beq.n	8002260 <xTaskPriorityInherit+0x64>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002208:	4d2e      	ldr	r5, [pc, #184]	; (80022c4 <xTaskPriorityInherit+0xc8>)
 800220a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800220c:	682b      	ldr	r3, [r5, #0]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	429a      	cmp	r2, r3
 8002212:	d21c      	bcs.n	800224e <xTaskPriorityInherit+0x52>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002214:	6983      	ldr	r3, [r0, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	db04      	blt.n	8002224 <xTaskPriorityInherit+0x28>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800221a:	682b      	ldr	r3, [r5, #0]
 800221c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800221e:	2305      	movs	r3, #5
 8002220:	1a5b      	subs	r3, r3, r1
 8002222:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002224:	0093      	lsls	r3, r2, #2
 8002226:	189b      	adds	r3, r3, r2
 8002228:	4e27      	ldr	r6, [pc, #156]	; (80022c8 <xTaskPriorityInherit+0xcc>)
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	6962      	ldr	r2, [r4, #20]
 800222e:	18f3      	adds	r3, r6, r3
 8002230:	429a      	cmp	r2, r3
 8002232:	d025      	beq.n	8002280 <xTaskPriorityInherit+0x84>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002234:	682b      	ldr	r3, [r5, #0]
 8002236:	4f25      	ldr	r7, [pc, #148]	; (80022cc <xTaskPriorityInherit+0xd0>)
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	62e3      	str	r3, [r4, #44]	; 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800223c:	f000 ffae 	bl	800319c <prvTraceGetCurrentTaskHandle>
 8002240:	f000 ff18 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8002244:	883b      	ldrh	r3, [r7, #0]
 8002246:	4203      	tst	r3, r0
 8002248:	d10c      	bne.n	8002264 <xTaskPriorityInherit+0x68>
				xReturn = pdTRUE;
 800224a:	2001      	movs	r0, #1
 800224c:	e005      	b.n	800225a <xTaskPriorityInherit+0x5e>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800224e:	682b      	ldr	r3, [r5, #0]
 8002250:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	4298      	cmp	r0, r3
 8002256:	4180      	sbcs	r0, r0
 8002258:	4240      	negs	r0, r0
	}
 800225a:	bc80      	pop	{r7}
 800225c:	46b8      	mov	r8, r7
 800225e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
 8002260:	2000      	movs	r0, #0
		return xReturn;
 8002262:	e7fa      	b.n	800225a <xTaskPriorityInherit+0x5e>
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8002264:	0020      	movs	r0, r4
 8002266:	f000 ff05 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 800226a:	883b      	ldrh	r3, [r7, #0]
 800226c:	4203      	tst	r3, r0
 800226e:	d0ec      	beq.n	800224a <xTaskPriorityInherit+0x4e>
 8002270:	682b      	ldr	r3, [r5, #0]
 8002272:	2005      	movs	r0, #5
 8002274:	0021      	movs	r1, r4
 8002276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002278:	f001 f9d2 	bl	8003620 <prvTraceStoreEvent2>
				xReturn = pdTRUE;
 800227c:	2001      	movs	r0, #1
 800227e:	e7ec      	b.n	800225a <xTaskPriorityInherit+0x5e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002280:	1d23      	adds	r3, r4, #4
 8002282:	0018      	movs	r0, r3
 8002284:	4698      	mov	r8, r3
 8002286:	f7fd ffff 	bl	8000288 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800228a:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800228c:	0020      	movs	r0, r4
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002292:	f000 feef 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8002296:	4f0d      	ldr	r7, [pc, #52]	; (80022cc <xTaskPriorityInherit+0xd0>)
 8002298:	883b      	ldrh	r3, [r7, #0]
 800229a:	4203      	tst	r3, r0
 800229c:	d10d      	bne.n	80022ba <xTaskPriorityInherit+0xbe>
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <xTaskPriorityInherit+0xd4>)
 80022a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80022a2:	6819      	ldr	r1, [r3, #0]
 80022a4:	428a      	cmp	r2, r1
 80022a6:	d900      	bls.n	80022aa <xTaskPriorityInherit+0xae>
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	0093      	lsls	r3, r2, #2
 80022ac:	189b      	adds	r3, r3, r2
 80022ae:	0098      	lsls	r0, r3, #2
 80022b0:	4641      	mov	r1, r8
 80022b2:	1830      	adds	r0, r6, r0
 80022b4:	f7fd ffc4 	bl	8000240 <vListInsertEnd>
 80022b8:	e7c0      	b.n	800223c <xTaskPriorityInherit+0x40>
 80022ba:	0021      	movs	r1, r4
 80022bc:	2030      	movs	r0, #48	; 0x30
 80022be:	f001 f943 	bl	8003548 <prvTraceStoreEvent1>
 80022c2:	e7ec      	b.n	800229e <xTaskPriorityInherit+0xa2>
 80022c4:	20000034 	.word	0x20000034
 80022c8:	20000040 	.word	0x20000040
 80022cc:	20000006 	.word	0x20000006
 80022d0:	200000b8 	.word	0x200000b8

080022d4 <xTaskPriorityDisinherit>:
	{
 80022d4:	b570      	push	{r4, r5, r6, lr}
 80022d6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 80022d8:	d010      	beq.n	80022fc <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB == pxCurrentTCB );
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <xTaskPriorityDisinherit+0xa0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4283      	cmp	r3, r0
 80022e0:	d001      	beq.n	80022e6 <xTaskPriorityDisinherit+0x12>
 80022e2:	b672      	cpsid	i
 80022e4:	e7fe      	b.n	80022e4 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 80022e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d009      	beq.n	8002300 <xTaskPriorityDisinherit+0x2c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80022ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80022ee:	6c82      	ldr	r2, [r0, #72]	; 0x48
			( pxTCB->uxMutexesHeld )--;
 80022f0:	3b01      	subs	r3, #1
 80022f2:	64c3      	str	r3, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80022f4:	4291      	cmp	r1, r2
 80022f6:	d001      	beq.n	80022fc <xTaskPriorityDisinherit+0x28>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <xTaskPriorityDisinherit+0x30>
	BaseType_t xReturn = pdFALSE;
 80022fc:	2000      	movs	r0, #0
	}
 80022fe:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 8002300:	b672      	cpsid	i
 8002302:	e7fe      	b.n	8002302 <xTaskPriorityDisinherit+0x2e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002304:	1d05      	adds	r5, r0, #4
 8002306:	0028      	movs	r0, r5
 8002308:	f7fd ffbe 	bl	8000288 <uxListRemove>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800230c:	f000 ff46 	bl	800319c <prvTraceGetCurrentTaskHandle>
 8002310:	f000 feb0 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8002314:	4e18      	ldr	r6, [pc, #96]	; (8002378 <xTaskPriorityDisinherit+0xa4>)
 8002316:	8833      	ldrh	r3, [r6, #0]
 8002318:	4203      	tst	r3, r0
 800231a:	d11f      	bne.n	800235c <xTaskPriorityDisinherit+0x88>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800231c:	2305      	movs	r3, #5
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800231e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
					prvAddTaskToReadyList( pxTCB );
 8002320:	0020      	movs	r0, r4
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	61a3      	str	r3, [r4, #24]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002326:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002328:	f000 fea4 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 800232c:	8833      	ldrh	r3, [r6, #0]
 800232e:	4203      	tst	r3, r0
 8002330:	d10f      	bne.n	8002352 <xTaskPriorityDisinherit+0x7e>
 8002332:	4b12      	ldr	r3, [pc, #72]	; (800237c <xTaskPriorityDisinherit+0xa8>)
 8002334:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4291      	cmp	r1, r2
 800233a:	d900      	bls.n	800233e <xTaskPriorityDisinherit+0x6a>
 800233c:	6019      	str	r1, [r3, #0]
 800233e:	008a      	lsls	r2, r1, #2
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <xTaskPriorityDisinherit+0xac>)
 8002342:	1852      	adds	r2, r2, r1
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	1898      	adds	r0, r3, r2
 8002348:	0029      	movs	r1, r5
 800234a:	f7fd ff79 	bl	8000240 <vListInsertEnd>
					xReturn = pdTRUE;
 800234e:	2001      	movs	r0, #1
		return xReturn;
 8002350:	e7d5      	b.n	80022fe <xTaskPriorityDisinherit+0x2a>
					prvAddTaskToReadyList( pxTCB );
 8002352:	0021      	movs	r1, r4
 8002354:	2030      	movs	r0, #48	; 0x30
 8002356:	f001 f8f7 	bl	8003548 <prvTraceStoreEvent1>
 800235a:	e7ea      	b.n	8002332 <xTaskPriorityDisinherit+0x5e>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800235c:	0020      	movs	r0, r4
 800235e:	f000 fe89 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8002362:	8833      	ldrh	r3, [r6, #0]
 8002364:	4203      	tst	r3, r0
 8002366:	d0d9      	beq.n	800231c <xTaskPriorityDisinherit+0x48>
 8002368:	0021      	movs	r1, r4
 800236a:	2006      	movs	r0, #6
 800236c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800236e:	f001 f957 	bl	8003620 <prvTraceStoreEvent2>
 8002372:	e7d3      	b.n	800231c <xTaskPriorityDisinherit+0x48>
 8002374:	20000034 	.word	0x20000034
 8002378:	20000006 	.word	0x20000006
 800237c:	200000b8 	.word	0x200000b8
 8002380:	20000040 	.word	0x20000040

08002384 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8002384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002386:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8002388:	d00d      	beq.n	80023a6 <vTaskPriorityDisinheritAfterTimeout+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800238a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <vTaskPriorityDisinheritAfterTimeout+0x10>
 8002390:	b672      	cpsid	i
 8002392:	e7fe      	b.n	8002392 <vTaskPriorityDisinheritAfterTimeout+0xe>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002394:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8002396:	428d      	cmp	r5, r1
 8002398:	d200      	bcs.n	800239c <vTaskPriorityDisinheritAfterTimeout+0x18>
 800239a:	000d      	movs	r5, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800239c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800239e:	42aa      	cmp	r2, r5
 80023a0:	d001      	beq.n	80023a6 <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d000      	beq.n	80023a8 <vTaskPriorityDisinheritAfterTimeout+0x24>
	}
 80023a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80023a8:	4b23      	ldr	r3, [pc, #140]	; (8002438 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	42a3      	cmp	r3, r4
 80023ae:	d02f      	beq.n	8002410 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80023b0:	f000 fef4 	bl	800319c <prvTraceGetCurrentTaskHandle>
 80023b4:	f000 fe5e 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 80023b8:	4e20      	ldr	r6, [pc, #128]	; (800243c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 80023ba:	8833      	ldrh	r3, [r6, #0]
 80023bc:	4203      	tst	r3, r0
 80023be:	d129      	bne.n	8002414 <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80023c0:	69a3      	ldr	r3, [r4, #24]
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80023c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
					pxTCB->uxPriority = uxPriorityToUse;
 80023c4:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	db02      	blt.n	80023d0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023ca:	2305      	movs	r3, #5
 80023cc:	1b5b      	subs	r3, r3, r5
 80023ce:	61a3      	str	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80023d0:	0093      	lsls	r3, r2, #2
 80023d2:	189b      	adds	r3, r3, r2
 80023d4:	4d1a      	ldr	r5, [pc, #104]	; (8002440 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	6962      	ldr	r2, [r4, #20]
 80023da:	18eb      	adds	r3, r5, r3
 80023dc:	429a      	cmp	r2, r3
 80023de:	d1e2      	bne.n	80023a6 <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023e0:	1d27      	adds	r7, r4, #4
 80023e2:	0038      	movs	r0, r7
 80023e4:	f7fd ff50 	bl	8000288 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80023e8:	0020      	movs	r0, r4
 80023ea:	f000 fe43 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 80023ee:	8833      	ldrh	r3, [r6, #0]
 80023f0:	4203      	tst	r3, r0
 80023f2:	d11b      	bne.n	800242c <vTaskPriorityDisinheritAfterTimeout+0xa8>
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 80023f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023f8:	6819      	ldr	r1, [r3, #0]
 80023fa:	428a      	cmp	r2, r1
 80023fc:	d900      	bls.n	8002400 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	0093      	lsls	r3, r2, #2
 8002402:	189b      	adds	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	0039      	movs	r1, r7
 8002408:	18e8      	adds	r0, r5, r3
 800240a:	f7fd ff19 	bl	8000240 <vListInsertEnd>
	}
 800240e:	e7ca      	b.n	80023a6 <vTaskPriorityDisinheritAfterTimeout+0x22>
					configASSERT( pxTCB != pxCurrentTCB );
 8002410:	b672      	cpsid	i
 8002412:	e7fe      	b.n	8002412 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8002414:	0020      	movs	r0, r4
 8002416:	f000 fe2d 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 800241a:	8833      	ldrh	r3, [r6, #0]
 800241c:	4203      	tst	r3, r0
 800241e:	d0cf      	beq.n	80023c0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
 8002420:	0021      	movs	r1, r4
 8002422:	2006      	movs	r0, #6
 8002424:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002426:	f001 f8fb 	bl	8003620 <prvTraceStoreEvent2>
 800242a:	e7c9      	b.n	80023c0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
						prvAddTaskToReadyList( pxTCB );
 800242c:	0021      	movs	r1, r4
 800242e:	2030      	movs	r0, #48	; 0x30
 8002430:	f001 f88a 	bl	8003548 <prvTraceStoreEvent1>
 8002434:	e7de      	b.n	80023f4 <vTaskPriorityDisinheritAfterTimeout+0x70>
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	20000034 	.word	0x20000034
 800243c:	20000006 	.word	0x20000006
 8002440:	20000040 	.word	0x20000040
 8002444:	200000b8 	.word	0x200000b8

08002448 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <pvTaskIncrementMutexHeldCount+0x14>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2a00      	cmp	r2, #0
 800244e:	d003      	beq.n	8002458 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8002450:	6819      	ldr	r1, [r3, #0]
 8002452:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002454:	3201      	adds	r2, #1
 8002456:	64ca      	str	r2, [r1, #76]	; 0x4c
		return pxCurrentTCB;
 8002458:	6818      	ldr	r0, [r3, #0]
	}
 800245a:	4770      	bx	lr
 800245c:	20000034 	.word	0x20000034

08002460 <prvSwitchTimerLists>:
		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002460:	2328      	movs	r3, #40	; 0x28
{
 8002462:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002464:	464f      	mov	r7, r9
 8002466:	4646      	mov	r6, r8
 8002468:	46d6      	mov	lr, sl
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800246a:	4699      	mov	r9, r3
	if( xTimerQueue != NULL )
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <prvSwitchTimerLists+0x98>)
{
 800246e:	b5c0      	push	{r6, r7, lr}
	if( xTimerQueue != NULL )
 8002470:	4698      	mov	r8, r3
 8002472:	4d22      	ldr	r5, [pc, #136]	; (80024fc <prvSwitchTimerLists+0x9c>)
{
 8002474:	b084      	sub	sp, #16
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002476:	2604      	movs	r6, #4
 8002478:	e00e      	b.n	8002498 <prvSwitchTimerLists+0x38>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800247a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800247c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800247e:	681a      	ldr	r2, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002480:	1d27      	adds	r7, r4, #4
 8002482:	0038      	movs	r0, r7
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002484:	4692      	mov	sl, r2
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002486:	f7fd feff 	bl	8000288 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800248a:	6a23      	ldr	r3, [r4, #32]
 800248c:	0020      	movs	r0, r4
 800248e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002490:	464b      	mov	r3, r9
 8002492:	5ce3      	ldrb	r3, [r4, r3]
 8002494:	421e      	tst	r6, r3
 8002496:	d10d      	bne.n	80024b4 <prvSwitchTimerLists+0x54>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002498:	682b      	ldr	r3, [r5, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2a00      	cmp	r2, #0
 800249e:	d1ec      	bne.n	800247a <prvSwitchTimerLists+0x1a>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80024a0:	4a17      	ldr	r2, [pc, #92]	; (8002500 <prvSwitchTimerLists+0xa0>)
 80024a2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80024a4:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80024a6:	6029      	str	r1, [r5, #0]
}
 80024a8:	b004      	add	sp, #16
 80024aa:	bce0      	pop	{r5, r6, r7}
 80024ac:	46ba      	mov	sl, r7
 80024ae:	46b1      	mov	r9, r6
 80024b0:	46a8      	mov	r8, r5
 80024b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80024b4:	69a3      	ldr	r3, [r4, #24]
 80024b6:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 80024b8:	459a      	cmp	sl, r3
 80024ba:	d206      	bcs.n	80024ca <prvSwitchTimerLists+0x6a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80024bc:	0039      	movs	r1, r7
 80024be:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80024c0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80024c2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80024c4:	f7fd fec8 	bl	8000258 <vListInsert>
 80024c8:	e7d5      	b.n	8002476 <prvSwitchTimerLists+0x16>
	if( xTimerQueue != NULL )
 80024ca:	4643      	mov	r3, r8
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00f      	beq.n	80024f2 <prvSwitchTimerLists+0x92>
		xMessage.xMessageID = xCommandID;
 80024d2:	2300      	movs	r3, #0
 80024d4:	9301      	str	r3, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80024d6:	4653      	mov	r3, sl
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80024d8:	9403      	str	r4, [sp, #12]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80024da:	9302      	str	r3, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80024dc:	f7ff fe7e 	bl	80021dc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80024e0:	4643      	mov	r3, r8
 80024e2:	2200      	movs	r2, #0
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	a901      	add	r1, sp, #4
 80024e8:	2300      	movs	r3, #0
 80024ea:	f7fd ffbb 	bl	8000464 <xQueueGenericSend>
				configASSERT( xResult );
 80024ee:	2800      	cmp	r0, #0
 80024f0:	d1c1      	bne.n	8002476 <prvSwitchTimerLists+0x16>
 80024f2:	b672      	cpsid	i
 80024f4:	e7fe      	b.n	80024f4 <prvSwitchTimerLists+0x94>
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	2000016c 	.word	0x2000016c
 80024fc:	20000138 	.word	0x20000138
 8002500:	2000013c 	.word	0x2000013c

08002504 <prvTimerTask>:
{
 8002504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002506:	4657      	mov	r7, sl
 8002508:	464e      	mov	r6, r9
 800250a:	4645      	mov	r5, r8
 800250c:	46de      	mov	lr, fp
 800250e:	b5e0      	push	{r5, r6, r7, lr}
 8002510:	4b93      	ldr	r3, [pc, #588]	; (8002760 <prvTimerTask+0x25c>)
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	4699      	mov	r9, r3
 8002516:	4b93      	ldr	r3, [pc, #588]	; (8002764 <prvTimerTask+0x260>)
 8002518:	4f93      	ldr	r7, [pc, #588]	; (8002768 <prvTimerTask+0x264>)
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	4b93      	ldr	r3, [pc, #588]	; (800276c <prvTimerTask+0x268>)
 800251e:	4c94      	ldr	r4, [pc, #592]	; (8002770 <prvTimerTask+0x26c>)
 8002520:	9300      	str	r3, [sp, #0]
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002522:	2328      	movs	r3, #40	; 0x28
 8002524:	4698      	mov	r8, r3
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002526:	464b      	mov	r3, r9
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681e      	ldr	r6, [r3, #0]
 800252c:	2e00      	cmp	r6, #0
 800252e:	d100      	bne.n	8002532 <prvTimerTask+0x2e>
 8002530:	e091      	b.n	8002656 <prvTimerTask+0x152>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 8002536:	f7ff fa97 	bl	8001a68 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800253a:	f7ff fa9d 	bl	8001a78 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800253e:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 8002540:	0005      	movs	r5, r0
	if( xTimeNow < xLastTime )
 8002542:	4283      	cmp	r3, r0
 8002544:	d900      	bls.n	8002548 <prvTimerTask+0x44>
 8002546:	e0a0      	b.n	800268a <prvTimerTask+0x186>
	xLastTime = xTimeNow;
 8002548:	6038      	str	r0, [r7, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800254a:	4286      	cmp	r6, r0
 800254c:	d800      	bhi.n	8002550 <prvTimerTask+0x4c>
 800254e:	e0a5      	b.n	800269c <prvTimerTask+0x198>
 8002550:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002552:	6820      	ldr	r0, [r4, #0]
 8002554:	1b71      	subs	r1, r6, r5
 8002556:	f7fe fef3 	bl	8001340 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800255a:	f7ff fc11 	bl	8001d80 <xTaskResumeAll>
 800255e:	2800      	cmp	r0, #0
 8002560:	d100      	bne.n	8002564 <prvTimerTask+0x60>
 8002562:	e08f      	b.n	8002684 <prvTimerTask+0x180>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002564:	2302      	movs	r3, #2
 8002566:	469b      	mov	fp, r3
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002568:	3b01      	subs	r3, #1
 800256a:	469a      	mov	sl, r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800256c:	2200      	movs	r2, #0
 800256e:	6820      	ldr	r0, [r4, #0]
 8002570:	a902      	add	r1, sp, #8
 8002572:	f7fe fa87 	bl	8000a84 <xQueueReceive>
 8002576:	2800      	cmp	r0, #0
 8002578:	d0d5      	beq.n	8002526 <prvTimerTask+0x22>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800257a:	9b02      	ldr	r3, [sp, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	dbf5      	blt.n	800256c <prvTimerTask+0x68>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002580:	9d04      	ldr	r5, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002582:	696b      	ldr	r3, [r5, #20]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <prvTimerTask+0x8a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002588:	1d28      	adds	r0, r5, #4
 800258a:	f7fd fe7d 	bl	8000288 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800258e:	f7ff fa73 	bl	8001a78 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8002592:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 8002594:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 8002596:	4298      	cmp	r0, r3
 8002598:	d37d      	bcc.n	8002696 <prvTimerTask+0x192>
			switch( xMessage.xMessageID )
 800259a:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 800259c:	603e      	str	r6, [r7, #0]
			switch( xMessage.xMessageID )
 800259e:	2b09      	cmp	r3, #9
 80025a0:	d8e4      	bhi.n	800256c <prvTimerTask+0x68>
 80025a2:	9a00      	ldr	r2, [sp, #0]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	58d3      	ldr	r3, [r2, r3]
 80025a8:	469f      	mov	pc, r3
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80025aa:	4643      	mov	r3, r8
 80025ac:	2201      	movs	r2, #1
 80025ae:	5ceb      	ldrb	r3, [r5, r3]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	4642      	mov	r2, r8
 80025b4:	54ab      	strb	r3, [r5, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80025b6:	69a9      	ldr	r1, [r5, #24]
 80025b8:	9b03      	ldr	r3, [sp, #12]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80025ba:	612d      	str	r5, [r5, #16]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80025bc:	185a      	adds	r2, r3, r1
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80025be:	606a      	str	r2, [r5, #4]
	if( xNextExpiryTime <= xTimeNow )
 80025c0:	42b2      	cmp	r2, r6
 80025c2:	d900      	bls.n	80025c6 <prvTimerTask+0xc2>
 80025c4:	e086      	b.n	80026d4 <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025c6:	1af3      	subs	r3, r6, r3
 80025c8:	4299      	cmp	r1, r3
 80025ca:	d900      	bls.n	80025ce <prvTimerTask+0xca>
 80025cc:	e0a4      	b.n	8002718 <prvTimerTask+0x214>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025ce:	6a2b      	ldr	r3, [r5, #32]
 80025d0:	0028      	movs	r0, r5
 80025d2:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80025d4:	4643      	mov	r3, r8
 80025d6:	5ceb      	ldrb	r3, [r5, r3]
 80025d8:	075b      	lsls	r3, r3, #29
 80025da:	d5c7      	bpl.n	800256c <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
 80025dc:	6822      	ldr	r2, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80025de:	9903      	ldr	r1, [sp, #12]
 80025e0:	69ab      	ldr	r3, [r5, #24]
	if( xTimerQueue != NULL )
 80025e2:	2a00      	cmp	r2, #0
 80025e4:	d00e      	beq.n	8002604 <prvTimerTask+0x100>
		xMessage.xMessageID = xCommandID;
 80025e6:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80025e8:	185b      	adds	r3, r3, r1
		xMessage.xMessageID = xCommandID;
 80025ea:	9205      	str	r2, [sp, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80025ec:	9306      	str	r3, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80025ee:	9507      	str	r5, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80025f0:	f7ff fdf4 	bl	80021dc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80025f4:	2300      	movs	r3, #0
 80025f6:	6820      	ldr	r0, [r4, #0]
 80025f8:	001a      	movs	r2, r3
 80025fa:	a905      	add	r1, sp, #20
 80025fc:	f7fd ff32 	bl	8000464 <xQueueGenericSend>
							configASSERT( xResult );
 8002600:	2800      	cmp	r0, #0
 8002602:	d1b3      	bne.n	800256c <prvTimerTask+0x68>
 8002604:	b672      	cpsid	i
 8002606:	e7fe      	b.n	8002606 <prvTimerTask+0x102>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002608:	4643      	mov	r3, r8
 800260a:	2201      	movs	r2, #1
 800260c:	5ceb      	ldrb	r3, [r5, r3]
 800260e:	4313      	orrs	r3, r2
 8002610:	4642      	mov	r2, r8
 8002612:	54ab      	strb	r3, [r5, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002614:	9b03      	ldr	r3, [sp, #12]
 8002616:	61ab      	str	r3, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002618:	2b00      	cmp	r3, #0
 800261a:	d100      	bne.n	800261e <prvTimerTask+0x11a>
 800261c:	e09e      	b.n	800275c <prvTimerTask+0x258>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800261e:	199b      	adds	r3, r3, r6
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002620:	606b      	str	r3, [r5, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002622:	612d      	str	r5, [r5, #16]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002624:	1d29      	adds	r1, r5, #4
	if( xNextExpiryTime <= xTimeNow )
 8002626:	42b3      	cmp	r3, r6
 8002628:	d85f      	bhi.n	80026ea <prvTimerTask+0x1e6>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800262a:	9b01      	ldr	r3, [sp, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	f7fd fe13 	bl	8000258 <vListInsert>
	return xProcessTimerNow;
 8002632:	e79b      	b.n	800256c <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002634:	4643      	mov	r3, r8
 8002636:	4652      	mov	r2, sl
 8002638:	5ceb      	ldrb	r3, [r5, r3]
 800263a:	4393      	bics	r3, r2
 800263c:	4642      	mov	r2, r8
 800263e:	54ab      	strb	r3, [r5, r2]
					break;
 8002640:	e794      	b.n	800256c <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002642:	4643      	mov	r3, r8
 8002644:	465a      	mov	r2, fp
 8002646:	5ceb      	ldrb	r3, [r5, r3]
 8002648:	421a      	tst	r2, r3
 800264a:	d053      	beq.n	80026f4 <prvTimerTask+0x1f0>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800264c:	4652      	mov	r2, sl
 800264e:	4393      	bics	r3, r2
 8002650:	4642      	mov	r2, r8
 8002652:	54ab      	strb	r3, [r5, r2]
 8002654:	e78a      	b.n	800256c <prvTimerTask+0x68>
	vTaskSuspendAll();
 8002656:	f7ff fa07 	bl	8001a68 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800265a:	f7ff fa0d 	bl	8001a78 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800265e:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 8002660:	0005      	movs	r5, r0
	if( xTimeNow < xLastTime )
 8002662:	4283      	cmp	r3, r0
 8002664:	d811      	bhi.n	800268a <prvTimerTask+0x186>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002666:	9b01      	ldr	r3, [sp, #4]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002668:	6820      	ldr	r0, [r4, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800266a:	681b      	ldr	r3, [r3, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800266c:	1b71      	subs	r1, r6, r5
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800266e:	681a      	ldr	r2, [r3, #0]
	xLastTime = xTimeNow;
 8002670:	603d      	str	r5, [r7, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002672:	4253      	negs	r3, r2
 8002674:	415a      	adcs	r2, r3
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002676:	f7fe fe63 	bl	8001340 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800267a:	f7ff fb81 	bl	8001d80 <xTaskResumeAll>
 800267e:	2800      	cmp	r0, #0
 8002680:	d000      	beq.n	8002684 <prvTimerTask+0x180>
 8002682:	e76f      	b.n	8002564 <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
 8002684:	f000 f92e 	bl	80028e4 <vPortYield>
 8002688:	e76c      	b.n	8002564 <prvTimerTask+0x60>
		prvSwitchTimerLists();
 800268a:	f7ff fee9 	bl	8002460 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800268e:	603d      	str	r5, [r7, #0]
			( void ) xTaskResumeAll();
 8002690:	f7ff fb76 	bl	8001d80 <xTaskResumeAll>
 8002694:	e766      	b.n	8002564 <prvTimerTask+0x60>
		prvSwitchTimerLists();
 8002696:	f7ff fee3 	bl	8002460 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800269a:	e77e      	b.n	800259a <prvTimerTask+0x96>
				( void ) xTaskResumeAll();
 800269c:	f7ff fb70 	bl	8001d80 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026a0:	464b      	mov	r3, r9
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	469a      	mov	sl, r3
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026aa:	2304      	movs	r3, #4
 80026ac:	4453      	add	r3, sl
 80026ae:	0018      	movs	r0, r3
 80026b0:	469b      	mov	fp, r3
 80026b2:	f7fd fde9 	bl	8000288 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80026b6:	4653      	mov	r3, sl
 80026b8:	4642      	mov	r2, r8
 80026ba:	5c9b      	ldrb	r3, [r3, r2]
 80026bc:	075a      	lsls	r2, r3, #29
 80026be:	d41d      	bmi.n	80026fc <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80026c0:	2201      	movs	r2, #1
 80026c2:	4641      	mov	r1, r8
 80026c4:	4393      	bics	r3, r2
 80026c6:	4652      	mov	r2, sl
 80026c8:	5453      	strb	r3, [r2, r1]
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026ca:	4653      	mov	r3, sl
 80026cc:	4650      	mov	r0, sl
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4798      	blx	r3
}
 80026d2:	e747      	b.n	8002564 <prvTimerTask+0x60>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80026d4:	42b3      	cmp	r3, r6
 80026d6:	d902      	bls.n	80026de <prvTimerTask+0x1da>
 80026d8:	4293      	cmp	r3, r2
 80026da:	d800      	bhi.n	80026de <prvTimerTask+0x1da>
 80026dc:	e777      	b.n	80025ce <prvTimerTask+0xca>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80026de:	464b      	mov	r3, r9
 80026e0:	1d29      	adds	r1, r5, #4
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	f7fd fdb8 	bl	8000258 <vListInsert>
	return xProcessTimerNow;
 80026e8:	e740      	b.n	800256c <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80026ea:	464b      	mov	r3, r9
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	f7fd fdb3 	bl	8000258 <vListInsert>
 80026f2:	e73b      	b.n	800256c <prvTimerTask+0x68>
							vPortFree( pxTimer );
 80026f4:	0028      	movs	r0, r5
 80026f6:	f000 f9a7 	bl	8002a48 <vPortFree>
 80026fa:	e737      	b.n	800256c <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80026fc:	4653      	mov	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80026fe:	4651      	mov	r1, sl
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002700:	699a      	ldr	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002702:	6109      	str	r1, [r1, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002704:	18b3      	adds	r3, r6, r2
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002706:	604b      	str	r3, [r1, #4]
	if( xNextExpiryTime <= xTimeNow )
 8002708:	42ab      	cmp	r3, r5
 800270a:	d90b      	bls.n	8002724 <prvTimerTask+0x220>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800270c:	464b      	mov	r3, r9
 800270e:	4659      	mov	r1, fp
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	f7fd fda1 	bl	8000258 <vListInsert>
	return xProcessTimerNow;
 8002716:	e7d8      	b.n	80026ca <prvTimerTask+0x1c6>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002718:	9b01      	ldr	r3, [sp, #4]
 800271a:	1d29      	adds	r1, r5, #4
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	f7fd fd9b 	bl	8000258 <vListInsert>
	return xProcessTimerNow;
 8002722:	e723      	b.n	800256c <prvTimerTask+0x68>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002724:	1bad      	subs	r5, r5, r6
 8002726:	42aa      	cmp	r2, r5
 8002728:	d812      	bhi.n	8002750 <prvTimerTask+0x24c>
	if( xTimerQueue != NULL )
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00d      	beq.n	800274c <prvTimerTask+0x248>
		xMessage.xMessageID = xCommandID;
 8002730:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002732:	9107      	str	r1, [sp, #28]
		xMessage.xMessageID = xCommandID;
 8002734:	9305      	str	r3, [sp, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002736:	9606      	str	r6, [sp, #24]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002738:	f7ff fd50 	bl	80021dc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800273c:	2300      	movs	r3, #0
 800273e:	6820      	ldr	r0, [r4, #0]
 8002740:	001a      	movs	r2, r3
 8002742:	a905      	add	r1, sp, #20
 8002744:	f7fd fe8e 	bl	8000464 <xQueueGenericSend>
			configASSERT( xResult );
 8002748:	2800      	cmp	r0, #0
 800274a:	d1be      	bne.n	80026ca <prvTimerTask+0x1c6>
 800274c:	b672      	cpsid	i
 800274e:	e7fe      	b.n	800274e <prvTimerTask+0x24a>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002750:	9b01      	ldr	r3, [sp, #4]
 8002752:	4659      	mov	r1, fp
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	f7fd fd7f 	bl	8000258 <vListInsert>
	return xProcessTimerNow;
 800275a:	e7b6      	b.n	80026ca <prvTimerTask+0x1c6>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800275c:	b672      	cpsid	i
 800275e:	e7fe      	b.n	800275e <prvTimerTask+0x25a>
 8002760:	20000138 	.word	0x20000138
 8002764:	2000013c 	.word	0x2000013c
 8002768:	20000168 	.word	0x20000168
 800276c:	08005058 	.word	0x08005058
 8002770:	2000016c 	.word	0x2000016c

08002774 <xTimerCreateTimerTask>:
{
 8002774:	b570      	push	{r4, r5, r6, lr}
 8002776:	b082      	sub	sp, #8
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002778:	f000 f8c0 	bl	80028fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800277c:	4c15      	ldr	r4, [pc, #84]	; (80027d4 <xTimerCreateTimerTask+0x60>)
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d014      	beq.n	80027ae <xTimerCreateTimerTask+0x3a>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002784:	f000 f8c6 	bl	8002914 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <xTimerCreateTimerTask+0x32>
			xReturn = xTaskCreate(	prvTimerTask,
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <xTimerCreateTimerTask+0x64>)
 8002790:	2246      	movs	r2, #70	; 0x46
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	2303      	movs	r3, #3
 8002796:	4911      	ldr	r1, [pc, #68]	; (80027dc <xTimerCreateTimerTask+0x68>)
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	4811      	ldr	r0, [pc, #68]	; (80027e0 <xTimerCreateTimerTask+0x6c>)
 800279c:	2300      	movs	r3, #0
 800279e:	f7fe fedb 	bl	8001558 <xTaskCreate>
	configASSERT( xReturn );
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d101      	bne.n	80027aa <xTimerCreateTimerTask+0x36>
 80027a6:	b672      	cpsid	i
 80027a8:	e7fe      	b.n	80027a8 <xTimerCreateTimerTask+0x34>
}
 80027aa:	b002      	add	sp, #8
 80027ac:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 80027ae:	4e0d      	ldr	r6, [pc, #52]	; (80027e4 <xTimerCreateTimerTask+0x70>)
 80027b0:	0030      	movs	r0, r6
 80027b2:	f7fd fd35 	bl	8000220 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80027b6:	4d0c      	ldr	r5, [pc, #48]	; (80027e8 <xTimerCreateTimerTask+0x74>)
 80027b8:	0028      	movs	r0, r5
 80027ba:	f7fd fd31 	bl	8000220 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <xTimerCreateTimerTask+0x78>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80027c0:	2200      	movs	r2, #0
			pxCurrentTimerList = &xActiveTimerList1;
 80027c2:	601e      	str	r6, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <xTimerCreateTimerTask+0x7c>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80027c6:	210c      	movs	r1, #12
 80027c8:	2005      	movs	r0, #5
			pxOverflowTimerList = &xActiveTimerList2;
 80027ca:	601d      	str	r5, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80027cc:	f7fd fda8 	bl	8000320 <xQueueGenericCreate>
 80027d0:	6020      	str	r0, [r4, #0]
 80027d2:	e7d7      	b.n	8002784 <xTimerCreateTimerTask+0x10>
 80027d4:	2000016c 	.word	0x2000016c
 80027d8:	20000170 	.word	0x20000170
 80027dc:	08005080 	.word	0x08005080
 80027e0:	08002505 	.word	0x08002505
 80027e4:	20000140 	.word	0x20000140
 80027e8:	20000154 	.word	0x20000154
 80027ec:	20000138 	.word	0x20000138
 80027f0:	2000013c 	.word	0x2000013c

080027f4 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 80027f4:	2300      	movs	r3, #0
{
 80027f6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80027f8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <prvTaskExitError+0x20>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	3301      	adds	r3, #1
 8002800:	d001      	beq.n	8002806 <prvTaskExitError+0x12>
 8002802:	b672      	cpsid	i
 8002804:	e7fe      	b.n	8002804 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 8002806:	b672      	cpsid	i
	while( ulDummy == 0 )
 8002808:	9b01      	ldr	r3, [sp, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0fc      	beq.n	8002808 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800280e:	b002      	add	sp, #8
 8002810:	4770      	bx	lr
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	20000000 	.word	0x20000000
	...

08002820 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8002820:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <pxCurrentTCBConst2>)
 8002822:	6813      	ldr	r3, [r2, #0]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	3020      	adds	r0, #32
 8002828:	f380 8809 	msr	PSP, r0
 800282c:	2002      	movs	r0, #2
 800282e:	f380 8814 	msr	CONTROL, r0
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002838:	46ae      	mov	lr, r5
 800283a:	bc08      	pop	{r3}
 800283c:	bc04      	pop	{r2}
 800283e:	b662      	cpsie	i
 8002840:	4718      	bx	r3
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	46c0      	nop			; (mov r8, r8)

08002850 <pxCurrentTCBConst2>:
 8002850:	20000034 	.word	0x20000034

08002854 <pxPortInitialiseStack>:
{
 8002854:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002856:	2480      	movs	r4, #128	; 0x80
 8002858:	1f03      	subs	r3, r0, #4
 800285a:	0464      	lsls	r4, r4, #17
 800285c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800285e:	3b04      	subs	r3, #4
 8002860:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002862:	4903      	ldr	r1, [pc, #12]	; (8002870 <pxPortInitialiseStack+0x1c>)
 8002864:	3b04      	subs	r3, #4
 8002866:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002868:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800286a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800286c:	601a      	str	r2, [r3, #0]
}
 800286e:	bd10      	pop	{r4, pc}
 8002870:	080027f5 	.word	0x080027f5

08002874 <SVC_Handler>:
}
 8002874:	4770      	bx	lr
 8002876:	46c0      	nop			; (mov r8, r8)

08002878 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8002878:	22ff      	movs	r2, #255	; 0xff
 800287a:	4b14      	ldr	r3, [pc, #80]	; (80028cc <xPortStartScheduler+0x54>)
 800287c:	0412      	lsls	r2, r2, #16
 800287e:	6819      	ldr	r1, [r3, #0]
{
 8002880:	b530      	push	{r4, r5, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8002882:	430a      	orrs	r2, r1
 8002884:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8002886:	22ff      	movs	r2, #255	; 0xff
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
 8002888:	2400      	movs	r4, #0
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800288a:	6819      	ldr	r1, [r3, #0]
 800288c:	0612      	lsls	r2, r2, #24
 800288e:	430a      	orrs	r2, r1
 8002890:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = 0UL;
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <xPortStartScheduler+0x58>)
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
 8002894:	4a0f      	ldr	r2, [pc, #60]	; (80028d4 <xPortStartScheduler+0x5c>)
	*(portNVIC_SYSTICK_CTRL) = 0UL;
 8002896:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002898:	490f      	ldr	r1, [pc, #60]	; (80028d8 <xPortStartScheduler+0x60>)
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
 800289a:	6014      	str	r4, [r2, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800289c:	4a0f      	ldr	r2, [pc, #60]	; (80028dc <xPortStartScheduler+0x64>)
	uxCriticalNesting = 0;
 800289e:	4d10      	ldr	r5, [pc, #64]	; (80028e0 <xPortStartScheduler+0x68>)
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80028a0:	6011      	str	r1, [r2, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80028a2:	2207      	movs	r2, #7
{
 80028a4:	b083      	sub	sp, #12
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80028a6:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 80028a8:	602c      	str	r4, [r5, #0]
	vPortStartFirstTask();
 80028aa:	f7ff ffb9 	bl	8002820 <vPortStartFirstTask>
	vTaskSwitchContext();
 80028ae:	f7ff fb31 	bl	8001f14 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 80028b2:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0UL;
 80028b4:	9401      	str	r4, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80028b6:	3301      	adds	r3, #1
 80028b8:	d001      	beq.n	80028be <xPortStartScheduler+0x46>
 80028ba:	b672      	cpsid	i
 80028bc:	e7fe      	b.n	80028bc <xPortStartScheduler+0x44>
	portDISABLE_INTERRUPTS();
 80028be:	b672      	cpsid	i
	while( ulDummy == 0 )
 80028c0:	9b01      	ldr	r3, [sp, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0fc      	beq.n	80028c0 <xPortStartScheduler+0x48>
}
 80028c6:	2000      	movs	r0, #0
 80028c8:	b003      	add	sp, #12
 80028ca:	bd30      	pop	{r4, r5, pc}
 80028cc:	e000ed20 	.word	0xe000ed20
 80028d0:	e000e010 	.word	0xe000e010
 80028d4:	e000e018 	.word	0xe000e018
 80028d8:	0000bb7f 	.word	0x0000bb7f
 80028dc:	e000e014 	.word	0xe000e014
 80028e0:	20000000 	.word	0x20000000

080028e4 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <vPortYield+0x14>)
 80028e8:	0552      	lsls	r2, r2, #21
 80028ea:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80028ec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80028f0:	f3bf 8f6f 	isb	sy
}
 80028f4:	4770      	bx	lr
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	e000ed04 	.word	0xe000ed04

080028fc <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 80028fc:	b672      	cpsid	i
    uxCriticalNesting++;
 80028fe:	4a04      	ldr	r2, [pc, #16]	; (8002910 <vPortEnterCritical+0x14>)
 8002900:	6813      	ldr	r3, [r2, #0]
 8002902:	3301      	adds	r3, #1
 8002904:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 8002906:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800290a:	f3bf 8f6f 	isb	sy
}
 800290e:	4770      	bx	lr
 8002910:	20000000 	.word	0x20000000

08002914 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002914:	4a05      	ldr	r2, [pc, #20]	; (800292c <vPortExitCritical+0x18>)
 8002916:	6813      	ldr	r3, [r2, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <vPortExitCritical+0xc>
 800291c:	b672      	cpsid	i
 800291e:	e7fe      	b.n	800291e <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8002920:	3b01      	subs	r3, #1
 8002922:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8002924:	2b00      	cmp	r3, #0
 8002926:	d100      	bne.n	800292a <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
 8002928:	b662      	cpsie	i
}
 800292a:	4770      	bx	lr
 800292c:	20000000 	.word	0x20000000

08002930 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8002930:	f3ef 8010 	mrs	r0, PRIMASK
 8002934:	b672      	cpsid	i
 8002936:	4770      	bx	lr

08002938 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8002938:	f380 8810 	msr	PRIMASK, r0
 800293c:	4770      	bx	lr
 800293e:	46c0      	nop			; (mov r8, r8)

08002940 <PendSV_Handler>:
	__asm volatile
 8002940:	f3ef 8009 	mrs	r0, PSP
 8002944:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <pxCurrentTCBConst>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	3820      	subs	r0, #32
 800294a:	6010      	str	r0, [r2, #0]
 800294c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800294e:	4644      	mov	r4, r8
 8002950:	464d      	mov	r5, r9
 8002952:	4656      	mov	r6, sl
 8002954:	465f      	mov	r7, fp
 8002956:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002958:	b508      	push	{r3, lr}
 800295a:	b672      	cpsid	i
 800295c:	f7ff fada 	bl	8001f14 <vTaskSwitchContext>
 8002960:	b662      	cpsie	i
 8002962:	bc0c      	pop	{r2, r3}
 8002964:	6811      	ldr	r1, [r2, #0]
 8002966:	6808      	ldr	r0, [r1, #0]
 8002968:	3010      	adds	r0, #16
 800296a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800296c:	46a0      	mov	r8, r4
 800296e:	46a9      	mov	r9, r5
 8002970:	46b2      	mov	sl, r6
 8002972:	46bb      	mov	fp, r7
 8002974:	f380 8809 	msr	PSP, r0
 8002978:	3820      	subs	r0, #32
 800297a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800297c:	4718      	bx	r3
 800297e:	46c0      	nop			; (mov r8, r8)

08002980 <pxCurrentTCBConst>:
 8002980:	20000034 	.word	0x20000034

08002984 <SysTick_Handler>:
{
 8002984:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002986:	f7ff ffd3 	bl	8002930 <ulSetInterruptMaskFromISR>
 800298a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800298c:	f7ff f87a 	bl	8001a84 <xTaskIncrementTick>
 8002990:	2800      	cmp	r0, #0
 8002992:	d003      	beq.n	800299c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <SysTick_Handler+0x20>)
 8002998:	0552      	lsls	r2, r2, #21
 800299a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800299c:	0020      	movs	r0, r4
 800299e:	f7ff ffcb 	bl	8002938 <vClearInterruptMaskFromISR>
}
 80029a2:	bd10      	pop	{r4, pc}
 80029a4:	e000ed04 	.word	0xe000ed04

080029a8 <pvPortMalloc>:
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80029a8:	2307      	movs	r3, #7
{
 80029aa:	b570      	push	{r4, r5, r6, lr}
 80029ac:	0004      	movs	r4, r0
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80029ae:	4203      	tst	r3, r0
 80029b0:	d001      	beq.n	80029b6 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80029b2:	439c      	bics	r4, r3
 80029b4:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
 80029b6:	f7ff f857 	bl	8001a68 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80029ba:	4a1d      	ldr	r2, [pc, #116]	; (8002a30 <pvPortMalloc+0x88>)
 80029bc:	6813      	ldr	r3, [r2, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d02a      	beq.n	8002a18 <pvPortMalloc+0x70>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80029c2:	481c      	ldr	r0, [pc, #112]	; (8002a34 <pvPortMalloc+0x8c>)
 80029c4:	4d1c      	ldr	r5, [pc, #112]	; (8002a38 <pvPortMalloc+0x90>)
 80029c6:	6801      	ldr	r1, [r0, #0]
 80029c8:	190a      	adds	r2, r1, r4
 80029ca:	42aa      	cmp	r2, r5
 80029cc:	d81a      	bhi.n	8002a04 <pvPortMalloc+0x5c>
 80029ce:	4291      	cmp	r1, r2
 80029d0:	d218      	bcs.n	8002a04 <pvPortMalloc+0x5c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80029d2:	185d      	adds	r5, r3, r1
			xNextFreeByte += xWantedSize;
 80029d4:	6002      	str	r2, [r0, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d014      	beq.n	8002a04 <pvPortMalloc+0x5c>
 80029da:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <pvPortMalloc+0x94>)
 80029dc:	6813      	ldr	r3, [r2, #0]
 80029de:	191b      	adds	r3, r3, r4
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	f000 fbdb 	bl	800319c <prvTraceGetCurrentTaskHandle>
 80029e6:	f000 fb45 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 80029ea:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <pvPortMalloc+0x98>)
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	4203      	tst	r3, r0
 80029f0:	d004      	beq.n	80029fc <pvPortMalloc+0x54>
 80029f2:	0022      	movs	r2, r4
 80029f4:	0029      	movs	r1, r5
 80029f6:	2038      	movs	r0, #56	; 0x38
 80029f8:	f000 fe12 	bl	8003620 <prvTraceStoreEvent2>
	}
	( void ) xTaskResumeAll();
 80029fc:	f7ff f9c0 	bl	8001d80 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 8002a00:	0028      	movs	r0, r5
 8002a02:	bd70      	pop	{r4, r5, r6, pc}
		traceMALLOC( pvReturn, xWantedSize );
 8002a04:	f000 fbca 	bl	800319c <prvTraceGetCurrentTaskHandle>
 8002a08:	f000 fb34 	bl	8003074 <prvTraceGetTaskNumberHigh16>
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <pvPortMalloc+0x98>)
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	4203      	tst	r3, r0
 8002a12:	d106      	bne.n	8002a22 <pvPortMalloc+0x7a>
 8002a14:	2500      	movs	r5, #0
 8002a16:	e7f1      	b.n	80029fc <pvPortMalloc+0x54>
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002a18:	2107      	movs	r1, #7
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <pvPortMalloc+0x9c>)
 8002a1c:	438b      	bics	r3, r1
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	e7cf      	b.n	80029c2 <pvPortMalloc+0x1a>
		traceMALLOC( pvReturn, xWantedSize );
 8002a22:	0022      	movs	r2, r4
 8002a24:	2100      	movs	r1, #0
 8002a26:	20e9      	movs	r0, #233	; 0xe9
 8002a28:	f000 fdfa 	bl	8003620 <prvTraceStoreEvent2>
 8002a2c:	2500      	movs	r5, #0
 8002a2e:	e7e5      	b.n	80029fc <pvPortMalloc+0x54>
 8002a30:	20000174 	.word	0x20000174
 8002a34:	20001d78 	.word	0x20001d78
 8002a38:	00001bf7 	.word	0x00001bf7
 8002a3c:	2000389c 	.word	0x2000389c
 8002a40:	20000006 	.word	0x20000006
 8002a44:	20000180 	.word	0x20000180

08002a48 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	d001      	beq.n	8002a50 <vPortFree+0x8>
 8002a4c:	b672      	cpsid	i
 8002a4e:	e7fe      	b.n	8002a4e <vPortFree+0x6>
}
 8002a50:	4770      	bx	lr
 8002a52:	46c0      	nop			; (mov r8, r8)

08002a54 <SEGGER_RTT_Read>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 8002a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a56:	4657      	mov	r7, sl
 8002a58:	464e      	mov	r6, r9
 8002a5a:	46de      	mov	lr, fp
 8002a5c:	4645      	mov	r5, r8
 8002a5e:	b5e0      	push	{r5, r6, r7, lr}
 8002a60:	b083      	sub	sp, #12
 8002a62:	0006      	movs	r6, r0
 8002a64:	4692      	mov	sl, r2
 8002a66:	9100      	str	r1, [sp, #0]
  unsigned NumBytesRead;
  //
  SEGGER_RTT_LOCK();
 8002a68:	f3ef 8b10 	mrs	fp, PRIMASK
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	f381 8810 	msr	PRIMASK, r1
  INIT();
 8002a72:	4c44      	ldr	r4, [pc, #272]	; (8002b84 <SEGGER_RTT_Read+0x130>)
 8002a74:	7823      	ldrb	r3, [r4, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d059      	beq.n	8002b2e <SEGGER_RTT_Read+0xda>
  RdOff = pRing->RdOff;
 8002a7a:	0077      	lsls	r7, r6, #1
 8002a7c:	19bb      	adds	r3, r7, r6
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	18e3      	adds	r3, r4, r3
 8002a82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a84:	4690      	mov	r8, r2
  WrOff = pRing->WrOff;
 8002a86:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a88:	4691      	mov	r9, r2
  if (RdOff > WrOff) {
 8002a8a:	4590      	cmp	r8, r2
 8002a8c:	d827      	bhi.n	8002ade <SEGGER_RTT_Read+0x8a>
  NumBytesRem = WrOff - RdOff;
 8002a8e:	0013      	movs	r3, r2
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002a90:	4655      	mov	r5, sl
  NumBytesRem = WrOff - RdOff;
 8002a92:	4642      	mov	r2, r8
 8002a94:	1a9b      	subs	r3, r3, r2
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002a96:	429d      	cmp	r5, r3
 8002a98:	d80b      	bhi.n	8002ab2 <SEGGER_RTT_Read+0x5e>
  if (NumBytesRem > 0u) {
 8002a9a:	2d00      	cmp	r5, #0
 8002a9c:	d10b      	bne.n	8002ab6 <SEGGER_RTT_Read+0x62>
  //
  NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8002a9e:	f38b 8810 	msr	PRIMASK, fp
  //
  return NumBytesRead;
}
 8002aa2:	0028      	movs	r0, r5
 8002aa4:	b003      	add	sp, #12
 8002aa6:	bcf0      	pop	{r4, r5, r6, r7}
 8002aa8:	46bb      	mov	fp, r7
 8002aaa:	46b2      	mov	sl, r6
 8002aac:	46a9      	mov	r9, r5
 8002aae:	46a0      	mov	r8, r4
 8002ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002ab2:	1e1d      	subs	r5, r3, #0
  if (NumBytesRem > 0u) {
 8002ab4:	d0f3      	beq.n	8002a9e <SEGGER_RTT_Read+0x4a>
 8002ab6:	46a9      	mov	r9, r5
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002ab8:	19bb      	adds	r3, r7, r6
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	18e3      	adds	r3, r4, r3
 8002abe:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8002ac0:	002a      	movs	r2, r5
 8002ac2:	4441      	add	r1, r8
 8002ac4:	9800      	ldr	r0, [sp, #0]
    RdOff        += NumBytesRem;
 8002ac6:	44a8      	add	r8, r5
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002ac8:	f002 fab0 	bl	800502c <memcpy>
    NumBytesRead += NumBytesRem;
 8002acc:	464d      	mov	r5, r9
  if (NumBytesRead) {
 8002ace:	2d00      	cmp	r5, #0
 8002ad0:	d0e5      	beq.n	8002a9e <SEGGER_RTT_Read+0x4a>
    pRing->RdOff = RdOff;
 8002ad2:	4643      	mov	r3, r8
 8002ad4:	19bf      	adds	r7, r7, r6
 8002ad6:	00ff      	lsls	r7, r7, #3
 8002ad8:	19e7      	adds	r7, r4, r7
 8002ada:	673b      	str	r3, [r7, #112]	; 0x70
 8002adc:	e7df      	b.n	8002a9e <SEGGER_RTT_Read+0x4a>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002ade:	4642      	mov	r2, r8
 8002ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002ae2:	4655      	mov	r5, sl
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002ae4:	1a9b      	subs	r3, r3, r2
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002ae6:	459a      	cmp	sl, r3
 8002ae8:	d847      	bhi.n	8002b7a <SEGGER_RTT_Read+0x126>
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002aea:	19bb      	adds	r3, r7, r6
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	18e3      	adds	r3, r4, r3
 8002af0:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8002af2:	002a      	movs	r2, r5
 8002af4:	4441      	add	r1, r8
 8002af6:	9800      	ldr	r0, [sp, #0]
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	f002 fa97 	bl	800502c <memcpy>
    BufferSize   -= NumBytesRem;
 8002afe:	4651      	mov	r1, sl
    if (RdOff == pRing->SizeOfBuffer) {
 8002b00:	9a01      	ldr	r2, [sp, #4]
    RdOff        += NumBytesRem;
 8002b02:	44a8      	add	r8, r5
    if (RdOff == pRing->SizeOfBuffer) {
 8002b04:	6e92      	ldr	r2, [r2, #104]	; 0x68
    BufferSize   -= NumBytesRem;
 8002b06:	1b4b      	subs	r3, r1, r5
    if (RdOff == pRing->SizeOfBuffer) {
 8002b08:	4590      	cmp	r8, r2
 8002b0a:	d038      	beq.n	8002b7e <SEGGER_RTT_Read+0x12a>
  NumBytesRem = WrOff - RdOff;
 8002b0c:	464a      	mov	r2, r9
 8002b0e:	4641      	mov	r1, r8
 8002b10:	1a52      	subs	r2, r2, r1
 8002b12:	4691      	mov	r9, r2
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002b14:	454b      	cmp	r3, r9
 8002b16:	d82c      	bhi.n	8002b72 <SEGGER_RTT_Read+0x11e>
  if (NumBytesRem > 0u) {
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0d8      	beq.n	8002ace <SEGGER_RTT_Read+0x7a>
    pBuffer      += NumBytesRem;
 8002b1c:	9a00      	ldr	r2, [sp, #0]
    NumBytesRead += NumBytesRem;
 8002b1e:	46a9      	mov	r9, r5
    pBuffer      += NumBytesRem;
 8002b20:	4694      	mov	ip, r2
 8002b22:	44ac      	add	ip, r5
 8002b24:	4662      	mov	r2, ip
    NumBytesRead += NumBytesRem;
 8002b26:	001d      	movs	r5, r3
    pBuffer      += NumBytesRem;
 8002b28:	9200      	str	r2, [sp, #0]
    NumBytesRead += NumBytesRem;
 8002b2a:	4499      	add	r9, r3
 8002b2c:	e7c4      	b.n	8002ab8 <SEGGER_RTT_Read+0x64>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002b2e:	2003      	movs	r0, #3
 8002b30:	2103      	movs	r1, #3
  p->aUp[0].sName         = "Terminal";
 8002b32:	4a15      	ldr	r2, [pc, #84]	; (8002b88 <SEGGER_RTT_Read+0x134>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002b34:	6120      	str	r0, [r4, #16]
 8002b36:	6161      	str	r1, [r4, #20]
  p->aUp[0].sName         = "Terminal";
 8002b38:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002b3a:	4914      	ldr	r1, [pc, #80]	; (8002b8c <SEGGER_RTT_Read+0x138>)
  p->aDown[0].sName         = "Terminal";
 8002b3c:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002b3e:	4a14      	ldr	r2, [pc, #80]	; (8002b90 <SEGGER_RTT_Read+0x13c>)
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002b40:	61e1      	str	r1, [r4, #28]
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002b42:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002b44:	2140      	movs	r1, #64	; 0x40
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002b46:	2210      	movs	r2, #16
  p->aUp[0].RdOff         = 0u;
 8002b48:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002b4a:	6221      	str	r1, [r4, #32]
  p->aUp[0].WrOff         = 0u;
 8002b4c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002b4e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002b50:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002b52:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002b54:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002b56:	6763      	str	r3, [r4, #116]	; 0x74
  strcpy(&p->acID[7], "RTT");
 8002b58:	3a0c      	subs	r2, #12
 8002b5a:	490e      	ldr	r1, [pc, #56]	; (8002b94 <SEGGER_RTT_Read+0x140>)
 8002b5c:	1de0      	adds	r0, r4, #7
 8002b5e:	f002 fa65 	bl	800502c <memcpy>
  strcpy(&p->acID[0], "SEGGER");
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <SEGGER_RTT_Read+0x144>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	6022      	str	r2, [r4, #0]
 8002b68:	889b      	ldrh	r3, [r3, #4]
 8002b6a:	80a3      	strh	r3, [r4, #4]
  p->acID[6] = ' ';
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	71a3      	strb	r3, [r4, #6]
}
 8002b70:	e783      	b.n	8002a7a <SEGGER_RTT_Read+0x26>
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002b72:	464b      	mov	r3, r9
  if (NumBytesRem > 0u) {
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0aa      	beq.n	8002ace <SEGGER_RTT_Read+0x7a>
 8002b78:	e7d0      	b.n	8002b1c <SEGGER_RTT_Read+0xc8>
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002b7a:	001d      	movs	r5, r3
 8002b7c:	e7b5      	b.n	8002aea <SEGGER_RTT_Read+0x96>
      RdOff = 0u;
 8002b7e:	2200      	movs	r2, #0
 8002b80:	4690      	mov	r8, r2
 8002b82:	e7c7      	b.n	8002b14 <SEGGER_RTT_Read+0xc0>
 8002b84:	20001d80 	.word	0x20001d80
 8002b88:	08005088 	.word	0x08005088
 8002b8c:	20001e38 	.word	0x20001e38
 8002b90:	20001e28 	.word	0x20001e28
 8002b94:	08005094 	.word	0x08005094
 8002b98:	08005098 	.word	0x08005098

08002b9c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9e:	4657      	mov	r7, sl
 8002ba0:	464e      	mov	r6, r9
 8002ba2:	46de      	mov	lr, fp
 8002ba4:	4645      	mov	r5, r8
 8002ba6:	b5e0      	push	{r5, r6, r7, lr}
  unsigned Status;
  //
  INIT();
 8002ba8:	4b88      	ldr	r3, [pc, #544]	; (8002dcc <SEGGER_RTT_Write+0x230>)
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002baa:	0004      	movs	r4, r0
  INIT();
 8002bac:	4699      	mov	r9, r3
 8002bae:	781b      	ldrb	r3, [r3, #0]
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002bb0:	468a      	mov	sl, r1
 8002bb2:	0017      	movs	r7, r2
 8002bb4:	b085      	sub	sp, #20
  INIT();
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d01d      	beq.n	8002bf6 <SEGGER_RTT_Write+0x5a>
  SEGGER_RTT_LOCK();
 8002bba:	f3ef 8b10 	mrs	fp, PRIMASK
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	f381 8810 	msr	PRIMASK, r1
  switch (pRing->Flags) {
 8002bc4:	0065      	lsls	r5, r4, #1
 8002bc6:	192e      	adds	r6, r5, r4
 8002bc8:	00f6      	lsls	r6, r6, #3
 8002bca:	444e      	add	r6, r9
 8002bcc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002bce:	4698      	mov	r8, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d100      	bne.n	8002bd6 <SEGGER_RTT_Write+0x3a>
 8002bd4:	e091      	b.n	8002cfa <SEGGER_RTT_Write+0x15e>
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d058      	beq.n	8002c8c <SEGGER_RTT_Write+0xf0>
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d031      	beq.n	8002c42 <SEGGER_RTT_Write+0xa6>
 8002bde:	2300      	movs	r3, #0
 8002be0:	4698      	mov	r8, r3
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8002be2:	f38b 8810 	msr	PRIMASK, fp
  //
  return Status;
}
 8002be6:	4640      	mov	r0, r8
 8002be8:	b005      	add	sp, #20
 8002bea:	bcf0      	pop	{r4, r5, r6, r7}
 8002bec:	46bb      	mov	fp, r7
 8002bee:	46b2      	mov	sl, r6
 8002bf0:	46a9      	mov	r9, r5
 8002bf2:	46a0      	mov	r8, r4
 8002bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002bf6:	2003      	movs	r0, #3
 8002bf8:	2103      	movs	r1, #3
 8002bfa:	464a      	mov	r2, r9
 8002bfc:	6110      	str	r0, [r2, #16]
 8002bfe:	6151      	str	r1, [r2, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002c00:	4648      	mov	r0, r9
  p->aUp[0].sName         = "Terminal";
 8002c02:	4649      	mov	r1, r9
 8002c04:	4a72      	ldr	r2, [pc, #456]	; (8002dd0 <SEGGER_RTT_Write+0x234>)
  p->aUp[0].RdOff         = 0u;
 8002c06:	6283      	str	r3, [r0, #40]	; 0x28
  p->aUp[0].sName         = "Terminal";
 8002c08:	618a      	str	r2, [r1, #24]
  p->aDown[0].sName         = "Terminal";
 8002c0a:	6602      	str	r2, [r0, #96]	; 0x60
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002c0c:	4971      	ldr	r1, [pc, #452]	; (8002dd4 <SEGGER_RTT_Write+0x238>)
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002c0e:	4a72      	ldr	r2, [pc, #456]	; (8002dd8 <SEGGER_RTT_Write+0x23c>)
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002c10:	61c1      	str	r1, [r0, #28]
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002c12:	6642      	str	r2, [r0, #100]	; 0x64
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002c14:	2140      	movs	r1, #64	; 0x40
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002c16:	2210      	movs	r2, #16
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002c18:	6201      	str	r1, [r0, #32]
  p->aUp[0].WrOff         = 0u;
 8002c1a:	6243      	str	r3, [r0, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002c1c:	62c3      	str	r3, [r0, #44]	; 0x2c
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002c1e:	6682      	str	r2, [r0, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002c20:	6703      	str	r3, [r0, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002c22:	66c3      	str	r3, [r0, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002c24:	6743      	str	r3, [r0, #116]	; 0x74
  strcpy(&p->acID[7], "RTT");
 8002c26:	2204      	movs	r2, #4
 8002c28:	496c      	ldr	r1, [pc, #432]	; (8002ddc <SEGGER_RTT_Write+0x240>)
 8002c2a:	3007      	adds	r0, #7
 8002c2c:	f002 f9fe 	bl	800502c <memcpy>
  strcpy(&p->acID[0], "SEGGER");
 8002c30:	4649      	mov	r1, r9
 8002c32:	4b6b      	ldr	r3, [pc, #428]	; (8002de0 <SEGGER_RTT_Write+0x244>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	600a      	str	r2, [r1, #0]
 8002c38:	889b      	ldrh	r3, [r3, #4]
 8002c3a:	808b      	strh	r3, [r1, #4]
  p->acID[6] = ' ';
 8002c3c:	2320      	movs	r3, #32
 8002c3e:	718b      	strb	r3, [r1, #6]
}
 8002c40:	e7bb      	b.n	8002bba <SEGGER_RTT_Write+0x1e>
  WrOff = pRing->WrOff;
 8002c42:	6a71      	ldr	r1, [r6, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002c44:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002c46:	9101      	str	r1, [sp, #4]
  if (RdOff <= WrOff) {
 8002c48:	428b      	cmp	r3, r1
 8002c4a:	d800      	bhi.n	8002c4e <SEGGER_RTT_Write+0xb2>
 8002c4c:	e082      	b.n	8002d54 <SEGGER_RTT_Write+0x1b8>
    r = RdOff - WrOff - 1u;
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	1a5b      	subs	r3, r3, r1
    if (Avail < NumBytes) {
 8002c52:	429f      	cmp	r7, r3
 8002c54:	d8c5      	bhi.n	8002be2 <SEGGER_RTT_Write+0x46>
  Rem = pRing->SizeOfBuffer - WrOff;
 8002c56:	192d      	adds	r5, r5, r4
 8002c58:	00ed      	lsls	r5, r5, #3
 8002c5a:	444d      	add	r5, r9
 8002c5c:	6a2b      	ldr	r3, [r5, #32]
 8002c5e:	9a01      	ldr	r2, [sp, #4]
 8002c60:	4698      	mov	r8, r3
 8002c62:	1a9e      	subs	r6, r3, r2
  if (Rem > NumBytes) {
 8002c64:	42b7      	cmp	r7, r6
 8002c66:	d300      	bcc.n	8002c6a <SEGGER_RTT_Write+0xce>
 8002c68:	e094      	b.n	8002d94 <SEGGER_RTT_Write+0x1f8>
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8002c6a:	3401      	adds	r4, #1
 8002c6c:	4694      	mov	ip, r2
 8002c6e:	0063      	lsls	r3, r4, #1
 8002c70:	191b      	adds	r3, r3, r4
 8002c72:	0014      	movs	r4, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	444b      	add	r3, r9
 8002c78:	6858      	ldr	r0, [r3, #4]
 8002c7a:	003a      	movs	r2, r7
 8002c7c:	4651      	mov	r1, sl
 8002c7e:	4460      	add	r0, ip
 8002c80:	f002 f9d4 	bl	800502c <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8002c84:	193b      	adds	r3, r7, r4
 8002c86:	46b8      	mov	r8, r7
 8002c88:	626b      	str	r3, [r5, #36]	; 0x24
 8002c8a:	e7aa      	b.n	8002be2 <SEGGER_RTT_Write+0x46>
  NumBytesWritten = 0u;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	3401      	adds	r4, #1
 8002c90:	4698      	mov	r8, r3
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8002c92:	0063      	lsls	r3, r4, #1
 8002c94:	191b      	adds	r3, r3, r4
 8002c96:	00db      	lsls	r3, r3, #3
  WrOff = pRing->WrOff;
 8002c98:	6a75      	ldr	r5, [r6, #36]	; 0x24
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8002c9a:	9301      	str	r3, [sp, #4]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002c9c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    if (RdOff > WrOff) {
 8002c9e:	42ab      	cmp	r3, r5
 8002ca0:	d91f      	bls.n	8002ce2 <SEGGER_RTT_Write+0x146>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002ca2:	3b01      	subs	r3, #1
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002ca4:	6a34      	ldr	r4, [r6, #32]
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002ca6:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8002ca8:	42bb      	cmp	r3, r7
 8002caa:	d900      	bls.n	8002cae <SEGGER_RTT_Write+0x112>
 8002cac:	003b      	movs	r3, r7
 8002cae:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8002cb0:	429c      	cmp	r4, r3
 8002cb2:	d900      	bls.n	8002cb6 <SEGGER_RTT_Write+0x11a>
 8002cb4:	001c      	movs	r4, r3
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8002cb6:	9b01      	ldr	r3, [sp, #4]
 8002cb8:	4651      	mov	r1, sl
 8002cba:	444b      	add	r3, r9
 8002cbc:	6858      	ldr	r0, [r3, #4]
 8002cbe:	0022      	movs	r2, r4
 8002cc0:	1940      	adds	r0, r0, r5
 8002cc2:	f002 f9b3 	bl	800502c <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
 8002cc6:	6a33      	ldr	r3, [r6, #32]
    WrOff           += NumBytesToWrite;
 8002cc8:	192d      	adds	r5, r5, r4
    NumBytesWritten += NumBytesToWrite;
 8002cca:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
 8002ccc:	44a2      	add	sl, r4
    NumBytes        -= NumBytesToWrite;
 8002cce:	1b3f      	subs	r7, r7, r4
    if (WrOff == pRing->SizeOfBuffer) {
 8002cd0:	429d      	cmp	r5, r3
 8002cd2:	d00b      	beq.n	8002cec <SEGGER_RTT_Write+0x150>
    pRing->WrOff = WrOff;
 8002cd4:	6275      	str	r5, [r6, #36]	; 0x24
  } while (NumBytes);
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <SEGGER_RTT_Write+0x140>
 8002cda:	e782      	b.n	8002be2 <SEGGER_RTT_Write+0x46>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002cdc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    if (RdOff > WrOff) {
 8002cde:	42ab      	cmp	r3, r5
 8002ce0:	d8df      	bhi.n	8002ca2 <SEGGER_RTT_Write+0x106>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002ce2:	6a34      	ldr	r4, [r6, #32]
 8002ce4:	191b      	adds	r3, r3, r4
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	1b5b      	subs	r3, r3, r5
 8002cea:	e7dd      	b.n	8002ca8 <SEGGER_RTT_Write+0x10c>
    pRing->WrOff = WrOff;
 8002cec:	2300      	movs	r3, #0
 8002cee:	6273      	str	r3, [r6, #36]	; 0x24
  } while (NumBytes);
 8002cf0:	2f00      	cmp	r7, #0
 8002cf2:	d100      	bne.n	8002cf6 <SEGGER_RTT_Write+0x15a>
 8002cf4:	e775      	b.n	8002be2 <SEGGER_RTT_Write+0x46>
      WrOff = 0u;
 8002cf6:	2500      	movs	r5, #0
 8002cf8:	e7d0      	b.n	8002c9c <SEGGER_RTT_Write+0x100>
  WrOff = pRing->WrOff;
 8002cfa:	6a72      	ldr	r2, [r6, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002cfc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002cfe:	9201      	str	r2, [sp, #4]
  if (RdOff <= WrOff) {
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d920      	bls.n	8002d46 <SEGGER_RTT_Write+0x1aa>
    r = RdOff - WrOff - 1u;
 8002d04:	3b01      	subs	r3, #1
 8002d06:	1a9b      	subs	r3, r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002d08:	6a32      	ldr	r2, [r6, #32]
 8002d0a:	9202      	str	r2, [sp, #8]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8002d0c:	46b8      	mov	r8, r7
 8002d0e:	429f      	cmp	r7, r3
 8002d10:	d900      	bls.n	8002d14 <SEGGER_RTT_Write+0x178>
 8002d12:	4698      	mov	r8, r3
  Rem = pRing->SizeOfBuffer - WrOff;
 8002d14:	9b02      	ldr	r3, [sp, #8]
 8002d16:	9901      	ldr	r1, [sp, #4]
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8002d18:	1c62      	adds	r2, r4, #1
  Rem = pRing->SizeOfBuffer - WrOff;
 8002d1a:	1a5e      	subs	r6, r3, r1
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8002d1c:	0053      	lsls	r3, r2, #1
 8002d1e:	189b      	adds	r3, r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	444b      	add	r3, r9
  if (Rem > NumBytes) {
 8002d24:	45b0      	cmp	r8, r6
 8002d26:	d21a      	bcs.n	8002d5e <SEGGER_RTT_Write+0x1c2>
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8002d28:	468c      	mov	ip, r1
 8002d2a:	000e      	movs	r6, r1
 8002d2c:	6858      	ldr	r0, [r3, #4]
 8002d2e:	4642      	mov	r2, r8
 8002d30:	4651      	mov	r1, sl
 8002d32:	4460      	add	r0, ip
 8002d34:	f002 f97a 	bl	800502c <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8002d38:	0033      	movs	r3, r6
 8002d3a:	192d      	adds	r5, r5, r4
 8002d3c:	00ed      	lsls	r5, r5, #3
 8002d3e:	444d      	add	r5, r9
 8002d40:	4443      	add	r3, r8
 8002d42:	626b      	str	r3, [r5, #36]	; 0x24
 8002d44:	e74d      	b.n	8002be2 <SEGGER_RTT_Write+0x46>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002d46:	6a31      	ldr	r1, [r6, #32]
 8002d48:	468c      	mov	ip, r1
 8002d4a:	4463      	add	r3, ip
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	9102      	str	r1, [sp, #8]
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	e7db      	b.n	8002d0c <SEGGER_RTT_Write+0x170>
 8002d54:	6a32      	ldr	r2, [r6, #32]
 8002d56:	189b      	adds	r3, r3, r2
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	1a5b      	subs	r3, r3, r1
 8002d5c:	e779      	b.n	8002c52 <SEGGER_RTT_Write+0xb6>
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8002d5e:	9a01      	ldr	r2, [sp, #4]
 8002d60:	6858      	ldr	r0, [r3, #4]
 8002d62:	4694      	mov	ip, r2
 8002d64:	4651      	mov	r1, sl
 8002d66:	0032      	movs	r2, r6
 8002d68:	4460      	add	r0, ip
 8002d6a:	9303      	str	r3, [sp, #12]
 8002d6c:	f002 f95e 	bl	800502c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002d70:	4641      	mov	r1, r8
 8002d72:	9a01      	ldr	r2, [sp, #4]
 8002d74:	9802      	ldr	r0, [sp, #8]
 8002d76:	4694      	mov	ip, r2
 8002d78:	1a0f      	subs	r7, r1, r0
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8002d7a:	0031      	movs	r1, r6
 8002d7c:	9b03      	ldr	r3, [sp, #12]
    pRing->WrOff = NumBytesAtOnce;
 8002d7e:	192d      	adds	r5, r5, r4
    NumBytesAtOnce = NumBytes - Rem;
 8002d80:	4467      	add	r7, ip
    pRing->WrOff = NumBytesAtOnce;
 8002d82:	00ed      	lsls	r5, r5, #3
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8002d84:	003a      	movs	r2, r7
 8002d86:	6858      	ldr	r0, [r3, #4]
 8002d88:	4451      	add	r1, sl
    pRing->WrOff = NumBytesAtOnce;
 8002d8a:	444d      	add	r5, r9
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8002d8c:	f002 f94e 	bl	800502c <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8002d90:	626f      	str	r7, [r5, #36]	; 0x24
 8002d92:	e726      	b.n	8002be2 <SEGGER_RTT_Write+0x46>
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8002d94:	1c63      	adds	r3, r4, #1
 8002d96:	005c      	lsls	r4, r3, #1
 8002d98:	18e4      	adds	r4, r4, r3
 8002d9a:	9b01      	ldr	r3, [sp, #4]
 8002d9c:	00e4      	lsls	r4, r4, #3
 8002d9e:	469c      	mov	ip, r3
 8002da0:	444c      	add	r4, r9
 8002da2:	6860      	ldr	r0, [r4, #4]
 8002da4:	0032      	movs	r2, r6
 8002da6:	4651      	mov	r1, sl
 8002da8:	4460      	add	r0, ip
 8002daa:	f002 f93f 	bl	800502c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002dae:	4642      	mov	r2, r8
 8002db0:	9b01      	ldr	r3, [sp, #4]
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8002db2:	0031      	movs	r1, r6
    NumBytesAtOnce = NumBytes - Rem;
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	4698      	mov	r8, r3
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8002dba:	001a      	movs	r2, r3
 8002dbc:	6860      	ldr	r0, [r4, #4]
 8002dbe:	4451      	add	r1, sl
 8002dc0:	f002 f934 	bl	800502c <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8002dc4:	4643      	mov	r3, r8
 8002dc6:	46b8      	mov	r8, r7
 8002dc8:	626b      	str	r3, [r5, #36]	; 0x24
 8002dca:	e70a      	b.n	8002be2 <SEGGER_RTT_Write+0x46>
 8002dcc:	20001d80 	.word	0x20001d80
 8002dd0:	08005088 	.word	0x08005088
 8002dd4:	20001e38 	.word	0x20001e38
 8002dd8:	20001e28 	.word	0x20001e28
 8002ddc:	08005094 	.word	0x08005094
 8002de0:	08005098 	.word	0x08005098

08002de4 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002de6:	46c6      	mov	lr, r8
  int r;

  INIT();
 8002de8:	4c2a      	ldr	r4, [pc, #168]	; (8002e94 <SEGGER_RTT_ConfigUpBuffer+0xb0>)
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002dea:	001e      	movs	r6, r3
  INIT();
 8002dec:	7823      	ldrb	r3, [r4, #0]
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002dee:	0005      	movs	r5, r0
 8002df0:	4688      	mov	r8, r1
 8002df2:	0017      	movs	r7, r2
 8002df4:	b500      	push	{lr}
  INIT();
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d026      	beq.n	8002e48 <SEGGER_RTT_ConfigUpBuffer+0x64>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8002dfa:	6923      	ldr	r3, [r4, #16]
 8002dfc:	429d      	cmp	r5, r3
 8002dfe:	d246      	bcs.n	8002e8e <SEGGER_RTT_ConfigUpBuffer+0xaa>
    SEGGER_RTT_LOCK();
 8002e00:	f3ef 8310 	mrs	r3, PRIMASK
 8002e04:	2101      	movs	r1, #1
 8002e06:	f381 8810 	msr	PRIMASK, r1
    if (BufferIndex > 0u) {
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	2d00      	cmp	r5, #0
 8002e0e:	d10a      	bne.n	8002e26 <SEGGER_RTT_ConfigUpBuffer+0x42>
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8002e10:	1940      	adds	r0, r0, r5
 8002e12:	9a06      	ldr	r2, [sp, #24]
 8002e14:	00c0      	lsls	r0, r0, #3
 8002e16:	1824      	adds	r4, r4, r0
 8002e18:	62e2      	str	r2, [r4, #44]	; 0x2c
    SEGGER_RTT_UNLOCK();
 8002e1a:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 8002e1e:	2000      	movs	r0, #0
  } else {
    r = -1;
  }
  return r;
}
 8002e20:	bc80      	pop	{r7}
 8002e22:	46b8      	mov	r8, r7
 8002e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8002e26:	1c6a      	adds	r2, r5, #1
 8002e28:	0050      	lsls	r0, r2, #1
 8002e2a:	1880      	adds	r0, r0, r2
 8002e2c:	4642      	mov	r2, r8
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8002e2e:	2100      	movs	r1, #0
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8002e30:	00c0      	lsls	r0, r0, #3
 8002e32:	5022      	str	r2, [r4, r0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002e34:	1820      	adds	r0, r4, r0
 8002e36:	6047      	str	r7, [r0, #4]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002e38:	0068      	lsls	r0, r5, #1
 8002e3a:	1942      	adds	r2, r0, r5
 8002e3c:	00d2      	lsls	r2, r2, #3
 8002e3e:	18a2      	adds	r2, r4, r2
 8002e40:	6216      	str	r6, [r2, #32]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8002e42:	6291      	str	r1, [r2, #40]	; 0x28
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002e44:	6251      	str	r1, [r2, #36]	; 0x24
 8002e46:	e7e3      	b.n	8002e10 <SEGGER_RTT_ConfigUpBuffer+0x2c>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002e48:	2003      	movs	r0, #3
 8002e4a:	2103      	movs	r1, #3
  p->aUp[0].sName         = "Terminal";
 8002e4c:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <SEGGER_RTT_ConfigUpBuffer+0xb4>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002e4e:	6120      	str	r0, [r4, #16]
 8002e50:	6161      	str	r1, [r4, #20]
  p->aUp[0].sName         = "Terminal";
 8002e52:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002e54:	4911      	ldr	r1, [pc, #68]	; (8002e9c <SEGGER_RTT_ConfigUpBuffer+0xb8>)
  p->aDown[0].sName         = "Terminal";
 8002e56:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002e58:	4a11      	ldr	r2, [pc, #68]	; (8002ea0 <SEGGER_RTT_ConfigUpBuffer+0xbc>)
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002e5a:	61e1      	str	r1, [r4, #28]
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002e5c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002e5e:	2140      	movs	r1, #64	; 0x40
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002e60:	2210      	movs	r2, #16
  p->aUp[0].RdOff         = 0u;
 8002e62:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002e64:	6221      	str	r1, [r4, #32]
  p->aUp[0].WrOff         = 0u;
 8002e66:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002e68:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002e6a:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002e6c:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002e6e:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002e70:	6763      	str	r3, [r4, #116]	; 0x74
  strcpy(&p->acID[7], "RTT");
 8002e72:	3a0c      	subs	r2, #12
 8002e74:	490b      	ldr	r1, [pc, #44]	; (8002ea4 <SEGGER_RTT_ConfigUpBuffer+0xc0>)
 8002e76:	1de0      	adds	r0, r4, #7
 8002e78:	f002 f8d8 	bl	800502c <memcpy>
  strcpy(&p->acID[0], "SEGGER");
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <SEGGER_RTT_ConfigUpBuffer+0xc4>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	6022      	str	r2, [r4, #0]
 8002e82:	889b      	ldrh	r3, [r3, #4]
 8002e84:	80a3      	strh	r3, [r4, #4]
  p->acID[6] = ' ';
 8002e86:	2320      	movs	r3, #32
 8002e88:	71a3      	strb	r3, [r4, #6]
}
 8002e8a:	3b1d      	subs	r3, #29
 8002e8c:	e7b6      	b.n	8002dfc <SEGGER_RTT_ConfigUpBuffer+0x18>
    r = -1;
 8002e8e:	2001      	movs	r0, #1
 8002e90:	4240      	negs	r0, r0
  return r;
 8002e92:	e7c5      	b.n	8002e20 <SEGGER_RTT_ConfigUpBuffer+0x3c>
 8002e94:	20001d80 	.word	0x20001d80
 8002e98:	08005088 	.word	0x08005088
 8002e9c:	20001e38 	.word	0x20001e38
 8002ea0:	20001e28 	.word	0x20001e28
 8002ea4:	08005094 	.word	0x08005094
 8002ea8:	08005098 	.word	0x08005098

08002eac <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eae:	4647      	mov	r7, r8
 8002eb0:	46ce      	mov	lr, r9
  int r;

  INIT();
 8002eb2:	4c29      	ldr	r4, [pc, #164]	; (8002f58 <SEGGER_RTT_ConfigDownBuffer+0xac>)
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	001f      	movs	r7, r3
  INIT();
 8002eb8:	7823      	ldrb	r3, [r4, #0]
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002eba:	0005      	movs	r5, r0
 8002ebc:	4689      	mov	r9, r1
 8002ebe:	4690      	mov	r8, r2
  INIT();
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d023      	beq.n	8002f0c <SEGGER_RTT_ConfigDownBuffer+0x60>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8002ec4:	6963      	ldr	r3, [r4, #20]
 8002ec6:	429d      	cmp	r5, r3
 8002ec8:	d243      	bcs.n	8002f52 <SEGGER_RTT_ConfigDownBuffer+0xa6>
    SEGGER_RTT_LOCK();
 8002eca:	f3ef 8310 	mrs	r3, PRIMASK
 8002ece:	2101      	movs	r1, #1
 8002ed0:	f381 8810 	msr	PRIMASK, r1
    if (BufferIndex > 0u) {
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	2d00      	cmp	r5, #0
 8002ed8:	d10b      	bne.n	8002ef2 <SEGGER_RTT_ConfigDownBuffer+0x46>
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8002eda:	1940      	adds	r0, r0, r5
 8002edc:	9a08      	ldr	r2, [sp, #32]
 8002ede:	00c0      	lsls	r0, r0, #3
 8002ee0:	1824      	adds	r4, r4, r0
 8002ee2:	6762      	str	r2, [r4, #116]	; 0x74
    SEGGER_RTT_UNLOCK();
 8002ee4:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 8002ee8:	2000      	movs	r0, #0
  } else {
    r = -1;
  }
  return r;
}
 8002eea:	bcc0      	pop	{r6, r7}
 8002eec:	46b9      	mov	r9, r7
 8002eee:	46b0      	mov	r8, r6
 8002ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8002ef2:	464a      	mov	r2, r9
 8002ef4:	0068      	lsls	r0, r5, #1
 8002ef6:	1946      	adds	r6, r0, r5
 8002ef8:	00f6      	lsls	r6, r6, #3
 8002efa:	19a6      	adds	r6, r4, r6
 8002efc:	6632      	str	r2, [r6, #96]	; 0x60
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002efe:	4642      	mov	r2, r8
 8002f00:	6672      	str	r2, [r6, #100]	; 0x64
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8002f02:	2200      	movs	r2, #0
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8002f04:	66b7      	str	r7, [r6, #104]	; 0x68
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8002f06:	6732      	str	r2, [r6, #112]	; 0x70
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8002f08:	66f2      	str	r2, [r6, #108]	; 0x6c
 8002f0a:	e7e6      	b.n	8002eda <SEGGER_RTT_ConfigDownBuffer+0x2e>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002f0c:	2003      	movs	r0, #3
 8002f0e:	2103      	movs	r1, #3
  p->aUp[0].sName         = "Terminal";
 8002f10:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <SEGGER_RTT_ConfigDownBuffer+0xb0>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002f12:	6120      	str	r0, [r4, #16]
 8002f14:	6161      	str	r1, [r4, #20]
  p->aUp[0].sName         = "Terminal";
 8002f16:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002f18:	4911      	ldr	r1, [pc, #68]	; (8002f60 <SEGGER_RTT_ConfigDownBuffer+0xb4>)
  p->aDown[0].sName         = "Terminal";
 8002f1a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002f1c:	4a11      	ldr	r2, [pc, #68]	; (8002f64 <SEGGER_RTT_ConfigDownBuffer+0xb8>)
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002f1e:	61e1      	str	r1, [r4, #28]
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002f20:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002f22:	2140      	movs	r1, #64	; 0x40
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002f24:	2210      	movs	r2, #16
  p->aUp[0].RdOff         = 0u;
 8002f26:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002f28:	6221      	str	r1, [r4, #32]
  p->aUp[0].WrOff         = 0u;
 8002f2a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002f2c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002f2e:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002f30:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002f32:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002f34:	6763      	str	r3, [r4, #116]	; 0x74
  strcpy(&p->acID[7], "RTT");
 8002f36:	3a0c      	subs	r2, #12
 8002f38:	490b      	ldr	r1, [pc, #44]	; (8002f68 <SEGGER_RTT_ConfigDownBuffer+0xbc>)
 8002f3a:	1de0      	adds	r0, r4, #7
 8002f3c:	f002 f876 	bl	800502c <memcpy>
  strcpy(&p->acID[0], "SEGGER");
 8002f40:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <SEGGER_RTT_ConfigDownBuffer+0xc0>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	6022      	str	r2, [r4, #0]
 8002f46:	889b      	ldrh	r3, [r3, #4]
 8002f48:	80a3      	strh	r3, [r4, #4]
  p->acID[6] = ' ';
 8002f4a:	2320      	movs	r3, #32
 8002f4c:	71a3      	strb	r3, [r4, #6]
}
 8002f4e:	3b1d      	subs	r3, #29
 8002f50:	e7b9      	b.n	8002ec6 <SEGGER_RTT_ConfigDownBuffer+0x1a>
    r = -1;
 8002f52:	2001      	movs	r0, #1
 8002f54:	4240      	negs	r0, r0
  return r;
 8002f56:	e7c8      	b.n	8002eea <SEGGER_RTT_ConfigDownBuffer+0x3e>
 8002f58:	20001d80 	.word	0x20001d80
 8002f5c:	08005088 	.word	0x08005088
 8002f60:	20001e38 	.word	0x20001e38
 8002f64:	20001e28 	.word	0x20001e28
 8002f68:	08005094 	.word	0x08005094
 8002f6c:	08005098 	.word	0x08005098

08002f70 <readFromRTT>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1)
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

int32_t readFromRTT(void* ptrData, uint32_t size, int32_t* ptrBytesRead)
{
 8002f70:	b570      	push	{r4, r5, r6, lr}
 8002f72:	0014      	movs	r4, r2
	uint32_t bytesRead = 0; 
	
	if (SEGGER_RTT_HASDATA(TRC_CFG_RTT_DOWN_BUFFER_INDEX))
 8002f74:	2588      	movs	r5, #136	; 0x88
 8002f76:	2284      	movs	r2, #132	; 0x84
 8002f78:	4b07      	ldr	r3, [pc, #28]	; (8002f98 <readFromRTT+0x28>)
 8002f7a:	589a      	ldr	r2, [r3, r2]
 8002f7c:	595b      	ldr	r3, [r3, r5]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d101      	bne.n	8002f86 <readFromRTT+0x16>
			*ptrBytesRead = (int32_t)bytesRead;

	}

	return 0;
}
 8002f82:	2000      	movs	r0, #0
 8002f84:	bd70      	pop	{r4, r5, r6, pc}
		bytesRead = SEGGER_RTT_Read((TRC_CFG_RTT_DOWN_BUFFER_INDEX), (char*)ptrData, size);
 8002f86:	000a      	movs	r2, r1
 8002f88:	0001      	movs	r1, r0
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	f7ff fd62 	bl	8002a54 <SEGGER_RTT_Read>
		if (ptrBytesRead != NULL)
 8002f90:	2c00      	cmp	r4, #0
 8002f92:	d0f6      	beq.n	8002f82 <readFromRTT+0x12>
			*ptrBytesRead = (int32_t)bytesRead;
 8002f94:	6020      	str	r0, [r4, #0]
 8002f96:	e7f4      	b.n	8002f82 <readFromRTT+0x12>
 8002f98:	20001d80 	.word	0x20001d80

08002f9c <writeToRTT>:

int32_t writeToRTT(void* ptrData, uint32_t size, int32_t* ptrBytesWritten)
{
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	0014      	movs	r4, r2
	uint32_t bytesWritten = SEGGER_RTT_Write((TRC_CFG_RTT_UP_BUFFER_INDEX), (const char*)ptrData, size);
 8002fa0:	000a      	movs	r2, r1
 8002fa2:	0001      	movs	r1, r0
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	f7ff fdf9 	bl	8002b9c <SEGGER_RTT_Write>
	
	if (ptrBytesWritten != NULL)
 8002faa:	2c00      	cmp	r4, #0
 8002fac:	d000      	beq.n	8002fb0 <writeToRTT+0x14>
		*ptrBytesWritten = (int32_t)bytesWritten;
 8002fae:	6020      	str	r0, [r4, #0]

	return 0;
}
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	bd10      	pop	{r4, pc}

08002fb4 <TzCtrl>:
 * Task for sending the trace data from the internal buffer to the stream 
 * interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
 * receiving commands from Tracealyzer. Also does some diagnostics.
 ******************************************************************************/
static portTASK_FUNCTION( TzCtrl, pvParameters )
{
 8002fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb6:	4647      	mov	r7, r8
 8002fb8:	46ce      	mov	lr, r9
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	4b29      	ldr	r3, [pc, #164]	; (8003064 <TzCtrl+0xb0>)
	while (1)
	{
		do
		{
			/* Listen for new commands */
			bytes = 0;
 8002fbe:	2500      	movs	r5, #0
 8002fc0:	4699      	mov	r9, r3
 8002fc2:	4b29      	ldr	r3, [pc, #164]	; (8003068 <TzCtrl+0xb4>)
 8002fc4:	4f29      	ldr	r7, [pc, #164]	; (800306c <TzCtrl+0xb8>)
 8002fc6:	4698      	mov	r8, r3
 8002fc8:	4e29      	ldr	r6, [pc, #164]	; (8003070 <TzCtrl+0xbc>)
{
 8002fca:	b085      	sub	sp, #20
 8002fcc:	e004      	b.n	8002fd8 <TzCtrl+0x24>
			{
				/* The connection has failed, stop tracing */
				vTraceStop();
			}

			if ((status == 0) && (bytes == sizeof(TracealyzerCommandType)))
 8002fce:	9c01      	ldr	r4, [sp, #4]
 8002fd0:	2c08      	cmp	r4, #8
 8002fd2:	d024      	beq.n	800301e <TzCtrl+0x6a>
#endif			
			
		/* If there was data sent or received (bytes != 0), loop around and repeat, if there is more data to send or receive.
		Otherwise, step out of this loop and sleep for a while. */		
		
		} while (bytes != 0);
 8002fd4:	2c00      	cmp	r4, #0
 8002fd6:	d00c      	beq.n	8002ff2 <TzCtrl+0x3e>
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 8002fd8:	2108      	movs	r1, #8
 8002fda:	aa01      	add	r2, sp, #4
 8002fdc:	a802      	add	r0, sp, #8
			bytes = 0;
 8002fde:	9501      	str	r5, [sp, #4]
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 8002fe0:	f7ff ffc6 	bl	8002f70 <readFromRTT>
			if (status != 0)
 8002fe4:	2800      	cmp	r0, #0
 8002fe6:	d0f2      	beq.n	8002fce <TzCtrl+0x1a>
				vTraceStop();
 8002fe8:	f000 f9f6 	bl	80033d8 <vTraceStop>
		} while (bytes != 0);
 8002fec:	9c01      	ldr	r4, [sp, #4]
 8002fee:	2c00      	cmp	r4, #0
 8002ff0:	d1f2      	bne.n	8002fd8 <TzCtrl+0x24>

		if (xTraceIsRecordingEnabled())
 8002ff2:	f000 fa01 	bl	80033f8 <xTraceIsRecordingEnabled>
 8002ff6:	2800      	cmp	r0, #0
 8002ff8:	d00d      	beq.n	8003016 <TzCtrl+0x62>
	if (NoRoomForSymbol > 0)
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d129      	bne.n	8003056 <TzCtrl+0xa2>
	if (NoRoomForObjectData > 0)
 8003002:	4643      	mov	r3, r8
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11f      	bne.n	800304a <TzCtrl+0x96>
	if (LongestSymbolName > (TRC_CFG_SYMBOL_MAX_LENGTH))
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b19      	cmp	r3, #25
 800300e:	d817      	bhi.n	8003040 <TzCtrl+0x8c>
	if (MaxBytesTruncated > 0)
 8003010:	6833      	ldr	r3, [r6, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10f      	bne.n	8003036 <TzCtrl+0x82>
		{
			prvCheckRecorderStatus();
			prvReportStackUsage();
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 8003016:	200a      	movs	r0, #10
 8003018:	f7fe ff2a 	bl	8001e70 <vTaskDelay>
	while (1)
 800301c:	e7dc      	b.n	8002fd8 <TzCtrl+0x24>
				if (prvIsValidCommand(&msg))
 800301e:	a802      	add	r0, sp, #8
 8003020:	f000 fc90 	bl	8003944 <prvIsValidCommand>
 8003024:	2800      	cmp	r0, #0
 8003026:	d101      	bne.n	800302c <TzCtrl+0x78>
		} while (bytes != 0);
 8003028:	9c01      	ldr	r4, [sp, #4]
 800302a:	e7d3      	b.n	8002fd4 <TzCtrl+0x20>
					prvProcessCommand(&msg); /* Start or Stop currently... */
 800302c:	a802      	add	r0, sp, #8
 800302e:	f000 fca7 	bl	8003980 <prvProcessCommand>
		} while (bytes != 0);
 8003032:	9c01      	ldr	r4, [sp, #4]
 8003034:	e7ce      	b.n	8002fd4 <TzCtrl+0x20>
		prvTraceWarning(PSF_WARNING_STRING_TOO_LONG);
 8003036:	200a      	movs	r0, #10
 8003038:	f000 ff72 	bl	8003f20 <prvTraceWarning>
		MaxBytesTruncated = 0;
 800303c:	6035      	str	r5, [r6, #0]
 800303e:	e7ea      	b.n	8003016 <TzCtrl+0x62>
		prvTraceWarning(PSF_WARNING_SYMBOL_MAX_LENGTH);
 8003040:	2008      	movs	r0, #8
 8003042:	f000 ff6d 	bl	8003f20 <prvTraceWarning>
		LongestSymbolName = 0;
 8003046:	603d      	str	r5, [r7, #0]
 8003048:	e7e2      	b.n	8003010 <TzCtrl+0x5c>
		prvTraceWarning(PSF_WARNING_OBJECT_DATA_SLOTS);
 800304a:	2009      	movs	r0, #9
 800304c:	f000 ff68 	bl	8003f20 <prvTraceWarning>
		NoRoomForObjectData = 0;
 8003050:	4643      	mov	r3, r8
 8003052:	601d      	str	r5, [r3, #0]
 8003054:	e7d9      	b.n	800300a <TzCtrl+0x56>
		prvTraceWarning(PSF_WARNING_SYMBOL_TABLE_SLOTS);
 8003056:	2007      	movs	r0, #7
 8003058:	f000 ff62 	bl	8003f20 <prvTraceWarning>
		NoRoomForSymbol = 0;
 800305c:	464b      	mov	r3, r9
 800305e:	601c      	str	r4, [r3, #0]
 8003060:	e7cf      	b.n	8003002 <TzCtrl+0x4e>
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	2000323c 	.word	0x2000323c
 8003068:	20003238 	.word	0x20003238
 800306c:	20003230 	.word	0x20003230
 8003070:	20003234 	.word	0x20003234

08003074 <prvTraceGetTaskNumberHigh16>:
{
 8003074:	b510      	push	{r4, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 8003076:	f7ff f8a1 	bl	80021bc <uxTaskGetTaskNumber>
 800307a:	0c00      	lsrs	r0, r0, #16
}
 800307c:	bd10      	pop	{r4, pc}
 800307e:	46c0      	nop			; (mov r8, r8)

08003080 <prvTraceSetTaskNumberHigh16>:
{
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	0005      	movs	r5, r0
 8003084:	000c      	movs	r4, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8003086:	f7ff f899 	bl	80021bc <uxTaskGetTaskNumber>
 800308a:	0401      	lsls	r1, r0, #16
 800308c:	0424      	lsls	r4, r4, #16
 800308e:	0c09      	lsrs	r1, r1, #16
 8003090:	0028      	movs	r0, r5
 8003092:	4321      	orrs	r1, r4
 8003094:	f7ff f898 	bl	80021c8 <vTaskSetTaskNumber>
}
 8003098:	bd70      	pop	{r4, r5, r6, pc}
 800309a:	46c0      	nop			; (mov r8, r8)

0800309c <prvTraceGetQueueNumberHigh16>:
{
 800309c:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
 800309e:	f7fe f94b 	bl	8001338 <uxQueueGetQueueNumber>
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
 80030a2:	0c00      	lsrs	r0, r0, #16
}
 80030a4:	bd10      	pop	{r4, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)

080030a8 <prvTraceSetQueueNumberHigh16>:
{
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	0005      	movs	r5, r0
 80030ac:	000c      	movs	r4, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
 80030ae:	f7fe f943 	bl	8001338 <uxQueueGetQueueNumber>
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 80030b2:	0401      	lsls	r1, r0, #16
 80030b4:	0424      	lsls	r4, r4, #16
 80030b6:	0c09      	lsrs	r1, r1, #16
 80030b8:	0028      	movs	r0, r5
 80030ba:	4321      	orrs	r1, r4
 80030bc:	f7fe f93e 	bl	800133c <vQueueSetQueueNumber>
}
 80030c0:	bd70      	pop	{r4, r5, r6, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)

080030c4 <vTraceEnable>:
	int32_t bytes = 0;
 80030c4:	2300      	movs	r3, #0
{
 80030c6:	b570      	push	{r4, r5, r6, lr}
	if (HandleTzCtrl == NULL)
 80030c8:	4d2a      	ldr	r5, [pc, #168]	; (8003174 <vTraceEnable+0xb0>)
{
 80030ca:	b086      	sub	sp, #24
	if (HandleTzCtrl == NULL)
 80030cc:	682e      	ldr	r6, [r5, #0]
{
 80030ce:	0004      	movs	r4, r0
	int32_t bytes = 0;
 80030d0:	9303      	str	r3, [sp, #12]
	if (HandleTzCtrl == NULL)
 80030d2:	2e00      	cmp	r6, #0
 80030d4:	d023      	beq.n	800311e <vTraceEnable+0x5a>
	if (startOption == TRC_START_AWAIT_HOST)
 80030d6:	2c02      	cmp	r4, #2
 80030d8:	d003      	beq.n	80030e2 <vTraceEnable+0x1e>
	else if (startOption == TRC_START)
 80030da:	2c01      	cmp	r4, #1
 80030dc:	d043      	beq.n	8003166 <vTraceEnable+0xa2>
}
 80030de:	b006      	add	sp, #24
 80030e0:	bd70      	pop	{r4, r5, r6, pc}
			bytes = 0;
 80030e2:	2400      	movs	r4, #0
 80030e4:	4d24      	ldr	r5, [pc, #144]	; (8003178 <vTraceEnable+0xb4>)
 80030e6:	e005      	b.n	80030f4 <vTraceEnable+0x30>
			if ((status == 0) && (bytes == sizeof(TracealyzerCommandType)))
 80030e8:	9b03      	ldr	r3, [sp, #12]
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d00e      	beq.n	800310c <vTraceEnable+0x48>
		while (RecorderEnabled == 0);
 80030ee:	682b      	ldr	r3, [r5, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f4      	bne.n	80030de <vTraceEnable+0x1a>
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 80030f4:	2108      	movs	r1, #8
 80030f6:	aa03      	add	r2, sp, #12
 80030f8:	a804      	add	r0, sp, #16
			bytes = 0;
 80030fa:	9403      	str	r4, [sp, #12]
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 80030fc:	f7ff ff38 	bl	8002f70 <readFromRTT>
			if (status != 0)
 8003100:	2800      	cmp	r0, #0
 8003102:	d0f1      	beq.n	80030e8 <vTraceEnable+0x24>
				prvTraceWarning(PSF_WARNING_STREAM_PORT_READ);
 8003104:	200b      	movs	r0, #11
 8003106:	f000 ff0b 	bl	8003f20 <prvTraceWarning>
			if ((status == 0) && (bytes == sizeof(TracealyzerCommandType)))
 800310a:	e7f0      	b.n	80030ee <vTraceEnable+0x2a>
				if (prvIsValidCommand(&msg))
 800310c:	a804      	add	r0, sp, #16
 800310e:	f000 fc19 	bl	8003944 <prvIsValidCommand>
 8003112:	2800      	cmp	r0, #0
 8003114:	d0eb      	beq.n	80030ee <vTraceEnable+0x2a>
					prvProcessCommand(&msg);
 8003116:	a804      	add	r0, sp, #16
 8003118:	f000 fc32 	bl	8003980 <prvProcessCommand>
 800311c:	e7e7      	b.n	80030ee <vTraceEnable+0x2a>
		TRC_STREAM_PORT_INIT();
 800311e:	4a17      	ldr	r2, [pc, #92]	; (800317c <vTraceEnable+0xb8>)
 8003120:	4917      	ldr	r1, [pc, #92]	; (8003180 <vTraceEnable+0xbc>)
 8003122:	4b18      	ldr	r3, [pc, #96]	; (8003184 <vTraceEnable+0xc0>)
 8003124:	9600      	str	r6, [sp, #0]
 8003126:	2001      	movs	r0, #1
 8003128:	f7ff fe5c 	bl	8002de4 <SEGGER_RTT_ConfigUpBuffer>
 800312c:	4916      	ldr	r1, [pc, #88]	; (8003188 <vTraceEnable+0xc4>)
 800312e:	2320      	movs	r3, #32
 8003130:	4a16      	ldr	r2, [pc, #88]	; (800318c <vTraceEnable+0xc8>)
 8003132:	9600      	str	r6, [sp, #0]
 8003134:	2001      	movs	r0, #1
 8003136:	000e      	movs	r6, r1
 8003138:	f7ff feb8 	bl	8002eac <SEGGER_RTT_ConfigDownBuffer>
		trcWarningChannel = xTraceRegisterString("#WFR"); 
 800313c:	4814      	ldr	r0, [pc, #80]	; (8003190 <vTraceEnable+0xcc>)
 800313e:	f000 fb9f 	bl	8003880 <xTraceRegisterString>
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <vTraceEnable+0xd0>)
		xTaskCreate( TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl );
 8003144:	228c      	movs	r2, #140	; 0x8c
		trcWarningChannel = xTraceRegisterString("#WFR"); 
 8003146:	6018      	str	r0, [r3, #0]
		xTaskCreate( TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl );
 8003148:	2301      	movs	r3, #1
 800314a:	0031      	movs	r1, r6
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	4812      	ldr	r0, [pc, #72]	; (8003198 <vTraceEnable+0xd4>)
 8003150:	2300      	movs	r3, #0
 8003152:	9501      	str	r5, [sp, #4]
 8003154:	f7fe fa00 	bl	8001558 <xTaskCreate>
		if (HandleTzCtrl == NULL)
 8003158:	682b      	ldr	r3, [r5, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1bb      	bne.n	80030d6 <vTraceEnable+0x12>
			prvTraceError(PSF_ERROR_TZCTRLTASK_NOT_CREATED);
 800315e:	2005      	movs	r0, #5
 8003160:	f000 fefc 	bl	8003f5c <prvTraceError>
 8003164:	e7b7      	b.n	80030d6 <vTraceEnable+0x12>
		msg.cmdCode = CMD_SET_ACTIVE;
 8003166:	2302      	movs	r3, #2
 8003168:	a804      	add	r0, sp, #16
 800316a:	33ff      	adds	r3, #255	; 0xff
 800316c:	8003      	strh	r3, [r0, #0]
		prvProcessCommand(&msg);
 800316e:	f000 fc07 	bl	8003980 <prvProcessCommand>
}
 8003172:	e7b4      	b.n	80030de <vTraceEnable+0x1a>
 8003174:	20001e78 	.word	0x20001e78
 8003178:	20003240 	.word	0x20003240
 800317c:	20001e9c 	.word	0x20001e9c
 8003180:	080050a0 	.word	0x080050a0
 8003184:	00001388 	.word	0x00001388
 8003188:	080050a8 	.word	0x080050a8
 800318c:	20001e7c 	.word	0x20001e7c
 8003190:	080050b0 	.word	0x080050b0
 8003194:	20003228 	.word	0x20003228
 8003198:	08002fb5 	.word	0x08002fb5

0800319c <prvTraceGetCurrentTaskHandle>:
{
 800319c:	b510      	push	{r4, lr}
	return xTaskGetCurrentTaskHandle();
 800319e:	f7ff f817 	bl	80021d0 <xTaskGetCurrentTaskHandle>
}
 80031a2:	bd10      	pop	{r4, pc}

080031a4 <prvIsNewTCB>:
	if (pCurrentTCB != pNewTCB)
 80031a4:	4a04      	ldr	r2, [pc, #16]	; (80031b8 <prvIsNewTCB+0x14>)
{
 80031a6:	0003      	movs	r3, r0
	if (pCurrentTCB != pNewTCB)
 80031a8:	6811      	ldr	r1, [r2, #0]
	return 0;
 80031aa:	2000      	movs	r0, #0
	if (pCurrentTCB != pNewTCB)
 80031ac:	4299      	cmp	r1, r3
 80031ae:	d001      	beq.n	80031b4 <prvIsNewTCB+0x10>
		pCurrentTCB = pNewTCB;
 80031b0:	6013      	str	r3, [r2, #0]
		return 1;
 80031b2:	3001      	adds	r0, #1
}
 80031b4:	4770      	bx	lr
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	20003224 	.word	0x20003224

080031bc <prvTraceStoreStringEventHelper>:
										uint16_t eventID,
										traceString userEvtChannel,
										int len,
										const char* str,
										va_list vl)
{
 80031bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031be:	46de      	mov	lr, fp
 80031c0:	4657      	mov	r7, sl
 80031c2:	464e      	mov	r6, r9
 80031c4:	4645      	mov	r5, r8
	int i;
	int offset = 0;
  	TRACE_ALLOC_CRITICAL_SECTION();
	
	/* The string length in multiples of 32 bit words (+1 for null character) */
	nStrWords = (len+1+3)/4;
 80031c6:	2403      	movs	r4, #3
{
 80031c8:	b5e0      	push	{r5, r6, r7, lr}
 80031ca:	001d      	movs	r5, r3
	nStrWords = (len+1+3)/4;
 80031cc:	3304      	adds	r3, #4
 80031ce:	17df      	asrs	r7, r3, #31
 80031d0:	403c      	ands	r4, r7
 80031d2:	18e4      	adds	r4, r4, r3
 80031d4:	10a4      	asrs	r4, r4, #2
{
 80031d6:	b093      	sub	sp, #76	; 0x4c

	offset = nArgs * 4;

	/* The total number of 32-bit words needed for the whole payload */
	nWords = nStrWords + nArgs;
 80031d8:	1824      	adds	r4, r4, r0
{
 80031da:	468c      	mov	ip, r1
 80031dc:	4693      	mov	fp, r2
 80031de:	991d      	ldr	r1, [sp, #116]	; 0x74
	offset = nArgs * 4;
 80031e0:	0086      	lsls	r6, r0, #2

	if (nWords > 15) /* if attempting to store more than 60 byte (= max) */
 80031e2:	2c0f      	cmp	r4, #15
 80031e4:	dd08      	ble.n	80031f8 <prvTraceStoreStringEventHelper+0x3c>
		of parameters... */

		/* Diagnostics ... */
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;

		if (bytesTruncated > MaxBytesTruncated)
 80031e6:	4b3d      	ldr	r3, [pc, #244]	; (80032dc <prvTraceStoreStringEventHelper+0x120>)
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 80031e8:	3c0f      	subs	r4, #15
		if (bytesTruncated > MaxBytesTruncated)
 80031ea:	681d      	ldr	r5, [r3, #0]
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 80031ec:	00a4      	lsls	r4, r4, #2
		if (bytesTruncated > MaxBytesTruncated)
 80031ee:	42a5      	cmp	r5, r4
 80031f0:	d35d      	bcc.n	80032ae <prvTraceStoreStringEventHelper+0xf2>
		{
			MaxBytesTruncated = bytesTruncated;
		}

		nWords = 15;
		len = 15 * 4 - offset;
 80031f2:	253c      	movs	r5, #60	; 0x3c
		nWords = 15;
 80031f4:	240f      	movs	r4, #15
		len = 15 * 4 - offset;
 80031f6:	1bad      	subs	r5, r5, r6
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031f8:	f3ef 8810 	mrs	r8, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fc:	2301      	movs	r3, #1
 80031fe:	f383 8810 	msr	PRIMASK, r3
	}

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
 8003202:	4f37      	ldr	r7, [pc, #220]	; (80032e0 <prvTraceStoreStringEventHelper+0x124>)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d048      	beq.n	800329c <prvTraceStoreStringEventHelper+0xe0>
	{
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 800320a:	1ca3      	adds	r3, r4, #2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4699      	mov	r9, r3

		eventCounter++;
 8003210:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <prvTraceStoreStringEventHelper+0x128>)
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
			if (event != NULL)
			{
				uint32_t* data32;
				uint8_t* data8;
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8003212:	0324      	lsls	r4, r4, #12
		eventCounter++;
 8003214:	469a      	mov	sl, r3
 8003216:	4652      	mov	r2, sl
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3301      	adds	r3, #1
 800321c:	6013      	str	r3, [r2, #0]
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 800321e:	4662      	mov	r2, ip
 8003220:	4322      	orrs	r2, r4
 8003222:	0014      	movs	r4, r2
 8003224:	466a      	mov	r2, sp
				event->base.EventCount = (uint16_t)eventCounter;
 8003226:	80d3      	strh	r3, [r2, #6]
	return TRC_HWTC_COUNT;
#endif
	
#if ((TRC_HWTC_TYPE == TRC_OS_TIMER_INCR) || (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR))
	uint32_t ticks = TRACE_GET_OS_TICKS();
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003228:	4b2f      	ldr	r3, [pc, #188]	; (80032e8 <prvTraceStoreStringEventHelper+0x12c>)
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 800322a:	8094      	strh	r4, [r2, #4]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 800322c:	681c      	ldr	r4, [r3, #0]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 800322e:	4b2f      	ldr	r3, [pc, #188]	; (80032ec <prvTraceStoreStringEventHelper+0x130>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003230:	0224      	lsls	r4, r4, #8
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	0a24      	lsrs	r4, r4, #8
 8003236:	061b      	lsls	r3, r3, #24
 8003238:	191b      	adds	r3, r3, r4
				event->base.TS = prvGetTimestamp32();
 800323a:	9302      	str	r3, [sp, #8]
				for (i = 0; i < nArgs; i++)
 800323c:	2800      	cmp	r0, #0
 800323e:	dd11      	ble.n	8003264 <prvTraceStoreStringEventHelper+0xa8>
 8003240:	465b      	mov	r3, fp
 8003242:	2b00      	cmp	r3, #0
 8003244:	d041      	beq.n	80032ca <prvTraceStoreStringEventHelper+0x10e>
 8003246:	2400      	movs	r4, #0
 8003248:	ab03      	add	r3, sp, #12
					if ((userEvtChannel != NULL) && (i == 0))
 800324a:	2c00      	cmp	r4, #0
 800324c:	d105      	bne.n	800325a <prvTraceStoreStringEventHelper+0x9e>
						data32[i] = (uint32_t)userEvtChannel;
 800324e:	465a      	mov	r2, fp
				for (i = 0; i < nArgs; i++)
 8003250:	3304      	adds	r3, #4
						data32[i] = (uint32_t)userEvtChannel;
 8003252:	9203      	str	r2, [sp, #12]
				for (i = 0; i < nArgs; i++)
 8003254:	2801      	cmp	r0, #1
 8003256:	d005      	beq.n	8003264 <prvTraceStoreStringEventHelper+0xa8>
 8003258:	3401      	adds	r4, #1
						data32[i] = va_arg(vl, uint32_t);
 800325a:	c904      	ldmia	r1!, {r2}
				for (i = 0; i < nArgs; i++)
 800325c:	3401      	adds	r4, #1
						data32[i] = va_arg(vl, uint32_t);
 800325e:	c304      	stmia	r3!, {r2}
				for (i = 0; i < nArgs; i++)
 8003260:	42a0      	cmp	r0, r4
 8003262:	d1f2      	bne.n	800324a <prvTraceStoreStringEventHelper+0x8e>
				for (i = 0; i < len; i++)
 8003264:	2d00      	cmp	r5, #0
 8003266:	dd05      	ble.n	8003274 <prvTraceStoreStringEventHelper+0xb8>
					data8[offset + i] = str[i];
 8003268:	ab03      	add	r3, sp, #12
 800326a:	002a      	movs	r2, r5
 800326c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800326e:	1998      	adds	r0, r3, r6
 8003270:	f001 fedc 	bl	800502c <memcpy>
				if (len < (15 * 4 - offset))
 8003274:	233c      	movs	r3, #60	; 0x3c
 8003276:	1b9b      	subs	r3, r3, r6
 8003278:	42ab      	cmp	r3, r5
 800327a:	dd06      	ble.n	800328a <prvTraceStoreStringEventHelper+0xce>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 800327c:	2348      	movs	r3, #72	; 0x48
 800327e:	18f6      	adds	r6, r6, r3
 8003280:	2300      	movs	r3, #0
 8003282:	446e      	add	r6, sp
 8003284:	1976      	adds	r6, r6, r5
 8003286:	3e3c      	subs	r6, #60	; 0x3c
 8003288:	7033      	strb	r3, [r6, #0]
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 800328a:	2400      	movs	r4, #0
 800328c:	466a      	mov	r2, sp
 800328e:	4649      	mov	r1, r9
 8003290:	a801      	add	r0, sp, #4
 8003292:	9400      	str	r4, [sp, #0]
 8003294:	f7ff fe82 	bl	8002f9c <writeToRTT>
 8003298:	2800      	cmp	r0, #0
 800329a:	d10a      	bne.n	80032b2 <prvTraceStoreStringEventHelper+0xf6>
 800329c:	f388 8810 	msr	PRIMASK, r8
}
 80032a0:	b013      	add	sp, #76	; 0x4c
 80032a2:	bcf0      	pop	{r4, r5, r6, r7}
 80032a4:	46bb      	mov	fp, r7
 80032a6:	46b2      	mov	sl, r6
 80032a8:	46a9      	mov	r9, r5
 80032aa:	46a0      	mov	r8, r4
 80032ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			MaxBytesTruncated = bytesTruncated;
 80032ae:	601c      	str	r4, [r3, #0]
 80032b0:	e79f      	b.n	80031f2 <prvTraceStoreStringEventHelper+0x36>
	if (RecorderEnabled == isEnabled)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f1      	beq.n	800329c <prvTraceStoreStringEventHelper+0xe0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032bc:	2201      	movs	r2, #1
 80032be:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 80032c2:	603c      	str	r4, [r7, #0]
 80032c4:	f383 8810 	msr	PRIMASK, r3
}
 80032c8:	e7e8      	b.n	800329c <prvTraceStoreStringEventHelper+0xe0>
						data32[i] = va_arg(vl, uint32_t);
 80032ca:	0032      	movs	r2, r6
 80032cc:	991d      	ldr	r1, [sp, #116]	; 0x74
 80032ce:	a803      	add	r0, sp, #12
 80032d0:	f001 feac 	bl	800502c <memcpy>
				for (i = 0; i < len; i++)
 80032d4:	2d00      	cmp	r5, #0
 80032d6:	dcc7      	bgt.n	8003268 <prvTraceStoreStringEventHelper+0xac>
 80032d8:	e7cc      	b.n	8003274 <prvTraceStoreStringEventHelper+0xb8>
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	20003234 	.word	0x20003234
 80032e0:	20003240 	.word	0x20003240
 80032e4:	2000324c 	.word	0x2000324c
 80032e8:	e000e018 	.word	0xe000e018
 80032ec:	200038a4 	.word	0x200038a4

080032f0 <prvTraceStoreStringEvent.constprop.1>:
void prvTraceStoreStringEvent(int nArgs, uint16_t eventID, const char* str, ...)
 80032f0:	b40c      	push	{r2, r3}
 80032f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f4:	46c6      	mov	lr, r8
 80032f6:	b500      	push	{lr}
 80032f8:	b094      	sub	sp, #80	; 0x50
 80032fa:	991a      	ldr	r1, [sp, #104]	; 0x68
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 80032fc:	780b      	ldrb	r3, [r1, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d05c      	beq.n	80033bc <prvTraceStoreStringEvent.constprop.1+0xcc>
 8003302:	2200      	movs	r2, #0
 8003304:	e001      	b.n	800330a <prvTraceStoreStringEvent.constprop.1+0x1a>
 8003306:	2a34      	cmp	r2, #52	; 0x34
 8003308:	d048      	beq.n	800339c <prvTraceStoreStringEvent.constprop.1+0xac>
 800330a:	0014      	movs	r4, r2
 800330c:	3201      	adds	r2, #1
 800330e:	5c8b      	ldrb	r3, [r1, r2]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f8      	bne.n	8003306 <prvTraceStoreStringEvent.constprop.1+0x16>
	nStrWords = (len+1+3)/4;
 8003314:	3405      	adds	r4, #5
 8003316:	10a0      	asrs	r0, r4, #2
	nWords = nStrWords + nArgs;
 8003318:	1c43      	adds	r3, r0, #1
	va_start(vl, str);
 800331a:	ad1b      	add	r5, sp, #108	; 0x6c
 800331c:	9501      	str	r5, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800331e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003322:	2501      	movs	r5, #1
 8003324:	f385 8810 	msr	PRIMASK, r5
	if (RecorderEnabled)
 8003328:	4e27      	ldr	r6, [pc, #156]	; (80033c8 <prvTraceStoreStringEvent.constprop.1+0xd8>)
 800332a:	6835      	ldr	r5, [r6, #0]
 800332c:	2d00      	cmp	r5, #0
 800332e:	d02c      	beq.n	800338a <prvTraceStoreStringEvent.constprop.1+0x9a>
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 8003330:	3003      	adds	r0, #3
 8003332:	0080      	lsls	r0, r0, #2
 8003334:	4680      	mov	r8, r0
		eventCounter++;
 8003336:	4825      	ldr	r0, [pc, #148]	; (80033cc <prvTraceStoreStringEvent.constprop.1+0xdc>)
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8003338:	031b      	lsls	r3, r3, #12
		eventCounter++;
 800333a:	4684      	mov	ip, r0
 800333c:	4665      	mov	r5, ip
 800333e:	6800      	ldr	r0, [r0, #0]
 8003340:	3001      	adds	r0, #1
 8003342:	6028      	str	r0, [r5, #0]
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8003344:	2503      	movs	r5, #3
 8003346:	46ac      	mov	ip, r5
 8003348:	4665      	mov	r5, ip
 800334a:	432b      	orrs	r3, r5
 800334c:	466d      	mov	r5, sp
 800334e:	81ab      	strh	r3, [r5, #12]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003350:	4b1f      	ldr	r3, [pc, #124]	; (80033d0 <prvTraceStoreStringEvent.constprop.1+0xe0>)
				event->base.EventCount = (uint16_t)eventCounter;
 8003352:	81e8      	strh	r0, [r5, #14]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003354:	6818      	ldr	r0, [r3, #0]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 8003356:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <prvTraceStoreStringEvent.constprop.1+0xe4>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003358:	0200      	lsls	r0, r0, #8
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	0a00      	lsrs	r0, r0, #8
 800335e:	061b      	lsls	r3, r3, #24
 8003360:	181b      	adds	r3, r3, r0
				event->base.TS = prvGetTimestamp32();
 8003362:	9304      	str	r3, [sp, #16]
						data32[i] = va_arg(vl, uint32_t);
 8003364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003366:	9305      	str	r3, [sp, #20]
				for (i = 0; i < len; i++)
 8003368:	2a00      	cmp	r2, #0
 800336a:	d002      	beq.n	8003372 <prvTraceStoreStringEvent.constprop.1+0x82>
					data8[offset + i] = str[i];
 800336c:	a806      	add	r0, sp, #24
 800336e:	f001 fe5d 	bl	800502c <memcpy>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 8003372:	ab05      	add	r3, sp, #20
 8003374:	191b      	adds	r3, r3, r4
 8003376:	2400      	movs	r4, #0
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 8003378:	4641      	mov	r1, r8
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 800337a:	701c      	strb	r4, [r3, #0]
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 800337c:	aa02      	add	r2, sp, #8
 800337e:	a803      	add	r0, sp, #12
 8003380:	9402      	str	r4, [sp, #8]
 8003382:	f7ff fe0b 	bl	8002f9c <writeToRTT>
 8003386:	2800      	cmp	r0, #0
 8003388:	d10c      	bne.n	80033a4 <prvTraceStoreStringEvent.constprop.1+0xb4>
 800338a:	f387 8810 	msr	PRIMASK, r7
}
 800338e:	b014      	add	sp, #80	; 0x50
 8003390:	bc80      	pop	{r7}
 8003392:	46b8      	mov	r8, r7
 8003394:	bcf0      	pop	{r4, r5, r6, r7}
 8003396:	bc08      	pop	{r3}
 8003398:	b002      	add	sp, #8
 800339a:	4718      	bx	r3
 800339c:	230f      	movs	r3, #15
 800339e:	200e      	movs	r0, #14
 80033a0:	2438      	movs	r4, #56	; 0x38
 80033a2:	e7ba      	b.n	800331a <prvTraceStoreStringEvent.constprop.1+0x2a>
	if (RecorderEnabled == isEnabled)
 80033a4:	6833      	ldr	r3, [r6, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0ef      	beq.n	800338a <prvTraceStoreStringEvent.constprop.1+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033aa:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ae:	2201      	movs	r2, #1
 80033b0:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 80033b4:	6034      	str	r4, [r6, #0]
 80033b6:	f383 8810 	msr	PRIMASK, r3
}
 80033ba:	e7e6      	b.n	800338a <prvTraceStoreStringEvent.constprop.1+0x9a>
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 80033bc:	2302      	movs	r3, #2
 80033be:	2001      	movs	r0, #1
 80033c0:	2404      	movs	r4, #4
 80033c2:	2200      	movs	r2, #0
 80033c4:	e7a9      	b.n	800331a <prvTraceStoreStringEvent.constprop.1+0x2a>
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	20003240 	.word	0x20003240
 80033cc:	2000324c 	.word	0x2000324c
 80033d0:	e000e018 	.word	0xe000e018
 80033d4:	200038a4 	.word	0x200038a4

080033d8 <vTraceStop>:
	if (RecorderEnabled == isEnabled)
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <vTraceStop+0x1c>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	2a00      	cmp	r2, #0
 80033de:	d008      	beq.n	80033f2 <vTraceStop+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e4:	2101      	movs	r1, #1
 80033e6:	f381 8810 	msr	PRIMASK, r1
	RecorderEnabled = isEnabled;		
 80033ea:	2100      	movs	r1, #0
 80033ec:	6019      	str	r1, [r3, #0]
 80033ee:	f382 8810 	msr	PRIMASK, r2
}
 80033f2:	4770      	bx	lr
 80033f4:	20003240 	.word	0x20003240

080033f8 <xTraceIsRecordingEnabled>:
	return (int)RecorderEnabled;
 80033f8:	4b01      	ldr	r3, [pc, #4]	; (8003400 <xTraceIsRecordingEnabled+0x8>)
 80033fa:	6818      	ldr	r0, [r3, #0]
}
 80033fc:	4770      	bx	lr
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	20003240 	.word	0x20003240

08003404 <prvTraceStoreStringEvent>:
{
 8003404:	b40c      	push	{r2, r3}
 8003406:	b510      	push	{r4, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	9c06      	ldr	r4, [sp, #24]
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 800340c:	7823      	ldrb	r3, [r4, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d013      	beq.n	800343a <prvTraceStoreStringEvent+0x36>
 8003412:	2300      	movs	r3, #0
 8003414:	e001      	b.n	800341a <prvTraceStoreStringEvent+0x16>
 8003416:	2b34      	cmp	r3, #52	; 0x34
 8003418:	d003      	beq.n	8003422 <prvTraceStoreStringEvent+0x1e>
 800341a:	3301      	adds	r3, #1
 800341c:	5ce2      	ldrb	r2, [r4, r3]
 800341e:	2a00      	cmp	r2, #0
 8003420:	d1f9      	bne.n	8003416 <prvTraceStoreStringEvent+0x12>
	va_start(vl, str);
 8003422:	aa07      	add	r2, sp, #28
 8003424:	9203      	str	r2, [sp, #12]
	prvTraceStoreStringEventHelper(nArgs, eventID, NULL, len, str, vl);
 8003426:	9201      	str	r2, [sp, #4]
 8003428:	9400      	str	r4, [sp, #0]
 800342a:	2200      	movs	r2, #0
 800342c:	f7ff fec6 	bl	80031bc <prvTraceStoreStringEventHelper>
}
 8003430:	b004      	add	sp, #16
 8003432:	bc10      	pop	{r4}
 8003434:	bc08      	pop	{r3}
 8003436:	b002      	add	sp, #8
 8003438:	4718      	bx	r3
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 800343a:	2300      	movs	r3, #0
 800343c:	e7f1      	b.n	8003422 <prvTraceStoreStringEvent+0x1e>
 800343e:	46c0      	nop			; (mov r8, r8)

08003440 <prvTraceStoreSimpleStringEventHelper>:
{
 8003440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003442:	4645      	mov	r5, r8
 8003444:	46de      	mov	lr, fp
 8003446:	4657      	mov	r7, sl
 8003448:	464e      	mov	r6, r9
 800344a:	b5e0      	push	{r5, r6, r7, lr}
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 800344c:	7813      	ldrb	r3, [r2, #0]
{
 800344e:	000d      	movs	r5, r1
 8003450:	b095      	sub	sp, #84	; 0x54
 8003452:	0011      	movs	r1, r2
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 8003454:	2b00      	cmp	r3, #0
 8003456:	d06a      	beq.n	800352e <prvTraceStoreSimpleStringEventHelper+0xee>
 8003458:	2200      	movs	r2, #0
 800345a:	e001      	b.n	8003460 <prvTraceStoreSimpleStringEventHelper+0x20>
 800345c:	2a34      	cmp	r2, #52	; 0x34
 800345e:	d056      	beq.n	800350e <prvTraceStoreSimpleStringEventHelper+0xce>
 8003460:	0014      	movs	r4, r2
 8003462:	3201      	adds	r2, #1
 8003464:	5c8b      	ldrb	r3, [r1, r2]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f8      	bne.n	800345c <prvTraceStoreSimpleStringEventHelper+0x1c>
	nStrWords = (len+1+3)/4;
 800346a:	3405      	adds	r4, #5
 800346c:	10a3      	asrs	r3, r4, #2
	if (userEvtChannel)
 800346e:	2d00      	cmp	r5, #0
 8003470:	d049      	beq.n	8003506 <prvTraceStoreSimpleStringEventHelper+0xc6>
	nWords = nStrWords + nArgs;
 8003472:	2604      	movs	r6, #4
 8003474:	46b4      	mov	ip, r6
		eventID++;
 8003476:	3001      	adds	r0, #1
 8003478:	b280      	uxth	r0, r0
	nWords = nStrWords + nArgs;
 800347a:	3301      	adds	r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800347c:	f3ef 8610 	mrs	r6, PRIMASK
 8003480:	9600      	str	r6, [sp, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003482:	2601      	movs	r6, #1
 8003484:	f386 8810 	msr	PRIMASK, r6
	if (RecorderEnabled)
 8003488:	4e2b      	ldr	r6, [pc, #172]	; (8003538 <prvTraceStoreSimpleStringEventHelper+0xf8>)
 800348a:	6837      	ldr	r7, [r6, #0]
 800348c:	9601      	str	r6, [sp, #4]
 800348e:	2f00      	cmp	r7, #0
 8003490:	d02f      	beq.n	80034f2 <prvTraceStoreSimpleStringEventHelper+0xb2>
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 8003492:	1c9f      	adds	r7, r3, #2
 8003494:	00bf      	lsls	r7, r7, #2
 8003496:	46b8      	mov	r8, r7
		eventCounter++;
 8003498:	4f28      	ldr	r7, [pc, #160]	; (800353c <prvTraceStoreSimpleStringEventHelper+0xfc>)
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 800349a:	031b      	lsls	r3, r3, #12
		eventCounter++;
 800349c:	46ba      	mov	sl, r7
 800349e:	683f      	ldr	r7, [r7, #0]
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 80034a0:	4318      	orrs	r0, r3
		eventCounter++;
 80034a2:	46b9      	mov	r9, r7
 80034a4:	2701      	movs	r7, #1
 80034a6:	46bb      	mov	fp, r7
 80034a8:	44d9      	add	r9, fp
 80034aa:	464e      	mov	r6, r9
 80034ac:	4657      	mov	r7, sl
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 80034ae:	ab02      	add	r3, sp, #8
 80034b0:	8098      	strh	r0, [r3, #4]
				event->base.EventCount = (uint16_t)eventCounter;
 80034b2:	80de      	strh	r6, [r3, #6]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 80034b4:	4b22      	ldr	r3, [pc, #136]	; (8003540 <prvTraceStoreSimpleStringEventHelper+0x100>)
		eventCounter++;
 80034b6:	603e      	str	r6, [r7, #0]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 80034b8:	6818      	ldr	r0, [r3, #0]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 80034ba:	4b22      	ldr	r3, [pc, #136]	; (8003544 <prvTraceStoreSimpleStringEventHelper+0x104>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 80034bc:	0200      	lsls	r0, r0, #8
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0a00      	lsrs	r0, r0, #8
 80034c2:	061b      	lsls	r3, r3, #24
 80034c4:	181b      	adds	r3, r3, r0
				event->base.TS = prvGetTimestamp32();
 80034c6:	9304      	str	r3, [sp, #16]
				if (userEvtChannel != NULL)
 80034c8:	2d00      	cmp	r5, #0
 80034ca:	d000      	beq.n	80034ce <prvTraceStoreSimpleStringEventHelper+0x8e>
					data32[0] = (uint32_t)userEvtChannel;
 80034cc:	9505      	str	r5, [sp, #20]
					data8[offset + i] = str[i];
 80034ce:	ad05      	add	r5, sp, #20
				for (i = 0; i < len; i++)
 80034d0:	2a00      	cmp	r2, #0
 80034d2:	d003      	beq.n	80034dc <prvTraceStoreSimpleStringEventHelper+0x9c>
					data8[offset + i] = str[i];
 80034d4:	4663      	mov	r3, ip
 80034d6:	18e8      	adds	r0, r5, r3
 80034d8:	f001 fda8 	bl	800502c <memcpy>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 80034dc:	192d      	adds	r5, r5, r4
 80034de:	2400      	movs	r4, #0
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 80034e0:	4641      	mov	r1, r8
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 80034e2:	702c      	strb	r4, [r5, #0]
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 80034e4:	aa02      	add	r2, sp, #8
 80034e6:	a803      	add	r0, sp, #12
 80034e8:	9402      	str	r4, [sp, #8]
 80034ea:	f7ff fd57 	bl	8002f9c <writeToRTT>
 80034ee:	2800      	cmp	r0, #0
 80034f0:	d110      	bne.n	8003514 <prvTraceStoreSimpleStringEventHelper+0xd4>
 80034f2:	9b00      	ldr	r3, [sp, #0]
 80034f4:	f383 8810 	msr	PRIMASK, r3
}
 80034f8:	b015      	add	sp, #84	; 0x54
 80034fa:	bcf0      	pop	{r4, r5, r6, r7}
 80034fc:	46bb      	mov	fp, r7
 80034fe:	46b2      	mov	sl, r6
 8003500:	46a9      	mov	r9, r5
 8003502:	46a0      	mov	r8, r4
 8003504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003506:	2600      	movs	r6, #0
 8003508:	0014      	movs	r4, r2
 800350a:	46b4      	mov	ip, r6
 800350c:	e7b6      	b.n	800347c <prvTraceStoreSimpleStringEventHelper+0x3c>
 800350e:	230e      	movs	r3, #14
 8003510:	2438      	movs	r4, #56	; 0x38
 8003512:	e7ac      	b.n	800346e <prvTraceStoreSimpleStringEventHelper+0x2e>
	if (RecorderEnabled == isEnabled)
 8003514:	9901      	ldr	r1, [sp, #4]
 8003516:	680b      	ldr	r3, [r1, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ea      	beq.n	80034f2 <prvTraceStoreSimpleStringEventHelper+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800351c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003520:	2201      	movs	r2, #1
 8003522:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 8003526:	600c      	str	r4, [r1, #0]
 8003528:	f383 8810 	msr	PRIMASK, r3
}
 800352c:	e7e1      	b.n	80034f2 <prvTraceStoreSimpleStringEventHelper+0xb2>
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 800352e:	2301      	movs	r3, #1
 8003530:	2404      	movs	r4, #4
 8003532:	2200      	movs	r2, #0
 8003534:	e79b      	b.n	800346e <prvTraceStoreSimpleStringEventHelper+0x2e>
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	20003240 	.word	0x20003240
 800353c:	2000324c 	.word	0x2000324c
 8003540:	e000e018 	.word	0xe000e018
 8003544:	200038a4 	.word	0x200038a4

08003548 <prvTraceStoreEvent1>:
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8003548:	2380      	movs	r3, #128	; 0x80
{
 800354a:	b5f0      	push	{r4, r5, r6, r7, lr}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 800354c:	015b      	lsls	r3, r3, #5
{
 800354e:	b085      	sub	sp, #20
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8003550:	4298      	cmp	r0, r3
 8003552:	d232      	bcs.n	80035ba <prvTraceStoreEvent1+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003554:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003558:	2501      	movs	r5, #1
 800355a:	f385 8810 	msr	PRIMASK, r5
	if (RecorderEnabled)
 800355e:	4c27      	ldr	r4, [pc, #156]	; (80035fc <prvTraceStoreEvent1+0xb4>)
 8003560:	6822      	ldr	r2, [r4, #0]
 8003562:	2a00      	cmp	r2, #0
 8003564:	d103      	bne.n	800356e <prvTraceStoreEvent1+0x26>
 8003566:	f386 8810 	msr	PRIMASK, r6
}
 800356a:	b005      	add	sp, #20
 800356c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				event->base.EventID = eventID | PARAM_COUNT(1);
 800356e:	4303      	orrs	r3, r0
 8003570:	4668      	mov	r0, sp
		eventCounter++;
 8003572:	4f23      	ldr	r7, [pc, #140]	; (8003600 <prvTraceStoreEvent1+0xb8>)
				event->base.EventID = eventID | PARAM_COUNT(1);
 8003574:	8083      	strh	r3, [r0, #4]
		eventCounter++;
 8003576:	683a      	ldr	r2, [r7, #0]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003578:	4b22      	ldr	r3, [pc, #136]	; (8003604 <prvTraceStoreEvent1+0xbc>)
		eventCounter++;
 800357a:	3201      	adds	r2, #1
 800357c:	603a      	str	r2, [r7, #0]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_1));
 800357e:	2700      	movs	r7, #0
				event->base.EventCount = (uint16_t)eventCounter;
 8003580:	80c2      	strh	r2, [r0, #6]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003582:	681a      	ldr	r2, [r3, #0]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 8003584:	4b20      	ldr	r3, [pc, #128]	; (8003608 <prvTraceStoreEvent1+0xc0>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003586:	0212      	lsls	r2, r2, #8
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	0a12      	lsrs	r2, r2, #8
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	189b      	adds	r3, r3, r2
				event->param1 = (uint32_t)param1;
 8003590:	9103      	str	r1, [sp, #12]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_1));
 8003592:	466a      	mov	r2, sp
 8003594:	210c      	movs	r1, #12
 8003596:	a801      	add	r0, sp, #4
				event->base.TS = prvGetTimestamp32();
 8003598:	9302      	str	r3, [sp, #8]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_1));
 800359a:	9700      	str	r7, [sp, #0]
 800359c:	f7ff fcfe 	bl	8002f9c <writeToRTT>
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d0e0      	beq.n	8003566 <prvTraceStoreEvent1+0x1e>
	if (RecorderEnabled == isEnabled)
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0dd      	beq.n	8003566 <prvTraceStoreEvent1+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035aa:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ae:	f385 8810 	msr	PRIMASK, r5
	RecorderEnabled = isEnabled;		
 80035b2:	6027      	str	r7, [r4, #0]
 80035b4:	f383 8810 	msr	PRIMASK, r3
}
 80035b8:	e7d5      	b.n	8003566 <prvTraceStoreEvent1+0x1e>
	if (errorCode == PSF_ERROR_NONE)
 80035ba:	4b14      	ldr	r3, [pc, #80]	; (800360c <prvTraceStoreEvent1+0xc4>)
 80035bc:	681c      	ldr	r4, [r3, #0]
 80035be:	2c00      	cmp	r4, #0
 80035c0:	d1d3      	bne.n	800356a <prvTraceStoreEvent1+0x22>
		errorCode = errCode;
 80035c2:	2501      	movs	r5, #1
		SET_ERROR_WARNING_FLAG(errorCode);
 80035c4:	4a12      	ldr	r2, [pc, #72]	; (8003610 <prvTraceStoreEvent1+0xc8>)
		errorCode = errCode;
 80035c6:	601d      	str	r5, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 80035c8:	6813      	ldr	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 80035ca:	4e12      	ldr	r6, [pc, #72]	; (8003614 <prvTraceStoreEvent1+0xcc>)
		SET_ERROR_WARNING_FLAG(errorCode);
 80035cc:	432b      	orrs	r3, r5
 80035ce:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 80035d0:	2090      	movs	r0, #144	; 0x90
 80035d2:	4a11      	ldr	r2, [pc, #68]	; (8003618 <prvTraceStoreEvent1+0xd0>)
 80035d4:	6831      	ldr	r1, [r6, #0]
 80035d6:	f7ff ff33 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 80035da:	4a10      	ldr	r2, [pc, #64]	; (800361c <prvTraceStoreEvent1+0xd4>)
 80035dc:	2090      	movs	r0, #144	; 0x90
 80035de:	6831      	ldr	r1, [r6, #0]
 80035e0:	f7ff ff2e 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <prvTraceStoreEvent1+0xb4>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	2a00      	cmp	r2, #0
 80035ea:	d0be      	beq.n	800356a <prvTraceStoreEvent1+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ec:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f0:	f385 8810 	msr	PRIMASK, r5
	RecorderEnabled = isEnabled;		
 80035f4:	601c      	str	r4, [r3, #0]
 80035f6:	f382 8810 	msr	PRIMASK, r2
}
 80035fa:	e7b6      	b.n	800356a <prvTraceStoreEvent1+0x22>
 80035fc:	20003240 	.word	0x20003240
 8003600:	2000324c 	.word	0x2000324c
 8003604:	e000e018 	.word	0xe000e018
 8003608:	200038a4 	.word	0x200038a4
 800360c:	20003248 	.word	0x20003248
 8003610:	2000322c 	.word	0x2000322c
 8003614:	20003228 	.word	0x20003228
 8003618:	08005108 	.word	0x08005108
 800361c:	080050e4 	.word	0x080050e4

08003620 <prvTraceStoreEvent2>:
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8003620:	2380      	movs	r3, #128	; 0x80
{
 8003622:	b5f0      	push	{r4, r5, r6, r7, lr}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8003624:	015b      	lsls	r3, r3, #5
{
 8003626:	b087      	sub	sp, #28
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8003628:	4298      	cmp	r0, r3
 800362a:	d235      	bcs.n	8003698 <prvTraceStoreEvent2+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003630:	2501      	movs	r5, #1
 8003632:	f385 8810 	msr	PRIMASK, r5
	if (RecorderEnabled)
 8003636:	4c29      	ldr	r4, [pc, #164]	; (80036dc <prvTraceStoreEvent2+0xbc>)
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <prvTraceStoreEvent2+0x26>
 800363e:	f386 8810 	msr	PRIMASK, r6
}
 8003642:	b007      	add	sp, #28
 8003644:	bdf0      	pop	{r4, r5, r6, r7, pc}
		eventCounter++;
 8003646:	4f26      	ldr	r7, [pc, #152]	; (80036e0 <prvTraceStoreEvent2+0xc0>)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	3301      	adds	r3, #1
 800364c:	603b      	str	r3, [r7, #0]
				event->base.EventID = eventID | PARAM_COUNT(2);
 800364e:	2780      	movs	r7, #128	; 0x80
 8003650:	01bf      	lsls	r7, r7, #6
 8003652:	4338      	orrs	r0, r7
 8003654:	466f      	mov	r7, sp
 8003656:	8138      	strh	r0, [r7, #8]
				event->base.EventCount = (uint16_t)eventCounter;
 8003658:	817b      	strh	r3, [r7, #10]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_2));
 800365a:	2700      	movs	r7, #0
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 800365c:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <prvTraceStoreEvent2+0xc4>)
 800365e:	6818      	ldr	r0, [r3, #0]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 8003660:	4b21      	ldr	r3, [pc, #132]	; (80036e8 <prvTraceStoreEvent2+0xc8>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003662:	0200      	lsls	r0, r0, #8
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	0a00      	lsrs	r0, r0, #8
 8003668:	061b      	lsls	r3, r3, #24
 800366a:	181b      	adds	r3, r3, r0
				event->param1 = (uint32_t)param1;
 800366c:	9104      	str	r1, [sp, #16]
				event->param2 = param2;
 800366e:	9205      	str	r2, [sp, #20]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_2));
 8003670:	2110      	movs	r1, #16
 8003672:	aa01      	add	r2, sp, #4
 8003674:	a802      	add	r0, sp, #8
				event->base.TS = prvGetTimestamp32();
 8003676:	9303      	str	r3, [sp, #12]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_2));
 8003678:	9701      	str	r7, [sp, #4]
 800367a:	f7ff fc8f 	bl	8002f9c <writeToRTT>
 800367e:	2800      	cmp	r0, #0
 8003680:	d0dd      	beq.n	800363e <prvTraceStoreEvent2+0x1e>
	if (RecorderEnabled == isEnabled)
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0da      	beq.n	800363e <prvTraceStoreEvent2+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003688:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368c:	f385 8810 	msr	PRIMASK, r5
	RecorderEnabled = isEnabled;		
 8003690:	6027      	str	r7, [r4, #0]
 8003692:	f383 8810 	msr	PRIMASK, r3
}
 8003696:	e7d2      	b.n	800363e <prvTraceStoreEvent2+0x1e>
	if (errorCode == PSF_ERROR_NONE)
 8003698:	4b14      	ldr	r3, [pc, #80]	; (80036ec <prvTraceStoreEvent2+0xcc>)
 800369a:	681c      	ldr	r4, [r3, #0]
 800369c:	2c00      	cmp	r4, #0
 800369e:	d1d0      	bne.n	8003642 <prvTraceStoreEvent2+0x22>
		errorCode = errCode;
 80036a0:	2501      	movs	r5, #1
		SET_ERROR_WARNING_FLAG(errorCode);
 80036a2:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <prvTraceStoreEvent2+0xd0>)
		errorCode = errCode;
 80036a4:	601d      	str	r5, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 80036a6:	6813      	ldr	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 80036a8:	4e12      	ldr	r6, [pc, #72]	; (80036f4 <prvTraceStoreEvent2+0xd4>)
		SET_ERROR_WARNING_FLAG(errorCode);
 80036aa:	432b      	orrs	r3, r5
 80036ac:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 80036ae:	2090      	movs	r0, #144	; 0x90
 80036b0:	4a11      	ldr	r2, [pc, #68]	; (80036f8 <prvTraceStoreEvent2+0xd8>)
 80036b2:	6831      	ldr	r1, [r6, #0]
 80036b4:	f7ff fec4 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 80036b8:	4a10      	ldr	r2, [pc, #64]	; (80036fc <prvTraceStoreEvent2+0xdc>)
 80036ba:	2090      	movs	r0, #144	; 0x90
 80036bc:	6831      	ldr	r1, [r6, #0]
 80036be:	f7ff febf 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 80036c2:	4b06      	ldr	r3, [pc, #24]	; (80036dc <prvTraceStoreEvent2+0xbc>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	2a00      	cmp	r2, #0
 80036c8:	d0bb      	beq.n	8003642 <prvTraceStoreEvent2+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ca:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ce:	f385 8810 	msr	PRIMASK, r5
	RecorderEnabled = isEnabled;		
 80036d2:	601c      	str	r4, [r3, #0]
 80036d4:	f382 8810 	msr	PRIMASK, r2
}
 80036d8:	e7b3      	b.n	8003642 <prvTraceStoreEvent2+0x22>
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	20003240 	.word	0x20003240
 80036e0:	2000324c 	.word	0x2000324c
 80036e4:	e000e018 	.word	0xe000e018
 80036e8:	200038a4 	.word	0x200038a4
 80036ec:	20003248 	.word	0x20003248
 80036f0:	2000322c 	.word	0x2000322c
 80036f4:	20003228 	.word	0x20003228
 80036f8:	08005108 	.word	0x08005108
 80036fc:	080050e4 	.word	0x080050e4

08003700 <prvTraceStoreEvent3>:
{
 8003700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003702:	46c6      	mov	lr, r8
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8003704:	2480      	movs	r4, #128	; 0x80
{
 8003706:	b500      	push	{lr}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8003708:	0164      	lsls	r4, r4, #5
{
 800370a:	b086      	sub	sp, #24
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 800370c:	42a0      	cmp	r0, r4
 800370e:	d23b      	bcs.n	8003788 <prvTraceStoreEvent3+0x88>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003710:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003714:	2401      	movs	r4, #1
 8003716:	46a0      	mov	r8, r4
 8003718:	f384 8810 	msr	PRIMASK, r4
	if (RecorderEnabled)
 800371c:	4c2b      	ldr	r4, [pc, #172]	; (80037cc <prvTraceStoreEvent3+0xcc>)
 800371e:	6827      	ldr	r7, [r4, #0]
 8003720:	2f00      	cmp	r7, #0
 8003722:	d105      	bne.n	8003730 <prvTraceStoreEvent3+0x30>
 8003724:	f386 8810 	msr	PRIMASK, r6
}
 8003728:	b006      	add	sp, #24
 800372a:	bc80      	pop	{r7}
 800372c:	46b8      	mov	r8, r7
 800372e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		eventCounter++;
 8003730:	4f27      	ldr	r7, [pc, #156]	; (80037d0 <prvTraceStoreEvent3+0xd0>)
 8003732:	46bc      	mov	ip, r7
 8003734:	4665      	mov	r5, ip
 8003736:	683f      	ldr	r7, [r7, #0]
 8003738:	3701      	adds	r7, #1
 800373a:	602f      	str	r7, [r5, #0]
				event->base.EventID = eventID | PARAM_COUNT(3);
 800373c:	25c0      	movs	r5, #192	; 0xc0
 800373e:	01ad      	lsls	r5, r5, #6
 8003740:	4328      	orrs	r0, r5
 8003742:	466d      	mov	r5, sp
 8003744:	80a8      	strh	r0, [r5, #4]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003746:	4823      	ldr	r0, [pc, #140]	; (80037d4 <prvTraceStoreEvent3+0xd4>)
				event->base.EventCount = (uint16_t)eventCounter;
 8003748:	80ef      	strh	r7, [r5, #6]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 800374a:	6807      	ldr	r7, [r0, #0]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 800374c:	4822      	ldr	r0, [pc, #136]	; (80037d8 <prvTraceStoreEvent3+0xd8>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 800374e:	023f      	lsls	r7, r7, #8
 8003750:	6800      	ldr	r0, [r0, #0]
 8003752:	0a3f      	lsrs	r7, r7, #8
 8003754:	0600      	lsls	r0, r0, #24
 8003756:	19c0      	adds	r0, r0, r7
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_3));
 8003758:	2700      	movs	r7, #0
				event->base.TS = prvGetTimestamp32();
 800375a:	9002      	str	r0, [sp, #8]
				event->param1 = (uint32_t)param1;
 800375c:	9103      	str	r1, [sp, #12]
				event->param2 = param2;
 800375e:	9204      	str	r2, [sp, #16]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_3));
 8003760:	2114      	movs	r1, #20
 8003762:	466a      	mov	r2, sp
 8003764:	a801      	add	r0, sp, #4
				event->param3 = param3;
 8003766:	9305      	str	r3, [sp, #20]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_3));
 8003768:	9700      	str	r7, [sp, #0]
 800376a:	f7ff fc17 	bl	8002f9c <writeToRTT>
 800376e:	2800      	cmp	r0, #0
 8003770:	d0d8      	beq.n	8003724 <prvTraceStoreEvent3+0x24>
	if (RecorderEnabled == isEnabled)
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0d5      	beq.n	8003724 <prvTraceStoreEvent3+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003778:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377c:	f388 8810 	msr	PRIMASK, r8
	RecorderEnabled = isEnabled;		
 8003780:	6027      	str	r7, [r4, #0]
 8003782:	f383 8810 	msr	PRIMASK, r3
}
 8003786:	e7cd      	b.n	8003724 <prvTraceStoreEvent3+0x24>
	if (errorCode == PSF_ERROR_NONE)
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <prvTraceStoreEvent3+0xdc>)
 800378a:	681c      	ldr	r4, [r3, #0]
 800378c:	2c00      	cmp	r4, #0
 800378e:	d1cb      	bne.n	8003728 <prvTraceStoreEvent3+0x28>
		errorCode = errCode;
 8003790:	2501      	movs	r5, #1
		SET_ERROR_WARNING_FLAG(errorCode);
 8003792:	4a13      	ldr	r2, [pc, #76]	; (80037e0 <prvTraceStoreEvent3+0xe0>)
		errorCode = errCode;
 8003794:	601d      	str	r5, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8003796:	6813      	ldr	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003798:	4e12      	ldr	r6, [pc, #72]	; (80037e4 <prvTraceStoreEvent3+0xe4>)
		SET_ERROR_WARNING_FLAG(errorCode);
 800379a:	432b      	orrs	r3, r5
 800379c:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 800379e:	2090      	movs	r0, #144	; 0x90
 80037a0:	4a11      	ldr	r2, [pc, #68]	; (80037e8 <prvTraceStoreEvent3+0xe8>)
 80037a2:	6831      	ldr	r1, [r6, #0]
 80037a4:	f7ff fe4c 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 80037a8:	4a10      	ldr	r2, [pc, #64]	; (80037ec <prvTraceStoreEvent3+0xec>)
 80037aa:	2090      	movs	r0, #144	; 0x90
 80037ac:	6831      	ldr	r1, [r6, #0]
 80037ae:	f7ff fe47 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <prvTraceStoreEvent3+0xcc>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	2a00      	cmp	r2, #0
 80037b8:	d0b6      	beq.n	8003728 <prvTraceStoreEvent3+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ba:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037be:	f385 8810 	msr	PRIMASK, r5
	RecorderEnabled = isEnabled;		
 80037c2:	601c      	str	r4, [r3, #0]
 80037c4:	f382 8810 	msr	PRIMASK, r2
}
 80037c8:	e7ae      	b.n	8003728 <prvTraceStoreEvent3+0x28>
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	20003240 	.word	0x20003240
 80037d0:	2000324c 	.word	0x2000324c
 80037d4:	e000e018 	.word	0xe000e018
 80037d8:	200038a4 	.word	0x200038a4
 80037dc:	20003248 	.word	0x20003248
 80037e0:	2000322c 	.word	0x2000322c
 80037e4:	20003228 	.word	0x20003228
 80037e8:	08005108 	.word	0x08005108
 80037ec:	080050e4 	.word	0x080050e4

080037f0 <prvTraceSaveObjectSymbol>:
{
 80037f0:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f6:	2301      	movs	r3, #1
 80037f8:	f383 8810 	msr	PRIMASK, r3
	if (firstFreeSymbolTableIndex < SYMBOL_TABLE_BUFFER_SIZE)
 80037fc:	23a0      	movs	r3, #160	; 0xa0
 80037fe:	4e1c      	ldr	r6, [pc, #112]	; (8003870 <prvTraceSaveObjectSymbol+0x80>)
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	6835      	ldr	r5, [r6, #0]
 8003804:	429d      	cmp	r5, r3
 8003806:	d226      	bcs.n	8003856 <prvTraceSaveObjectSymbol+0x66>
		symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[firstFreeSymbolTableIndex / sizeof(uint32_t)] = (uint32_t)address;
 8003808:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <prvTraceSaveObjectSymbol+0x84>)
 800380a:	08aa      	lsrs	r2, r5, #2
 800380c:	0092      	lsls	r2, r2, #2
 800380e:	50d0      	str	r0, [r2, r3]
		ptrSymbol = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[firstFreeSymbolTableIndex + sizeof(uint32_t)];
 8003810:	1d28      	adds	r0, r5, #4
 8003812:	18c0      	adds	r0, r0, r3
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 8003814:	2300      	movs	r3, #0
 8003816:	e002      	b.n	800381e <prvTraceSaveObjectSymbol+0x2e>
 8003818:	3301      	adds	r3, #1
 800381a:	2b19      	cmp	r3, #25
 800381c:	d022      	beq.n	8003864 <prvTraceSaveObjectSymbol+0x74>
			ptrSymbol[i] = (uint8_t)name[i];	/* We do this first to ensure we also get the 0 termination, if there is one */
 800381e:	5cca      	ldrb	r2, [r1, r3]
 8003820:	18cc      	adds	r4, r1, r3
 8003822:	54c2      	strb	r2, [r0, r3]
			if (name[i] == 0)
 8003824:	2a00      	cmp	r2, #0
 8003826:	d1f7      	bne.n	8003818 <prvTraceSaveObjectSymbol+0x28>
		while ((name[i] != 0) && i < 128)
 8003828:	7822      	ldrb	r2, [r4, #0]
 800382a:	2a00      	cmp	r2, #0
 800382c:	d10a      	bne.n	8003844 <prvTraceSaveObjectSymbol+0x54>
		if (i > LongestSymbolName)
 800382e:	4a12      	ldr	r2, [pc, #72]	; (8003878 <prvTraceSaveObjectSymbol+0x88>)
 8003830:	6811      	ldr	r1, [r2, #0]
 8003832:	428b      	cmp	r3, r1
 8003834:	d814      	bhi.n	8003860 <prvTraceSaveObjectSymbol+0x70>
		firstFreeSymbolTableIndex += SYMBOL_TABLE_SLOT_SIZE;
 8003836:	3520      	adds	r5, #32
 8003838:	6035      	str	r5, [r6, #0]
 800383a:	f38c 8810 	msr	PRIMASK, ip
}
 800383e:	bd70      	pop	{r4, r5, r6, pc}
		while ((name[i] != 0) && i < 128)
 8003840:	2b80      	cmp	r3, #128	; 0x80
 8003842:	d0f4      	beq.n	800382e <prvTraceSaveObjectSymbol+0x3e>
			i++;
 8003844:	3301      	adds	r3, #1
		while ((name[i] != 0) && i < 128)
 8003846:	5cca      	ldrb	r2, [r1, r3]
 8003848:	2a00      	cmp	r2, #0
 800384a:	d1f9      	bne.n	8003840 <prvTraceSaveObjectSymbol+0x50>
		if (i > LongestSymbolName)
 800384c:	4a0a      	ldr	r2, [pc, #40]	; (8003878 <prvTraceSaveObjectSymbol+0x88>)
 800384e:	6811      	ldr	r1, [r2, #0]
 8003850:	428b      	cmp	r3, r1
 8003852:	d9f0      	bls.n	8003836 <prvTraceSaveObjectSymbol+0x46>
 8003854:	e004      	b.n	8003860 <prvTraceSaveObjectSymbol+0x70>
		NoRoomForSymbol++;
 8003856:	4a09      	ldr	r2, [pc, #36]	; (800387c <prvTraceSaveObjectSymbol+0x8c>)
 8003858:	6813      	ldr	r3, [r2, #0]
 800385a:	3301      	adds	r3, #1
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e7ec      	b.n	800383a <prvTraceSaveObjectSymbol+0x4a>
			LongestSymbolName = i;
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e7e8      	b.n	8003836 <prvTraceSaveObjectSymbol+0x46>
		while ((name[i] != 0) && i < 128)
 8003864:	000c      	movs	r4, r1
 8003866:	7e62      	ldrb	r2, [r4, #25]
 8003868:	3419      	adds	r4, #25
 800386a:	2a00      	cmp	r2, #0
 800386c:	d1ea      	bne.n	8003844 <prvTraceSaveObjectSymbol+0x54>
 800386e:	e7de      	b.n	800382e <prvTraceSaveObjectSymbol+0x3e>
 8003870:	20003254 	.word	0x20003254
 8003874:	20003398 	.word	0x20003398
 8003878:	20003230 	.word	0x20003230
 800387c:	2000323c 	.word	0x2000323c

08003880 <xTraceRegisterString>:
{
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003884:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003888:	2301      	movs	r3, #1
 800388a:	f383 8810 	msr	PRIMASK, r3
	if (firstFreeSymbolTableIndex < SYMBOL_TABLE_BUFFER_SIZE)
 800388e:	22a0      	movs	r2, #160	; 0xa0
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <xTraceRegisterString+0x3c>)
	void* retVal = 0;
 8003892:	2400      	movs	r4, #0
	if (firstFreeSymbolTableIndex < SYMBOL_TABLE_BUFFER_SIZE)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	00d2      	lsls	r2, r2, #3
 8003898:	4293      	cmp	r3, r2
 800389a:	d205      	bcs.n	80038a8 <xTraceRegisterString+0x28>
		retVal = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[firstFreeSymbolTableIndex];
 800389c:	4c08      	ldr	r4, [pc, #32]	; (80038c0 <xTraceRegisterString+0x40>)
		prvTraceSaveObjectSymbol(retVal, name);
 800389e:	0001      	movs	r1, r0
		retVal = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[firstFreeSymbolTableIndex];
 80038a0:	191c      	adds	r4, r3, r4
		prvTraceSaveObjectSymbol(retVal, name);
 80038a2:	0020      	movs	r0, r4
 80038a4:	f7ff ffa4 	bl	80037f0 <prvTraceSaveObjectSymbol>
 80038a8:	f386 8810 	msr	PRIMASK, r6
	prvTraceStoreStringEvent(1, eventID, (const char*)name, str);
 80038ac:	002a      	movs	r2, r5
 80038ae:	0023      	movs	r3, r4
 80038b0:	2103      	movs	r1, #3
 80038b2:	2001      	movs	r0, #1
 80038b4:	f7ff fd1c 	bl	80032f0 <prvTraceStoreStringEvent.constprop.1>
}
 80038b8:	0020      	movs	r0, r4
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	20003254 	.word	0x20003254
 80038c0:	20003398 	.word	0x20003398

080038c4 <prvTraceSaveObjectData>:
{
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c6:	46c6      	mov	lr, r8
 80038c8:	468c      	mov	ip, r1
 80038ca:	b500      	push	{lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038cc:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d0:	2301      	movs	r3, #1
 80038d2:	f383 8810 	msr	PRIMASK, r3
	foundSlot = firstFreeObjectDataTableIndex;
 80038d6:	4918      	ldr	r1, [pc, #96]	; (8003938 <prvTraceSaveObjectData+0x74>)
 80038d8:	680e      	ldr	r6, [r1, #0]
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 80038da:	2e00      	cmp	r6, #0
 80038dc:	d021      	beq.n	8003922 <prvTraceSaveObjectData+0x5e>
 80038de:	2300      	movs	r3, #0
 80038e0:	4f16      	ldr	r7, [pc, #88]	; (800393c <prvTraceSaveObjectData+0x78>)
 80038e2:	e002      	b.n	80038ea <prvTraceSaveObjectData+0x26>
 80038e4:	3308      	adds	r3, #8
 80038e6:	429e      	cmp	r6, r3
 80038e8:	d912      	bls.n	8003910 <prvTraceSaveObjectData+0x4c>
		ptr = &objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i / sizeof(uint32_t)];
 80038ea:	089a      	lsrs	r2, r3, #2
		if (*ptr == (uint32_t)address)
 80038ec:	0094      	lsls	r4, r2, #2
 80038ee:	593d      	ldr	r5, [r7, r4]
 80038f0:	42a8      	cmp	r0, r5
 80038f2:	d1f7      	bne.n	80038e4 <prvTraceSaveObjectData+0x20>
	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
 80038f4:	21a0      	movs	r1, #160	; 0xa0
 80038f6:	0049      	lsls	r1, r1, #1
 80038f8:	428b      	cmp	r3, r1
 80038fa:	d20d      	bcs.n	8003918 <prvTraceSaveObjectData+0x54>
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 80038fc:	4663      	mov	r3, ip
 80038fe:	3201      	adds	r2, #1
 8003900:	0092      	lsls	r2, r2, #2
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
 8003902:	5138      	str	r0, [r7, r4]
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 8003904:	50bb      	str	r3, [r7, r2]
 8003906:	f388 8810 	msr	PRIMASK, r8
}
 800390a:	bc80      	pop	{r7}
 800390c:	46b8      	mov	r8, r7
 800390e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
 8003910:	23a0      	movs	r3, #160	; 0xa0
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	429e      	cmp	r6, r3
 8003916:	d305      	bcc.n	8003924 <prvTraceSaveObjectData+0x60>
		NoRoomForObjectData++;
 8003918:	4a09      	ldr	r2, [pc, #36]	; (8003940 <prvTraceSaveObjectData+0x7c>)
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	e7f1      	b.n	8003906 <prvTraceSaveObjectData+0x42>
 8003922:	4f06      	ldr	r7, [pc, #24]	; (800393c <prvTraceSaveObjectData+0x78>)
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
 8003924:	08b3      	lsrs	r3, r6, #2
 8003926:	009a      	lsls	r2, r3, #2
 8003928:	50b8      	str	r0, [r7, r2]
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 800392a:	4662      	mov	r2, ip
 800392c:	3301      	adds	r3, #1
 800392e:	009b      	lsls	r3, r3, #2
			firstFreeObjectDataTableIndex += OBJECT_DATA_SLOT_SIZE;
 8003930:	3608      	adds	r6, #8
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 8003932:	50fa      	str	r2, [r7, r3]
			firstFreeObjectDataTableIndex += OBJECT_DATA_SLOT_SIZE;
 8003934:	600e      	str	r6, [r1, #0]
 8003936:	e7e6      	b.n	8003906 <prvTraceSaveObjectData+0x42>
 8003938:	20003250 	.word	0x20003250
 800393c:	20003258 	.word	0x20003258
 8003940:	20003238 	.word	0x20003238

08003944 <prvIsValidCommand>:
{
 8003944:	b530      	push	{r4, r5, lr}
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8003946:	7804      	ldrb	r4, [r0, #0]
												cmd->param1 +
 8003948:	7842      	ldrb	r2, [r0, #1]
												cmd->param2 +
 800394a:	7881      	ldrb	r1, [r0, #2]
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 800394c:	1912      	adds	r2, r2, r4
												cmd->param1 +
 800394e:	1889      	adds	r1, r1, r2
												cmd->param3 +
 8003950:	78c2      	ldrb	r2, [r0, #3]
	if (cmd->checksumMSB != (unsigned char)(checksum >> 8))
 8003952:	79c5      	ldrb	r5, [r0, #7]
												cmd->param2 +
 8003954:	1852      	adds	r2, r2, r1
												cmd->param4 +
 8003956:	7901      	ldrb	r1, [r0, #4]
{
 8003958:	0003      	movs	r3, r0
												cmd->param3 +
 800395a:	1889      	adds	r1, r1, r2
												cmd->param5));
 800395c:	7942      	ldrb	r2, [r0, #5]
		return 0;
 800395e:	2000      	movs	r0, #0
												cmd->param4 +
 8003960:	1852      	adds	r2, r2, r1
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8003962:	43d2      	mvns	r2, r2
 8003964:	b292      	uxth	r2, r2
	if (cmd->checksumMSB != (unsigned char)(checksum >> 8))
 8003966:	0a11      	lsrs	r1, r2, #8
 8003968:	428d      	cmp	r5, r1
 800396a:	d103      	bne.n	8003974 <prvIsValidCommand+0x30>
	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFF))
 800396c:	799b      	ldrb	r3, [r3, #6]
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	4293      	cmp	r3, r2
 8003972:	d000      	beq.n	8003976 <prvIsValidCommand+0x32>
}
 8003974:	bd30      	pop	{r4, r5, pc}
	if (cmd->cmdCode > CMD_LAST_COMMAND)
 8003976:	2301      	movs	r3, #1
 8003978:	42a3      	cmp	r3, r4
 800397a:	4140      	adcs	r0, r0
 800397c:	e7fa      	b.n	8003974 <prvIsValidCommand+0x30>
 800397e:	46c0      	nop			; (mov r8, r8)

08003980 <prvProcessCommand>:
{
 8003980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003982:	46de      	mov	lr, fp
 8003984:	4657      	mov	r7, sl
 8003986:	464e      	mov	r6, r9
 8003988:	4645      	mov	r5, r8
 800398a:	b5e0      	push	{r5, r6, r7, lr}
  	switch(cmd->cmdCode)
 800398c:	7803      	ldrb	r3, [r0, #0]
{
 800398e:	b091      	sub	sp, #68	; 0x44
  	switch(cmd->cmdCode)
 8003990:	2b01      	cmp	r3, #1
 8003992:	d006      	beq.n	80039a2 <prvProcessCommand+0x22>
}
 8003994:	b011      	add	sp, #68	; 0x44
 8003996:	bcf0      	pop	{r4, r5, r6, r7}
 8003998:	46bb      	mov	fp, r7
 800399a:	46b2      	mov	sl, r6
 800399c:	46a9      	mov	r9, r5
 800399e:	46a0      	mov	r8, r4
 80039a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (RecorderEnabled == isEnabled)
 80039a2:	4ac5      	ldr	r2, [pc, #788]	; (8003cb8 <prvProcessCommand+0x338>)
		  	prvSetRecorderEnabled(cmd->param1);
 80039a4:	7841      	ldrb	r1, [r0, #1]
	if (RecorderEnabled == isEnabled)
 80039a6:	4691      	mov	r9, r2
 80039a8:	6812      	ldr	r2, [r2, #0]
		  	prvSetRecorderEnabled(cmd->param1);
 80039aa:	9102      	str	r1, [sp, #8]
	if (RecorderEnabled == isEnabled)
 80039ac:	4291      	cmp	r1, r2
 80039ae:	d0f1      	beq.n	8003994 <prvProcessCommand+0x14>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039b0:	f3ef 8210 	mrs	r2, PRIMASK
 80039b4:	9203      	str	r2, [sp, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b6:	f383 8810 	msr	PRIMASK, r3
	if (isEnabled)
 80039ba:	2900      	cmp	r1, #0
 80039bc:	d106      	bne.n	80039cc <prvProcessCommand+0x4c>
	RecorderEnabled = isEnabled;		
 80039be:	464b      	mov	r3, r9
 80039c0:	9a02      	ldr	r2, [sp, #8]
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	9b03      	ldr	r3, [sp, #12]
 80039c6:	f383 8810 	msr	PRIMASK, r3
}
 80039ca:	e7e3      	b.n	8003994 <prvProcessCommand+0x14>
     	eventCounter = 0;
 80039cc:	2100      	movs	r1, #0
        ISR_stack_index = -1;
 80039ce:	20ff      	movs	r0, #255	; 0xff
     	eventCounter = 0;
 80039d0:	4aba      	ldr	r2, [pc, #744]	; (8003cbc <prvProcessCommand+0x33c>)
 80039d2:	6011      	str	r1, [r2, #0]
 80039d4:	9204      	str	r2, [sp, #16]
        ISR_stack_index = -1;
 80039d6:	4aba      	ldr	r2, [pc, #744]	; (8003cc0 <prvProcessCommand+0x340>)
 80039d8:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039da:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039de:	f383 8810 	msr	PRIMASK, r3
		header->psf = PSFEndianessIdentifier;
 80039e2:	4bb8      	ldr	r3, [pc, #736]	; (8003cc4 <prvProcessCommand+0x344>)
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 80039e4:	2600      	movs	r6, #0
		header->psf = PSFEndianessIdentifier;
 80039e6:	9308      	str	r3, [sp, #32]
		header->version = FormatVersion;
 80039e8:	4bb7      	ldr	r3, [pc, #732]	; (8003cc8 <prvProcessCommand+0x348>)
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 80039ea:	2418      	movs	r4, #24
		header->version = FormatVersion;
 80039ec:	9309      	str	r3, [sp, #36]	; 0x24
		header->heapCounter = trcHeapCounter;
 80039ee:	4bb7      	ldr	r3, [pc, #732]	; (8003ccc <prvProcessCommand+0x34c>)
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 80039f0:	2700      	movs	r7, #0
		header->heapCounter = trcHeapCounter;
 80039f2:	681b      	ldr	r3, [r3, #0]
		header->options = 0;
 80039f4:	910a      	str	r1, [sp, #40]	; 0x28
		header->heapCounter = trcHeapCounter;
 80039f6:	930b      	str	r3, [sp, #44]	; 0x2c
		header->symbolSize = SYMBOL_TABLE_SLOT_SIZE;
 80039f8:	4bb5      	ldr	r3, [pc, #724]	; (8003cd0 <prvProcessCommand+0x350>)
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 80039fa:	ad08      	add	r5, sp, #32
		header->symbolSize = SYMBOL_TABLE_SLOT_SIZE;
 80039fc:	930c      	str	r3, [sp, #48]	; 0x30
 80039fe:	4bb5      	ldr	r3, [pc, #724]	; (8003cd4 <prvProcessCommand+0x354>)
 8003a00:	930d      	str	r3, [sp, #52]	; 0x34
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 8003a02:	e004      	b.n	8003a0e <prvProcessCommand+0x8e>
 8003a04:	9b07      	ldr	r3, [sp, #28]
 8003a06:	3601      	adds	r6, #1
 8003a08:	18ed      	adds	r5, r5, r3
 8003a0a:	1ae4      	subs	r4, r4, r3
 8003a0c:	d02a      	beq.n	8003a64 <prvProcessCommand+0xe4>
 8003a0e:	0021      	movs	r1, r4
 8003a10:	0028      	movs	r0, r5
 8003a12:	aa07      	add	r2, sp, #28
 8003a14:	9707      	str	r7, [sp, #28]
 8003a16:	f7ff fac1 	bl	8002f9c <writeToRTT>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d0f2      	beq.n	8003a04 <prvProcessCommand+0x84>
	if (errorCode == PSF_ERROR_NONE)
 8003a1e:	4bae      	ldr	r3, [pc, #696]	; (8003cd8 <prvProcessCommand+0x358>)
 8003a20:	681c      	ldr	r4, [r3, #0]
 8003a22:	2c00      	cmp	r4, #0
 8003a24:	d11e      	bne.n	8003a64 <prvProcessCommand+0xe4>
		errorCode = errCode;
 8003a26:	2206      	movs	r2, #6
		SET_ERROR_WARNING_FLAG(errorCode);
 8003a28:	2120      	movs	r1, #32
		errorCode = errCode;
 8003a2a:	601a      	str	r2, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8003a2c:	4aab      	ldr	r2, [pc, #684]	; (8003cdc <prvProcessCommand+0x35c>)
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003a2e:	4dac      	ldr	r5, [pc, #688]	; (8003ce0 <prvProcessCommand+0x360>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8003a30:	6813      	ldr	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003a32:	2090      	movs	r0, #144	; 0x90
		SET_ERROR_WARNING_FLAG(errorCode);
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003a38:	6829      	ldr	r1, [r5, #0]
 8003a3a:	4aaa      	ldr	r2, [pc, #680]	; (8003ce4 <prvProcessCommand+0x364>)
 8003a3c:	f7ff fd00 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8003a40:	2090      	movs	r0, #144	; 0x90
 8003a42:	4aa9      	ldr	r2, [pc, #676]	; (8003ce8 <prvProcessCommand+0x368>)
 8003a44:	6829      	ldr	r1, [r5, #0]
 8003a46:	f7ff fcfb 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <prvProcessCommand+0xe4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a52:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a56:	2201      	movs	r2, #1
 8003a58:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 8003a5c:	464a      	mov	r2, r9
 8003a5e:	6014      	str	r4, [r2, #0]
 8003a60:	f383 8810 	msr	PRIMASK, r3
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 8003a64:	2e01      	cmp	r6, #1
 8003a66:	d900      	bls.n	8003a6a <prvProcessCommand+0xea>
 8003a68:	e222      	b.n	8003eb0 <prvProcessCommand+0x530>
 8003a6a:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a72:	9305      	str	r3, [sp, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a74:	2301      	movs	r3, #1
 8003a76:	f383 8810 	msr	PRIMASK, r3
	if (errorCode == PSF_ERROR_NONE)
 8003a7a:	4b97      	ldr	r3, [pc, #604]	; (8003cd8 <prvProcessCommand+0x358>)
 8003a7c:	4f9b      	ldr	r7, [pc, #620]	; (8003cec <prvProcessCommand+0x36c>)
 8003a7e:	469a      	mov	sl, r3
		SET_ERROR_WARNING_FLAG(errorCode);
 8003a80:	4b96      	ldr	r3, [pc, #600]	; (8003cdc <prvProcessCommand+0x35c>)
 8003a82:	469b      	mov	fp, r3
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003a84:	4b97      	ldr	r3, [pc, #604]	; (8003ce4 <prvProcessCommand+0x364>)
 8003a86:	9301      	str	r3, [sp, #4]
            	data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	687e      	ldr	r6, [r7, #4]
 8003a8c:	469c      	mov	ip, r3
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	68bd      	ldr	r5, [r7, #8]
 8003a92:	4698      	mov	r8, r3
 8003a94:	4663      	mov	r3, ip
 8003a96:	68fc      	ldr	r4, [r7, #12]
 8003a98:	6938      	ldr	r0, [r7, #16]
 8003a9a:	6979      	ldr	r1, [r7, #20]
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	9308      	str	r3, [sp, #32]
 8003aa0:	4643      	mov	r3, r8
 8003aa2:	930f      	str	r3, [sp, #60]	; 0x3c
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, SYMBOL_TABLE_SLOT_SIZE);						
 8003aa4:	2300      	movs	r3, #0
            	data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 8003aa6:	9609      	str	r6, [sp, #36]	; 0x24
 8003aa8:	950a      	str	r5, [sp, #40]	; 0x28
 8003aaa:	940b      	str	r4, [sp, #44]	; 0x2c
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, SYMBOL_TABLE_SLOT_SIZE);						
 8003aac:	2600      	movs	r6, #0
 8003aae:	2420      	movs	r4, #32
 8003ab0:	4698      	mov	r8, r3
            	data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 8003ab2:	900c      	str	r0, [sp, #48]	; 0x30
 8003ab4:	910d      	str	r1, [sp, #52]	; 0x34
 8003ab6:	920e      	str	r2, [sp, #56]	; 0x38
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, SYMBOL_TABLE_SLOT_SIZE);						
 8003ab8:	ad08      	add	r5, sp, #32
 8003aba:	e004      	b.n	8003ac6 <prvProcessCommand+0x146>
 8003abc:	9b07      	ldr	r3, [sp, #28]
 8003abe:	3601      	adds	r6, #1
 8003ac0:	18ed      	adds	r5, r5, r3
 8003ac2:	1ae4      	subs	r4, r4, r3
 8003ac4:	d02d      	beq.n	8003b22 <prvProcessCommand+0x1a2>
 8003ac6:	4643      	mov	r3, r8
 8003ac8:	0021      	movs	r1, r4
 8003aca:	0028      	movs	r0, r5
 8003acc:	aa07      	add	r2, sp, #28
 8003ace:	9307      	str	r3, [sp, #28]
 8003ad0:	f7ff fa64 	bl	8002f9c <writeToRTT>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d0f1      	beq.n	8003abc <prvProcessCommand+0x13c>
	if (errorCode == PSF_ERROR_NONE)
 8003ad8:	4653      	mov	r3, sl
 8003ada:	681c      	ldr	r4, [r3, #0]
 8003adc:	2c00      	cmp	r4, #0
 8003ade:	d120      	bne.n	8003b22 <prvProcessCommand+0x1a2>
		errorCode = errCode;
 8003ae0:	2306      	movs	r3, #6
 8003ae2:	4652      	mov	r2, sl
 8003ae4:	6013      	str	r3, [r2, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8003ae6:	465b      	mov	r3, fp
 8003ae8:	2220      	movs	r2, #32
 8003aea:	681b      	ldr	r3, [r3, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003aec:	4d7c      	ldr	r5, [pc, #496]	; (8003ce0 <prvProcessCommand+0x360>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8003aee:	4313      	orrs	r3, r2
 8003af0:	465a      	mov	r2, fp
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003af2:	2090      	movs	r0, #144	; 0x90
		SET_ERROR_WARNING_FLAG(errorCode);
 8003af4:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003af6:	6829      	ldr	r1, [r5, #0]
 8003af8:	9a01      	ldr	r2, [sp, #4]
 8003afa:	f7ff fca1 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8003afe:	2090      	movs	r0, #144	; 0x90
 8003b00:	4a79      	ldr	r2, [pc, #484]	; (8003ce8 <prvProcessCommand+0x368>)
 8003b02:	6829      	ldr	r1, [r5, #0]
 8003b04:	f7ff fc9c 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 8003b08:	464b      	mov	r3, r9
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <prvProcessCommand+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b10:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b14:	2201      	movs	r2, #1
 8003b16:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 8003b1a:	464a      	mov	r2, r9
 8003b1c:	6014      	str	r4, [r2, #0]
 8003b1e:	f383 8810 	msr	PRIMASK, r3
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, SYMBOL_TABLE_SLOT_SIZE);						
 8003b22:	2e01      	cmp	r6, #1
 8003b24:	d900      	bls.n	8003b28 <prvProcessCommand+0x1a8>
 8003b26:	e1a0      	b.n	8003e6a <prvProcessCommand+0x4ea>
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
 8003b28:	4b71      	ldr	r3, [pc, #452]	; (8003cf0 <prvProcessCommand+0x370>)
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	42bb      	cmp	r3, r7
 8003b2e:	d1ab      	bne.n	8003a88 <prvProcessCommand+0x108>
 8003b30:	9b05      	ldr	r3, [sp, #20]
 8003b32:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b36:	f3ef 8310 	mrs	r3, PRIMASK
 8003b3a:	9305      	str	r3, [sp, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f383 8810 	msr	PRIMASK, r3
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 8003b42:	4b6c      	ldr	r3, [pc, #432]	; (8003cf4 <prvProcessCommand+0x374>)
 8003b44:	4698      	mov	r8, r3
	if (errorCode == PSF_ERROR_NONE)
 8003b46:	4b64      	ldr	r3, [pc, #400]	; (8003cd8 <prvProcessCommand+0x358>)
 8003b48:	469a      	mov	sl, r3
		SET_ERROR_WARNING_FLAG(errorCode);
 8003b4a:	4b64      	ldr	r3, [pc, #400]	; (8003cdc <prvProcessCommand+0x35c>)
 8003b4c:	469b      	mov	fp, r3
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003b4e:	4b65      	ldr	r3, [pc, #404]	; (8003ce4 <prvProcessCommand+0x364>)
 8003b50:	9301      	str	r3, [sp, #4]
            	data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 8003b52:	4643      	mov	r3, r8
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, OBJECT_DATA_SLOT_SIZE);			
 8003b54:	2600      	movs	r6, #0
            	data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 8003b56:	cb0c      	ldmia	r3, {r2, r3}
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, OBJECT_DATA_SLOT_SIZE);			
 8003b58:	2408      	movs	r4, #8
 8003b5a:	2700      	movs	r7, #0
            	data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 8003b5c:	9208      	str	r2, [sp, #32]
 8003b5e:	9309      	str	r3, [sp, #36]	; 0x24
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, OBJECT_DATA_SLOT_SIZE);			
 8003b60:	ad08      	add	r5, sp, #32
 8003b62:	e004      	b.n	8003b6e <prvProcessCommand+0x1ee>
 8003b64:	9b07      	ldr	r3, [sp, #28]
 8003b66:	3601      	adds	r6, #1
 8003b68:	18ed      	adds	r5, r5, r3
 8003b6a:	1ae4      	subs	r4, r4, r3
 8003b6c:	d02c      	beq.n	8003bc8 <prvProcessCommand+0x248>
 8003b6e:	0021      	movs	r1, r4
 8003b70:	0028      	movs	r0, r5
 8003b72:	aa07      	add	r2, sp, #28
 8003b74:	9707      	str	r7, [sp, #28]
 8003b76:	f7ff fa11 	bl	8002f9c <writeToRTT>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	d0f2      	beq.n	8003b64 <prvProcessCommand+0x1e4>
	if (errorCode == PSF_ERROR_NONE)
 8003b7e:	4653      	mov	r3, sl
 8003b80:	681c      	ldr	r4, [r3, #0]
 8003b82:	2c00      	cmp	r4, #0
 8003b84:	d120      	bne.n	8003bc8 <prvProcessCommand+0x248>
		errorCode = errCode;
 8003b86:	2306      	movs	r3, #6
 8003b88:	4652      	mov	r2, sl
 8003b8a:	6013      	str	r3, [r2, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8003b8c:	465b      	mov	r3, fp
 8003b8e:	2220      	movs	r2, #32
 8003b90:	681b      	ldr	r3, [r3, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003b92:	4d53      	ldr	r5, [pc, #332]	; (8003ce0 <prvProcessCommand+0x360>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8003b94:	4313      	orrs	r3, r2
 8003b96:	465a      	mov	r2, fp
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003b98:	2090      	movs	r0, #144	; 0x90
		SET_ERROR_WARNING_FLAG(errorCode);
 8003b9a:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003b9c:	6829      	ldr	r1, [r5, #0]
 8003b9e:	9a01      	ldr	r2, [sp, #4]
 8003ba0:	f7ff fc4e 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8003ba4:	2090      	movs	r0, #144	; 0x90
 8003ba6:	4a50      	ldr	r2, [pc, #320]	; (8003ce8 <prvProcessCommand+0x368>)
 8003ba8:	6829      	ldr	r1, [r5, #0]
 8003baa:	f7ff fc49 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 8003bae:	464b      	mov	r3, r9
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <prvProcessCommand+0x248>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 8003bc0:	464a      	mov	r2, r9
 8003bc2:	6014      	str	r4, [r2, #0]
 8003bc4:	f383 8810 	msr	PRIMASK, r3
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, OBJECT_DATA_SLOT_SIZE);			
 8003bc8:	2e01      	cmp	r6, #1
 8003bca:	d900      	bls.n	8003bce <prvProcessCommand+0x24e>
 8003bcc:	e13d      	b.n	8003e4a <prvProcessCommand+0x4ca>
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 8003bce:	2308      	movs	r3, #8
 8003bd0:	469c      	mov	ip, r3
 8003bd2:	4b49      	ldr	r3, [pc, #292]	; (8003cf8 <prvProcessCommand+0x378>)
 8003bd4:	44e0      	add	r8, ip
 8003bd6:	4598      	cmp	r8, r3
 8003bd8:	d1bb      	bne.n	8003b52 <prvProcessCommand+0x1d2>
 8003bda:	9b05      	ldr	r3, [sp, #20]
 8003bdc:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be0:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be4:	2301      	movs	r3, #1
 8003be6:	f383 8810 	msr	PRIMASK, r3
		memcpy(extinfo, &PSFExtensionInfo, sizeof(PSFExtensionInfoType));
 8003bea:	4b44      	ldr	r3, [pc, #272]	; (8003cfc <prvProcessCommand+0x37c>)
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(extinfo, sizeof(PSFExtensionInfoType));		
 8003bec:	2600      	movs	r6, #0
		memcpy(extinfo, &PSFExtensionInfo, sizeof(PSFExtensionInfoType));
 8003bee:	681b      	ldr	r3, [r3, #0]
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(extinfo, sizeof(PSFExtensionInfoType));		
 8003bf0:	2404      	movs	r4, #4
 8003bf2:	2700      	movs	r7, #0
		memcpy(extinfo, &PSFExtensionInfo, sizeof(PSFExtensionInfoType));
 8003bf4:	9307      	str	r3, [sp, #28]
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(extinfo, sizeof(PSFExtensionInfoType));		
 8003bf6:	ad07      	add	r5, sp, #28
 8003bf8:	e004      	b.n	8003c04 <prvProcessCommand+0x284>
 8003bfa:	9b08      	ldr	r3, [sp, #32]
 8003bfc:	3601      	adds	r6, #1
 8003bfe:	18ed      	adds	r5, r5, r3
 8003c00:	1ae4      	subs	r4, r4, r3
 8003c02:	d02a      	beq.n	8003c5a <prvProcessCommand+0x2da>
 8003c04:	0021      	movs	r1, r4
 8003c06:	0028      	movs	r0, r5
 8003c08:	aa08      	add	r2, sp, #32
 8003c0a:	9708      	str	r7, [sp, #32]
 8003c0c:	f7ff f9c6 	bl	8002f9c <writeToRTT>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d0f2      	beq.n	8003bfa <prvProcessCommand+0x27a>
	if (errorCode == PSF_ERROR_NONE)
 8003c14:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <prvProcessCommand+0x358>)
 8003c16:	681c      	ldr	r4, [r3, #0]
 8003c18:	2c00      	cmp	r4, #0
 8003c1a:	d11e      	bne.n	8003c5a <prvProcessCommand+0x2da>
		errorCode = errCode;
 8003c1c:	2206      	movs	r2, #6
		SET_ERROR_WARNING_FLAG(errorCode);
 8003c1e:	2120      	movs	r1, #32
		errorCode = errCode;
 8003c20:	601a      	str	r2, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8003c22:	4a2e      	ldr	r2, [pc, #184]	; (8003cdc <prvProcessCommand+0x35c>)
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003c24:	4d2e      	ldr	r5, [pc, #184]	; (8003ce0 <prvProcessCommand+0x360>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8003c26:	6813      	ldr	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003c28:	2090      	movs	r0, #144	; 0x90
		SET_ERROR_WARNING_FLAG(errorCode);
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003c2e:	6829      	ldr	r1, [r5, #0]
 8003c30:	4a2c      	ldr	r2, [pc, #176]	; (8003ce4 <prvProcessCommand+0x364>)
 8003c32:	f7ff fc05 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8003c36:	2090      	movs	r0, #144	; 0x90
 8003c38:	4a2b      	ldr	r2, [pc, #172]	; (8003ce8 <prvProcessCommand+0x368>)
 8003c3a:	6829      	ldr	r1, [r5, #0]
 8003c3c:	f7ff fc00 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 8003c40:	464b      	mov	r3, r9
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <prvProcessCommand+0x2da>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c48:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 8003c52:	464a      	mov	r2, r9
 8003c54:	6014      	str	r4, [r2, #0]
 8003c56:	f383 8810 	msr	PRIMASK, r3
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(extinfo, sizeof(PSFExtensionInfoType));		
 8003c5a:	2e01      	cmp	r6, #1
 8003c5c:	d900      	bls.n	8003c60 <prvProcessCommand+0x2e0>
 8003c5e:	e137      	b.n	8003ed0 <prvProcessCommand+0x550>
 8003c60:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c64:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f383 8810 	msr	PRIMASK, r3
	if (uiTraceSystemState == TRC_STATE_IN_STARTUP)
 8003c6e:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <prvProcessCommand+0x380>)
 8003c70:	2002      	movs	r0, #2
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d000      	beq.n	8003c7a <prvProcessCommand+0x2fa>
 8003c78:	e13a      	b.n	8003ef0 <prvProcessCommand+0x570>
	eventCounter++;
 8003c7a:	9a04      	ldr	r2, [sp, #16]
			pxEvent->base.EventID = PSF_EVENT_TRACE_START | PARAM_COUNT(3);
 8003c7c:	a906      	add	r1, sp, #24
	eventCounter++;
 8003c7e:	6813      	ldr	r3, [r2, #0]
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(pxEvent, sizeof(EventWithParam_3));
 8003c80:	2600      	movs	r6, #0
	eventCounter++;
 8003c82:	3301      	adds	r3, #1
			pxEvent->base.EventCount = (uint16_t)eventCounter;
 8003c84:	814b      	strh	r3, [r1, #10]
	eventCounter++;
 8003c86:	6013      	str	r3, [r2, #0]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 8003c88:	4b1e      	ldr	r3, [pc, #120]	; (8003d04 <prvProcessCommand+0x384>)
			pxEvent->base.EventID = PSF_EVENT_TRACE_START | PARAM_COUNT(3);
 8003c8a:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <prvProcessCommand+0x388>)
	uint32_t ticks = TRACE_GET_OS_TICKS();
 8003c8c:	4698      	mov	r8, r3
			pxEvent->base.EventID = PSF_EVENT_TRACE_START | PARAM_COUNT(3);
 8003c8e:	810a      	strh	r2, [r1, #8]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 8003c90:	681a      	ldr	r2, [r3, #0]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003c92:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <prvProcessCommand+0x38c>)
 8003c94:	0611      	lsls	r1, r2, #24
 8003c96:	681b      	ldr	r3, [r3, #0]
			pxEvent->param1 = (uint32_t)TRACE_GET_OS_TICKS();
 8003c98:	920a      	str	r2, [sp, #40]	; 0x28
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003c9a:	021b      	lsls	r3, r3, #8
			pxEvent->param3 = SessionCounter++;
 8003c9c:	4a1c      	ldr	r2, [pc, #112]	; (8003d10 <prvProcessCommand+0x390>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	185b      	adds	r3, r3, r1
			pxEvent->base.TS = prvGetTimestamp32();
 8003ca2:	9309      	str	r3, [sp, #36]	; 0x24
			pxEvent->param3 = SessionCounter++;
 8003ca4:	6813      	ldr	r3, [r2, #0]
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(pxEvent, sizeof(EventWithParam_3));
 8003ca6:	2414      	movs	r4, #20
			pxEvent->param3 = SessionCounter++;
 8003ca8:	1c59      	adds	r1, r3, #1
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(pxEvent, sizeof(EventWithParam_3));
 8003caa:	2700      	movs	r7, #0
			pxEvent->param2 = (uint32_t)currentTask;
 8003cac:	900b      	str	r0, [sp, #44]	; 0x2c
			pxEvent->param3 = SessionCounter++;
 8003cae:	6011      	str	r1, [r2, #0]
 8003cb0:	930c      	str	r3, [sp, #48]	; 0x30
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(pxEvent, sizeof(EventWithParam_3));
 8003cb2:	ad08      	add	r5, sp, #32
 8003cb4:	e033      	b.n	8003d1e <prvProcessCommand+0x39e>
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	20003240 	.word	0x20003240
 8003cbc:	2000324c 	.word	0x2000324c
 8003cc0:	20000008 	.word	0x20000008
 8003cc4:	50534600 	.word	0x50534600
 8003cc8:	1aa10006 	.word	0x1aa10006
 8003ccc:	2000389c 	.word	0x2000389c
 8003cd0:	00280020 	.word	0x00280020
 8003cd4:	00280008 	.word	0x00280008
 8003cd8:	20003248 	.word	0x20003248
 8003cdc:	2000322c 	.word	0x2000322c
 8003ce0:	20003228 	.word	0x20003228
 8003ce4:	08005134 	.word	0x08005134
 8003ce8:	080050e4 	.word	0x080050e4
 8003cec:	20003398 	.word	0x20003398
 8003cf0:	20003898 	.word	0x20003898
 8003cf4:	20003258 	.word	0x20003258
 8003cf8:	20003398 	.word	0x20003398
 8003cfc:	2000000c 	.word	0x2000000c
 8003d00:	200038a0 	.word	0x200038a0
 8003d04:	200038a4 	.word	0x200038a4
 8003d08:	00003001 	.word	0x00003001
 8003d0c:	e000e018 	.word	0xe000e018
 8003d10:	20003244 	.word	0x20003244
 8003d14:	9b07      	ldr	r3, [sp, #28]
 8003d16:	3601      	adds	r6, #1
 8003d18:	18ed      	adds	r5, r5, r3
 8003d1a:	1ae4      	subs	r4, r4, r3
 8003d1c:	d02a      	beq.n	8003d74 <prvProcessCommand+0x3f4>
 8003d1e:	0021      	movs	r1, r4
 8003d20:	0028      	movs	r0, r5
 8003d22:	aa07      	add	r2, sp, #28
 8003d24:	9707      	str	r7, [sp, #28]
 8003d26:	f7ff f939 	bl	8002f9c <writeToRTT>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	d0f2      	beq.n	8003d14 <prvProcessCommand+0x394>
	if (errorCode == PSF_ERROR_NONE)
 8003d2e:	4b72      	ldr	r3, [pc, #456]	; (8003ef8 <prvProcessCommand+0x578>)
 8003d30:	681c      	ldr	r4, [r3, #0]
 8003d32:	2c00      	cmp	r4, #0
 8003d34:	d11e      	bne.n	8003d74 <prvProcessCommand+0x3f4>
		errorCode = errCode;
 8003d36:	2206      	movs	r2, #6
		SET_ERROR_WARNING_FLAG(errorCode);
 8003d38:	2120      	movs	r1, #32
		errorCode = errCode;
 8003d3a:	601a      	str	r2, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8003d3c:	4a6f      	ldr	r2, [pc, #444]	; (8003efc <prvProcessCommand+0x57c>)
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003d3e:	4d70      	ldr	r5, [pc, #448]	; (8003f00 <prvProcessCommand+0x580>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8003d40:	6813      	ldr	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003d42:	2090      	movs	r0, #144	; 0x90
		SET_ERROR_WARNING_FLAG(errorCode);
 8003d44:	430b      	orrs	r3, r1
 8003d46:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003d48:	6829      	ldr	r1, [r5, #0]
 8003d4a:	4a6e      	ldr	r2, [pc, #440]	; (8003f04 <prvProcessCommand+0x584>)
 8003d4c:	f7ff fb78 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8003d50:	2090      	movs	r0, #144	; 0x90
 8003d52:	4a6d      	ldr	r2, [pc, #436]	; (8003f08 <prvProcessCommand+0x588>)
 8003d54:	6829      	ldr	r1, [r5, #0]
 8003d56:	f7ff fb73 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <prvProcessCommand+0x3f4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d62:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d66:	2201      	movs	r2, #1
 8003d68:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 8003d6c:	464a      	mov	r2, r9
 8003d6e:	6014      	str	r4, [r2, #0]
 8003d70:	f383 8810 	msr	PRIMASK, r3
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(pxEvent, sizeof(EventWithParam_3));
 8003d74:	2e01      	cmp	r6, #1
 8003d76:	d900      	bls.n	8003d7a <prvProcessCommand+0x3fa>
 8003d78:	e08a      	b.n	8003e90 <prvProcessCommand+0x510>
 8003d7a:	f38a 8810 	msr	PRIMASK, sl
	if (timestampFrequency == 0)
 8003d7e:	4b63      	ldr	r3, [pc, #396]	; (8003f0c <prvProcessCommand+0x58c>)
 8003d80:	6819      	ldr	r1, [r3, #0]
 8003d82:	2900      	cmp	r1, #0
 8003d84:	d100      	bne.n	8003d88 <prvProcessCommand+0x408>
 8003d86:	e080      	b.n	8003e8a <prvProcessCommand+0x50a>
	eventCounter++;
 8003d88:	9a04      	ldr	r2, [sp, #16]
			event->base.EventID = PSF_EVENT_TS_CONFIG | (uint16_t)PARAM_COUNT(4);
 8003d8a:	a806      	add	r0, sp, #24
	eventCounter++;
 8003d8c:	6813      	ldr	r3, [r2, #0]
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(event, (uint32_t)sizeof(EventWithParam_4));
 8003d8e:	2600      	movs	r6, #0
	eventCounter++;
 8003d90:	3301      	adds	r3, #1
			event->base.EventCount = (uint16_t)eventCounter;
 8003d92:	8143      	strh	r3, [r0, #10]
	eventCounter++;
 8003d94:	6013      	str	r3, [r2, #0]
			event->base.EventID = PSF_EVENT_TS_CONFIG | (uint16_t)PARAM_COUNT(4);
 8003d96:	4a5e      	ldr	r2, [pc, #376]	; (8003f10 <prvProcessCommand+0x590>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003d98:	4b5e      	ldr	r3, [pc, #376]	; (8003f14 <prvProcessCommand+0x594>)
			event->base.EventID = PSF_EVENT_TS_CONFIG | (uint16_t)PARAM_COUNT(4);
 8003d9a:	8102      	strh	r2, [r0, #8]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4643      	mov	r3, r8
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	0212      	lsls	r2, r2, #8
 8003da4:	061b      	lsls	r3, r3, #24
 8003da6:	0a12      	lsrs	r2, r2, #8
 8003da8:	189b      	adds	r3, r3, r2
			event->base.TS = prvGetTimestamp32();
 8003daa:	9309      	str	r3, [sp, #36]	; 0x24
			event->param2 = (uint32_t)(TRACE_TICK_RATE_HZ);
 8003dac:	23fa      	movs	r3, #250	; 0xfa
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	930b      	str	r3, [sp, #44]	; 0x2c
			event->param3 = (uint32_t)(TRC_HWTC_TYPE);
 8003db2:	2304      	movs	r3, #4
 8003db4:	930c      	str	r3, [sp, #48]	; 0x30
			event->param4 = (uint32_t)(TRC_CFG_ISR_TAILCHAINING_THRESHOLD);
 8003db6:	2300      	movs	r3, #0
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(event, (uint32_t)sizeof(EventWithParam_4));
 8003db8:	2518      	movs	r5, #24
 8003dba:	2700      	movs	r7, #0
			event->param1 = (uint32_t)timestampFrequency;
 8003dbc:	910a      	str	r1, [sp, #40]	; 0x28
			event->param4 = (uint32_t)(TRC_CFG_ISR_TAILCHAINING_THRESHOLD);
 8003dbe:	930d      	str	r3, [sp, #52]	; 0x34
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(event, (uint32_t)sizeof(EventWithParam_4));
 8003dc0:	ac08      	add	r4, sp, #32
 8003dc2:	e004      	b.n	8003dce <prvProcessCommand+0x44e>
 8003dc4:	9b07      	ldr	r3, [sp, #28]
 8003dc6:	3601      	adds	r6, #1
 8003dc8:	18e4      	adds	r4, r4, r3
 8003dca:	1aed      	subs	r5, r5, r3
 8003dcc:	d02a      	beq.n	8003e24 <prvProcessCommand+0x4a4>
 8003dce:	0029      	movs	r1, r5
 8003dd0:	0020      	movs	r0, r4
 8003dd2:	aa07      	add	r2, sp, #28
 8003dd4:	9707      	str	r7, [sp, #28]
 8003dd6:	f7ff f8e1 	bl	8002f9c <writeToRTT>
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	d0f2      	beq.n	8003dc4 <prvProcessCommand+0x444>
	if (errorCode == PSF_ERROR_NONE)
 8003dde:	4b46      	ldr	r3, [pc, #280]	; (8003ef8 <prvProcessCommand+0x578>)
 8003de0:	681c      	ldr	r4, [r3, #0]
 8003de2:	2c00      	cmp	r4, #0
 8003de4:	d11e      	bne.n	8003e24 <prvProcessCommand+0x4a4>
		errorCode = errCode;
 8003de6:	2206      	movs	r2, #6
		SET_ERROR_WARNING_FLAG(errorCode);
 8003de8:	2120      	movs	r1, #32
		errorCode = errCode;
 8003dea:	601a      	str	r2, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8003dec:	4a43      	ldr	r2, [pc, #268]	; (8003efc <prvProcessCommand+0x57c>)
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003dee:	4d44      	ldr	r5, [pc, #272]	; (8003f00 <prvProcessCommand+0x580>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8003df0:	6813      	ldr	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003df2:	2090      	movs	r0, #144	; 0x90
		SET_ERROR_WARNING_FLAG(errorCode);
 8003df4:	430b      	orrs	r3, r1
 8003df6:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003df8:	6829      	ldr	r1, [r5, #0]
 8003dfa:	4a42      	ldr	r2, [pc, #264]	; (8003f04 <prvProcessCommand+0x584>)
 8003dfc:	f7ff fb20 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8003e00:	2090      	movs	r0, #144	; 0x90
 8003e02:	4a41      	ldr	r2, [pc, #260]	; (8003f08 <prvProcessCommand+0x588>)
 8003e04:	6829      	ldr	r1, [r5, #0]
 8003e06:	f7ff fb1b 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <prvProcessCommand+0x4a4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e12:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e16:	2201      	movs	r2, #1
 8003e18:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 8003e1c:	464a      	mov	r2, r9
 8003e1e:	6014      	str	r4, [r2, #0]
 8003e20:	f383 8810 	msr	PRIMASK, r3
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(event, (uint32_t)sizeof(EventWithParam_4));
 8003e24:	2e01      	cmp	r6, #1
 8003e26:	d800      	bhi.n	8003e2a <prvProcessCommand+0x4aa>
 8003e28:	e5c9      	b.n	80039be <prvProcessCommand+0x3e>
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 8003e2a:	2380      	movs	r3, #128	; 0x80
 8003e2c:	4a33      	ldr	r2, [pc, #204]	; (8003efc <prvProcessCommand+0x57c>)
 8003e2e:	015b      	lsls	r3, r3, #5
 8003e30:	6811      	ldr	r1, [r2, #0]
 8003e32:	4219      	tst	r1, r3
 8003e34:	d000      	beq.n	8003e38 <prvProcessCommand+0x4b8>
 8003e36:	e5c2      	b.n	80039be <prvProcessCommand+0x3e>
		SET_ERROR_WARNING_FLAG(errCode);
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8003e3c:	4b30      	ldr	r3, [pc, #192]	; (8003f00 <prvProcessCommand+0x580>)
 8003e3e:	2090      	movs	r0, #144	; 0x90
 8003e40:	4a35      	ldr	r2, [pc, #212]	; (8003f18 <prvProcessCommand+0x598>)
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	f7ff fafc 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
}
 8003e48:	e5b9      	b.n	80039be <prvProcessCommand+0x3e>
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	4a2b      	ldr	r2, [pc, #172]	; (8003efc <prvProcessCommand+0x57c>)
 8003e4e:	015b      	lsls	r3, r3, #5
 8003e50:	6811      	ldr	r1, [r2, #0]
 8003e52:	4219      	tst	r1, r3
 8003e54:	d000      	beq.n	8003e58 <prvProcessCommand+0x4d8>
 8003e56:	e6ba      	b.n	8003bce <prvProcessCommand+0x24e>
		SET_ERROR_WARNING_FLAG(errCode);
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8003e5c:	4b28      	ldr	r3, [pc, #160]	; (8003f00 <prvProcessCommand+0x580>)
 8003e5e:	2090      	movs	r0, #144	; 0x90
 8003e60:	4a2d      	ldr	r2, [pc, #180]	; (8003f18 <prvProcessCommand+0x598>)
 8003e62:	6819      	ldr	r1, [r3, #0]
 8003e64:	f7ff faec 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
 8003e68:	e6b1      	b.n	8003bce <prvProcessCommand+0x24e>
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	4a23      	ldr	r2, [pc, #140]	; (8003efc <prvProcessCommand+0x57c>)
 8003e6e:	015b      	lsls	r3, r3, #5
 8003e70:	6811      	ldr	r1, [r2, #0]
 8003e72:	4219      	tst	r1, r3
 8003e74:	d000      	beq.n	8003e78 <prvProcessCommand+0x4f8>
 8003e76:	e657      	b.n	8003b28 <prvProcessCommand+0x1a8>
		SET_ERROR_WARNING_FLAG(errCode);
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8003e7c:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <prvProcessCommand+0x580>)
 8003e7e:	2090      	movs	r0, #144	; 0x90
 8003e80:	4a25      	ldr	r2, [pc, #148]	; (8003f18 <prvProcessCommand+0x598>)
 8003e82:	6819      	ldr	r1, [r3, #0]
 8003e84:	f7ff fadc 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
 8003e88:	e64e      	b.n	8003b28 <prvProcessCommand+0x1a8>
		timestampFrequency = TRC_HWTC_FREQ_HZ;
 8003e8a:	4924      	ldr	r1, [pc, #144]	; (8003f1c <prvProcessCommand+0x59c>)
 8003e8c:	6019      	str	r1, [r3, #0]
 8003e8e:	e77b      	b.n	8003d88 <prvProcessCommand+0x408>
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 8003e90:	2380      	movs	r3, #128	; 0x80
 8003e92:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <prvProcessCommand+0x57c>)
 8003e94:	015b      	lsls	r3, r3, #5
 8003e96:	6811      	ldr	r1, [r2, #0]
 8003e98:	4219      	tst	r1, r3
 8003e9a:	d000      	beq.n	8003e9e <prvProcessCommand+0x51e>
 8003e9c:	e76d      	b.n	8003d7a <prvProcessCommand+0x3fa>
		SET_ERROR_WARNING_FLAG(errCode);
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8003ea2:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <prvProcessCommand+0x580>)
 8003ea4:	2090      	movs	r0, #144	; 0x90
 8003ea6:	4a1c      	ldr	r2, [pc, #112]	; (8003f18 <prvProcessCommand+0x598>)
 8003ea8:	6819      	ldr	r1, [r3, #0]
 8003eaa:	f7ff fac9 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
 8003eae:	e764      	b.n	8003d7a <prvProcessCommand+0x3fa>
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	4a12      	ldr	r2, [pc, #72]	; (8003efc <prvProcessCommand+0x57c>)
 8003eb4:	015b      	lsls	r3, r3, #5
 8003eb6:	6811      	ldr	r1, [r2, #0]
 8003eb8:	4219      	tst	r1, r3
 8003eba:	d000      	beq.n	8003ebe <prvProcessCommand+0x53e>
 8003ebc:	e5d5      	b.n	8003a6a <prvProcessCommand+0xea>
		SET_ERROR_WARNING_FLAG(errCode);
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <prvProcessCommand+0x580>)
 8003ec4:	2090      	movs	r0, #144	; 0x90
 8003ec6:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <prvProcessCommand+0x598>)
 8003ec8:	6819      	ldr	r1, [r3, #0]
 8003eca:	f7ff fab9 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
 8003ece:	e5cc      	b.n	8003a6a <prvProcessCommand+0xea>
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <prvProcessCommand+0x57c>)
 8003ed4:	015b      	lsls	r3, r3, #5
 8003ed6:	6811      	ldr	r1, [r2, #0]
 8003ed8:	4219      	tst	r1, r3
 8003eda:	d000      	beq.n	8003ede <prvProcessCommand+0x55e>
 8003edc:	e6c0      	b.n	8003c60 <prvProcessCommand+0x2e0>
		SET_ERROR_WARNING_FLAG(errCode);
 8003ede:	430b      	orrs	r3, r1
 8003ee0:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <prvProcessCommand+0x580>)
 8003ee4:	2090      	movs	r0, #144	; 0x90
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	; (8003f18 <prvProcessCommand+0x598>)
 8003ee8:	6819      	ldr	r1, [r3, #0]
 8003eea:	f7ff faa9 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
 8003eee:	e6b7      	b.n	8003c60 <prvProcessCommand+0x2e0>
		currentTask = TRACE_GET_CURRENT_TASK();
 8003ef0:	f7ff f954 	bl	800319c <prvTraceGetCurrentTaskHandle>
 8003ef4:	e6c1      	b.n	8003c7a <prvProcessCommand+0x2fa>
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	20003248 	.word	0x20003248
 8003efc:	2000322c 	.word	0x2000322c
 8003f00:	20003228 	.word	0x20003228
 8003f04:	08005134 	.word	0x08005134
 8003f08:	080050e4 	.word	0x080050e4
 8003f0c:	20003898 	.word	0x20003898
 8003f10:	00004002 	.word	0x00004002
 8003f14:	e000e018 	.word	0xe000e018
 8003f18:	08005168 	.word	0x08005168
 8003f1c:	02dc6c00 	.word	0x02dc6c00

08003f20 <prvTraceWarning>:
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 8003f20:	2301      	movs	r3, #1
 8003f22:	3801      	subs	r0, #1
 8003f24:	4083      	lsls	r3, r0
 8003f26:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <prvTraceWarning+0x30>)
{
 8003f28:	b510      	push	{r4, lr}
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 8003f2a:	6811      	ldr	r1, [r2, #0]
 8003f2c:	4219      	tst	r1, r3
 8003f2e:	d109      	bne.n	8003f44 <prvTraceWarning+0x24>
		SET_ERROR_WARNING_FLAG(errCode);
 8003f30:	430b      	orrs	r3, r1
 8003f32:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8003f34:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <prvTraceWarning+0x34>)
	switch (errCode)
 8003f36:	2200      	movs	r2, #0
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8003f38:	6819      	ldr	r1, [r3, #0]
	switch (errCode)
 8003f3a:	280d      	cmp	r0, #13
 8003f3c:	d903      	bls.n	8003f46 <prvTraceWarning+0x26>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8003f3e:	2090      	movs	r0, #144	; 0x90
 8003f40:	f7ff fa7e 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
}
 8003f44:	bd10      	pop	{r4, pc}
 8003f46:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <prvTraceWarning+0x38>)
 8003f48:	0080      	lsls	r0, r0, #2
 8003f4a:	58c2      	ldr	r2, [r0, r3]
 8003f4c:	e7f7      	b.n	8003f3e <prvTraceWarning+0x1e>
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	2000322c 	.word	0x2000322c
 8003f54:	20003228 	.word	0x20003228
 8003f58:	0800534c 	.word	0x0800534c

08003f5c <prvTraceError>:
	if (errorCode == PSF_ERROR_NONE)
 8003f5c:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <prvTraceError+0x58>)
{
 8003f5e:	b510      	push	{r4, lr}
	if (errorCode == PSF_ERROR_NONE)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	2a00      	cmp	r2, #0
 8003f64:	d121      	bne.n	8003faa <prvTraceError+0x4e>
		errorCode = errCode;
 8003f66:	6018      	str	r0, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8003f68:	2301      	movs	r3, #1
 8003f6a:	3801      	subs	r0, #1
 8003f6c:	4083      	lsls	r3, r0
 8003f6e:	4a12      	ldr	r2, [pc, #72]	; (8003fb8 <prvTraceError+0x5c>)
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003f70:	4c12      	ldr	r4, [pc, #72]	; (8003fbc <prvTraceError+0x60>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8003f72:	6811      	ldr	r1, [r2, #0]
 8003f74:	430b      	orrs	r3, r1
 8003f76:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003f78:	6821      	ldr	r1, [r4, #0]
	switch (errCode)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	280d      	cmp	r0, #13
 8003f7e:	d915      	bls.n	8003fac <prvTraceError+0x50>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003f80:	2090      	movs	r0, #144	; 0x90
 8003f82:	f7ff fa5d 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8003f86:	4a0e      	ldr	r2, [pc, #56]	; (8003fc0 <prvTraceError+0x64>)
 8003f88:	2090      	movs	r0, #144	; 0x90
 8003f8a:	6821      	ldr	r1, [r4, #0]
 8003f8c:	f7ff fa58 	bl	8003440 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 8003f90:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <prvTraceError+0x68>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	d008      	beq.n	8003faa <prvTraceError+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f98:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	f381 8810 	msr	PRIMASK, r1
	RecorderEnabled = isEnabled;		
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	6019      	str	r1, [r3, #0]
 8003fa6:	f382 8810 	msr	PRIMASK, r2
}
 8003faa:	bd10      	pop	{r4, pc}
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <prvTraceError+0x6c>)
 8003fae:	0080      	lsls	r0, r0, #2
 8003fb0:	58c2      	ldr	r2, [r0, r3]
 8003fb2:	e7e5      	b.n	8003f80 <prvTraceError+0x24>
 8003fb4:	20003248 	.word	0x20003248
 8003fb8:	2000322c 	.word	0x2000322c
 8003fbc:	20003228 	.word	0x20003228
 8003fc0:	080050e4 	.word	0x080050e4
 8003fc4:	20003240 	.word	0x20003240
 8003fc8:	0800534c 	.word	0x0800534c

08003fcc <vTaskPalettiseur>:
	}
}


void vTaskPalettiseur(void *pvParameters)
{
 8003fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fce:	464e      	mov	r6, r9
 8003fd0:	46de      	mov	lr, fp
 8003fd2:	4657      	mov	r7, sl
 8003fd4:	4645      	mov	r5, r8
 8003fd6:	b5e0      	push	{r5, r6, r7, lr}
 8003fd8:	b08d      	sub	sp, #52	; 0x34
	portTickType xLastWakeTime;

	// Timing initialization
	xLastWakeTime = xTaskGetTickCount();
 8003fda:	f7fd fd4d 	bl	8001a78 <xTaskGetTickCount>
 8003fde:	4b72      	ldr	r3, [pc, #456]	; (80041a8 <vTaskPalettiseur+0x1dc>)
 8003fe0:	4f72      	ldr	r7, [pc, #456]	; (80041ac <vTaskPalettiseur+0x1e0>)
 8003fe2:	4699      	mov	r9, r3
 8003fe4:	4b72      	ldr	r3, [pc, #456]	; (80041b0 <vTaskPalettiseur+0x1e4>)
 8003fe6:	4e73      	ldr	r6, [pc, #460]	; (80041b4 <vTaskPalettiseur+0x1e8>)
 8003fe8:	9003      	str	r0, [sp, #12]

	command_message_t *m_cmd;
	command_message_t command;

	command.state = 0;
	command.mask = 0;
 8003fea:	ac09      	add	r4, sp, #36	; 0x24
 8003fec:	9301      	str	r3, [sp, #4]
{
 8003fee:	2303      	movs	r3, #3
 8003ff0:	469b      	mov	fp, r3
	while (1)
	{
		for (int i = 0; i <3; i++)
		{
			//Turn on the cardboard distribution
			command.mask = Distribution_Cartons_MSK;
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	9206      	str	r2, [sp, #24]
 8003ff8:	9307      	str	r3, [sp, #28]
			command.state = Distribution_Cartons_ON;
			m_cmd = &command;
 8003ffa:	ab06      	add	r3, sp, #24
 8003ffc:	9305      	str	r3, [sp, #20]
			xQueueSendToBack(xComQueue, &m_cmd, 0);
 8003ffe:	464b      	mov	r3, r9
 8004000:	2200      	movs	r2, #0
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	a905      	add	r1, sp, #20
 8004006:	2300      	movs	r3, #0
 8004008:	f7fc fa2c 	bl	8000464 <xQueueGenericSend>

			mPalletiseur.sem_id = 1;
			mPalletiseur.sensor_id = Carton_Envoye_MSK;
 800400c:	2302      	movs	r3, #2
			mPalletiseur.sem_id = 1;
 800400e:	2501      	movs	r5, #1
			mPalletiseur.sensor_id = Carton_Envoye_MSK;
 8004010:	6063      	str	r3, [r4, #4]
			mPalletiseur.sensor_state = Carton_Envoye_OFF;
 8004012:	2300      	movs	r3, #0
			ps = &mPalletiseur;

			// Send message to Subscribe Queue
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004014:	2200      	movs	r2, #0
 8004016:	a904      	add	r1, sp, #16
 8004018:	6838      	ldr	r0, [r7, #0]
			mPalletiseur.sensor_state = Carton_Envoye_OFF;
 800401a:	4698      	mov	r8, r3
 800401c:	60a3      	str	r3, [r4, #8]
			mPalletiseur.sem_id = 1;
 800401e:	7025      	strb	r5, [r4, #0]
			ps = &mPalletiseur;
 8004020:	9404      	str	r4, [sp, #16]
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004022:	f7fc fa1f 	bl	8000464 <xQueueGenericSend>

			// wait forever for the semaphore
			xSemaphoreTake(xSemCarton, portMAX_DELAY);
 8004026:	2101      	movs	r1, #1
 8004028:	6830      	ldr	r0, [r6, #0]
 800402a:	4249      	negs	r1, r1
 800402c:	f7fc ff38 	bl	8000ea0 <xQueueSemaphoreTake>

			//Subscribe for the sensor change
			mPalletiseur.sem_id = 1;
			mPalletiseur.sensor_id = Carton_Distribue_MSK;
			mPalletiseur.sensor_state = Carton_Distribue_OFF;
 8004030:	4643      	mov	r3, r8
			ps = &mPalletiseur;

			// Send message to the Subscribe Queue
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004032:	2200      	movs	r2, #0
 8004034:	a904      	add	r1, sp, #16
 8004036:	6838      	ldr	r0, [r7, #0]
			mPalletiseur.sensor_state = Carton_Distribue_OFF;
 8004038:	60a3      	str	r3, [r4, #8]
			mPalletiseur.sem_id = 1;
 800403a:	7025      	strb	r5, [r4, #0]
			mPalletiseur.sensor_id = Carton_Distribue_MSK;
 800403c:	6065      	str	r5, [r4, #4]
			ps = &mPalletiseur;
 800403e:	9404      	str	r4, [sp, #16]
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004040:	f7fc fa10 	bl	8000464 <xQueueGenericSend>

			// wait forever for the semaphore
			xSemaphoreTake(xSemCarton, portMAX_DELAY);
 8004044:	2101      	movs	r1, #1
 8004046:	6830      	ldr	r0, [r6, #0]
 8004048:	4249      	negs	r1, r1
 800404a:	f7fc ff29 	bl	8000ea0 <xQueueSemaphoreTake>

			//Turn off the cardboard distribution
			command.mask = Distribution_Cartons_MSK;
 800404e:	2201      	movs	r2, #1
 8004050:	2300      	movs	r3, #0
 8004052:	9206      	str	r2, [sp, #24]
 8004054:	9307      	str	r3, [sp, #28]
			command.state = Distribution_Cartons_OFF;
			m_cmd = &command;
 8004056:	ab06      	add	r3, sp, #24
 8004058:	9305      	str	r3, [sp, #20]
			xQueueSendToBack(xComQueue, &m_cmd, 0);
 800405a:	464b      	mov	r3, r9
 800405c:	2200      	movs	r2, #0
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	a905      	add	r1, sp, #20
 8004062:	2300      	movs	r3, #0
 8004064:	f7fc f9fe 	bl	8000464 <xQueueGenericSend>

			mPalletiseur.sem_id = 1;
			mPalletiseur.sensor_id = Entree_Palettiseur_MSK;
 8004068:	2304      	movs	r3, #4
 800406a:	469a      	mov	sl, r3
 800406c:	6063      	str	r3, [r4, #4]
			mPalletiseur.sensor_state = Entree_Palettiseur_OFF;
 800406e:	4643      	mov	r3, r8
			ps = &mPalletiseur;
			// Send message to the Subscribe Queue
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004070:	2200      	movs	r2, #0
 8004072:	a904      	add	r1, sp, #16
 8004074:	6838      	ldr	r0, [r7, #0]
			mPalletiseur.sensor_state = Entree_Palettiseur_OFF;
 8004076:	60a3      	str	r3, [r4, #8]
			mPalletiseur.sem_id = 1;
 8004078:	7025      	strb	r5, [r4, #0]
			ps = &mPalletiseur;
 800407a:	9404      	str	r4, [sp, #16]
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 800407c:	f7fc f9f2 	bl	8000464 <xQueueGenericSend>
			// wait forever for the semaphore
			xSemaphoreTake(xSemCarton, portMAX_DELAY);
 8004080:	2101      	movs	r1, #1
 8004082:	6830      	ldr	r0, [r6, #0]
 8004084:	4249      	negs	r1, r1
 8004086:	f7fc ff0b 	bl	8000ea0 <xQueueSemaphoreTake>


			mPalletiseur.sem_id = 1;
			mPalletiseur.sensor_id = Entree_Palettiseur_MSK;
 800408a:	4653      	mov	r3, sl
			mPalletiseur.sensor_state = Entree_Palettiseur_ON;
			ps = &mPalletiseur;
			// Send message to the Subscribe Queue
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 800408c:	2200      	movs	r2, #0
			mPalletiseur.sensor_id = Entree_Palettiseur_MSK;
 800408e:	6063      	str	r3, [r4, #4]
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004090:	a904      	add	r1, sp, #16
 8004092:	2300      	movs	r3, #0
 8004094:	6838      	ldr	r0, [r7, #0]
			mPalletiseur.sem_id = 1;
 8004096:	7025      	strb	r5, [r4, #0]
			mPalletiseur.sensor_state = Entree_Palettiseur_ON;
 8004098:	60a5      	str	r5, [r4, #8]
			ps = &mPalletiseur;
 800409a:	9404      	str	r4, [sp, #16]
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 800409c:	f7fc f9e2 	bl	8000464 <xQueueGenericSend>
			// wait forever for the semaphore
			xSemaphoreTake(xSemCarton, portMAX_DELAY);
 80040a0:	2101      	movs	r1, #1
 80040a2:	6830      	ldr	r0, [r6, #0]
 80040a4:	4249      	negs	r1, r1
 80040a6:	f7fc fefb 	bl	8000ea0 <xQueueSemaphoreTake>


			mPalletiseur.sem_id = 1;
			mPalletiseur.sensor_id = Entree_Palettiseur_MSK;
 80040aa:	4653      	mov	r3, sl
 80040ac:	6063      	str	r3, [r4, #4]
			mPalletiseur.sensor_state = Entree_Palettiseur_OFF;
 80040ae:	4643      	mov	r3, r8
			ps = &mPalletiseur;
			// Send message to the Subscribe Queue
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80040b0:	2200      	movs	r2, #0
 80040b2:	a904      	add	r1, sp, #16
 80040b4:	6838      	ldr	r0, [r7, #0]
			mPalletiseur.sensor_state = Entree_Palettiseur_OFF;
 80040b6:	60a3      	str	r3, [r4, #8]
			mPalletiseur.sem_id = 1;
 80040b8:	7025      	strb	r5, [r4, #0]
			ps = &mPalletiseur;
 80040ba:	9404      	str	r4, [sp, #16]
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80040bc:	f7fc f9d2 	bl	8000464 <xQueueGenericSend>
			// wait forever for the semaphore
			xSemaphoreTake(xSemCarton, portMAX_DELAY);
 80040c0:	2101      	movs	r1, #1
 80040c2:	6830      	ldr	r0, [r6, #0]
 80040c4:	4249      	negs	r1, r1
 80040c6:	f7fc feeb 	bl	8000ea0 <xQueueSemaphoreTake>

			//Open the Blockage
			command.mask = (Blocage_Entree_Palettiseur_MSK | Charger_Palettetiseur_MSK);
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	4a3a      	ldr	r2, [pc, #232]	; (80041b8 <vTaskPalettiseur+0x1ec>)
 80040ce:	025b      	lsls	r3, r3, #9
 80040d0:	9206      	str	r2, [sp, #24]
 80040d2:	9307      	str	r3, [sp, #28]
			command.state = Blocage_Entree_Palettiseur_OFF | Charger_Palettetiseur_ON;
			m_cmd = &command;
 80040d4:	ab06      	add	r3, sp, #24
 80040d6:	9305      	str	r3, [sp, #20]
			xQueueSendToBack(xComQueue, &m_cmd, 0);
 80040d8:	464b      	mov	r3, r9
 80040da:	2200      	movs	r2, #0
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	a905      	add	r1, sp, #20
 80040e0:	2300      	movs	r3, #0
 80040e2:	f7fc f9bf 	bl	8000464 <xQueueGenericSend>

			mPalletiseur.sem_id = 1;
			mPalletiseur.sensor_id = Butee_Carton_MSK;
 80040e6:	2380      	movs	r3, #128	; 0x80
 80040e8:	01db      	lsls	r3, r3, #7
			mPalletiseur.sensor_state = Butee_Carton_ON;
			ps = &mPalletiseur;
			// Send message to the Subscribe Queue
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80040ea:	2200      	movs	r2, #0
			mPalletiseur.sensor_id = Butee_Carton_MSK;
 80040ec:	6063      	str	r3, [r4, #4]
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80040ee:	a904      	add	r1, sp, #16
 80040f0:	2300      	movs	r3, #0
 80040f2:	6838      	ldr	r0, [r7, #0]
			mPalletiseur.sem_id = 1;
 80040f4:	7025      	strb	r5, [r4, #0]
			mPalletiseur.sensor_state = Butee_Carton_ON;
 80040f6:	60a5      	str	r5, [r4, #8]
			ps = &mPalletiseur;
 80040f8:	9404      	str	r4, [sp, #16]
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80040fa:	f7fc f9b3 	bl	8000464 <xQueueGenericSend>
			// wait forever for the semaphore
			xSemaphoreTake(xSemCarton, portMAX_DELAY);
 80040fe:	2101      	movs	r1, #1
 8004100:	6830      	ldr	r0, [r6, #0]
 8004102:	4249      	negs	r1, r1
 8004104:	f7fc fecc 	bl	8000ea0 <xQueueSemaphoreTake>

			//Close the barrier
			command.mask = (Blocage_Entree_Palettiseur_MSK | Charger_Palettetiseur_MSK | Poussoir_MSK);
 8004108:	2314      	movs	r3, #20
 800410a:	4a2c      	ldr	r2, [pc, #176]	; (80041bc <vTaskPalettiseur+0x1f0>)
			command.state = Blocage_Entree_Palettiseur_ON | Charger_Palettetiseur_OFF| Poussoir_ON;
			m_cmd = &command;
			xQueueSendToBack(xComQueue, &m_cmd, 0);
 800410c:	a905      	add	r1, sp, #20
			command.mask = (Blocage_Entree_Palettiseur_MSK | Charger_Palettetiseur_MSK | Poussoir_MSK);
 800410e:	9206      	str	r2, [sp, #24]
 8004110:	9307      	str	r3, [sp, #28]
			m_cmd = &command;
 8004112:	ab06      	add	r3, sp, #24
 8004114:	9305      	str	r3, [sp, #20]
			xQueueSendToBack(xComQueue, &m_cmd, 0);
 8004116:	464b      	mov	r3, r9
 8004118:	2200      	movs	r2, #0
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	2300      	movs	r3, #0
 800411e:	f7fc f9a1 	bl	8000464 <xQueueGenericSend>

			mPalletiseur.sem_id = 1;
			mPalletiseur.sensor_id = Limite_Poussoir_MSK;
 8004122:	2310      	movs	r3, #16
 8004124:	469a      	mov	sl, r3
 8004126:	6063      	str	r3, [r4, #4]
			mPalletiseur.sensor_state = Limite_Poussoir_OFF;
 8004128:	4643      	mov	r3, r8
			ps = &mPalletiseur;

			// Send message to the Subscribe Queue
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 800412a:	2200      	movs	r2, #0
 800412c:	a904      	add	r1, sp, #16
 800412e:	6838      	ldr	r0, [r7, #0]
			mPalletiseur.sensor_state = Limite_Poussoir_OFF;
 8004130:	60a3      	str	r3, [r4, #8]
			mPalletiseur.sem_id = 1;
 8004132:	7025      	strb	r5, [r4, #0]
			ps = &mPalletiseur;
 8004134:	9404      	str	r4, [sp, #16]
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004136:	f7fc f995 	bl	8000464 <xQueueGenericSend>
			// wait forever for the semaphore
			xSemaphoreTake(xSemCarton, portMAX_DELAY);
 800413a:	2101      	movs	r1, #1
 800413c:	6830      	ldr	r0, [r6, #0]
 800413e:	4249      	negs	r1, r1
 8004140:	f7fc feae 	bl	8000ea0 <xQueueSemaphoreTake>

			mPalletiseur.sem_id = 1;
			mPalletiseur.sensor_id = Limite_Poussoir_MSK;
 8004144:	4653      	mov	r3, sl
			mPalletiseur.sensor_state = Limite_Poussoir_ON;
			ps = &mPalletiseur;
			// Send message to the Subscribe Queue
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004146:	2200      	movs	r2, #0
			mPalletiseur.sensor_id = Limite_Poussoir_MSK;
 8004148:	6063      	str	r3, [r4, #4]
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 800414a:	a904      	add	r1, sp, #16
 800414c:	2300      	movs	r3, #0
 800414e:	6838      	ldr	r0, [r7, #0]
			mPalletiseur.sem_id = 1;
 8004150:	7025      	strb	r5, [r4, #0]
			mPalletiseur.sensor_state = Limite_Poussoir_ON;
 8004152:	60a5      	str	r5, [r4, #8]
			ps = &mPalletiseur;
 8004154:	9404      	str	r4, [sp, #16]
			xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004156:	f7fc f985 	bl	8000464 <xQueueGenericSend>
			// wait forever for the semaphore
			xSemaphoreTake(xSemCarton, portMAX_DELAY);
 800415a:	2101      	movs	r1, #1
 800415c:	6830      	ldr	r0, [r6, #0]
 800415e:	4249      	negs	r1, r1
 8004160:	f7fc fe9e 	bl	8000ea0 <xQueueSemaphoreTake>

			//Return of the "pusher"
			command.mask = (Poussoir_MSK);
 8004164:	2210      	movs	r2, #16
 8004166:	2300      	movs	r3, #0
 8004168:	9206      	str	r2, [sp, #24]
 800416a:	9307      	str	r3, [sp, #28]
			command.state =  Poussoir_OFF;
			m_cmd = &command;
 800416c:	ab06      	add	r3, sp, #24
 800416e:	9305      	str	r3, [sp, #20]
			xQueueSendToBack(xComQueue, &m_cmd, 0);
 8004170:	464b      	mov	r3, r9
 8004172:	2200      	movs	r2, #0
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	a905      	add	r1, sp, #20
 8004178:	2300      	movs	r3, #0
 800417a:	f7fc f973 	bl	8000464 <xQueueGenericSend>
		for (int i = 0; i <3; i++)
 800417e:	2301      	movs	r3, #1
 8004180:	425b      	negs	r3, r3
 8004182:	469c      	mov	ip, r3
 8004184:	44e3      	add	fp, ip
 8004186:	465b      	mov	r3, fp
 8004188:	2b00      	cmp	r3, #0
 800418a:	d000      	beq.n	800418e <vTaskPalettiseur+0x1c2>
 800418c:	e731      	b.n	8003ff2 <vTaskPalettiseur+0x26>
		}

		xSemaphoreGive(xSem3);
 800418e:	9b01      	ldr	r3, [sp, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	2100      	movs	r1, #0
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	2300      	movs	r3, #0
 8004198:	f7fc f964 	bl	8000464 <xQueueGenericSend>
		vTaskDelayUntil(&xLastWakeTime, 100 / portTICK_RATE_MS); //100 ms wait
 800419c:	2164      	movs	r1, #100	; 0x64
 800419e:	a803      	add	r0, sp, #12
 80041a0:	f7fd fdfa 	bl	8001d98 <vTaskDelayUntil>
		for (int i = 0; i <3; i++)
 80041a4:	e723      	b.n	8003fee <vTaskPalettiseur+0x22>
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	200038a8 	.word	0x200038a8
 80041ac:	200038d0 	.word	0x200038d0
 80041b0:	200038b8 	.word	0x200038b8
 80041b4:	200038c0 	.word	0x200038c0
 80041b8:	00010004 	.word	0x00010004
 80041bc:	00010014 	.word	0x00010014

080041c0 <vTaskAscenseur>:
	}

}

void vTaskAscenseur(void *pvParameters) {
 80041c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c2:	46de      	mov	lr, fp
 80041c4:	4657      	mov	r7, sl
 80041c6:	464e      	mov	r6, r9
 80041c8:	4645      	mov	r5, r8
 80041ca:	b5e0      	push	{r5, r6, r7, lr}
 80041cc:	b08d      	sub	sp, #52	; 0x34
    portTickType xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
 80041ce:	f7fd fc53 	bl	8001a78 <xTaskGetTickCount>
    subscribe_message_t *ps;
    command_message_t *m_cmd;
    command_message_t command;

    command.state = 0;
    command.mask = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	2200      	movs	r2, #0
 80041d6:	9206      	str	r2, [sp, #24]
 80041d8:	9307      	str	r3, [sp, #28]
 80041da:	4b94      	ldr	r3, [pc, #592]	; (800442c <vTaskAscenseur+0x26c>)
 80041dc:	4e94      	ldr	r6, [pc, #592]	; (8004430 <vTaskAscenseur+0x270>)
 80041de:	469b      	mov	fp, r3
 80041e0:	4b94      	ldr	r3, [pc, #592]	; (8004434 <vTaskAscenseur+0x274>)
    xLastWakeTime = xTaskGetTickCount();
 80041e2:	9003      	str	r0, [sp, #12]
    command.mask = 0;
 80041e4:	469a      	mov	sl, r3
 80041e6:	4b94      	ldr	r3, [pc, #592]	; (8004438 <vTaskAscenseur+0x278>)
 80041e8:	af06      	add	r7, sp, #24
 80041ea:	4699      	mov	r9, r3
 80041ec:	4b93      	ldr	r3, [pc, #588]	; (800443c <vTaskAscenseur+0x27c>)
 80041ee:	ac09      	add	r4, sp, #36	; 0x24
 80041f0:	9301      	str	r3, [sp, #4]

    while (1)
    {
        //Semaphore of sync
        xSemaphoreTake(xSem3, portMAX_DELAY);
 80041f2:	465b      	mov	r3, fp
 80041f4:	2101      	movs	r1, #1
 80041f6:	6818      	ldr	r0, [r3, #0]
 80041f8:	4249      	negs	r1, r1
 80041fa:	f7fc fe51 	bl	8000ea0 <xQueueSemaphoreTake>

        //Move the elevator
        command.mask = (Monter_Ascenseur_MSK | Ascenceur_to_limit_MSK );
 80041fe:	2290      	movs	r2, #144	; 0x90
 8004200:	2390      	movs	r3, #144	; 0x90
 8004202:	0092      	lsls	r2, r2, #2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	9206      	str	r2, [sp, #24]
 8004208:	9307      	str	r3, [sp, #28]
        command.state = Monter_Ascenseur_ON | Ascenceur_to_limit_ON ;
        m_cmd = &command;
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 800420a:	a905      	add	r1, sp, #20
 800420c:	2300      	movs	r3, #0
 800420e:	2200      	movs	r2, #0
 8004210:	6830      	ldr	r0, [r6, #0]
        m_cmd = &command;
 8004212:	9705      	str	r7, [sp, #20]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 8004214:	f7fc f926 	bl	8000464 <xQueueGenericSend>

        //wait to go up
        mAscenseur.sem_id = 3;
        mAscenseur.sensor_id = Ascenceur_Etage_1_MSK;
        mAscenseur.sensor_state = Ascenceur_Etage_1_ON;
 8004218:	2201      	movs	r2, #1
        mAscenseur.sensor_id = Ascenceur_Etage_1_MSK;
 800421a:	2380      	movs	r3, #128	; 0x80
        mAscenseur.sensor_state = Ascenceur_Etage_1_ON;
 800421c:	4690      	mov	r8, r2
 800421e:	60a2      	str	r2, [r4, #8]
        ps = &mAscenseur;

        // Send message to the Subscribe Queue
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004220:	4652      	mov	r2, sl
        mAscenseur.sem_id = 3;
 8004222:	2503      	movs	r5, #3
        mAscenseur.sensor_id = Ascenceur_Etage_1_MSK;
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	6063      	str	r3, [r4, #4]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004228:	a904      	add	r1, sp, #16
 800422a:	2300      	movs	r3, #0
 800422c:	6810      	ldr	r0, [r2, #0]
 800422e:	2200      	movs	r2, #0
        mAscenseur.sem_id = 3;
 8004230:	7025      	strb	r5, [r4, #0]
        ps = &mAscenseur;
 8004232:	9404      	str	r4, [sp, #16]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004234:	f7fc f916 	bl	8000464 <xQueueGenericSend>
        // wait forever for the semaphore
        xSemaphoreTake(xSemAscenseur, portMAX_DELAY);
 8004238:	464a      	mov	r2, r9
 800423a:	2101      	movs	r1, #1
 800423c:	6810      	ldr	r0, [r2, #0]
 800423e:	4249      	negs	r1, r1
 8004240:	f7fc fe2e 	bl	8000ea0 <xQueueSemaphoreTake>

        //Semaphore of sync
        xSemaphoreTake(xSem3, portMAX_DELAY);
 8004244:	465a      	mov	r2, fp
 8004246:	2101      	movs	r1, #1
 8004248:	6810      	ldr	r0, [r2, #0]
 800424a:	4249      	negs	r1, r1
 800424c:	f7fc fe28 	bl	8000ea0 <xQueueSemaphoreTake>

        // Clamp -- I don't know the name in English
        command.mask = (Clamp_MSK);
 8004250:	2220      	movs	r2, #32
 8004252:	2320      	movs	r3, #32
        command.state = Clamp_ON ;
        m_cmd = &command;
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 8004254:	a905      	add	r1, sp, #20
        command.mask = (Clamp_MSK);
 8004256:	9206      	str	r2, [sp, #24]
 8004258:	9307      	str	r3, [sp, #28]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 800425a:	6830      	ldr	r0, [r6, #0]
 800425c:	2300      	movs	r3, #0
 800425e:	2200      	movs	r2, #0
        m_cmd = &command;
 8004260:	9705      	str	r7, [sp, #20]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 8004262:	f7fc f8ff 	bl	8000464 <xQueueGenericSend>

        //wait for the clamp
        mAscenseur.sem_id = 3;
        mAscenseur.sensor_id = Clamped_MSK;
        mAscenseur.sensor_state = Clamped_ON;
 8004266:	4642      	mov	r2, r8
        mAscenseur.sensor_id = Clamped_MSK;
 8004268:	2320      	movs	r3, #32
        mAscenseur.sensor_state = Clamped_ON;
 800426a:	60a2      	str	r2, [r4, #8]
        ps = &mAscenseur;
        // Send message to the Subscribe Queue
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 800426c:	4652      	mov	r2, sl
        mAscenseur.sensor_id = Clamped_MSK;
 800426e:	6063      	str	r3, [r4, #4]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004270:	a904      	add	r1, sp, #16
 8004272:	2300      	movs	r3, #0
 8004274:	6810      	ldr	r0, [r2, #0]
 8004276:	2200      	movs	r2, #0
        mAscenseur.sem_id = 3;
 8004278:	7025      	strb	r5, [r4, #0]
        ps = &mAscenseur;
 800427a:	9404      	str	r4, [sp, #16]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 800427c:	f7fc f8f2 	bl	8000464 <xQueueGenericSend>
        // wait forever for the semaphore
        xSemaphoreTake(xSemAscenseur, portMAX_DELAY);
 8004280:	464a      	mov	r2, r9
 8004282:	2101      	movs	r1, #1
 8004284:	6810      	ldr	r0, [r2, #0]
 8004286:	4249      	negs	r1, r1
 8004288:	f7fc fe0a 	bl	8000ea0 <xQueueSemaphoreTake>

        // open the door
        command.mask = (Porte_MSK |Ascenceur_to_limit_MSK|Monter_Ascenseur_MSK);
 800428c:	2292      	movs	r2, #146	; 0x92
 800428e:	2308      	movs	r3, #8
 8004290:	0092      	lsls	r2, r2, #2
 8004292:	9206      	str	r2, [sp, #24]
 8004294:	9307      	str	r3, [sp, #28]
        command.state = Porte_ON |Ascenceur_to_limit_OFF|Monter_Ascenseur_OFF;
        m_cmd = &command;
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 8004296:	a905      	add	r1, sp, #20
 8004298:	2300      	movs	r3, #0
 800429a:	2200      	movs	r2, #0
 800429c:	6830      	ldr	r0, [r6, #0]
        m_cmd = &command;
 800429e:	9705      	str	r7, [sp, #20]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 80042a0:	f7fc f8e0 	bl	8000464 <xQueueGenericSend>

        // wait to open it
        mAscenseur.sem_id = 3;
        mAscenseur.sensor_id = Porte_Ouverte_MSK ;
        mAscenseur.sensor_state = Porte_Ouverte_ON ;
 80042a4:	4641      	mov	r1, r8
        mAscenseur.sensor_id = Porte_Ouverte_MSK ;
 80042a6:	2208      	movs	r2, #8
        mAscenseur.sensor_state = Porte_Ouverte_ON ;
 80042a8:	60a1      	str	r1, [r4, #8]
        ps = &mAscenseur;
        // Send message to the Subscribe Queue
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80042aa:	4651      	mov	r1, sl
 80042ac:	2300      	movs	r3, #0
        mAscenseur.sensor_id = Porte_Ouverte_MSK ;
 80042ae:	6062      	str	r2, [r4, #4]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80042b0:	6808      	ldr	r0, [r1, #0]
 80042b2:	2200      	movs	r2, #0
 80042b4:	a904      	add	r1, sp, #16
        mAscenseur.sem_id = 3;
 80042b6:	7025      	strb	r5, [r4, #0]
        ps = &mAscenseur;
 80042b8:	9404      	str	r4, [sp, #16]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80042ba:	f7fc f8d3 	bl	8000464 <xQueueGenericSend>
        // wait forever for the semaphore
        xSemaphoreTake(xSemAscenseur, portMAX_DELAY);
 80042be:	4649      	mov	r1, r9
 80042c0:	6808      	ldr	r0, [r1, #0]
 80042c2:	2101      	movs	r1, #1
 80042c4:	4249      	negs	r1, r1
 80042c6:	f7fc fdeb 	bl	8000ea0 <xQueueSemaphoreTake>

        // wait for the door limit
        mAscenseur.sem_id = 3;
        mAscenseur.sensor_id = Limite_Porte_MSK;
 80042ca:	2180      	movs	r1, #128	; 0x80
        mAscenseur.sensor_state = Limite_Porte_OFF;
        ps = &mAscenseur;
        // Send message to the Subscribe Queue
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80042cc:	4653      	mov	r3, sl
        mAscenseur.sensor_state = Limite_Porte_OFF;
 80042ce:	2000      	movs	r0, #0
        mAscenseur.sensor_id = Limite_Porte_MSK;
 80042d0:	0109      	lsls	r1, r1, #4
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80042d2:	2200      	movs	r2, #0
        mAscenseur.sensor_id = Limite_Porte_MSK;
 80042d4:	6061      	str	r1, [r4, #4]
        mAscenseur.sensor_state = Limite_Porte_OFF;
 80042d6:	60a0      	str	r0, [r4, #8]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80042d8:	a904      	add	r1, sp, #16
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	2300      	movs	r3, #0
        mAscenseur.sem_id = 3;
 80042de:	7025      	strb	r5, [r4, #0]
        ps = &mAscenseur;
 80042e0:	9404      	str	r4, [sp, #16]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80042e2:	f7fc f8bf 	bl	8000464 <xQueueGenericSend>
        // wait forever for the semaphore
        xSemaphoreTake(xSemAscenseur, portMAX_DELAY);
 80042e6:	464b      	mov	r3, r9
 80042e8:	2101      	movs	r1, #1
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	4249      	negs	r1, r1
 80042ee:	f7fc fdd7 	bl	8000ea0 <xQueueSemaphoreTake>

        // go down
        command.mask = (Descendre_Ascenseur_MSK);
 80042f2:	2280      	movs	r2, #128	; 0x80
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	0052      	lsls	r2, r2, #1
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	9206      	str	r2, [sp, #24]
 80042fc:	9307      	str	r3, [sp, #28]
        command.state =  Descendre_Ascenseur_ON;
        m_cmd = &command;
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 80042fe:	a905      	add	r1, sp, #20
 8004300:	2300      	movs	r3, #0
 8004302:	2200      	movs	r2, #0
 8004304:	6830      	ldr	r0, [r6, #0]
        m_cmd = &command;
 8004306:	9705      	str	r7, [sp, #20]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 8004308:	f7fc f8ac 	bl	8000464 <xQueueGenericSend>

        // wait for the elevator to go down
        mAscenseur.sem_id = 3;
        mAscenseur.sensor_id = Ascenceur_Etage_1_MSK;
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	6063      	str	r3, [r4, #4]
        mAscenseur.sensor_state = Ascenceur_Etage_1_OFF;
 8004312:	2000      	movs	r0, #0
        ps = &mAscenseur;
        // Send message to the Subscribe Queue
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004314:	4653      	mov	r3, sl
 8004316:	2200      	movs	r2, #0
        mAscenseur.sensor_state = Ascenceur_Etage_1_OFF;
 8004318:	60a0      	str	r0, [r4, #8]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 800431a:	a904      	add	r1, sp, #16
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	2300      	movs	r3, #0
        mAscenseur.sem_id = 3;
 8004320:	7025      	strb	r5, [r4, #0]
        ps = &mAscenseur;
 8004322:	9404      	str	r4, [sp, #16]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004324:	f7fc f89e 	bl	8000464 <xQueueGenericSend>
        // wait forever for the semaphore
        xSemaphoreTake(xSemAscenseur, portMAX_DELAY);
 8004328:	464b      	mov	r3, r9
 800432a:	2101      	movs	r1, #1
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	4249      	negs	r1, r1
 8004330:	f7fc fdb6 	bl	8000ea0 <xQueueSemaphoreTake>

        // close the door and turn off the clamp
        command.mask = ( Clamp_MSK|Porte_MSK);
 8004334:	2228      	movs	r2, #40	; 0x28
 8004336:	2300      	movs	r3, #0
        command.state = Clamp_OFF| Porte_OFF;
        m_cmd = &command;
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 8004338:	a905      	add	r1, sp, #20
        command.mask = ( Clamp_MSK|Porte_MSK);
 800433a:	9206      	str	r2, [sp, #24]
 800433c:	9307      	str	r3, [sp, #28]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 800433e:	6830      	ldr	r0, [r6, #0]
 8004340:	2200      	movs	r2, #0
 8004342:	2300      	movs	r3, #0
        m_cmd = &command;
 8004344:	9705      	str	r7, [sp, #20]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 8004346:	f7fc f88d 	bl	8000464 <xQueueGenericSend>

        // Semaphore of sync
        xSemaphoreTake(xSem3, portMAX_DELAY);
 800434a:	465b      	mov	r3, fp
 800434c:	2101      	movs	r1, #1
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	4249      	negs	r1, r1
 8004352:	f7fc fda5 	bl	8000ea0 <xQueueSemaphoreTake>

        // clamp again (second time)
        command.mask = (Clamp_MSK|Porte_MSK);
 8004356:	2228      	movs	r2, #40	; 0x28
 8004358:	2328      	movs	r3, #40	; 0x28
        command.state = Clamp_ON |Porte_ON;
        m_cmd = &command;
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 800435a:	a905      	add	r1, sp, #20
        command.mask = (Clamp_MSK|Porte_MSK);
 800435c:	9206      	str	r2, [sp, #24]
 800435e:	9307      	str	r3, [sp, #28]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 8004360:	6830      	ldr	r0, [r6, #0]
 8004362:	2300      	movs	r3, #0
 8004364:	2200      	movs	r2, #0
        m_cmd = &command;
 8004366:	9705      	str	r7, [sp, #20]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 8004368:	f7fc f87c 	bl	8000464 <xQueueGenericSend>

        // Wait for door open
        mAscenseur.sem_id = 3;
        mAscenseur.sensor_id = Porte_Ouverte_MSK ;
        mAscenseur.sensor_state = Porte_Ouverte_ON ;
 800436c:	4643      	mov	r3, r8
        mAscenseur.sensor_id = Porte_Ouverte_MSK ;
 800436e:	2208      	movs	r2, #8
        mAscenseur.sensor_state = Porte_Ouverte_ON ;
 8004370:	60a3      	str	r3, [r4, #8]
        ps = &mAscenseur;
        // Send message to the Subscribe Queue
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004372:	4653      	mov	r3, sl
        mAscenseur.sensor_id = Porte_Ouverte_MSK ;
 8004374:	6062      	str	r2, [r4, #4]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004376:	a904      	add	r1, sp, #16
 8004378:	2200      	movs	r2, #0
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	2300      	movs	r3, #0
        mAscenseur.sem_id = 3;
 800437e:	7025      	strb	r5, [r4, #0]
        ps = &mAscenseur;
 8004380:	9404      	str	r4, [sp, #16]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004382:	f7fc f86f 	bl	8000464 <xQueueGenericSend>
        // wait forever for the semaphore
        xSemaphoreTake(xSemAscenseur, portMAX_DELAY);
 8004386:	464b      	mov	r3, r9
 8004388:	2101      	movs	r1, #1
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	4249      	negs	r1, r1
 800438e:	f7fc fd87 	bl	8000ea0 <xQueueSemaphoreTake>

        // Wait for door limit
        mAscenseur.sem_id = 3;
        mAscenseur.sensor_id = Limite_Porte_MSK;
        mAscenseur.sensor_state = Limite_Porte_ON;
 8004392:	4643      	mov	r3, r8
        mAscenseur.sensor_id = Limite_Porte_MSK;
 8004394:	2180      	movs	r1, #128	; 0x80
        mAscenseur.sensor_state = Limite_Porte_ON;
 8004396:	60a3      	str	r3, [r4, #8]
        ps = &mAscenseur;
        // Send message to the Subscribe Queue
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004398:	4653      	mov	r3, sl
        mAscenseur.sensor_id = Limite_Porte_MSK;
 800439a:	0109      	lsls	r1, r1, #4
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 800439c:	2200      	movs	r2, #0
        mAscenseur.sensor_id = Limite_Porte_MSK;
 800439e:	6061      	str	r1, [r4, #4]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	a904      	add	r1, sp, #16
 80043a4:	2300      	movs	r3, #0
        mAscenseur.sem_id = 3;
 80043a6:	7025      	strb	r5, [r4, #0]
        ps = &mAscenseur;
 80043a8:	9404      	str	r4, [sp, #16]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80043aa:	f7fc f85b 	bl	8000464 <xQueueGenericSend>
        // wait forever for the semaphore
        xSemaphoreTake(xSemAscenseur, portMAX_DELAY);
 80043ae:	464b      	mov	r3, r9
 80043b0:	2101      	movs	r1, #1
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	4249      	negs	r1, r1
 80043b6:	f7fc fd73 	bl	8000ea0 <xQueueSemaphoreTake>

        // descend to the limit
        command.mask = ( Descendre_Ascenseur_MSK | Ascenceur_to_limit_MSK);
 80043ba:	22c0      	movs	r2, #192	; 0xc0
 80043bc:	23c0      	movs	r3, #192	; 0xc0
 80043be:	0092      	lsls	r2, r2, #2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	9206      	str	r2, [sp, #24]
 80043c4:	9307      	str	r3, [sp, #28]
        command.state =  Descendre_Ascenseur_ON | Ascenceur_to_limit_ON;
        m_cmd = &command;
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 80043c6:	a905      	add	r1, sp, #20
 80043c8:	2300      	movs	r3, #0
 80043ca:	2200      	movs	r2, #0
 80043cc:	6830      	ldr	r0, [r6, #0]
        m_cmd = &command;
 80043ce:	9705      	str	r7, [sp, #20]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 80043d0:	f7fc f848 	bl	8000464 <xQueueGenericSend>

        // Wait for elevator to descend
        mAscenseur.sem_id = 3;
        mAscenseur.sensor_id = Ascenceur_Etage_RDC_MSK;
 80043d4:	2340      	movs	r3, #64	; 0x40
 80043d6:	6063      	str	r3, [r4, #4]
        mAscenseur.sensor_state = Ascenceur_Etage_RDC_ON;
 80043d8:	4643      	mov	r3, r8
 80043da:	60a3      	str	r3, [r4, #8]
        ps = &mAscenseur;
        // Send message to the Subscribe Queue
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80043dc:	4653      	mov	r3, sl
 80043de:	2200      	movs	r2, #0
 80043e0:	a904      	add	r1, sp, #16
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	2300      	movs	r3, #0
        mAscenseur.sem_id = 3;
 80043e6:	7025      	strb	r5, [r4, #0]
        ps = &mAscenseur;
 80043e8:	9404      	str	r4, [sp, #16]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80043ea:	f7fc f83b 	bl	8000464 <xQueueGenericSend>
        // wait forever for the semaphore
        xSemaphoreTake(xSemAscenseur, portMAX_DELAY);
 80043ee:	464b      	mov	r3, r9
 80043f0:	2101      	movs	r1, #1
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	4249      	negs	r1, r1
 80043f6:	f7fc fd53 	bl	8000ea0 <xQueueSemaphoreTake>

        // Close the door and deactivate the limit
        command.mask = (Ascenceur_to_limit_MSK | Porte_MSK | Clamped_MSK | Descendre_Ascenseur_MSK);
 80043fa:	22ca      	movs	r2, #202	; 0xca
 80043fc:	2300      	movs	r3, #0
 80043fe:	0092      	lsls	r2, r2, #2
 8004400:	9206      	str	r2, [sp, #24]
 8004402:	9307      	str	r3, [sp, #28]
        command.state = Ascenceur_to_limit_OFF | Porte_OFF | Clamped_OFF | Descendre_Ascenseur_OFF;
        m_cmd = &command;
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 8004404:	a905      	add	r1, sp, #20
 8004406:	2300      	movs	r3, #0
 8004408:	2200      	movs	r2, #0
 800440a:	6830      	ldr	r0, [r6, #0]
        m_cmd = &command;
 800440c:	9705      	str	r7, [sp, #20]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 800440e:	f7fc f829 	bl	8000464 <xQueueGenericSend>
        xSemaphoreGive(xSem2);
 8004412:	9b01      	ldr	r3, [sp, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	2100      	movs	r1, #0
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	2300      	movs	r3, #0
 800441c:	f7fc f822 	bl	8000464 <xQueueGenericSend>

        vTaskDelayUntil(&xLastWakeTime, 100 / portTICK_RATE_MS); //200 ms wait
 8004420:	2164      	movs	r1, #100	; 0x64
 8004422:	a803      	add	r0, sp, #12
 8004424:	f7fd fcb8 	bl	8001d98 <vTaskDelayUntil>
    while (1)
 8004428:	e6e3      	b.n	80041f2 <vTaskAscenseur+0x32>
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	200038b8 	.word	0x200038b8
 8004430:	200038a8 	.word	0x200038a8
 8004434:	200038d0 	.word	0x200038d0
 8004438:	200038bc 	.word	0x200038bc
 800443c:	200038b4 	.word	0x200038b4

08004440 <vTaskPalette>:
    }
}


void vTaskPalette(void *pvParameters)
{
 8004440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004442:	4657      	mov	r7, sl
 8004444:	4645      	mov	r5, r8
 8004446:	46de      	mov	lr, fp
 8004448:	464e      	mov	r6, r9
 800444a:	b5e0      	push	{r5, r6, r7, lr}
 800444c:	b08d      	sub	sp, #52	; 0x34
    portTickType xLastWakeTime;
    // Initialize timing
    xLastWakeTime = xTaskGetTickCount();
 800444e:	f7fd fb13 	bl	8001a78 <xTaskGetTickCount>

    command_message_t *m_cmd;
    command_message_t command;

    command.state = 0;
    command.mask = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	2200      	movs	r2, #0
 8004456:	9206      	str	r2, [sp, #24]
 8004458:	9307      	str	r3, [sp, #28]
 800445a:	4b5b      	ldr	r3, [pc, #364]	; (80045c8 <vTaskPalette+0x188>)
 800445c:	4d5b      	ldr	r5, [pc, #364]	; (80045cc <vTaskPalette+0x18c>)
 800445e:	469a      	mov	sl, r3
 8004460:	4b5b      	ldr	r3, [pc, #364]	; (80045d0 <vTaskPalette+0x190>)
    xLastWakeTime = xTaskGetTickCount();
 8004462:	9003      	str	r0, [sp, #12]
    command.mask = 0;
 8004464:	4698      	mov	r8, r3
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
        // Synchronization semaphore
        xSemaphoreTake(xSemPalette, portMAX_DELAY);

        // Turn on the pallet distribution
        command.mask = Distribution_Palette_MSK;
 8004466:	4646      	mov	r6, r8
 8004468:	46a8      	mov	r8, r5
 800446a:	4b5a      	ldr	r3, [pc, #360]	; (80045d4 <vTaskPalette+0x194>)
 800446c:	af09      	add	r7, sp, #36	; 0x24
 800446e:	ac06      	add	r4, sp, #24
 8004470:	9301      	str	r3, [sp, #4]
        mPalette.sensor_id = Sortie_Palette_MSK;
 8004472:	2380      	movs	r3, #128	; 0x80
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004474:	4652      	mov	r2, sl
        mPalette.sensor_id = Sortie_Palette_MSK;
 8004476:	00db      	lsls	r3, r3, #3
        mPalette.sem_id = 2;
 8004478:	2502      	movs	r5, #2
        mPalette.sensor_id = Sortie_Palette_MSK;
 800447a:	4699      	mov	r9, r3
 800447c:	607b      	str	r3, [r7, #4]
        mPalette.sensor_state = Sortie_Palette_OFF;
 800447e:	2300      	movs	r3, #0
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004480:	a904      	add	r1, sp, #16
 8004482:	6810      	ldr	r0, [r2, #0]
 8004484:	2200      	movs	r2, #0
        mPalette.sensor_state = Sortie_Palette_OFF;
 8004486:	60bb      	str	r3, [r7, #8]
        mPalette.sem_id = 2;
 8004488:	703d      	strb	r5, [r7, #0]
        ps = &mPalette;
 800448a:	9704      	str	r7, [sp, #16]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 800448c:	f7fb ffea 	bl	8000464 <xQueueGenericSend>
        xSemaphoreTake(xSemPalette, portMAX_DELAY);
 8004490:	4642      	mov	r2, r8
 8004492:	2101      	movs	r1, #1
 8004494:	6810      	ldr	r0, [r2, #0]
 8004496:	4249      	negs	r1, r1
 8004498:	f7fc fd02 	bl	8000ea0 <xQueueSemaphoreTake>
        command.mask = Distribution_Palette_MSK;
 800449c:	2280      	movs	r2, #128	; 0x80
 800449e:	2380      	movs	r3, #128	; 0x80
 80044a0:	00d2      	lsls	r2, r2, #3
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	9206      	str	r2, [sp, #24]
 80044a6:	9307      	str	r3, [sp, #28]
        command.state = Distribution_Palette_ON;
        m_cmd = &command;
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 80044a8:	a905      	add	r1, sp, #20
 80044aa:	2300      	movs	r3, #0
 80044ac:	2200      	movs	r2, #0
 80044ae:	6830      	ldr	r0, [r6, #0]
        m_cmd = &command;
 80044b0:	9405      	str	r4, [sp, #20]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 80044b2:	f7fb ffd7 	bl	8000464 <xQueueGenericSend>

        // Wait for the distribution
        vTaskDelay(500);
 80044b6:	20fa      	movs	r0, #250	; 0xfa
 80044b8:	0040      	lsls	r0, r0, #1
 80044ba:	f7fd fcd9 	bl	8001e70 <vTaskDelay>

        // Turn off the pallet distribution
        command.mask = Distribution_Palette_MSK;
 80044be:	2280      	movs	r2, #128	; 0x80
 80044c0:	2300      	movs	r3, #0
 80044c2:	00d2      	lsls	r2, r2, #3
 80044c4:	9206      	str	r2, [sp, #24]
 80044c6:	9307      	str	r3, [sp, #28]
        command.state = Distribution_Palette_OFF;
        m_cmd = &command;
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 80044c8:	a905      	add	r1, sp, #20
 80044ca:	2300      	movs	r3, #0
 80044cc:	2200      	movs	r2, #0
 80044ce:	6830      	ldr	r0, [r6, #0]
        m_cmd = &command;
 80044d0:	9405      	str	r4, [sp, #20]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 80044d2:	f7fb ffc7 	bl	8000464 <xQueueGenericSend>


        // Wait for the pallet to arrive
        mPalette.sem_id = 2;
        mPalette.sensor_id = Entree_Palette_MSK;
        mPalette.sensor_state = Entree_Palette_ON;
 80044d6:	2201      	movs	r2, #1
        mPalette.sensor_id = Entree_Palette_MSK;
 80044d8:	2380      	movs	r3, #128	; 0x80
        mPalette.sensor_state = Entree_Palette_ON;
 80044da:	4693      	mov	fp, r2
 80044dc:	60ba      	str	r2, [r7, #8]
        ps = &mPalette;
        // Send message to the Subscribe Queue
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80044de:	4652      	mov	r2, sl
        mPalette.sensor_id = Entree_Palette_MSK;
 80044e0:	019b      	lsls	r3, r3, #6
 80044e2:	607b      	str	r3, [r7, #4]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80044e4:	a904      	add	r1, sp, #16
 80044e6:	2300      	movs	r3, #0
 80044e8:	6810      	ldr	r0, [r2, #0]
 80044ea:	2200      	movs	r2, #0
        mPalette.sem_id = 2;
 80044ec:	703d      	strb	r5, [r7, #0]
        ps = &mPalette;
 80044ee:	9704      	str	r7, [sp, #16]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 80044f0:	f7fb ffb8 	bl	8000464 <xQueueGenericSend>
        // wait forever for the semaphore
        xSemaphoreTake(xSemPalette, portMAX_DELAY);
 80044f4:	4642      	mov	r2, r8
 80044f6:	2101      	movs	r1, #1
 80044f8:	6810      	ldr	r0, [r2, #0]
 80044fa:	4249      	negs	r1, r1
 80044fc:	f7fc fcd0 	bl	8000ea0 <xQueueSemaphoreTake>

        // Turn on the pallet loading conveyor
        command.mask = Charger_Palette_MSK;
 8004500:	2280      	movs	r2, #128	; 0x80
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	0112      	lsls	r2, r2, #4
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	9206      	str	r2, [sp, #24]
 800450a:	9307      	str	r3, [sp, #28]
        command.state = Charger_Palette_ON;
        m_cmd = &command;
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 800450c:	a905      	add	r1, sp, #20
 800450e:	2300      	movs	r3, #0
 8004510:	2200      	movs	r2, #0
 8004512:	6830      	ldr	r0, [r6, #0]
        m_cmd = &command;
 8004514:	9405      	str	r4, [sp, #20]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 8004516:	f7fb ffa5 	bl	8000464 <xQueueGenericSend>


        // Wait for the pallet to arrive at the exit
        mPalette.sem_id = 2;
        mPalette.sensor_id = Sortie_Palette_MSK;
 800451a:	4649      	mov	r1, r9
 800451c:	6079      	str	r1, [r7, #4]
        mPalette.sensor_state = Sortie_Palette_ON;
 800451e:	4659      	mov	r1, fp
 8004520:	60b9      	str	r1, [r7, #8]
        ps = &mPalette;
        // Send message to the Subscribe Queue
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004522:	4651      	mov	r1, sl
 8004524:	2300      	movs	r3, #0
 8004526:	2200      	movs	r2, #0
 8004528:	6808      	ldr	r0, [r1, #0]
 800452a:	a904      	add	r1, sp, #16
        mPalette.sem_id = 2;
 800452c:	703d      	strb	r5, [r7, #0]
        ps = &mPalette;
 800452e:	9704      	str	r7, [sp, #16]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004530:	f7fb ff98 	bl	8000464 <xQueueGenericSend>
        // wait forever for the semaphore
        xSemaphoreTake(xSemPalette, portMAX_DELAY);
 8004534:	4641      	mov	r1, r8
 8004536:	6808      	ldr	r0, [r1, #0]
 8004538:	2101      	movs	r1, #1
 800453a:	4249      	negs	r1, r1
 800453c:	f7fc fcb0 	bl	8000ea0 <xQueueSemaphoreTake>

        // Turn off the pallet loading conveyor
        command.mask = Charger_Palette_MSK;
 8004540:	2180      	movs	r1, #128	; 0x80
 8004542:	2200      	movs	r2, #0
 8004544:	0109      	lsls	r1, r1, #4
 8004546:	9106      	str	r1, [sp, #24]
 8004548:	9207      	str	r2, [sp, #28]
        command.state = Charger_Palette_OFF;
        m_cmd = &command;
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 800454a:	2300      	movs	r3, #0
 800454c:	2200      	movs	r2, #0
 800454e:	a905      	add	r1, sp, #20
 8004550:	6830      	ldr	r0, [r6, #0]
        m_cmd = &command;
 8004552:	9405      	str	r4, [sp, #20]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 8004554:	f7fb ff86 	bl	8000464 <xQueueGenericSend>

        // Synchronization semaphore
        xSemaphoreTake(xSem2, portMAX_DELAY);
 8004558:	2101      	movs	r1, #1
 800455a:	9801      	ldr	r0, [sp, #4]
 800455c:	4249      	negs	r1, r1
 800455e:	6800      	ldr	r0, [r0, #0]
 8004560:	f7fc fc9e 	bl	8000ea0 <xQueueSemaphoreTake>

        // Turn on the pallet loading conveyor
        command.mask = Charger_Palette_MSK;
 8004564:	2280      	movs	r2, #128	; 0x80
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	0112      	lsls	r2, r2, #4
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	9206      	str	r2, [sp, #24]
 800456e:	9307      	str	r3, [sp, #28]
        command.state = Charger_Palette_ON;
        m_cmd = &command;
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 8004570:	a905      	add	r1, sp, #20
 8004572:	2300      	movs	r3, #0
 8004574:	2200      	movs	r2, #0
 8004576:	6830      	ldr	r0, [r6, #0]
        m_cmd = &command;
 8004578:	9405      	str	r4, [sp, #20]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 800457a:	f7fb ff73 	bl	8000464 <xQueueGenericSend>


        // Wait for the pallet to exit
        mPalette.sem_id = 2;
        mPalette.sensor_id = Sortie_Palette_MSK;
        mPalette.sensor_state = Sortie_Palette_OFF;
 800457e:	2300      	movs	r3, #0
        mPalette.sensor_id = Sortie_Palette_MSK;
 8004580:	464a      	mov	r2, r9
        mPalette.sensor_state = Sortie_Palette_OFF;
 8004582:	60bb      	str	r3, [r7, #8]
        ps = &mPalette;
        // Send message to the Subscribe Queue
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004584:	4653      	mov	r3, sl
        mPalette.sem_id = 2;
 8004586:	703d      	strb	r5, [r7, #0]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004588:	ad04      	add	r5, sp, #16
 800458a:	0029      	movs	r1, r5
        mPalette.sensor_id = Sortie_Palette_MSK;
 800458c:	607a      	str	r2, [r7, #4]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	2200      	movs	r2, #0
 8004592:	2300      	movs	r3, #0
        ps = &mPalette;
 8004594:	9704      	str	r7, [sp, #16]
        xQueueSendToBack(xSubcribeQueue, &ps, 0);
 8004596:	f7fb ff65 	bl	8000464 <xQueueGenericSend>
        // wait forever for the semaphore
        xSemaphoreTake(xSemPalette, portMAX_DELAY);
 800459a:	4643      	mov	r3, r8
 800459c:	2101      	movs	r1, #1
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	4249      	negs	r1, r1
 80045a2:	f7fc fc7d 	bl	8000ea0 <xQueueSemaphoreTake>

        // Turn off the pallet loading conveyor
        command.mask = Charger_Palette_MSK;
 80045a6:	2180      	movs	r1, #128	; 0x80
 80045a8:	2200      	movs	r2, #0
 80045aa:	0109      	lsls	r1, r1, #4
 80045ac:	9106      	str	r1, [sp, #24]
 80045ae:	9207      	str	r2, [sp, #28]
        command.state = Charger_Palette_OFF;
        m_cmd = &command;
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 80045b0:	2300      	movs	r3, #0
 80045b2:	a905      	add	r1, sp, #20
 80045b4:	2200      	movs	r2, #0
 80045b6:	6830      	ldr	r0, [r6, #0]
        m_cmd = &command;
 80045b8:	9405      	str	r4, [sp, #20]
        xQueueSendToBack(xComQueue, &m_cmd, 0);
 80045ba:	f7fb ff53 	bl	8000464 <xQueueGenericSend>

        vTaskDelayUntil(&xLastWakeTime, 200 / portTICK_RATE_MS); //200 ms wait
 80045be:	21c8      	movs	r1, #200	; 0xc8
 80045c0:	a803      	add	r0, sp, #12
 80045c2:	f7fd fbe9 	bl	8001d98 <vTaskDelayUntil>
    while (1)
 80045c6:	e754      	b.n	8004472 <vTaskPalette+0x32>
 80045c8:	200038d0 	.word	0x200038d0
 80045cc:	200038c4 	.word	0x200038c4
 80045d0:	200038a8 	.word	0x200038a8
 80045d4:	200038b4 	.word	0x200038b4

080045d8 <vTaskWrite>:
    }
}


void vTaskWrite(void *pvParameters)
{
 80045d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045da:	46de      	mov	lr, fp
 80045dc:	464e      	mov	r6, r9
 80045de:	4657      	mov	r7, sl
 80045e0:	4645      	mov	r5, r8
 80045e2:	b5e0      	push	{r5, r6, r7, lr}
 80045e4:	b083      	sub	sp, #12
    command_message_t *c_message;

    portTickType xLastWakeTime;

    // Initialize timing
    xLastWakeTime = xTaskGetTickCount();
 80045e6:	f7fd fa47 	bl	8001a78 <xTaskGetTickCount>
 80045ea:	9001      	str	r0, [sp, #4]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045ec:	20c2      	movs	r0, #194	; 0xc2
 80045ee:	2180      	movs	r1, #128	; 0x80
 80045f0:	4a2e      	ldr	r2, [pc, #184]	; (80046ac <vTaskWrite+0xd4>)
 80045f2:	0080      	lsls	r0, r0, #2
 80045f4:	5813      	ldr	r3, [r2, r0]
 80045f6:	0609      	lsls	r1, r1, #24
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	0a1b      	lsrs	r3, r3, #8
 80045fc:	430b      	orrs	r3, r1
 80045fe:	5013      	str	r3, [r2, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004600:	2380      	movs	r3, #128	; 0x80
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	4b2a      	ldr	r3, [pc, #168]	; (80046b0 <vTaskWrite+0xd8>)
    uint32_t memoire = 0;
 8004608:	2500      	movs	r5, #0
 800460a:	469b      	mov	fp, r3
 800460c:	4b29      	ldr	r3, [pc, #164]	; (80046b4 <vTaskWrite+0xdc>)
 800460e:	4e2a      	ldr	r6, [pc, #168]	; (80046b8 <vTaskWrite+0xe0>)
 8004610:	469a      	mov	sl, r3
 8004612:	4b2a      	ldr	r3, [pc, #168]	; (80046bc <vTaskWrite+0xe4>)
 8004614:	4699      	mov	r9, r3

    // Now enter the task loop
    while (1)
    {
        // Wait for something in the message Queue
        xStatus = xQueueReceive(xComQueue, &c_message, portMAX_DELAY);
 8004616:	465b      	mov	r3, fp
 8004618:	2201      	movs	r2, #1
 800461a:	4669      	mov	r1, sp
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	4252      	negs	r2, r2
 8004620:	f7fc fa30 	bl	8000a84 <xQueueReceive>

        // Take Mutex
        xSemaphoreTake(xConsoleMutex, portMAX_DELAY);
 8004624:	4653      	mov	r3, sl
 8004626:	2101      	movs	r1, #1
        xStatus = xQueueReceive(xComQueue, &c_message, portMAX_DELAY);
 8004628:	0004      	movs	r4, r0
        xSemaphoreTake(xConsoleMutex, portMAX_DELAY);
 800462a:	4249      	negs	r1, r1
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	f7fc fc37 	bl	8000ea0 <xQueueSemaphoreTake>

        // Test if the message is received
        if (xStatus == pdPASS)
 8004632:	2c01      	cmp	r4, #1
 8004634:	d134      	bne.n	80046a0 <vTaskWrite+0xc8>
        {
            /********************************************************************************************/
            // Definition of bits for FactorIO
            cmd = *c_message;
 8004636:	9b00      	ldr	r3, [sp, #0]
            tx_dma_buffer[5] = 0x00;                                // CRC (not yet implemented)
            tx_dma_buffer[6] = '\n';                                // End byte
            /********************************************************************************************/

            // Set Memory Buffer size
            DMA1_Channel4->CNDTR = 7;
 8004638:	4f21      	ldr	r7, [pc, #132]	; (80046c0 <vTaskWrite+0xe8>)
            memoire &= ~cmd.mask;
 800463a:	681a      	ldr	r2, [r3, #0]
            memoire |= cmd.state;
 800463c:	685b      	ldr	r3, [r3, #4]
            memoire &= ~cmd.mask;
 800463e:	4395      	bics	r5, r2
            memoire |= cmd.state;
 8004640:	431d      	orrs	r5, r3
            tx_dma_buffer[0] = TAG_ACTUATORS;                     // Actuators tag
 8004642:	23ad      	movs	r3, #173	; 0xad
 8004644:	7033      	strb	r3, [r6, #0]
            tx_dma_buffer[2] = (uint8_t) ((memoire & 0x0000FF00) >> 8U); // data byte #2
 8004646:	0a2b      	lsrs	r3, r5, #8
 8004648:	70b3      	strb	r3, [r6, #2]
            tx_dma_buffer[3] = (uint8_t) ((memoire & 0x00FF0000) >> 16U);// data byte #2
 800464a:	0c2b      	lsrs	r3, r5, #16
 800464c:	70f3      	strb	r3, [r6, #3]
            tx_dma_buffer[4] = (uint8_t) ((memoire & 0xFF000000) >> 24U);// data byte #2
 800464e:	0e2b      	lsrs	r3, r5, #24
 8004650:	7133      	strb	r3, [r6, #4]
            tx_dma_buffer[5] = 0x00;                                // CRC (not yet implemented)
 8004652:	2300      	movs	r3, #0
 8004654:	7173      	strb	r3, [r6, #5]
            tx_dma_buffer[6] = '\n';                                // End byte
 8004656:	330a      	adds	r3, #10
 8004658:	71b3      	strb	r3, [r6, #6]
            DMA1_Channel4->CNDTR = 7;
 800465a:	3b03      	subs	r3, #3
            tx_dma_buffer[1] = (uint8_t) (memoire & 0x000000FF);  // data byte #1
 800465c:	7075      	strb	r5, [r6, #1]
            DMA1_Channel4->CNDTR = 7;
 800465e:	607b      	str	r3, [r7, #4]

            // Enable DMA1 Channel 4
            DMA1_Channel4->CCR |= DMA_CCR_EN;
 8004660:	683b      	ldr	r3, [r7, #0]

            // Enable USART2 DMA Request on T
            USART2->CR3 |= USART_CR3_DMAT;
 8004662:	2280      	movs	r2, #128	; 0x80
            DMA1_Channel4->CCR |= DMA_CCR_EN;
 8004664:	4323      	orrs	r3, r4
 8004666:	603b      	str	r3, [r7, #0]
            USART2->CR3 |= USART_CR3_DMAT;
 8004668:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <vTaskWrite+0xec>)
 800466a:	4698      	mov	r8, r3
 800466c:	4641      	mov	r1, r8
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	4313      	orrs	r3, r2
 8004672:	608b      	str	r3, [r1, #8]

            // Wait for Semaphore endlessly
            xSemaphoreTake(xSem_DMA_TC, portMAX_DELAY);
 8004674:	464b      	mov	r3, r9
 8004676:	2101      	movs	r1, #1
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	4249      	negs	r1, r1
 800467c:	f7fc fc10 	bl	8000ea0 <xQueueSemaphoreTake>

            // Disable USART2 DMA Request on Tx
            USART2->CR3 &= ~USART_CR3_DMAT;
 8004680:	4643      	mov	r3, r8
 8004682:	2280      	movs	r2, #128	; 0x80
 8004684:	689b      	ldr	r3, [r3, #8]
            // Disable DMA1 Channel 4
            DMA1_Channel4->CCR &= ~DMA_CCR_EN;

            /****************************************************************************************************/
            // Release Mutex
            xSemaphoreGive(xConsoleMutex);
 8004686:	2100      	movs	r1, #0
            USART2->CR3 &= ~USART_CR3_DMAT;
 8004688:	4393      	bics	r3, r2
 800468a:	4642      	mov	r2, r8
 800468c:	6093      	str	r3, [r2, #8]
            DMA1_Channel4->CCR &= ~DMA_CCR_EN;
 800468e:	683b      	ldr	r3, [r7, #0]
            xSemaphoreGive(xConsoleMutex);
 8004690:	2200      	movs	r2, #0
            DMA1_Channel4->CCR &= ~DMA_CCR_EN;
 8004692:	43a3      	bics	r3, r4
 8004694:	603b      	str	r3, [r7, #0]
            xSemaphoreGive(xConsoleMutex);
 8004696:	4653      	mov	r3, sl
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	2300      	movs	r3, #0
 800469c:	f7fb fee2 	bl	8000464 <xQueueGenericSend>
        }
        vTaskDelayUntil(&xLastWakeTime, 200 / portTICK_RATE_MS); //200 ms wait
 80046a0:	21c8      	movs	r1, #200	; 0xc8
 80046a2:	a801      	add	r0, sp, #4
 80046a4:	f7fd fb78 	bl	8001d98 <vTaskDelayUntil>
        xStatus = xQueueReceive(xComQueue, &c_message, portMAX_DELAY);
 80046a8:	e7b5      	b.n	8004616 <vTaskWrite+0x3e>
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	e000e100 	.word	0xe000e100
 80046b0:	200038a8 	.word	0x200038a8
 80046b4:	200038ac 	.word	0x200038ac
 80046b8:	200038e4 	.word	0x200038e4
 80046bc:	200038c8 	.word	0x200038c8
 80046c0:	40020044 	.word	0x40020044
 80046c4:	40004400 	.word	0x40004400

080046c8 <vTaskRead>:
{
 80046c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ca:	46de      	mov	lr, fp
 80046cc:	4657      	mov	r7, sl
 80046ce:	464e      	mov	r6, r9
 80046d0:	4645      	mov	r5, r8
 80046d2:	b5e0      	push	{r5, r6, r7, lr}
 80046d4:	b0c5      	sub	sp, #276	; 0x114
    xLastWakeTime = xTaskGetTickCount();
 80046d6:	f7fd f9cf 	bl	8001a78 <xTaskGetTickCount>
void init_tab(subscribe_message_t *t)
{
    // Initialize the array to 0
    for (int i = 0; i < SIZE; i++)
    {
        t[i].sem_id = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	ac08      	add	r4, sp, #32
 80046de:	7023      	strb	r3, [r4, #0]
        t[i].sensor_id = 0;
 80046e0:	6063      	str	r3, [r4, #4]
        t[i].sensor_state = 0;
 80046e2:	60a3      	str	r3, [r4, #8]
        t[i].sensor_id = 0;
 80046e4:	6123      	str	r3, [r4, #16]
        t[i].sensor_state = 0;
 80046e6:	6163      	str	r3, [r4, #20]
        t[i].sensor_id = 0;
 80046e8:	61e3      	str	r3, [r4, #28]
        t[i].sensor_state = 0;
 80046ea:	6223      	str	r3, [r4, #32]
        t[i].sensor_id = 0;
 80046ec:	62a3      	str	r3, [r4, #40]	; 0x28
        t[i].sensor_state = 0;
 80046ee:	62e3      	str	r3, [r4, #44]	; 0x2c
    xSemaphoreGive(xSem1);
 80046f0:	4bca      	ldr	r3, [pc, #808]	; (8004a1c <vTaskRead+0x354>)
    xLastWakeTime = xTaskGetTickCount();
 80046f2:	9007      	str	r0, [sp, #28]
    xSemaphoreGive(xSem1);
 80046f4:	2200      	movs	r2, #0
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	2100      	movs	r1, #0
 80046fa:	2300      	movs	r3, #0
 80046fc:	f7fb feb2 	bl	8000464 <xQueueGenericSend>
 8004700:	2300      	movs	r3, #0
 8004702:	4699      	mov	r9, r3
 8004704:	4698      	mov	r8, r3
    int aux = 1;
 8004706:	3301      	adds	r3, #1
 8004708:	469b      	mov	fp, r3
 800470a:	4bc5      	ldr	r3, [pc, #788]	; (8004a20 <vTaskRead+0x358>)
    xSemaphoreGive(xSem1);
 800470c:	2700      	movs	r7, #0
 800470e:	469a      	mov	sl, r3
 8004710:	4bc4      	ldr	r3, [pc, #784]	; (8004a24 <vTaskRead+0x35c>)
 8004712:	2600      	movs	r6, #0
 8004714:	9301      	str	r3, [sp, #4]
 8004716:	4bc4      	ldr	r3, [pc, #784]	; (8004a28 <vTaskRead+0x360>)
 8004718:	4dc4      	ldr	r5, [pc, #784]	; (8004a2c <vTaskRead+0x364>)
 800471a:	9302      	str	r3, [sp, #8]
 800471c:	4bc4      	ldr	r3, [pc, #784]	; (8004a30 <vTaskRead+0x368>)
 800471e:	9305      	str	r3, [sp, #20]
 8004720:	4bc4      	ldr	r3, [pc, #784]	; (8004a34 <vTaskRead+0x36c>)
 8004722:	9303      	str	r3, [sp, #12]
 8004724:	e011      	b.n	800474a <vTaskRead+0x82>
            if (tab[i].sem_id != 0) // Checking in the subscription queue if there is a request/demand
 8004726:	4643      	mov	r3, r8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d13a      	bne.n	80047a2 <vTaskRead+0xda>
 800472c:	2f00      	cmp	r7, #0
 800472e:	d154      	bne.n	80047da <vTaskRead+0x112>
 8004730:	464b      	mov	r3, r9
 8004732:	2b00      	cmp	r3, #0
 8004734:	d16d      	bne.n	8004812 <vTaskRead+0x14a>
        xSemaphoreGive(xConsoleMutex);
 8004736:	2100      	movs	r1, #0
 8004738:	2300      	movs	r3, #0
 800473a:	2200      	movs	r2, #0
 800473c:	6828      	ldr	r0, [r5, #0]
 800473e:	f7fb fe91 	bl	8000464 <xQueueGenericSend>
        vTaskDelayUntil(&xLastWakeTime, 200 / portTICK_RATE_MS); //200 ms wait
 8004742:	21c8      	movs	r1, #200	; 0xc8
 8004744:	a807      	add	r0, sp, #28
 8004746:	f7fd fb27 	bl	8001d98 <vTaskDelayUntil>
        xStatus = xQueueReceive(xSubcribeQueue, &s_message, 0);
 800474a:	4653      	mov	r3, sl
 800474c:	2200      	movs	r2, #0
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	a906      	add	r1, sp, #24
 8004752:	f7fc f997 	bl	8000a84 <xQueueReceive>
        if (xStatus == pdPASS)
 8004756:	2801      	cmp	r0, #1
 8004758:	d076      	beq.n	8004848 <vTaskRead+0x180>
        xSemaphoreTake(xConsoleMutex, portMAX_DELAY);
 800475a:	2101      	movs	r1, #1
 800475c:	6828      	ldr	r0, [r5, #0]
 800475e:	4249      	negs	r1, r1
 8004760:	f7fc fb9e 	bl	8000ea0 <xQueueSemaphoreTake>
            if (tab[i].sem_id != 0) // Checking in the subscription queue if there is a request/demand
 8004764:	2e00      	cmp	r6, #0
 8004766:	d0de      	beq.n	8004726 <vTaskRead+0x5e>
                if (FACTORY_IO_Sensors_Get(tab[i].sensor_id) == tab[i].sensor_state) // If the state of the sensors matches the sensor identifier
 8004768:	6860      	ldr	r0, [r4, #4]
 800476a:	f000 fbbd 	bl	8004ee8 <FACTORY_IO_Sensors_Get>
 800476e:	68a3      	ldr	r3, [r4, #8]
 8004770:	4298      	cmp	r0, r3
 8004772:	d1d8      	bne.n	8004726 <vTaskRead+0x5e>
                    if (tab[i].sem_id == 1)
 8004774:	2e01      	cmp	r6, #1
 8004776:	d100      	bne.n	800477a <vTaskRead+0xb2>
 8004778:	e139      	b.n	80049ee <vTaskRead+0x326>
                    if (tab[i].sem_id == 2)
 800477a:	2e02      	cmp	r6, #2
 800477c:	d100      	bne.n	8004780 <vTaskRead+0xb8>
 800477e:	e119      	b.n	80049b4 <vTaskRead+0x2ec>
                    if (tab[i].sem_id == 3)
 8004780:	2e03      	cmp	r6, #3
 8004782:	d1d0      	bne.n	8004726 <vTaskRead+0x5e>
                        xSemaphoreGive(xSemAscenseur);
 8004784:	9b01      	ldr	r3, [sp, #4]
                        xSemaphoreGive(xSemCarton);
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	2200      	movs	r2, #0
 800478a:	2300      	movs	r3, #0
 800478c:	2100      	movs	r1, #0
 800478e:	f7fb fe69 	bl	8000464 <xQueueGenericSend>
                        tab[i].sem_id = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	7023      	strb	r3, [r4, #0]
                        tab[i].sensor_id = 0;
 8004796:	6063      	str	r3, [r4, #4]
                        tab[i].sensor_state = 0;
 8004798:	60a3      	str	r3, [r4, #8]
 800479a:	2600      	movs	r6, #0
            if (tab[i].sem_id != 0) // Checking in the subscription queue if there is a request/demand
 800479c:	4643      	mov	r3, r8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0c4      	beq.n	800472c <vTaskRead+0x64>
                if (FACTORY_IO_Sensors_Get(tab[i].sensor_id) == tab[i].sensor_state) // If the state of the sensors matches the sensor identifier
 80047a2:	6920      	ldr	r0, [r4, #16]
 80047a4:	f000 fba0 	bl	8004ee8 <FACTORY_IO_Sensors_Get>
 80047a8:	6963      	ldr	r3, [r4, #20]
 80047aa:	4298      	cmp	r0, r3
 80047ac:	d1be      	bne.n	800472c <vTaskRead+0x64>
                    if (tab[i].sem_id == 1)
 80047ae:	4643      	mov	r3, r8
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d100      	bne.n	80047b6 <vTaskRead+0xee>
 80047b4:	e0e9      	b.n	800498a <vTaskRead+0x2c2>
                    if (tab[i].sem_id == 2)
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d100      	bne.n	80047bc <vTaskRead+0xf4>
 80047ba:	e0b3      	b.n	8004924 <vTaskRead+0x25c>
                    if (tab[i].sem_id == 3)
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d1b5      	bne.n	800472c <vTaskRead+0x64>
                        xSemaphoreGive(xSemAscenseur);
 80047c0:	9b01      	ldr	r3, [sp, #4]
                        xSemaphoreGive(xSemCarton);
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	2200      	movs	r2, #0
 80047c6:	2300      	movs	r3, #0
 80047c8:	2100      	movs	r1, #0
 80047ca:	f7fb fe4b 	bl	8000464 <xQueueGenericSend>
                        tab[i].sensor_id = 0;
 80047ce:	2300      	movs	r3, #0
                        tab[i].sensor_state = 0;
 80047d0:	4698      	mov	r8, r3
                        tab[i].sensor_id = 0;
 80047d2:	6123      	str	r3, [r4, #16]
                        tab[i].sensor_state = 0;
 80047d4:	6163      	str	r3, [r4, #20]
            if (tab[i].sem_id != 0) // Checking in the subscription queue if there is a request/demand
 80047d6:	2f00      	cmp	r7, #0
 80047d8:	d0aa      	beq.n	8004730 <vTaskRead+0x68>
                if (FACTORY_IO_Sensors_Get(tab[i].sensor_id) == tab[i].sensor_state) // If the state of the sensors matches the sensor identifier
 80047da:	69e0      	ldr	r0, [r4, #28]
 80047dc:	f000 fb84 	bl	8004ee8 <FACTORY_IO_Sensors_Get>
 80047e0:	6a23      	ldr	r3, [r4, #32]
 80047e2:	4298      	cmp	r0, r3
 80047e4:	d1a4      	bne.n	8004730 <vTaskRead+0x68>
                    if (tab[i].sem_id == 1)
 80047e6:	2f01      	cmp	r7, #1
 80047e8:	d100      	bne.n	80047ec <vTaskRead+0x124>
 80047ea:	e0cc      	b.n	8004986 <vTaskRead+0x2be>
                    if (tab[i].sem_id == 2)
 80047ec:	2f02      	cmp	r7, #2
 80047ee:	d100      	bne.n	80047f2 <vTaskRead+0x12a>
 80047f0:	e0ad      	b.n	800494e <vTaskRead+0x286>
                    if (tab[i].sem_id == 3)
 80047f2:	2f03      	cmp	r7, #3
 80047f4:	d19c      	bne.n	8004730 <vTaskRead+0x68>
                        xSemaphoreGive(xSemAscenseur);
 80047f6:	9b01      	ldr	r3, [sp, #4]
                        xSemaphoreGive(xSemCarton);
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	2300      	movs	r3, #0
 80047fe:	2100      	movs	r1, #0
 8004800:	f7fb fe30 	bl	8000464 <xQueueGenericSend>
                        tab[i].sensor_id = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	61e3      	str	r3, [r4, #28]
                        tab[i].sensor_state = 0;
 8004808:	6223      	str	r3, [r4, #32]
 800480a:	2700      	movs	r7, #0
            if (tab[i].sem_id != 0) // Checking in the subscription queue if there is a request/demand
 800480c:	464b      	mov	r3, r9
 800480e:	2b00      	cmp	r3, #0
 8004810:	d091      	beq.n	8004736 <vTaskRead+0x6e>
                if (FACTORY_IO_Sensors_Get(tab[i].sensor_id) == tab[i].sensor_state) // If the state of the sensors matches the sensor identifier
 8004812:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004814:	f000 fb68 	bl	8004ee8 <FACTORY_IO_Sensors_Get>
 8004818:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800481a:	4298      	cmp	r0, r3
 800481c:	d18b      	bne.n	8004736 <vTaskRead+0x6e>
                    if (tab[i].sem_id == 1)
 800481e:	464b      	mov	r3, r9
 8004820:	2b01      	cmp	r3, #1
 8004822:	d100      	bne.n	8004826 <vTaskRead+0x15e>
 8004824:	e091      	b.n	800494a <vTaskRead+0x282>
                    if (tab[i].sem_id == 2)
 8004826:	2b02      	cmp	r3, #2
 8004828:	d100      	bne.n	800482c <vTaskRead+0x164>
 800482a:	e0b0      	b.n	800498e <vTaskRead+0x2c6>
                    if (tab[i].sem_id == 3)
 800482c:	2b03      	cmp	r3, #3
 800482e:	d182      	bne.n	8004736 <vTaskRead+0x6e>
                        xSemaphoreGive(xSemAscenseur);
 8004830:	9b01      	ldr	r3, [sp, #4]
                        xSemaphoreGive(xSemCarton);
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	2200      	movs	r2, #0
 8004836:	2300      	movs	r3, #0
 8004838:	2100      	movs	r1, #0
 800483a:	f7fb fe13 	bl	8000464 <xQueueGenericSend>
                        tab[i].sensor_id = 0;
 800483e:	2300      	movs	r3, #0
                        tab[i].sensor_state = 0;
 8004840:	4699      	mov	r9, r3
                        tab[i].sensor_id = 0;
 8004842:	62a3      	str	r3, [r4, #40]	; 0x28
                        tab[i].sensor_state = 0;
 8004844:	62e3      	str	r3, [r4, #44]	; 0x2c
                    if (tab[i].sem_id == 3)
 8004846:	e776      	b.n	8004736 <vTaskRead+0x6e>
                if ((s_message->sem_id == tab[i].sem_id)
 8004848:	2100      	movs	r1, #0
 800484a:	9b06      	ldr	r3, [sp, #24]
 800484c:	9100      	str	r1, [sp, #0]
 800484e:	781a      	ldrb	r2, [r3, #0]
 8004850:	4296      	cmp	r6, r2
 8004852:	d05a      	beq.n	800490a <vTaskRead+0x242>
 8004854:	4590      	cmp	r8, r2
 8004856:	d04c      	beq.n	80048f2 <vTaskRead+0x22a>
 8004858:	4297      	cmp	r7, r2
 800485a:	d017      	beq.n	800488c <vTaskRead+0x1c4>
 800485c:	4591      	cmp	r9, r2
 800485e:	d031      	beq.n	80048c4 <vTaskRead+0x1fc>
                if ((tab[i].sem_id == 0) && (existe == 0))
 8004860:	0030      	movs	r0, r6
 8004862:	9900      	ldr	r1, [sp, #0]
 8004864:	4308      	orrs	r0, r1
 8004866:	d123      	bne.n	80048b0 <vTaskRead+0x1e8>
                    tab[i].sensor_id = s_message->sensor_id;
 8004868:	6899      	ldr	r1, [r3, #8]
 800486a:	6858      	ldr	r0, [r3, #4]
 800486c:	910a      	str	r1, [sp, #40]	; 0x28
                    existe = 1;
 800486e:	2101      	movs	r1, #1
                    tab[i].sem_id = s_message->sem_id;
 8004870:	7022      	strb	r2, [r4, #0]
                    tab[i].sensor_id = s_message->sensor_id;
 8004872:	9009      	str	r0, [sp, #36]	; 0x24
                    existe = 1;
 8004874:	9100      	str	r1, [sp, #0]
                if ((tab[i].sem_id == 0) && (existe == 0))
 8004876:	4648      	mov	r0, r9
            if (tab[i].sem_id != 0) // Checking in the subscription queue if there is a request/demand
 8004878:	7826      	ldrb	r6, [r4, #0]
                if ((tab[i].sem_id == 0) && (existe == 0))
 800487a:	4301      	orrs	r1, r0
 800487c:	d000      	beq.n	8004880 <vTaskRead+0x1b8>
 800487e:	e76c      	b.n	800475a <vTaskRead+0x92>
                    tab[i].sensor_id = s_message->sensor_id;
 8004880:	6899      	ldr	r1, [r3, #8]
 8004882:	685b      	ldr	r3, [r3, #4]
                if ((s_message->sem_id == tab[i].sem_id)
 8004884:	4691      	mov	r9, r2
                    tab[i].sensor_id = s_message->sensor_id;
 8004886:	9312      	str	r3, [sp, #72]	; 0x48
 8004888:	9113      	str	r1, [sp, #76]	; 0x4c
                    existe = 1;
 800488a:	e766      	b.n	800475a <vTaskRead+0x92>
                        && (s_message->sensor_id == tab[i].sensor_id)
 800488c:	6858      	ldr	r0, [r3, #4]
 800488e:	4684      	mov	ip, r0
 8004890:	69e0      	ldr	r0, [r4, #28]
 8004892:	4584      	cmp	ip, r0
 8004894:	d1e2      	bne.n	800485c <vTaskRead+0x194>
                        && (s_message->sensor_state == tab[i].sensor_state))
 8004896:	6899      	ldr	r1, [r3, #8]
 8004898:	6a20      	ldr	r0, [r4, #32]
 800489a:	9104      	str	r1, [sp, #16]
 800489c:	4281      	cmp	r1, r0
 800489e:	d1dd      	bne.n	800485c <vTaskRead+0x194>
                if ((s_message->sem_id == tab[i].sem_id)
 80048a0:	2101      	movs	r1, #1
 80048a2:	9100      	str	r1, [sp, #0]
 80048a4:	45b9      	cmp	r9, r7
 80048a6:	d119      	bne.n	80048dc <vTaskRead+0x214>
                        && (s_message->sensor_id == tab[i].sensor_id)
 80048a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80048aa:	9904      	ldr	r1, [sp, #16]
 80048ac:	4584      	cmp	ip, r0
 80048ae:	d010      	beq.n	80048d2 <vTaskRead+0x20a>
                if ((tab[i].sem_id == 0) && (existe == 0))
 80048b0:	4640      	mov	r0, r8
 80048b2:	9900      	ldr	r1, [sp, #0]
 80048b4:	4308      	orrs	r0, r1
 80048b6:	d111      	bne.n	80048dc <vTaskRead+0x214>
                    tab[i].sensor_id = s_message->sensor_id;
 80048b8:	6899      	ldr	r1, [r3, #8]
 80048ba:	685b      	ldr	r3, [r3, #4]
                if ((s_message->sem_id == tab[i].sem_id)
 80048bc:	4690      	mov	r8, r2
                    tab[i].sensor_id = s_message->sensor_id;
 80048be:	930c      	str	r3, [sp, #48]	; 0x30
 80048c0:	910d      	str	r1, [sp, #52]	; 0x34
                if ((tab[i].sem_id == 0) && (existe == 0))
 80048c2:	e74a      	b.n	800475a <vTaskRead+0x92>
                        && (s_message->sensor_id == tab[i].sensor_id)
 80048c4:	6858      	ldr	r0, [r3, #4]
 80048c6:	4684      	mov	ip, r0
 80048c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80048ca:	4584      	cmp	ip, r0
 80048cc:	d1c8      	bne.n	8004860 <vTaskRead+0x198>
 80048ce:	6899      	ldr	r1, [r3, #8]
 80048d0:	9104      	str	r1, [sp, #16]
                        && (s_message->sensor_state == tab[i].sensor_state))
 80048d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80048d4:	4281      	cmp	r1, r0
 80048d6:	d1c3      	bne.n	8004860 <vTaskRead+0x198>
 80048d8:	2101      	movs	r1, #1
 80048da:	9100      	str	r1, [sp, #0]
                if ((tab[i].sem_id == 0) && (existe == 0))
 80048dc:	0038      	movs	r0, r7
 80048de:	9900      	ldr	r1, [sp, #0]
 80048e0:	4308      	orrs	r0, r1
 80048e2:	d1c8      	bne.n	8004876 <vTaskRead+0x1ae>
                    tab[i].sensor_id = s_message->sensor_id;
 80048e4:	6899      	ldr	r1, [r3, #8]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	9110      	str	r1, [sp, #64]	; 0x40
 80048ea:	930f      	str	r3, [sp, #60]	; 0x3c
                if ((s_message->sem_id == tab[i].sem_id)
 80048ec:	0017      	movs	r7, r2
            if (tab[i].sem_id != 0) // Checking in the subscription queue if there is a request/demand
 80048ee:	7826      	ldrb	r6, [r4, #0]
 80048f0:	e733      	b.n	800475a <vTaskRead+0x92>
                        && (s_message->sensor_id == tab[i].sensor_id)
 80048f2:	6858      	ldr	r0, [r3, #4]
 80048f4:	4684      	mov	ip, r0
 80048f6:	6920      	ldr	r0, [r4, #16]
 80048f8:	4584      	cmp	ip, r0
 80048fa:	d1ad      	bne.n	8004858 <vTaskRead+0x190>
                        && (s_message->sensor_state == tab[i].sensor_state))
 80048fc:	6899      	ldr	r1, [r3, #8]
 80048fe:	6960      	ldr	r0, [r4, #20]
 8004900:	4281      	cmp	r1, r0
 8004902:	d1a9      	bne.n	8004858 <vTaskRead+0x190>
                    existe = 1;
 8004904:	2101      	movs	r1, #1
 8004906:	9100      	str	r1, [sp, #0]
 8004908:	e7a6      	b.n	8004858 <vTaskRead+0x190>
                        && (s_message->sensor_id == tab[i].sensor_id)
 800490a:	6858      	ldr	r0, [r3, #4]
 800490c:	4684      	mov	ip, r0
 800490e:	6860      	ldr	r0, [r4, #4]
 8004910:	4584      	cmp	ip, r0
 8004912:	d19f      	bne.n	8004854 <vTaskRead+0x18c>
                        && (s_message->sensor_state == tab[i].sensor_state))
 8004914:	6898      	ldr	r0, [r3, #8]
 8004916:	68a1      	ldr	r1, [r4, #8]
 8004918:	1a41      	subs	r1, r0, r1
 800491a:	4248      	negs	r0, r1
 800491c:	4141      	adcs	r1, r0
 800491e:	b2c9      	uxtb	r1, r1
 8004920:	9100      	str	r1, [sp, #0]
 8004922:	e797      	b.n	8004854 <vTaskRead+0x18c>
                        xSemaphoreGive(xSemPalette);
 8004924:	9b02      	ldr	r3, [sp, #8]
 8004926:	2200      	movs	r2, #0
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	2100      	movs	r1, #0
 800492c:	2300      	movs	r3, #0
 800492e:	f7fb fd99 	bl	8000464 <xQueueGenericSend>
                        tab[i].sensor_id = 0;
 8004932:	2300      	movs	r3, #0
 8004934:	6123      	str	r3, [r4, #16]
                        tab[i].sensor_state = 0;
 8004936:	6163      	str	r3, [r4, #20]
                        aux ++;
 8004938:	3301      	adds	r3, #1
 800493a:	469c      	mov	ip, r3
 800493c:	44e3      	add	fp, ip
                        if (aux == 4)
 800493e:	465b      	mov	r3, fp
 8004940:	2b04      	cmp	r3, #4
 8004942:	d060      	beq.n	8004a06 <vTaskRead+0x33e>
                        tab[i].sensor_state = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	4698      	mov	r8, r3
 8004948:	e6f0      	b.n	800472c <vTaskRead+0x64>
                        xSemaphoreGive(xSemCarton);
 800494a:	9b03      	ldr	r3, [sp, #12]
 800494c:	e771      	b.n	8004832 <vTaskRead+0x16a>
                        xSemaphoreGive(xSemPalette);
 800494e:	9b02      	ldr	r3, [sp, #8]
 8004950:	2200      	movs	r2, #0
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	2100      	movs	r1, #0
 8004956:	2300      	movs	r3, #0
 8004958:	f7fb fd84 	bl	8000464 <xQueueGenericSend>
                        tab[i].sensor_id = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	61e3      	str	r3, [r4, #28]
                        tab[i].sensor_state = 0;
 8004960:	6223      	str	r3, [r4, #32]
                        aux ++;
 8004962:	3301      	adds	r3, #1
 8004964:	469c      	mov	ip, r3
 8004966:	44e3      	add	fp, ip
                        if (aux == 4)
 8004968:	465b      	mov	r3, fp
 800496a:	2b04      	cmp	r3, #4
 800496c:	d000      	beq.n	8004970 <vTaskRead+0x2a8>
 800496e:	e74c      	b.n	800480a <vTaskRead+0x142>
                            xSemaphoreGive(xSem3);
 8004970:	2300      	movs	r3, #0
 8004972:	9805      	ldr	r0, [sp, #20]
 8004974:	001a      	movs	r2, r3
 8004976:	0019      	movs	r1, r3
 8004978:	6800      	ldr	r0, [r0, #0]
 800497a:	f7fb fd73 	bl	8000464 <xQueueGenericSend>
                            aux =0;
 800497e:	2300      	movs	r3, #0
                        tab[i].sensor_state = 0;
 8004980:	2700      	movs	r7, #0
                            aux =0;
 8004982:	469b      	mov	fp, r3
                    if (tab[i].sem_id == 3)
 8004984:	e742      	b.n	800480c <vTaskRead+0x144>
                        xSemaphoreGive(xSemCarton);
 8004986:	9b03      	ldr	r3, [sp, #12]
 8004988:	e736      	b.n	80047f8 <vTaskRead+0x130>
 800498a:	9b03      	ldr	r3, [sp, #12]
 800498c:	e719      	b.n	80047c2 <vTaskRead+0xfa>
                        xSemaphoreGive(xSemPalette);
 800498e:	9b02      	ldr	r3, [sp, #8]
 8004990:	2200      	movs	r2, #0
 8004992:	6818      	ldr	r0, [r3, #0]
 8004994:	2100      	movs	r1, #0
 8004996:	2300      	movs	r3, #0
 8004998:	f7fb fd64 	bl	8000464 <xQueueGenericSend>
                        tab[i].sensor_id = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	62a3      	str	r3, [r4, #40]	; 0x28
                        tab[i].sensor_state = 0;
 80049a0:	62e3      	str	r3, [r4, #44]	; 0x2c
                        aux ++;
 80049a2:	3301      	adds	r3, #1
 80049a4:	469c      	mov	ip, r3
 80049a6:	44e3      	add	fp, ip
                        if (aux == 4)
 80049a8:	465b      	mov	r3, fp
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d021      	beq.n	80049f2 <vTaskRead+0x32a>
                        tab[i].sensor_state = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	4699      	mov	r9, r3
 80049b2:	e6c0      	b.n	8004736 <vTaskRead+0x6e>
                        xSemaphoreGive(xSemPalette);
 80049b4:	9b02      	ldr	r3, [sp, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	2100      	movs	r1, #0
 80049bc:	2300      	movs	r3, #0
 80049be:	f7fb fd51 	bl	8000464 <xQueueGenericSend>
                        tab[i].sem_id = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	7023      	strb	r3, [r4, #0]
                        tab[i].sensor_id = 0;
 80049c6:	6063      	str	r3, [r4, #4]
                        tab[i].sensor_state = 0;
 80049c8:	60a3      	str	r3, [r4, #8]
                        aux ++;
 80049ca:	3301      	adds	r3, #1
 80049cc:	469c      	mov	ip, r3
 80049ce:	44e3      	add	fp, ip
                        if (aux == 4)
 80049d0:	465b      	mov	r3, fp
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d000      	beq.n	80049d8 <vTaskRead+0x310>
 80049d6:	e6e0      	b.n	800479a <vTaskRead+0xd2>
                            xSemaphoreGive(xSem3);
 80049d8:	2300      	movs	r3, #0
 80049da:	9805      	ldr	r0, [sp, #20]
 80049dc:	001a      	movs	r2, r3
 80049de:	0019      	movs	r1, r3
 80049e0:	6800      	ldr	r0, [r0, #0]
 80049e2:	f7fb fd3f 	bl	8000464 <xQueueGenericSend>
                            aux =0;
 80049e6:	2300      	movs	r3, #0
                        tab[i].sensor_state = 0;
 80049e8:	2600      	movs	r6, #0
                            aux =0;
 80049ea:	469b      	mov	fp, r3
                    if (tab[i].sem_id == 3)
 80049ec:	e6d6      	b.n	800479c <vTaskRead+0xd4>
                        xSemaphoreGive(xSemCarton);
 80049ee:	9b03      	ldr	r3, [sp, #12]
 80049f0:	e6c9      	b.n	8004786 <vTaskRead+0xbe>
                            xSemaphoreGive(xSem3);
 80049f2:	2300      	movs	r3, #0
 80049f4:	9805      	ldr	r0, [sp, #20]
 80049f6:	001a      	movs	r2, r3
 80049f8:	0019      	movs	r1, r3
 80049fa:	6800      	ldr	r0, [r0, #0]
 80049fc:	f7fb fd32 	bl	8000464 <xQueueGenericSend>
                            aux =0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	469b      	mov	fp, r3
 8004a04:	e7d3      	b.n	80049ae <vTaskRead+0x2e6>
                            xSemaphoreGive(xSem3);
 8004a06:	2300      	movs	r3, #0
 8004a08:	9805      	ldr	r0, [sp, #20]
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	0019      	movs	r1, r3
 8004a0e:	6800      	ldr	r0, [r0, #0]
 8004a10:	f7fb fd28 	bl	8000464 <xQueueGenericSend>
                            aux =0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	469b      	mov	fp, r3
 8004a18:	e794      	b.n	8004944 <vTaskRead+0x27c>
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	200038b0 	.word	0x200038b0
 8004a20:	200038d0 	.word	0x200038d0
 8004a24:	200038bc 	.word	0x200038bc
 8004a28:	200038c4 	.word	0x200038c4
 8004a2c:	200038ac 	.word	0x200038ac
 8004a30:	200038b8 	.word	0x200038b8
 8004a34:	200038c0 	.word	0x200038c0

08004a38 <main>:
    RCC->CR |= RCC_CR_HSEBYP;
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	4987      	ldr	r1, [pc, #540]	; (8004c58 <main+0x220>)
 8004a3c:	02db      	lsls	r3, r3, #11
 8004a3e:	680a      	ldr	r2, [r1, #0]
{
 8004a40:	b510      	push	{r4, lr}
    RCC->CR |= RCC_CR_HSEBYP;
 8004a42:	4313      	orrs	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]
    RCC->CR |= RCC_CR_HSEON;
 8004a46:	2380      	movs	r3, #128	; 0x80
        HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8004a48:	2080      	movs	r0, #128	; 0x80
    RCC->CR |= RCC_CR_HSEON;
 8004a4a:	680a      	ldr	r2, [r1, #0]
 8004a4c:	025b      	lsls	r3, r3, #9
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]
{
 8004a52:	b086      	sub	sp, #24
    timeout = 1000000;
 8004a54:	4b81      	ldr	r3, [pc, #516]	; (8004c5c <main+0x224>)
        HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8004a56:	0280      	lsls	r0, r0, #10
 8004a58:	e001      	b.n	8004a5e <main+0x26>
    } while ((HSE_Status == 0) && (timeout > 0));
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <main+0x2e>
        HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8004a5e:	680a      	ldr	r2, [r1, #0]
        timeout--;
 8004a60:	3b01      	subs	r3, #1
    } while ((HSE_Status == 0) && (timeout > 0));
 8004a62:	4202      	tst	r2, r0
 8004a64:	d0f9      	beq.n	8004a5a <main+0x22>
    RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 8004a66:	4a7c      	ldr	r2, [pc, #496]	; (8004c58 <main+0x220>)
 8004a68:	487d      	ldr	r0, [pc, #500]	; (8004c60 <main+0x228>)
 8004a6a:	6851      	ldr	r1, [r2, #4]
 8004a6c:	4001      	ands	r1, r0
 8004a6e:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 8004a70:	2180      	movs	r1, #128	; 0x80
 8004a72:	6850      	ldr	r0, [r2, #4]
 8004a74:	0249      	lsls	r1, r1, #9
 8004a76:	4301      	orrs	r1, r0
 8004a78:	6051      	str	r1, [r2, #4]
    RCC->CFGR2 = 0x00000000;
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	62d1      	str	r1, [r2, #44]	; 0x2c
    RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 8004a7e:	6851      	ldr	r1, [r2, #4]
 8004a80:	4878      	ldr	r0, [pc, #480]	; (8004c64 <main+0x22c>)
 8004a82:	4001      	ands	r1, r0
 8004a84:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 8004a86:	2180      	movs	r1, #128	; 0x80
 8004a88:	6850      	ldr	r0, [r2, #4]
 8004a8a:	0349      	lsls	r1, r1, #13
 8004a8c:	4301      	orrs	r1, r0
 8004a8e:	6051      	str	r1, [r2, #4]
    RCC-> CR |= RCC_CR_PLLON;
 8004a90:	2180      	movs	r1, #128	; 0x80
 8004a92:	6810      	ldr	r0, [r2, #0]
 8004a94:	0449      	lsls	r1, r1, #17
 8004a96:	4301      	orrs	r1, r0
        PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8004a98:	2080      	movs	r0, #128	; 0x80
    RCC-> CR |= RCC_CR_PLLON;
 8004a9a:	6011      	str	r1, [r2, #0]
        PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8004a9c:	0480      	lsls	r0, r0, #18
 8004a9e:	e001      	b.n	8004aa4 <main+0x6c>
    } while ((PLL_Status == 0) && (timeout > 0));
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <main+0x74>
        PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8004aa4:	6811      	ldr	r1, [r2, #0]
        timeout--;
 8004aa6:	3b01      	subs	r3, #1
    } while ((PLL_Status == 0) && (timeout > 0));
 8004aa8:	4201      	tst	r1, r0
 8004aaa:	d0f9      	beq.n	8004aa0 <main+0x68>
    RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8004aac:	20f0      	movs	r0, #240	; 0xf0
 8004aae:	496a      	ldr	r1, [pc, #424]	; (8004c58 <main+0x220>)
 8004ab0:	684a      	ldr	r2, [r1, #4]
 8004ab2:	4382      	bics	r2, r0
 8004ab4:	604a      	str	r2, [r1, #4]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004ab6:	684a      	ldr	r2, [r1, #4]
    RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8004ab8:	486b      	ldr	r0, [pc, #428]	; (8004c68 <main+0x230>)
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004aba:	604a      	str	r2, [r1, #4]
    RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8004abc:	684a      	ldr	r2, [r1, #4]
 8004abe:	4002      	ands	r2, r0
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8004ac0:	2011      	movs	r0, #17
    RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8004ac2:	604a      	str	r2, [r1, #4]
    RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8004ac4:	684a      	ldr	r2, [r1, #4]
 8004ac6:	604a      	str	r2, [r1, #4]
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8004ac8:	4a68      	ldr	r2, [pc, #416]	; (8004c6c <main+0x234>)
 8004aca:	6010      	str	r0, [r2, #0]
    RCC->CFGR &= ~RCC_CFGR_SW;
 8004acc:	684a      	ldr	r2, [r1, #4]
 8004ace:	380e      	subs	r0, #14
 8004ad0:	4382      	bics	r2, r0
 8004ad2:	604a      	str	r2, [r1, #4]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004ad4:	684a      	ldr	r2, [r1, #4]
 8004ad6:	3801      	subs	r0, #1
 8004ad8:	4302      	orrs	r2, r0
 8004ada:	604a      	str	r2, [r1, #4]
        SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8004adc:	300a      	adds	r0, #10
 8004ade:	e001      	b.n	8004ae4 <main+0xac>
    } while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d004      	beq.n	8004aee <main+0xb6>
        SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8004ae4:	684a      	ldr	r2, [r1, #4]
        timeout--;
 8004ae6:	3b01      	subs	r3, #1
        SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8004ae8:	4002      	ands	r2, r0
    } while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8004aea:	2a08      	cmp	r2, #8
 8004aec:	d1f8      	bne.n	8004ae0 <main+0xa8>
    RCC->CFGR &= ~RCC_CFGR_MCO_Msk;
 8004aee:	4b5a      	ldr	r3, [pc, #360]	; (8004c58 <main+0x220>)
 8004af0:	495f      	ldr	r1, [pc, #380]	; (8004c70 <main+0x238>)
 8004af2:	685a      	ldr	r2, [r3, #4]
    GPIOA->MODER &= ~GPIO_MODER_MODER8_Msk;
 8004af4:	485f      	ldr	r0, [pc, #380]	; (8004c74 <main+0x23c>)
    RCC->CFGR &= ~RCC_CFGR_MCO_Msk;
 8004af6:	400a      	ands	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
    RCC->CFGR |=  RCC_CFGR_MCOSEL_LSE;     // Change here
 8004afa:	22c0      	movs	r2, #192	; 0xc0
 8004afc:	6859      	ldr	r1, [r3, #4]
 8004afe:	0492      	lsls	r2, r2, #18
 8004b00:	430a      	orrs	r2, r1
 8004b02:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= ~RCC_CFGR_MCOPRE_Msk;
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	495c      	ldr	r1, [pc, #368]	; (8004c78 <main+0x240>)
 8004b08:	400a      	ands	r2, r1
 8004b0a:	605a      	str	r2, [r3, #4]
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8004b0c:	2280      	movs	r2, #128	; 0x80
 8004b0e:	6959      	ldr	r1, [r3, #20]
 8004b10:	0292      	lsls	r2, r2, #10
 8004b12:	4311      	orrs	r1, r2
 8004b14:	6159      	str	r1, [r3, #20]
    GPIOA->MODER &= ~GPIO_MODER_MODER8_Msk;
 8004b16:	2390      	movs	r3, #144	; 0x90
 8004b18:	05db      	lsls	r3, r3, #23
 8004b1a:	6819      	ldr	r1, [r3, #0]
 8004b1c:	4001      	ands	r1, r0
 8004b1e:	6019      	str	r1, [r3, #0]
    GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER8_Pos);
 8004b20:	6819      	ldr	r1, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
    GPIOA->AFR[1] &= ~(0x0000000F);
 8004b24:	210f      	movs	r1, #15
    GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER8_Pos);
 8004b26:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[1] &= ~(0x0000000F);
 8004b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b2a:	438a      	bics	r2, r1
 8004b2c:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOA->AFR[1] |=  (0x00000000);
 8004b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b30:	625a      	str	r2, [r3, #36]	; 0x24
    SystemCoreClockUpdate();
 8004b32:	f000 fa17 	bl	8004f64 <SystemCoreClockUpdate>
	BSP_LED_Init();
 8004b36:	f000 f915 	bl	8004d64 <BSP_LED_Init>
	BSP_Console_Init();
 8004b3a:	f000 f93d 	bl	8004db8 <BSP_Console_Init>
	vTraceEnable(TRC_START);
 8004b3e:	2001      	movs	r0, #1
 8004b40:	f7fe fac0 	bl	80030c4 <vTraceEnable>
	xSem_UART_TC = xSemaphoreCreateBinary();
 8004b44:	2203      	movs	r2, #3
 8004b46:	2100      	movs	r1, #0
 8004b48:	2001      	movs	r0, #1
 8004b4a:	f7fb fbe9 	bl	8000320 <xQueueGenericCreate>
 8004b4e:	4b4b      	ldr	r3, [pc, #300]	; (8004c7c <main+0x244>)
	xSem_DMA_TC = xSemaphoreCreateBinary();
 8004b50:	2203      	movs	r2, #3
	xSem_UART_TC = xSemaphoreCreateBinary();
 8004b52:	6018      	str	r0, [r3, #0]
	xSem_DMA_TC = xSemaphoreCreateBinary();
 8004b54:	2100      	movs	r1, #0
 8004b56:	2001      	movs	r0, #1
 8004b58:	f7fb fbe2 	bl	8000320 <xQueueGenericCreate>
 8004b5c:	4b48      	ldr	r3, [pc, #288]	; (8004c80 <main+0x248>)
	xSem1 = xSemaphoreCreateBinary();
 8004b5e:	2203      	movs	r2, #3
	xSem_DMA_TC = xSemaphoreCreateBinary();
 8004b60:	6018      	str	r0, [r3, #0]
	xSem1 = xSemaphoreCreateBinary();
 8004b62:	2100      	movs	r1, #0
 8004b64:	2001      	movs	r0, #1
 8004b66:	f7fb fbdb 	bl	8000320 <xQueueGenericCreate>
 8004b6a:	4b46      	ldr	r3, [pc, #280]	; (8004c84 <main+0x24c>)
	xSem2 = xSemaphoreCreateBinary();
 8004b6c:	2203      	movs	r2, #3
	xSem1 = xSemaphoreCreateBinary();
 8004b6e:	6018      	str	r0, [r3, #0]
	xSem2 = xSemaphoreCreateBinary();
 8004b70:	2100      	movs	r1, #0
 8004b72:	2001      	movs	r0, #1
 8004b74:	f7fb fbd4 	bl	8000320 <xQueueGenericCreate>
 8004b78:	4b43      	ldr	r3, [pc, #268]	; (8004c88 <main+0x250>)
	xSem3 = xSemaphoreCreateBinary();
 8004b7a:	2203      	movs	r2, #3
	xSem2 = xSemaphoreCreateBinary();
 8004b7c:	6018      	str	r0, [r3, #0]
	xSem3 = xSemaphoreCreateBinary();
 8004b7e:	2100      	movs	r1, #0
 8004b80:	2001      	movs	r0, #1
 8004b82:	f7fb fbcd 	bl	8000320 <xQueueGenericCreate>
 8004b86:	4b41      	ldr	r3, [pc, #260]	; (8004c8c <main+0x254>)
	xSemCarton = xSemaphoreCreateBinary();
 8004b88:	2203      	movs	r2, #3
	xSem3 = xSemaphoreCreateBinary();
 8004b8a:	6018      	str	r0, [r3, #0]
	xSemCarton = xSemaphoreCreateBinary();
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	2001      	movs	r0, #1
 8004b90:	f7fb fbc6 	bl	8000320 <xQueueGenericCreate>
 8004b94:	4b3e      	ldr	r3, [pc, #248]	; (8004c90 <main+0x258>)
	xSemPalette = xSemaphoreCreateBinary();
 8004b96:	2203      	movs	r2, #3
	xSemCarton = xSemaphoreCreateBinary();
 8004b98:	6018      	str	r0, [r3, #0]
	xSemPalette = xSemaphoreCreateBinary();
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	f7fb fbbf 	bl	8000320 <xQueueGenericCreate>
 8004ba2:	4b3c      	ldr	r3, [pc, #240]	; (8004c94 <main+0x25c>)
	xSemAscenseur = xSemaphoreCreateBinary();
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	2100      	movs	r1, #0
	xSemPalette = xSemaphoreCreateBinary();
 8004ba8:	6018      	str	r0, [r3, #0]
	xSemAscenseur = xSemaphoreCreateBinary();
 8004baa:	2001      	movs	r0, #1
 8004bac:	f7fb fbb8 	bl	8000320 <xQueueGenericCreate>
 8004bb0:	4b39      	ldr	r3, [pc, #228]	; (8004c98 <main+0x260>)
 8004bb2:	6018      	str	r0, [r3, #0]
	xConsoleMutex = xSemaphoreCreateMutex();
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	f7fb fe59 	bl	800086c <xQueueCreateMutex>
 8004bba:	4b38      	ldr	r3, [pc, #224]	; (8004c9c <main+0x264>)
	xComQueue = xQueueCreate(10, sizeof(uint32_t*));
 8004bbc:	2200      	movs	r2, #0
	xConsoleMutex = xSemaphoreCreateMutex();
 8004bbe:	6018      	str	r0, [r3, #0]
	xComQueue = xQueueCreate(10, sizeof(uint32_t*));
 8004bc0:	2104      	movs	r1, #4
 8004bc2:	200a      	movs	r0, #10
 8004bc4:	f7fb fbac 	bl	8000320 <xQueueGenericCreate>
 8004bc8:	4c35      	ldr	r4, [pc, #212]	; (8004ca0 <main+0x268>)
	xSubcribeQueue = xQueueCreate(10, sizeof(subscribe_message_t*));
 8004bca:	2200      	movs	r2, #0
	xComQueue = xQueueCreate(10, sizeof(uint32_t*));
 8004bcc:	6020      	str	r0, [r4, #0]
	xSubcribeQueue = xQueueCreate(10, sizeof(subscribe_message_t*));
 8004bce:	2104      	movs	r1, #4
 8004bd0:	200a      	movs	r0, #10
 8004bd2:	f7fb fba5 	bl	8000320 <xQueueGenericCreate>
 8004bd6:	4b33      	ldr	r3, [pc, #204]	; (8004ca4 <main+0x26c>)
    command.mask = Tapis_Distribution_Cartons_MSK
 8004bd8:	4a33      	ldr	r2, [pc, #204]	; (8004ca8 <main+0x270>)
	xSubcribeQueue = xQueueCreate(10, sizeof(subscribe_message_t*));
 8004bda:	6018      	str	r0, [r3, #0]
    command.mask = Tapis_Distribution_Cartons_MSK
 8004bdc:	4b32      	ldr	r3, [pc, #200]	; (8004ca8 <main+0x270>)
    xQueueSendToBack(xComQueue, &message, 0);
 8004bde:	6820      	ldr	r0, [r4, #0]
    command.mask = Tapis_Distribution_Cartons_MSK
 8004be0:	9204      	str	r2, [sp, #16]
 8004be2:	9305      	str	r3, [sp, #20]
    message = &command;
 8004be4:	ab04      	add	r3, sp, #16
    xQueueSendToBack(xComQueue, &message, 0);
 8004be6:	2200      	movs	r2, #0
    message = &command;
 8004be8:	9303      	str	r3, [sp, #12]
    xQueueSendToBack(xComQueue, &message, 0);
 8004bea:	a903      	add	r1, sp, #12
 8004bec:	2300      	movs	r3, #0
 8004bee:	f7fb fc39 	bl	8000464 <xQueueGenericSend>
	xTaskCreate(vTaskPalettiseur, "vTaskPalettiseur", 128, NULL, 3, NULL);
 8004bf2:	2400      	movs	r4, #0
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	2280      	movs	r2, #128	; 0x80
 8004bf8:	492c      	ldr	r1, [pc, #176]	; (8004cac <main+0x274>)
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	482c      	ldr	r0, [pc, #176]	; (8004cb0 <main+0x278>)
 8004bfe:	2300      	movs	r3, #0
 8004c00:	9401      	str	r4, [sp, #4]
 8004c02:	f7fc fca9 	bl	8001558 <xTaskCreate>
	xTaskCreate(vTaskPalette, "vTaskPalette", 128, NULL, 2, NULL);
 8004c06:	2302      	movs	r3, #2
 8004c08:	2280      	movs	r2, #128	; 0x80
 8004c0a:	492a      	ldr	r1, [pc, #168]	; (8004cb4 <main+0x27c>)
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	482a      	ldr	r0, [pc, #168]	; (8004cb8 <main+0x280>)
 8004c10:	2300      	movs	r3, #0
 8004c12:	9401      	str	r4, [sp, #4]
 8004c14:	f7fc fca0 	bl	8001558 <xTaskCreate>
	xTaskCreate(vTaskAscenseur, "vTaskAscenseur", 128, NULL, 4, NULL);
 8004c18:	2304      	movs	r3, #4
 8004c1a:	2280      	movs	r2, #128	; 0x80
 8004c1c:	4927      	ldr	r1, [pc, #156]	; (8004cbc <main+0x284>)
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	4827      	ldr	r0, [pc, #156]	; (8004cc0 <main+0x288>)
 8004c22:	2300      	movs	r3, #0
 8004c24:	9401      	str	r4, [sp, #4]
 8004c26:	f7fc fc97 	bl	8001558 <xTaskCreate>
	xTaskCreate(vTaskRead, "vTaskRead", 256, NULL, 6, NULL);
 8004c2a:	2306      	movs	r3, #6
 8004c2c:	2280      	movs	r2, #128	; 0x80
 8004c2e:	4925      	ldr	r1, [pc, #148]	; (8004cc4 <main+0x28c>)
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	0052      	lsls	r2, r2, #1
 8004c34:	2300      	movs	r3, #0
 8004c36:	4824      	ldr	r0, [pc, #144]	; (8004cc8 <main+0x290>)
 8004c38:	9401      	str	r4, [sp, #4]
 8004c3a:	f7fc fc8d 	bl	8001558 <xTaskCreate>
	xTaskCreate(vTaskWrite, "vTaskWrite", 256, NULL, 5, NULL);
 8004c3e:	2305      	movs	r3, #5
 8004c40:	2280      	movs	r2, #128	; 0x80
 8004c42:	4922      	ldr	r1, [pc, #136]	; (8004ccc <main+0x294>)
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	0052      	lsls	r2, r2, #1
 8004c48:	2300      	movs	r3, #0
 8004c4a:	4821      	ldr	r0, [pc, #132]	; (8004cd0 <main+0x298>)
 8004c4c:	9401      	str	r4, [sp, #4]
 8004c4e:	f7fc fc83 	bl	8001558 <xTaskCreate>
	vTaskStartScheduler();
 8004c52:	f7fc fdcf 	bl	80017f4 <vTaskStartScheduler>
	while(1)
 8004c56:	e7fe      	b.n	8004c56 <main+0x21e>
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	000f4240 	.word	0x000f4240
 8004c60:	fffe7fff 	.word	0xfffe7fff
 8004c64:	ffc3ffff 	.word	0xffc3ffff
 8004c68:	fffff8ff 	.word	0xfffff8ff
 8004c6c:	40022000 	.word	0x40022000
 8004c70:	f0ffffff 	.word	0xf0ffffff
 8004c74:	fffcffff 	.word	0xfffcffff
 8004c78:	8fffffff 	.word	0x8fffffff
 8004c7c:	200038cc 	.word	0x200038cc
 8004c80:	200038c8 	.word	0x200038c8
 8004c84:	200038b0 	.word	0x200038b0
 8004c88:	200038b4 	.word	0x200038b4
 8004c8c:	200038b8 	.word	0x200038b8
 8004c90:	200038c0 	.word	0x200038c0
 8004c94:	200038c4 	.word	0x200038c4
 8004c98:	200038bc 	.word	0x200038bc
 8004c9c:	200038ac 	.word	0x200038ac
 8004ca0:	200038a8 	.word	0x200038a8
 8004ca4:	200038d0 	.word	0x200038d0
 8004ca8:	003c1006 	.word	0x003c1006
 8004cac:	08005384 	.word	0x08005384
 8004cb0:	08003fcd 	.word	0x08003fcd
 8004cb4:	08005398 	.word	0x08005398
 8004cb8:	08004441 	.word	0x08004441
 8004cbc:	080053a8 	.word	0x080053a8
 8004cc0:	080041c1 	.word	0x080041c1
 8004cc4:	080053b8 	.word	0x080053b8
 8004cc8:	080046c9 	.word	0x080046c9
 8004ccc:	080053c4 	.word	0x080053c4
 8004cd0:	080045d9 	.word	0x080045d9

08004cd4 <NMI_Handler>:
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
}
 8004cd4:	4770      	bx	lr
 8004cd6:	46c0      	nop			; (mov r8, r8)

08004cd8 <HardFault_Handler>:
 * @retval None
 */
void HardFault_Handler(void)
{
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8004cd8:	e7fe      	b.n	8004cd8 <HardFault_Handler>
 8004cda:	46c0      	nop			; (mov r8, r8)

08004cdc <USART2_IRQHandler>:
 */

extern xSemaphoreHandle xSem_UART_TC;
void USART2_IRQHandler()
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8004cdc:	2300      	movs	r3, #0
	// Test for TXE pending interrupt
	if ((USART2->ISR & USART_ISR_TC) == USART_ISR_TC)
 8004cde:	2240      	movs	r2, #64	; 0x40
{
 8004ce0:	b500      	push	{lr}
 8004ce2:	b083      	sub	sp, #12
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8004ce4:	9301      	str	r3, [sp, #4]
	if ((USART2->ISR & USART_ISR_TC) == USART_ISR_TC)
 8004ce6:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <USART2_IRQHandler+0x38>)
 8004ce8:	69d9      	ldr	r1, [r3, #28]
 8004cea:	420a      	tst	r2, r1
 8004cec:	d101      	bne.n	8004cf2 <USART2_IRQHandler+0x16>

		// Perform a context switch to the waiting task
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
	}

}
 8004cee:	b003      	add	sp, #12
 8004cf0:	bd00      	pop	{pc}
		USART2->ICR |= USART_ICR_TCCF;
 8004cf2:	6a19      	ldr	r1, [r3, #32]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	621a      	str	r2, [r3, #32]
		xSemaphoreGiveFromISR(xSem_UART_TC, &xHigherPriorityTaskWoken);
 8004cf8:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <USART2_IRQHandler+0x3c>)
 8004cfa:	a901      	add	r1, sp, #4
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	f7fb fe47 	bl	8000990 <xQueueGiveFromISR>
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8004d02:	9b01      	ldr	r3, [sp, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f2      	beq.n	8004cee <USART2_IRQHandler+0x12>
 8004d08:	2280      	movs	r2, #128	; 0x80
 8004d0a:	4b04      	ldr	r3, [pc, #16]	; (8004d1c <USART2_IRQHandler+0x40>)
 8004d0c:	0552      	lsls	r2, r2, #21
 8004d0e:	601a      	str	r2, [r3, #0]
}
 8004d10:	e7ed      	b.n	8004cee <USART2_IRQHandler+0x12>
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	40004400 	.word	0x40004400
 8004d18:	200038cc 	.word	0x200038cc
 8004d1c:	e000ed04 	.word	0xe000ed04

08004d20 <DMA1_Channel4_5_6_7_IRQHandler>:
 */
extern xSemaphoreHandle xSem_DMA_TC;

void DMA1_Channel4_5_6_7_IRQHandler()
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8004d20:	2300      	movs	r3, #0
{
 8004d22:	b500      	push	{lr}
 8004d24:	b083      	sub	sp, #12
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8004d26:	9301      	str	r3, [sp, #4]
	// Test for Channel 4 Transfer Complete
	if ((DMA1->ISR & DMA_ISR_TCIF4) == DMA_ISR_TCIF4)
 8004d28:	2380      	movs	r3, #128	; 0x80
 8004d2a:	4a0b      	ldr	r2, [pc, #44]	; (8004d58 <DMA1_Channel4_5_6_7_IRQHandler+0x38>)
 8004d2c:	019b      	lsls	r3, r3, #6
 8004d2e:	6811      	ldr	r1, [r2, #0]
 8004d30:	4219      	tst	r1, r3
 8004d32:	d101      	bne.n	8004d38 <DMA1_Channel4_5_6_7_IRQHandler+0x18>
		xSemaphoreGiveFromISR(xSem_DMA_TC, &xHigherPriorityTaskWoken);

		// Perform a context switch to the waiting task
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
	}
}
 8004d34:	b003      	add	sp, #12
 8004d36:	bd00      	pop	{pc}
		DMA1->IFCR |= DMA_IFCR_CTCIF4;
 8004d38:	6851      	ldr	r1, [r2, #4]
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	6053      	str	r3, [r2, #4]
		xSemaphoreGiveFromISR(xSem_DMA_TC, &xHigherPriorityTaskWoken);
 8004d3e:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <DMA1_Channel4_5_6_7_IRQHandler+0x3c>)
 8004d40:	a901      	add	r1, sp, #4
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	f7fb fe24 	bl	8000990 <xQueueGiveFromISR>
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8004d48:	9b01      	ldr	r3, [sp, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f2      	beq.n	8004d34 <DMA1_Channel4_5_6_7_IRQHandler+0x14>
 8004d4e:	2280      	movs	r2, #128	; 0x80
 8004d50:	4b03      	ldr	r3, [pc, #12]	; (8004d60 <DMA1_Channel4_5_6_7_IRQHandler+0x40>)
 8004d52:	0552      	lsls	r2, r2, #21
 8004d54:	601a      	str	r2, [r3, #0]
}
 8004d56:	e7ed      	b.n	8004d34 <DMA1_Channel4_5_6_7_IRQHandler+0x14>
 8004d58:	40020000 	.word	0x40020000
 8004d5c:	200038c8 	.word	0x200038c8
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <BSP_LED_Init>:
 */

void BSP_LED_Init()
{
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8004d64:	2380      	movs	r3, #128	; 0x80
 8004d66:	4a12      	ldr	r2, [pc, #72]	; (8004db0 <BSP_LED_Init+0x4c>)
 8004d68:	029b      	lsls	r3, r3, #10
 8004d6a:	6951      	ldr	r1, [r2, #20]
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6153      	str	r3, [r2, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8004d70:	2390      	movs	r3, #144	; 0x90
 8004d72:	05db      	lsls	r3, r3, #23
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	490f      	ldr	r1, [pc, #60]	; (8004db4 <BSP_LED_Init+0x50>)
 8004d78:	400a      	ands	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 << GPIO_MODER_MODER5_Pos);
 8004d7c:	2280      	movs	r2, #128	; 0x80
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	00d2      	lsls	r2, r2, #3
 8004d82:	4302      	orrs	r2, r0

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 8004d84:	2020      	movs	r0, #32
	GPIOA->MODER |= (0x01 << GPIO_MODER_MODER5_Pos);
 8004d86:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	4382      	bics	r2, r0
 8004d8c:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	400a      	ands	r2, r1
 8004d92:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 << GPIO_OSPEEDR_OSPEEDR5_Pos);
 8004d94:	22c0      	movs	r2, #192	; 0xc0
 8004d96:	6898      	ldr	r0, [r3, #8]
 8004d98:	0112      	lsls	r2, r2, #4
 8004d9a:	4302      	orrs	r2, r0
 8004d9c:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	400a      	ands	r2, r1
 8004da2:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 8004da4:	2280      	movs	r2, #128	; 0x80
 8004da6:	6999      	ldr	r1, [r3, #24]
 8004da8:	0392      	lsls	r2, r2, #14
 8004daa:	430a      	orrs	r2, r1
 8004dac:	619a      	str	r2, [r3, #24]
}
 8004dae:	4770      	bx	lr
 8004db0:	40021000 	.word	0x40021000
 8004db4:	fffff3ff 	.word	0xfffff3ff

08004db8 <BSP_Console_Init>:

void BSP_Console_Init()
{
	
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8004db8:	2180      	movs	r1, #128	; 0x80
{
 8004dba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dbc:	46c6      	mov	lr, r8
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8004dbe:	4b3e      	ldr	r3, [pc, #248]	; (8004eb8 <BSP_Console_Init+0x100>)
 8004dc0:	0289      	lsls	r1, r1, #10
 8004dc2:	695a      	ldr	r2, [r3, #20]
{
 8004dc4:	b500      	push	{lr}
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 8004dca:	2290      	movs	r2, #144	; 0x90
 8004dcc:	24f0      	movs	r4, #240	; 0xf0
 8004dce:	05d2      	lsls	r2, r2, #23
 8004dd0:	6810      	ldr	r0, [r2, #0]

	// Enable Transfer Complete ISR
	USART2->CR1 |= USART_CR1_TCIE;

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8004dd2:	250c      	movs	r5, #12
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 8004dd4:	43a0      	bics	r0, r4
 8004dd6:	6010      	str	r0, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODER2_Pos) | (0x02 << GPIO_MODER_MODER3_Pos);
 8004dd8:	6810      	ldr	r0, [r2, #0]
 8004dda:	3c50      	subs	r4, #80	; 0x50
 8004ddc:	4320      	orrs	r0, r4
 8004dde:	6010      	str	r0, [r2, #0]
	GPIOA->AFR[0] &= ~(0x0000FF00);
 8004de0:	6a10      	ldr	r0, [r2, #32]
 8004de2:	4c36      	ldr	r4, [pc, #216]	; (8004ebc <BSP_Console_Init+0x104>)
	 */
	// Reset DMA1 Channel 5 configuration
	DMA1_Channel5->CCR = 0x00000000;

	// Set direction Peripheral -> Memory
	DMA1_Channel5->CCR &= ~DMA_CCR_DIR;
 8004de4:	2710      	movs	r7, #16
	GPIOA->AFR[0] &= ~(0x0000FF00);
 8004de6:	4020      	ands	r0, r4
 8004de8:	6210      	str	r0, [r2, #32]
	GPIOA->AFR[0] |= (0x00001100);
 8004dea:	2088      	movs	r0, #136	; 0x88
 8004dec:	6a14      	ldr	r4, [r2, #32]
 8004dee:	0140      	lsls	r0, r0, #5
 8004df0:	4320      	orrs	r0, r4
 8004df2:	6210      	str	r0, [r2, #32]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8004df4:	69da      	ldr	r2, [r3, #28]
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 8004df6:	4c32      	ldr	r4, [pc, #200]	; (8004ec0 <BSP_Console_Init+0x108>)
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8004df8:	4311      	orrs	r1, r2
 8004dfa:	61d9      	str	r1, [r3, #28]
	USART2->CR1 = 0x00000000;
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	4a31      	ldr	r2, [pc, #196]	; (8004ec4 <BSP_Console_Init+0x10c>)
 8004e00:	6011      	str	r1, [r2, #0]
	USART2->CR2 = 0x00000000;
 8004e02:	6051      	str	r1, [r2, #4]
	USART2->CR3 = 0x00000000;
 8004e04:	6091      	str	r1, [r2, #8]
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 8004e06:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e08:	4020      	ands	r0, r4
 8004e0a:	6318      	str	r0, [r3, #48]	; 0x30
	USART2->CR1 &= ~USART_CR1_OVER8;
 8004e0c:	6810      	ldr	r0, [r2, #0]
 8004e0e:	4c2e      	ldr	r4, [pc, #184]	; (8004ec8 <BSP_Console_Init+0x110>)
 8004e10:	4020      	ands	r0, r4
 8004e12:	6010      	str	r0, [r2, #0]
	USART2->BRR = 5000; // 9600 bauds
 8004e14:	482d      	ldr	r0, [pc, #180]	; (8004ecc <BSP_Console_Init+0x114>)
 8004e16:	60d0      	str	r0, [r2, #12]
	USART2->CR3 |= USART_CR3_OVRDIS;
 8004e18:	2080      	movs	r0, #128	; 0x80
 8004e1a:	6894      	ldr	r4, [r2, #8]
 8004e1c:	0140      	lsls	r0, r0, #5
 8004e1e:	4320      	orrs	r0, r4
 8004e20:	6090      	str	r0, [r2, #8]
	USART2->CR1 |= USART_CR1_TCIE;
 8004e22:	2040      	movs	r0, #64	; 0x40
 8004e24:	6814      	ldr	r4, [r2, #0]
 8004e26:	4304      	orrs	r4, r0
 8004e28:	6014      	str	r4, [r2, #0]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8004e2a:	6814      	ldr	r4, [r2, #0]
 8004e2c:	432c      	orrs	r4, r5
 8004e2e:	6014      	str	r4, [r2, #0]
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8004e30:	2401      	movs	r4, #1
 8004e32:	695d      	ldr	r5, [r3, #20]
 8004e34:	4325      	orrs	r5, r4
 8004e36:	615d      	str	r5, [r3, #20]
	DMA1_Channel5->CCR = 0x00000000;
 8004e38:	4b25      	ldr	r3, [pc, #148]	; (8004ed0 <BSP_Console_Init+0x118>)
 8004e3a:	6019      	str	r1, [r3, #0]
	DMA1_Channel5->CCR &= ~DMA_CCR_DIR;
 8004e3c:	681d      	ldr	r5, [r3, #0]
 8004e3e:	43bd      	bics	r5, r7
 8004e40:	601d      	str	r5, [r3, #0]

	// Peripheral is USART2 RDR
	DMA1_Channel5->CPAR = (uint32_t)&USART2->RDR;
 8004e42:	4d24      	ldr	r5, [pc, #144]	; (8004ed4 <BSP_Console_Init+0x11c>)
 8004e44:	609d      	str	r5, [r3, #8]

	// Peripheral data size is 8-bit (byte)
	DMA1_Channel5->CCR |= (0x00 << DMA_CCR_PSIZE_Pos);
 8004e46:	681d      	ldr	r5, [r3, #0]
 8004e48:	601d      	str	r5, [r3, #0]

	// Disable auto-increment Peripheral address
	DMA1_Channel5->CCR &= ~DMA_CCR_PINC;
 8004e4a:	681d      	ldr	r5, [r3, #0]
 8004e4c:	4385      	bics	r5, r0
 8004e4e:	601d      	str	r5, [r3, #0]

	// Memory is rx_dma_buffer
	DMA1_Channel5->CMAR = (uint32_t)rx_dma_buffer;
 8004e50:	4d21      	ldr	r5, [pc, #132]	; (8004ed8 <BSP_Console_Init+0x120>)
 8004e52:	60dd      	str	r5, [r3, #12]

	// Memory data size is 8-bit (byte)
	DMA1_Channel5->CCR |= (0x00 << DMA_CCR_MSIZE_Pos);
 8004e54:	681d      	ldr	r5, [r3, #0]
 8004e56:	601d      	str	r5, [r3, #0]

	// Enable auto-increment Memory address
	DMA1_Channel5->CCR |= DMA_CCR_MINC;
 8004e58:	2580      	movs	r5, #128	; 0x80
 8004e5a:	681e      	ldr	r6, [r3, #0]
 8004e5c:	46a8      	mov	r8, r5
 8004e5e:	432e      	orrs	r6, r5
 8004e60:	601e      	str	r6, [r3, #0]

	// Set Memory Buffer size
	DMA1_Channel5->CNDTR = 14;
 8004e62:	260e      	movs	r6, #14
 8004e64:	605e      	str	r6, [r3, #4]

	// DMA mode is circular
	DMA1_Channel5->CCR |= DMA_CCR_CIRC;
 8004e66:	681e      	ldr	r6, [r3, #0]
 8004e68:	3d60      	subs	r5, #96	; 0x60
 8004e6a:	432e      	orrs	r6, r5
 8004e6c:	601e      	str	r6, [r3, #0]

	// Enable DMA1 Channel 5
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 8004e6e:	681e      	ldr	r6, [r3, #0]
 8004e70:	4326      	orrs	r6, r4
 8004e72:	601e      	str	r6, [r3, #0]

	// Enable USART2 DMA Request on RX
	USART2->CR3 |= USART_CR3_DMAR;
 8004e74:	6893      	ldr	r3, [r2, #8]
 8004e76:	4303      	orrs	r3, r0
 8004e78:	6093      	str	r3, [r2, #8]
	/*
	 * DMA en transmission TX channel 4
	 */

	// Reset DMA1 Channel 4 configuration
	DMA1_Channel4->CCR = 0x00000000;
 8004e7a:	4b18      	ldr	r3, [pc, #96]	; (8004edc <BSP_Console_Init+0x124>)
 8004e7c:	6019      	str	r1, [r3, #0]

	// Set direction Memory -> Peripheral
	DMA1_Channel4->CCR |= DMA_CCR_DIR;
 8004e7e:	6819      	ldr	r1, [r3, #0]
 8004e80:	4339      	orrs	r1, r7
 8004e82:	6019      	str	r1, [r3, #0]

	// Peripheral is USART2 TDR
	DMA1_Channel4->CPAR = (uint32_t)&USART2->TDR;
 8004e84:	4916      	ldr	r1, [pc, #88]	; (8004ee0 <BSP_Console_Init+0x128>)
 8004e86:	6099      	str	r1, [r3, #8]

	// Peripheral data size is 8-bit (byte)
	DMA1_Channel4->CCR |= (0x00 << DMA_CCR_PSIZE_Pos);
 8004e88:	6819      	ldr	r1, [r3, #0]
 8004e8a:	6019      	str	r1, [r3, #0]

	// Disable auto-increment Peripheral address
	DMA1_Channel4->CCR &= ~DMA_CCR_PINC;
 8004e8c:	6819      	ldr	r1, [r3, #0]
 8004e8e:	4381      	bics	r1, r0

	// Memory data size is 8-bit (byte)
	DMA1_Channel4->CCR |= (0x00 << DMA_CCR_MSIZE_Pos);

	// Enable auto-increment Memory address
	DMA1_Channel4->CCR |= DMA_CCR_MINC;
 8004e90:	4640      	mov	r0, r8
	DMA1_Channel4->CCR &= ~DMA_CCR_PINC;
 8004e92:	6019      	str	r1, [r3, #0]
	DMA1_Channel4->CMAR = (uint32_t)&tx_dma_buffer;
 8004e94:	4913      	ldr	r1, [pc, #76]	; (8004ee4 <BSP_Console_Init+0x12c>)
 8004e96:	60d9      	str	r1, [r3, #12]
	DMA1_Channel4->CCR |= (0x00 << DMA_CCR_MSIZE_Pos);
 8004e98:	6819      	ldr	r1, [r3, #0]
 8004e9a:	6019      	str	r1, [r3, #0]
	DMA1_Channel4->CCR |= DMA_CCR_MINC;
 8004e9c:	6819      	ldr	r1, [r3, #0]
 8004e9e:	4301      	orrs	r1, r0
 8004ea0:	6019      	str	r1, [r3, #0]

	// DMA mode is circular disable
	// DMA1_Channel4->CCR &= ~DMA_CCR_CIRC;				AQQQQ

	// Enable DMA TC interrupts
	DMA1_Channel4->CCR |= DMA_CCR_TCIE;
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	387e      	subs	r0, #126	; 0x7e
 8004ea6:	4301      	orrs	r1, r0
 8004ea8:	6019      	str	r1, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 8004eaa:	6813      	ldr	r3, [r2, #0]
 8004eac:	4323      	orrs	r3, r4
 8004eae:	6013      	str	r3, [r2, #0]
}
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	46b8      	mov	r8, r7
 8004eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	ffff00ff 	.word	0xffff00ff
 8004ec0:	fffcffff 	.word	0xfffcffff
 8004ec4:	40004400 	.word	0x40004400
 8004ec8:	ffff7fff 	.word	0xffff7fff
 8004ecc:	00001388 	.word	0x00001388
 8004ed0:	40020058 	.word	0x40020058
 8004ed4:	40004424 	.word	0x40004424
 8004ed8:	200038d4 	.word	0x200038d4
 8004edc:	40020044 	.word	0x40020044
 8004ee0:	40004428 	.word	0x40004428
 8004ee4:	200038e4 	.word	0x200038e4

08004ee8 <FACTORY_IO_Sensors_Get>:
	sstates = 0x00000000;

	sstates |= rx_dma_buffer[1];
	sstates |= (rx_dma_buffer[2] <<8U );
	sstates |= (rx_dma_buffer[3] <<16U);
	sstates |= (rx_dma_buffer[4] <<24U);
 8004ee8:	4907      	ldr	r1, [pc, #28]	; (8004f08 <FACTORY_IO_Sensors_Get+0x20>)
 8004eea:	788b      	ldrb	r3, [r1, #2]
 8004eec:	784a      	ldrb	r2, [r1, #1]
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	78ca      	ldrb	r2, [r1, #3]
 8004ef4:	0412      	lsls	r2, r2, #16
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	790b      	ldrb	r3, [r1, #4]
 8004efa:	061b      	lsls	r3, r3, #24
 8004efc:	4313      	orrs	r3, r2

	// Perform logical comparison with mask
	if ((sstates & msk) == 0)
 8004efe:	4018      	ands	r0, r3
 8004f00:	1e43      	subs	r3, r0, #1
 8004f02:	4198      	sbcs	r0, r3

	else
	{
		return 1;
	}
}
 8004f04:	b2c0      	uxtb	r0, r0
 8004f06:	4770      	bx	lr
 8004f08:	200038d4 	.word	0x200038d4

08004f0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004f0c:	480d      	ldr	r0, [pc, #52]	; (8004f44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004f0e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004f10:	f000 f826 	bl	8004f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f14:	480c      	ldr	r0, [pc, #48]	; (8004f48 <LoopForever+0x6>)
  ldr r1, =_edata
 8004f16:	490d      	ldr	r1, [pc, #52]	; (8004f4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004f18:	4a0d      	ldr	r2, [pc, #52]	; (8004f50 <LoopForever+0xe>)
  movs r3, #0
 8004f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f1c:	e002      	b.n	8004f24 <LoopCopyDataInit>

08004f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f22:	3304      	adds	r3, #4

08004f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f28:	d3f9      	bcc.n	8004f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f2a:	4a0a      	ldr	r2, [pc, #40]	; (8004f54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004f2c:	4c0a      	ldr	r4, [pc, #40]	; (8004f58 <LoopForever+0x16>)
  movs r3, #0
 8004f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f30:	e001      	b.n	8004f36 <LoopFillZerobss>

08004f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f34:	3204      	adds	r2, #4

08004f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f38:	d3fb      	bcc.n	8004f32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004f3a:	f000 f853 	bl	8004fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004f3e:	f7ff fd7b 	bl	8004a38 <main>

08004f42 <LoopForever>:

LoopForever:
    b LoopForever
 8004f42:	e7fe      	b.n	8004f42 <LoopForever>
  ldr   r0, =_estack
 8004f44:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f4c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8004f50:	080053e8 	.word	0x080053e8
  ldr r2, =_sbss
 8004f54:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8004f58:	200038ec 	.word	0x200038ec

08004f5c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f5c:	e7fe      	b.n	8004f5c <ADC1_COMP_IRQHandler>
	...

08004f60 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004f60:	4770      	bx	lr
 8004f62:	46c0      	nop			; (mov r8, r8)

08004f64 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate (void)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004f64:	230c      	movs	r3, #12
 8004f66:	4a16      	ldr	r2, [pc, #88]	; (8004fc0 <SystemCoreClockUpdate+0x5c>)
{
 8004f68:	b570      	push	{r4, r5, r6, lr}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004f6a:	6851      	ldr	r1, [r2, #4]
 8004f6c:	400b      	ands	r3, r1

  switch (tmp)
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d00a      	beq.n	8004f88 <SystemCoreClockUpdate+0x24>
 8004f72:	4814      	ldr	r0, [pc, #80]	; (8004fc4 <SystemCoreClockUpdate+0x60>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004f74:	4b12      	ldr	r3, [pc, #72]	; (8004fc0 <SystemCoreClockUpdate+0x5c>)
 8004f76:	4a14      	ldr	r2, [pc, #80]	; (8004fc8 <SystemCoreClockUpdate+0x64>)
 8004f78:	685b      	ldr	r3, [r3, #4]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8004f7a:	4914      	ldr	r1, [pc, #80]	; (8004fcc <SystemCoreClockUpdate+0x68>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004f7c:	061b      	lsls	r3, r3, #24
 8004f7e:	0f1b      	lsrs	r3, r3, #28
 8004f80:	5cd3      	ldrb	r3, [r2, r3]
  SystemCoreClock >>= tmp;
 8004f82:	40d8      	lsrs	r0, r3
 8004f84:	6008      	str	r0, [r1, #0]
}
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
      pllmull = ( pllmull >> 18) + 2;
 8004f88:	210f      	movs	r1, #15
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8004f8a:	6850      	ldr	r0, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8004f8c:	6853      	ldr	r3, [r2, #4]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8004f8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8004f90:	25c0      	movs	r5, #192	; 0xc0
      pllmull = ( pllmull >> 18) + 2;
 8004f92:	0c80      	lsrs	r0, r0, #18
 8004f94:	4008      	ands	r0, r1
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8004f96:	4011      	ands	r1, r2
      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004f98:	2280      	movs	r2, #128	; 0x80
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8004f9a:	026d      	lsls	r5, r5, #9
 8004f9c:	402b      	ands	r3, r5
      pllmull = ( pllmull >> 18) + 2;
 8004f9e:	1c84      	adds	r4, r0, #2
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8004fa0:	3101      	adds	r1, #1
      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004fa2:	0252      	lsls	r2, r2, #9
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d001      	beq.n	8004fac <SystemCoreClockUpdate+0x48>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8004fa8:	42ab      	cmp	r3, r5
 8004faa:	d004      	beq.n	8004fb6 <SystemCoreClockUpdate+0x52>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8004fac:	4805      	ldr	r0, [pc, #20]	; (8004fc4 <SystemCoreClockUpdate+0x60>)
 8004fae:	f7fb f8ab 	bl	8000108 <__udivsi3>
 8004fb2:	4360      	muls	r0, r4
 8004fb4:	e7de      	b.n	8004f74 <SystemCoreClockUpdate+0x10>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8004fb6:	4806      	ldr	r0, [pc, #24]	; (8004fd0 <SystemCoreClockUpdate+0x6c>)
 8004fb8:	f7fb f8a6 	bl	8000108 <__udivsi3>
 8004fbc:	4360      	muls	r0, r4
 8004fbe:	e7d9      	b.n	8004f74 <SystemCoreClockUpdate+0x10>
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	007a1200 	.word	0x007a1200
 8004fc8:	080053d0 	.word	0x080053d0
 8004fcc:	20000010 	.word	0x20000010
 8004fd0:	02dc6c00 	.word	0x02dc6c00

08004fd4 <memset>:
 8004fd4:	0003      	movs	r3, r0
 8004fd6:	1882      	adds	r2, r0, r2
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d100      	bne.n	8004fde <memset+0xa>
 8004fdc:	4770      	bx	lr
 8004fde:	7019      	strb	r1, [r3, #0]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	e7f9      	b.n	8004fd8 <memset+0x4>

08004fe4 <__libc_init_array>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	2600      	movs	r6, #0
 8004fe8:	4c0c      	ldr	r4, [pc, #48]	; (800501c <__libc_init_array+0x38>)
 8004fea:	4d0d      	ldr	r5, [pc, #52]	; (8005020 <__libc_init_array+0x3c>)
 8004fec:	1b64      	subs	r4, r4, r5
 8004fee:	10a4      	asrs	r4, r4, #2
 8004ff0:	42a6      	cmp	r6, r4
 8004ff2:	d109      	bne.n	8005008 <__libc_init_array+0x24>
 8004ff4:	2600      	movs	r6, #0
 8004ff6:	f000 f823 	bl	8005040 <_init>
 8004ffa:	4c0a      	ldr	r4, [pc, #40]	; (8005024 <__libc_init_array+0x40>)
 8004ffc:	4d0a      	ldr	r5, [pc, #40]	; (8005028 <__libc_init_array+0x44>)
 8004ffe:	1b64      	subs	r4, r4, r5
 8005000:	10a4      	asrs	r4, r4, #2
 8005002:	42a6      	cmp	r6, r4
 8005004:	d105      	bne.n	8005012 <__libc_init_array+0x2e>
 8005006:	bd70      	pop	{r4, r5, r6, pc}
 8005008:	00b3      	lsls	r3, r6, #2
 800500a:	58eb      	ldr	r3, [r5, r3]
 800500c:	4798      	blx	r3
 800500e:	3601      	adds	r6, #1
 8005010:	e7ee      	b.n	8004ff0 <__libc_init_array+0xc>
 8005012:	00b3      	lsls	r3, r6, #2
 8005014:	58eb      	ldr	r3, [r5, r3]
 8005016:	4798      	blx	r3
 8005018:	3601      	adds	r6, #1
 800501a:	e7f2      	b.n	8005002 <__libc_init_array+0x1e>
 800501c:	080053e0 	.word	0x080053e0
 8005020:	080053e0 	.word	0x080053e0
 8005024:	080053e4 	.word	0x080053e4
 8005028:	080053e0 	.word	0x080053e0

0800502c <memcpy>:
 800502c:	2300      	movs	r3, #0
 800502e:	b510      	push	{r4, lr}
 8005030:	429a      	cmp	r2, r3
 8005032:	d100      	bne.n	8005036 <memcpy+0xa>
 8005034:	bd10      	pop	{r4, pc}
 8005036:	5ccc      	ldrb	r4, [r1, r3]
 8005038:	54c4      	strb	r4, [r0, r3]
 800503a:	3301      	adds	r3, #1
 800503c:	e7f8      	b.n	8005030 <memcpy+0x4>
	...

08005040 <_init>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	46c0      	nop			; (mov r8, r8)
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr

0800504c <_fini>:
 800504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005052:	bc08      	pop	{r3}
 8005054:	469e      	mov	lr, r3
 8005056:	4770      	bx	lr
