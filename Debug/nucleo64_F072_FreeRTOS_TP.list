
nucleo64_F072_FreeRTOS_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005170  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800561c  0800561c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005620  08005620  00015620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08005624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000038e0  20000010  08005634  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000080  200038f0  08005634  000238f0  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016264  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002aef  00000000  00000000  000362df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000d82b  00000000  00000000  00038dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000920  00000000  00000000  00046600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000193f  00000000  00000000  00046f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00003e38  00000000  00000000  0004885f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00019122  00000000  00000000  0004c697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000724ed  00000000  00000000  000657b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00001bb8  00000000  00000000  000d7ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  000d9860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005218 	.word	0x08005218

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005218 	.word	0x08005218

08000108 <xEventGroupSetBits.part.0>:

	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 8000108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800010a:	46de      	mov	lr, fp
 800010c:	4657      	mov	r7, sl
 800010e:	464e      	mov	r6, r9
 8000110:	4645      	mov	r5, r8
 8000112:	b5e0      	push	{r5, r6, r7, lr}
 8000114:	000f      	movs	r7, r1
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000116:	0006      	movs	r6, r0
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 8000118:	0005      	movs	r5, r0
	vTaskSuspendAll();
 800011a:	f001 fd79 	bl	8001c10 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 800011e:	f003 f9b1 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8000122:	f003 f8fb 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8000126:	4c26      	ldr	r4, [pc, #152]	; (80001c0 <xEventGroupSetBits.part.0+0xb8>)
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000128:	360c      	adds	r6, #12
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 800012a:	8823      	ldrh	r3, [r4, #0]
 800012c:	4203      	tst	r3, r0
 800012e:	d13a      	bne.n	80001a6 <xEventGroupSetBits.part.0+0x9e>

		pxListItem = listGET_HEAD_ENTRY( pxList );

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8000130:	6829      	ldr	r1, [r5, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8000132:	692c      	ldr	r4, [r5, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8000134:	4339      	orrs	r1, r7
 8000136:	6029      	str	r1, [r5, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000138:	42a6      	cmp	r6, r4
 800013a:	d02a      	beq.n	8000192 <xEventGroupSetBits.part.0+0x8a>
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800013c:	2300      	movs	r3, #0
 800013e:	4698      	mov	r8, r3

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000140:	2380      	movs	r3, #128	; 0x80
 8000142:	04db      	lsls	r3, r3, #19
 8000144:	469b      	mov	fp, r3
			}

			if( xMatchFound != pdFALSE )
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8000146:	2380      	movs	r3, #128	; 0x80
 8000148:	045b      	lsls	r3, r3, #17
 800014a:	469a      	mov	sl, r3
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800014c:	2380      	movs	r3, #128	; 0x80
 800014e:	049b      	lsls	r3, r3, #18
 8000150:	4699      	mov	r9, r3
 8000152:	e00e      	b.n	8000172 <xEventGroupSetBits.part.0+0x6a>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8000154:	4219      	tst	r1, r3
 8000156:	d00a      	beq.n	800016e <xEventGroupSetBits.part.0+0x66>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8000158:	4657      	mov	r7, sl
 800015a:	423a      	tst	r2, r7
 800015c:	d002      	beq.n	8000164 <xEventGroupSetBits.part.0+0x5c>
					uxBitsToClear |= uxBitsWaitedFor;
 800015e:	4642      	mov	r2, r8
 8000160:	431a      	orrs	r2, r3
 8000162:	4690      	mov	r8, r2
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8000164:	464b      	mov	r3, r9
 8000166:	4319      	orrs	r1, r3
 8000168:	f002 f8fa 	bl	8002360 <vTaskRemoveFromUnorderedEventList>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800016c:	6829      	ldr	r1, [r5, #0]
		while( pxListItem != pxListEnd )
 800016e:	42a6      	cmp	r6, r4
 8000170:	d00d      	beq.n	800018e <xEventGroupSetBits.part.0+0x86>
			pxNext = listGET_NEXT( pxListItem );
 8000172:	0020      	movs	r0, r4
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000174:	465f      	mov	r7, fp
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8000176:	6802      	ldr	r2, [r0, #0]
			pxNext = listGET_NEXT( pxListItem );
 8000178:	6864      	ldr	r4, [r4, #4]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800017a:	0213      	lsls	r3, r2, #8
 800017c:	0a1b      	lsrs	r3, r3, #8
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800017e:	423a      	tst	r2, r7
 8000180:	d0e8      	beq.n	8000154 <xEventGroupSetBits.part.0+0x4c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8000182:	000f      	movs	r7, r1
 8000184:	401f      	ands	r7, r3
 8000186:	42bb      	cmp	r3, r7
 8000188:	d0e6      	beq.n	8000158 <xEventGroupSetBits.part.0+0x50>
		while( pxListItem != pxListEnd )
 800018a:	42a6      	cmp	r6, r4
 800018c:	d1f1      	bne.n	8000172 <xEventGroupSetBits.part.0+0x6a>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800018e:	4643      	mov	r3, r8
 8000190:	4399      	bics	r1, r3
 8000192:	6029      	str	r1, [r5, #0]
	}
	( void ) xTaskResumeAll();
 8000194:	f001 fec8 	bl	8001f28 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8000198:	6828      	ldr	r0, [r5, #0]
}
 800019a:	bcf0      	pop	{r4, r5, r6, r7}
 800019c:	46bb      	mov	fp, r7
 800019e:	46b2      	mov	sl, r6
 80001a0:	46a9      	mov	r9, r5
 80001a2:	46a0      	mov	r8, r4
 80001a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 80001a6:	0028      	movs	r0, r5
 80001a8:	f003 f8e0 	bl	800336c <prvTraceGetEventGroupNumberHigh16>
 80001ac:	8823      	ldrh	r3, [r4, #0]
 80001ae:	4203      	tst	r3, r0
 80001b0:	d0be      	beq.n	8000130 <xEventGroupSetBits.part.0+0x28>
 80001b2:	003a      	movs	r2, r7
 80001b4:	0029      	movs	r1, r5
 80001b6:	20b4      	movs	r0, #180	; 0xb4
 80001b8:	f003 fc10 	bl	80039dc <prvTraceStoreEvent2>
 80001bc:	e7b8      	b.n	8000130 <xEventGroupSetBits.part.0+0x28>
 80001be:	46c0      	nop			; (mov r8, r8)
 80001c0:	20000006 	.word	0x20000006

080001c4 <xEventGroupCreate>:
	{
 80001c4:	b570      	push	{r4, r5, r6, lr}
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80001c6:	201c      	movs	r0, #28
 80001c8:	f002 fd5e 	bl	8002c88 <pvPortMalloc>
 80001cc:	1e04      	subs	r4, r0, #0
		if( pxEventBits != NULL )
 80001ce:	d01d      	beq.n	800020c <xEventGroupCreate+0x48>
			pxEventBits->uxEventBits = 0;
 80001d0:	2300      	movs	r3, #0
 80001d2:	c008      	stmia	r0!, {r3}
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80001d4:	f000 f8f8 	bl	80003c8 <vListInitialise>
			traceEVENT_GROUP_CREATE( pxEventBits );
 80001d8:	4b12      	ldr	r3, [pc, #72]	; (8000224 <xEventGroupCreate+0x60>)
 80001da:	0020      	movs	r0, r4
 80001dc:	8819      	ldrh	r1, [r3, #0]
 80001de:	f003 f8cb 	bl	8003378 <prvTraceSetEventGroupNumberHigh16>
 80001e2:	f003 f94f 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 80001e6:	f003 f899 	bl	800331c <prvTraceGetTaskNumberHigh16>
 80001ea:	4d0f      	ldr	r5, [pc, #60]	; (8000228 <xEventGroupCreate+0x64>)
 80001ec:	882b      	ldrh	r3, [r5, #0]
 80001ee:	4203      	tst	r3, r0
 80001f0:	d101      	bne.n	80001f6 <xEventGroupCreate+0x32>
	}
 80001f2:	0020      	movs	r0, r4
 80001f4:	bd70      	pop	{r4, r5, r6, pc}
			traceEVENT_GROUP_CREATE( pxEventBits );
 80001f6:	0020      	movs	r0, r4
 80001f8:	f003 f8b8 	bl	800336c <prvTraceGetEventGroupNumberHigh16>
 80001fc:	882b      	ldrh	r3, [r5, #0]
 80001fe:	4203      	tst	r3, r0
 8000200:	d0f7      	beq.n	80001f2 <xEventGroupCreate+0x2e>
 8000202:	0021      	movs	r1, r4
 8000204:	2015      	movs	r0, #21
 8000206:	f003 fb7d 	bl	8003904 <prvTraceStoreEvent1>
 800020a:	e7f2      	b.n	80001f2 <xEventGroupCreate+0x2e>
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
 800020c:	f003 f93a 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8000210:	f003 f884 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <xEventGroupCreate+0x64>)
 8000216:	881b      	ldrh	r3, [r3, #0]
 8000218:	4203      	tst	r3, r0
 800021a:	d0ea      	beq.n	80001f2 <xEventGroupCreate+0x2e>
 800021c:	2045      	movs	r0, #69	; 0x45
 800021e:	f003 fb07 	bl	8003830 <prvTraceStoreEvent0>
		return pxEventBits;
 8000222:	e7e6      	b.n	80001f2 <xEventGroupCreate+0x2e>
 8000224:	20000004 	.word	0x20000004
 8000228:	20000006 	.word	0x20000006

0800022c <xEventGroupWaitBits>:
{
 800022c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800022e:	4646      	mov	r6, r8
 8000230:	46d6      	mov	lr, sl
 8000232:	464f      	mov	r7, r9
 8000234:	000c      	movs	r4, r1
 8000236:	b5c0      	push	{r6, r7, lr}
 8000238:	0015      	movs	r5, r2
 800023a:	1e06      	subs	r6, r0, #0
 800023c:	4698      	mov	r8, r3
	configASSERT( xEventGroup );
 800023e:	d007      	beq.n	8000250 <xEventGroupWaitBits+0x24>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000240:	0e0b      	lsrs	r3, r1, #24
 8000242:	d103      	bne.n	800024c <xEventGroupWaitBits+0x20>
	configASSERT( uxBitsToWaitFor != 0 );
 8000244:	2900      	cmp	r1, #0
 8000246:	d105      	bne.n	8000254 <xEventGroupWaitBits+0x28>
 8000248:	b672      	cpsid	i
 800024a:	e7fe      	b.n	800024a <xEventGroupWaitBits+0x1e>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800024c:	b672      	cpsid	i
 800024e:	e7fe      	b.n	800024e <xEventGroupWaitBits+0x22>
	configASSERT( xEventGroup );
 8000250:	b672      	cpsid	i
 8000252:	e7fe      	b.n	8000252 <xEventGroupWaitBits+0x26>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000254:	f002 f926 	bl	80024a4 <xTaskGetSchedulerState>
 8000258:	2800      	cmp	r0, #0
 800025a:	d102      	bne.n	8000262 <xEventGroupWaitBits+0x36>
 800025c:	9b08      	ldr	r3, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d145      	bne.n	80002ee <xEventGroupWaitBits+0xc2>
	vTaskSuspendAll();
 8000262:	f001 fcd5 	bl	8001c10 <vTaskSuspendAll>

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8000266:	4643      	mov	r3, r8
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8000268:	6837      	ldr	r7, [r6, #0]
	if( xWaitForAllBits == pdFALSE )
 800026a:	2b00      	cmp	r3, #0
 800026c:	d125      	bne.n	80002ba <xEventGroupWaitBits+0x8e>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800026e:	4227      	tst	r7, r4
 8000270:	d13f      	bne.n	80002f2 <xEventGroupWaitBits+0xc6>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8000272:	9b08      	ldr	r3, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d027      	beq.n	80002c8 <xEventGroupWaitBits+0x9c>
			if( xClearOnExit != pdFALSE )
 8000278:	0029      	movs	r1, r5
 800027a:	1e4b      	subs	r3, r1, #1
 800027c:	4199      	sbcs	r1, r3
 800027e:	b2cb      	uxtb	r3, r1
 8000280:	469a      	mov	sl, r3
 8000282:	0609      	lsls	r1, r1, #24
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8000284:	9a08      	ldr	r2, [sp, #32]
 8000286:	4321      	orrs	r1, r4
 8000288:	1d30      	adds	r0, r6, #4
 800028a:	f001 ff65 	bl	8002158 <vTaskPlaceOnUnorderedEventList>
			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 800028e:	f003 f8f9 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8000292:	f003 f843 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8000296:	4b41      	ldr	r3, [pc, #260]	; (800039c <xEventGroupWaitBits+0x170>)
 8000298:	4699      	mov	r9, r3
 800029a:	881b      	ldrh	r3, [r3, #0]
 800029c:	4203      	tst	r3, r0
 800029e:	d16a      	bne.n	8000376 <xEventGroupWaitBits+0x14a>
	xAlreadyYielded = xTaskResumeAll();
 80002a0:	f001 fe42 	bl	8001f28 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80002a4:	2800      	cmp	r0, #0
 80002a6:	d059      	beq.n	800035c <xEventGroupWaitBits+0x130>
		uxReturn = uxTaskResetEventItemValue();
 80002a8:	f002 fa32 	bl	8002710 <uxTaskResetEventItemValue>
 80002ac:	2500      	movs	r5, #0
 80002ae:	0007      	movs	r7, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80002b0:	0183      	lsls	r3, r0, #6
 80002b2:	d541      	bpl.n	8000338 <xEventGroupWaitBits+0x10c>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80002b4:	023f      	lsls	r7, r7, #8
 80002b6:	0a3f      	lsrs	r7, r7, #8
 80002b8:	e00b      	b.n	80002d2 <xEventGroupWaitBits+0xa6>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80002ba:	003b      	movs	r3, r7
 80002bc:	4023      	ands	r3, r4
 80002be:	429c      	cmp	r4, r3
 80002c0:	d017      	beq.n	80002f2 <xEventGroupWaitBits+0xc6>
		else if( xTicksToWait == ( TickType_t ) 0 )
 80002c2:	9b08      	ldr	r3, [sp, #32]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14c      	bne.n	8000362 <xEventGroupWaitBits+0x136>
	xAlreadyYielded = xTaskResumeAll();
 80002c8:	f001 fe2e 	bl	8001f28 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 80002cc:	4b33      	ldr	r3, [pc, #204]	; (800039c <xEventGroupWaitBits+0x170>)
			xTimeoutOccurred = pdTRUE;
 80002ce:	2501      	movs	r5, #1
 80002d0:	4699      	mov	r9, r3
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 80002d2:	f003 f8d7 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 80002d6:	f003 f821 	bl	800331c <prvTraceGetTaskNumberHigh16>
 80002da:	464b      	mov	r3, r9
 80002dc:	881b      	ldrh	r3, [r3, #0]
 80002de:	4203      	tst	r3, r0
 80002e0:	d10e      	bne.n	8000300 <xEventGroupWaitBits+0xd4>
}
 80002e2:	0038      	movs	r0, r7
 80002e4:	bce0      	pop	{r5, r6, r7}
 80002e6:	46ba      	mov	sl, r7
 80002e8:	46b1      	mov	r9, r6
 80002ea:	46a8      	mov	r8, r5
 80002ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80002ee:	b672      	cpsid	i
 80002f0:	e7fe      	b.n	80002f0 <xEventGroupWaitBits+0xc4>
			if( xClearOnExit != pdFALSE )
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d117      	bne.n	8000326 <xEventGroupWaitBits+0xfa>
	xAlreadyYielded = xTaskResumeAll();
 80002f6:	f001 fe17 	bl	8001f28 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 80002fa:	4b28      	ldr	r3, [pc, #160]	; (800039c <xEventGroupWaitBits+0x170>)
 80002fc:	4699      	mov	r9, r3
 80002fe:	e7e8      	b.n	80002d2 <xEventGroupWaitBits+0xa6>
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 8000300:	0030      	movs	r0, r6
 8000302:	f003 f833 	bl	800336c <prvTraceGetEventGroupNumberHigh16>
 8000306:	464b      	mov	r3, r9
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	4203      	tst	r3, r0
 800030c:	d0e9      	beq.n	80002e2 <xEventGroupWaitBits+0xb6>
 800030e:	1e68      	subs	r0, r5, #1
 8000310:	1e43      	subs	r3, r0, #1
 8000312:	4198      	sbcs	r0, r3
 8000314:	2307      	movs	r3, #7
 8000316:	4240      	negs	r0, r0
 8000318:	4398      	bics	r0, r3
 800031a:	0022      	movs	r2, r4
 800031c:	0031      	movs	r1, r6
 800031e:	30b9      	adds	r0, #185	; 0xb9
 8000320:	f003 fb5c 	bl	80039dc <prvTraceStoreEvent2>
	return uxReturn;
 8000324:	e7dd      	b.n	80002e2 <xEventGroupWaitBits+0xb6>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000326:	003b      	movs	r3, r7
 8000328:	43a3      	bics	r3, r4
 800032a:	6033      	str	r3, [r6, #0]
	xAlreadyYielded = xTaskResumeAll();
 800032c:	f001 fdfc 	bl	8001f28 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8000330:	4b1a      	ldr	r3, [pc, #104]	; (800039c <xEventGroupWaitBits+0x170>)
BaseType_t xTimeoutOccurred = pdFALSE;
 8000332:	2500      	movs	r5, #0
 8000334:	4699      	mov	r9, r3
 8000336:	e7cc      	b.n	80002d2 <xEventGroupWaitBits+0xa6>
			taskENTER_CRITICAL();
 8000338:	f002 fc50 	bl	8002bdc <vPortEnterCritical>
	if( xWaitForAllBits == pdFALSE )
 800033c:	4643      	mov	r3, r8
				uxReturn = pxEventBits->uxEventBits;
 800033e:	6837      	ldr	r7, [r6, #0]
	if( xWaitForAllBits == pdFALSE )
 8000340:	2b00      	cmp	r3, #0
 8000342:	d126      	bne.n	8000392 <xEventGroupWaitBits+0x166>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8000344:	4227      	tst	r7, r4
 8000346:	d005      	beq.n	8000354 <xEventGroupWaitBits+0x128>
					if( xClearOnExit != pdFALSE )
 8000348:	4653      	mov	r3, sl
 800034a:	2b00      	cmp	r3, #0
 800034c:	d002      	beq.n	8000354 <xEventGroupWaitBits+0x128>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800034e:	003b      	movs	r3, r7
 8000350:	43a3      	bics	r3, r4
 8000352:	6033      	str	r3, [r6, #0]
			taskEXIT_CRITICAL();
 8000354:	f002 fc4e 	bl	8002bf4 <vPortExitCritical>
				xTimeoutOccurred = pdTRUE;
 8000358:	2501      	movs	r5, #1
 800035a:	e7ab      	b.n	80002b4 <xEventGroupWaitBits+0x88>
			portYIELD_WITHIN_API();
 800035c:	f002 fc32 	bl	8002bc4 <vPortYield>
 8000360:	e7a2      	b.n	80002a8 <xEventGroupWaitBits+0x7c>
			if( xClearOnExit != pdFALSE )
 8000362:	002b      	movs	r3, r5
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8000364:	2180      	movs	r1, #128	; 0x80
			if( xClearOnExit != pdFALSE )
 8000366:	1e5a      	subs	r2, r3, #1
 8000368:	4193      	sbcs	r3, r2
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800036a:	04c9      	lsls	r1, r1, #19
			if( xClearOnExit != pdFALSE )
 800036c:	b2da      	uxtb	r2, r3
 800036e:	061b      	lsls	r3, r3, #24
 8000370:	4692      	mov	sl, r2
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8000372:	4319      	orrs	r1, r3
 8000374:	e786      	b.n	8000284 <xEventGroupWaitBits+0x58>
			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 8000376:	0030      	movs	r0, r6
 8000378:	f002 fff8 	bl	800336c <prvTraceGetEventGroupNumberHigh16>
 800037c:	464b      	mov	r3, r9
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	4203      	tst	r3, r0
 8000382:	d100      	bne.n	8000386 <xEventGroupWaitBits+0x15a>
 8000384:	e78c      	b.n	80002a0 <xEventGroupWaitBits+0x74>
 8000386:	0022      	movs	r2, r4
 8000388:	0031      	movs	r1, r6
 800038a:	20b7      	movs	r0, #183	; 0xb7
 800038c:	f003 fb26 	bl	80039dc <prvTraceStoreEvent2>
 8000390:	e786      	b.n	80002a0 <xEventGroupWaitBits+0x74>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000392:	003b      	movs	r3, r7
 8000394:	4023      	ands	r3, r4
 8000396:	429c      	cmp	r4, r3
 8000398:	d1dc      	bne.n	8000354 <xEventGroupWaitBits+0x128>
 800039a:	e7d5      	b.n	8000348 <xEventGroupWaitBits+0x11c>
 800039c:	20000006 	.word	0x20000006

080003a0 <xEventGroupSetBits>:
{
 80003a0:	b510      	push	{r4, lr}
	configASSERT( xEventGroup );
 80003a2:	2800      	cmp	r0, #0
 80003a4:	d006      	beq.n	80003b4 <xEventGroupSetBits+0x14>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80003a6:	0e0b      	lsrs	r3, r1, #24
 80003a8:	d001      	beq.n	80003ae <xEventGroupSetBits+0xe>
 80003aa:	b672      	cpsid	i
 80003ac:	e7fe      	b.n	80003ac <xEventGroupSetBits+0xc>
 80003ae:	f7ff feab 	bl	8000108 <xEventGroupSetBits.part.0>
}
 80003b2:	bd10      	pop	{r4, pc}
	configASSERT( xEventGroup );
 80003b4:	b672      	cpsid	i
 80003b6:	e7fe      	b.n	80003b6 <xEventGroupSetBits+0x16>

080003b8 <uxEventGroupGetNumber>:
	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
	{
	UBaseType_t xReturn;
	EventGroup_t const *pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */

		if( xEventGroup == NULL )
 80003b8:	2800      	cmp	r0, #0
 80003ba:	d001      	beq.n	80003c0 <uxEventGroupGetNumber+0x8>
		{
			xReturn = 0;
		}
		else
		{
			xReturn = pxEventBits->uxEventGroupNumber;
 80003bc:	6980      	ldr	r0, [r0, #24]
		}

		return xReturn;
	}
 80003be:	4770      	bx	lr
			xReturn = 0;
 80003c0:	2000      	movs	r0, #0
		return xReturn;
 80003c2:	e7fc      	b.n	80003be <uxEventGroupGetNumber+0x6>

080003c4 <vEventGroupSetNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

	void vEventGroupSetNumber( void * xEventGroup, UBaseType_t uxEventGroupNumber )
	{
		( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 80003c4:	6181      	str	r1, [r0, #24]
	}
 80003c6:	4770      	bx	lr

080003c8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80003c8:	0003      	movs	r3, r0
 80003ca:	3308      	adds	r3, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80003cc:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80003ce:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80003d0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80003d2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80003d4:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80003d6:	4252      	negs	r2, r2
 80003d8:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80003da:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80003dc:	4770      	bx	lr
 80003de:	46c0      	nop			; (mov r8, r8)

080003e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003e4:	4770      	bx	lr
 80003e6:	46c0      	nop			; (mov r8, r8)

080003e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80003e8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80003ea:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80003ec:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80003ee:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80003f0:	689a      	ldr	r2, [r3, #8]
 80003f2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80003f4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80003f6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80003f8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80003fa:	3301      	adds	r3, #1
 80003fc:	6003      	str	r3, [r0, #0]
}
 80003fe:	4770      	bx	lr

08000400 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000400:	0003      	movs	r3, r0
{
 8000402:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000404:	680d      	ldr	r5, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000406:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 8000408:	1c6a      	adds	r2, r5, #1
 800040a:	d00d      	beq.n	8000428 <vListInsert+0x28>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800040c:	001c      	movs	r4, r3
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	42aa      	cmp	r2, r5
 8000414:	d9fa      	bls.n	800040c <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000416:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000418:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800041a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800041c:	608c      	str	r4, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800041e:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 8000420:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8000422:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000424:	6003      	str	r3, [r0, #0]
}
 8000426:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 8000428:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800042a:	6863      	ldr	r3, [r4, #4]
 800042c:	e7f3      	b.n	8000416 <vListInsert+0x16>
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000430:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000432:	6841      	ldr	r1, [r0, #4]
 8000434:	6882      	ldr	r2, [r0, #8]
 8000436:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000438:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800043a:	6859      	ldr	r1, [r3, #4]
 800043c:	4281      	cmp	r1, r0
 800043e:	d006      	beq.n	800044e <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000440:	2200      	movs	r2, #0
 8000442:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	3a01      	subs	r2, #1
 8000448:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800044a:	6818      	ldr	r0, [r3, #0]
}
 800044c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	e7f6      	b.n	8000440 <uxListRemove+0x10>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000454:	b570      	push	{r4, r5, r6, lr}
 8000456:	0016      	movs	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000458:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800045a:	0004      	movs	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800045c:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800045e:	2a00      	cmp	r2, #0
 8000460:	d106      	bne.n	8000470 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000462:	6806      	ldr	r6, [r0, #0]
 8000464:	2e00      	cmp	r6, #0
 8000466:	d028      	beq.n	80004ba <prvCopyDataToQueue+0x66>
 8000468:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 800046a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800046c:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 800046e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8000470:	2e00      	cmp	r6, #0
 8000472:	d10e      	bne.n	8000492 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000474:	6840      	ldr	r0, [r0, #4]
 8000476:	f004 fec5 	bl	8005204 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800047a:	6863      	ldr	r3, [r4, #4]
 800047c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800047e:	189b      	adds	r3, r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000480:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000482:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000484:	4293      	cmp	r3, r2
 8000486:	d3ef      	bcc.n	8000468 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000488:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800048a:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800048c:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800048e:	3501      	adds	r5, #1
 8000490:	e7ec      	b.n	800046c <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000492:	68c0      	ldr	r0, [r0, #12]
 8000494:	f004 feb6 	bl	8005204 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000498:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800049a:	68e3      	ldr	r3, [r4, #12]
 800049c:	4251      	negs	r1, r2
 800049e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80004a0:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80004a2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d202      	bcs.n	80004ae <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80004a8:	68a3      	ldr	r3, [r4, #8]
 80004aa:	185b      	adds	r3, r3, r1
 80004ac:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80004ae:	2e02      	cmp	r6, #2
 80004b0:	d1da      	bne.n	8000468 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d1d9      	bne.n	800046a <prvCopyDataToQueue+0x16>
 80004b6:	3501      	adds	r5, #1
 80004b8:	e7d7      	b.n	800046a <prvCopyDataToQueue+0x16>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80004ba:	6880      	ldr	r0, [r0, #8]
 80004bc:	f002 f86e 	bl	800259c <xTaskPriorityDisinherit>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80004c0:	3501      	adds	r5, #1
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80004c2:	60a6      	str	r6, [r4, #8]
 80004c4:	e7d2      	b.n	800046c <prvCopyDataToQueue+0x18>
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <xQueueGenericCreate>:
	{
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	46c6      	mov	lr, r8
 80004cc:	0005      	movs	r5, r0
 80004ce:	000e      	movs	r6, r1
 80004d0:	0017      	movs	r7, r2
 80004d2:	b500      	push	{lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d101      	bne.n	80004dc <xQueueGenericCreate+0x14>
 80004d8:	b672      	cpsid	i
 80004da:	e7fe      	b.n	80004da <xQueueGenericCreate+0x12>
		if( uxItemSize == ( UBaseType_t ) 0 )
 80004dc:	2900      	cmp	r1, #0
 80004de:	d138      	bne.n	8000552 <xQueueGenericCreate+0x8a>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80004e0:	2050      	movs	r0, #80	; 0x50
 80004e2:	f002 fbd1 	bl	8002c88 <pvPortMalloc>
 80004e6:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 80004e8:	d03e      	beq.n	8000568 <xQueueGenericCreate+0xa0>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80004ea:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80004ec:	6426      	str	r6, [r4, #64]	; 0x40
	pxNewQueue->uxLength = uxQueueLength;
 80004ee:	63e5      	str	r5, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 80004f0:	f002 fb74 	bl	8002bdc <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80004f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80004f8:	6822      	ldr	r2, [r4, #0]
 80004fa:	434b      	muls	r3, r1
 80004fc:	18d0      	adds	r0, r2, r3
 80004fe:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000500:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000502:	1a5b      	subs	r3, r3, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000504:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000506:	18d2      	adds	r2, r2, r3
 8000508:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800050a:	23ff      	movs	r3, #255	; 0xff
 800050c:	2244      	movs	r2, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800050e:	63a0      	str	r0, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000510:	0020      	movs	r0, r4
		pxQueue->cRxLock = queueUNLOCKED;
 8000512:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8000514:	3201      	adds	r2, #1
 8000516:	54a3      	strb	r3, [r4, r2]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000518:	3010      	adds	r0, #16
 800051a:	f7ff ff55 	bl	80003c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800051e:	0020      	movs	r0, r4
 8000520:	3024      	adds	r0, #36	; 0x24
 8000522:	f7ff ff51 	bl	80003c8 <vListInitialise>
	taskEXIT_CRITICAL();
 8000526:	f002 fb65 	bl	8002bf4 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 800052a:	234c      	movs	r3, #76	; 0x4c
 800052c:	54e7      	strb	r7, [r4, r3]
 800052e:	4698      	mov	r8, r3
	traceQUEUE_CREATE( pxNewQueue );
 8000530:	4b34      	ldr	r3, [pc, #208]	; (8000604 <xQueueGenericCreate+0x13c>)
 8000532:	0020      	movs	r0, r4
 8000534:	8819      	ldrh	r1, [r3, #0]
 8000536:	f002 ff0b 	bl	8003350 <prvTraceSetQueueNumberHigh16>
 800053a:	f002 ffa3 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 800053e:	f002 feed 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8000542:	4e31      	ldr	r6, [pc, #196]	; (8000608 <xQueueGenericCreate+0x140>)
 8000544:	8833      	ldrh	r3, [r6, #0]
 8000546:	4203      	tst	r3, r0
 8000548:	d12a      	bne.n	80005a0 <xQueueGenericCreate+0xd8>
	}
 800054a:	0020      	movs	r0, r4
 800054c:	bc80      	pop	{r7}
 800054e:	46b8      	mov	r8, r7
 8000550:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000552:	0008      	movs	r0, r1
 8000554:	4368      	muls	r0, r5
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000556:	3050      	adds	r0, #80	; 0x50
 8000558:	f002 fb96 	bl	8002c88 <pvPortMalloc>
 800055c:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 800055e:	d003      	beq.n	8000568 <xQueueGenericCreate+0xa0>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000560:	0003      	movs	r3, r0
 8000562:	3350      	adds	r3, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000564:	6003      	str	r3, [r0, #0]
 8000566:	e7c1      	b.n	80004ec <xQueueGenericCreate+0x24>
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8000568:	f002 ff8c 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 800056c:	f002 fed6 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <xQueueGenericCreate+0x140>)
 8000572:	2400      	movs	r4, #0
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	4203      	tst	r3, r0
 8000578:	d0e7      	beq.n	800054a <xQueueGenericCreate+0x82>
 800057a:	2f03      	cmp	r7, #3
 800057c:	d03c      	beq.n	80005f8 <xQueueGenericCreate+0x130>
 800057e:	d808      	bhi.n	8000592 <xQueueGenericCreate+0xca>
 8000580:	2f00      	cmp	r7, #0
 8000582:	d028      	beq.n	80005d6 <xQueueGenericCreate+0x10e>
 8000584:	2f01      	cmp	r7, #1
 8000586:	d1e0      	bne.n	800054a <xQueueGenericCreate+0x82>
 8000588:	2100      	movs	r1, #0
 800058a:	2043      	movs	r0, #67	; 0x43
 800058c:	f003 f9ba 	bl	8003904 <prvTraceStoreEvent1>
 8000590:	e7db      	b.n	800054a <xQueueGenericCreate+0x82>
 8000592:	2f04      	cmp	r7, #4
 8000594:	d1d9      	bne.n	800054a <xQueueGenericCreate+0x82>
 8000596:	2100      	movs	r1, #0
 8000598:	2047      	movs	r0, #71	; 0x47
 800059a:	f003 f9b3 	bl	8003904 <prvTraceStoreEvent1>
 800059e:	e7d4      	b.n	800054a <xQueueGenericCreate+0x82>
	traceQUEUE_CREATE( pxNewQueue );
 80005a0:	0020      	movs	r0, r4
 80005a2:	f002 fecf 	bl	8003344 <prvTraceGetQueueNumberHigh16>
 80005a6:	8833      	ldrh	r3, [r6, #0]
 80005a8:	4203      	tst	r3, r0
 80005aa:	d0ce      	beq.n	800054a <xQueueGenericCreate+0x82>
 80005ac:	4643      	mov	r3, r8
 80005ae:	5ce3      	ldrb	r3, [r4, r3]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d01c      	beq.n	80005ee <xQueueGenericCreate+0x126>
 80005b4:	d808      	bhi.n	80005c8 <xQueueGenericCreate+0x100>
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d013      	beq.n	80005e2 <xQueueGenericCreate+0x11a>
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d1c5      	bne.n	800054a <xQueueGenericCreate+0x82>
 80005be:	0021      	movs	r1, r4
 80005c0:	2013      	movs	r0, #19
 80005c2:	f003 f99f 	bl	8003904 <prvTraceStoreEvent1>
 80005c6:	e7c0      	b.n	800054a <xQueueGenericCreate+0x82>
 80005c8:	2b04      	cmp	r3, #4
 80005ca:	d1be      	bne.n	800054a <xQueueGenericCreate+0x82>
 80005cc:	0021      	movs	r1, r4
 80005ce:	2017      	movs	r0, #23
 80005d0:	f003 f998 	bl	8003904 <prvTraceStoreEvent1>
 80005d4:	e7b9      	b.n	800054a <xQueueGenericCreate+0x82>
			traceQUEUE_CREATE_FAILED( ucQueueType );
 80005d6:	002a      	movs	r2, r5
 80005d8:	2100      	movs	r1, #0
 80005da:	2041      	movs	r0, #65	; 0x41
 80005dc:	f003 f9fe 	bl	80039dc <prvTraceStoreEvent2>
 80005e0:	e7b3      	b.n	800054a <xQueueGenericCreate+0x82>
	traceQUEUE_CREATE( pxNewQueue );
 80005e2:	002a      	movs	r2, r5
 80005e4:	0021      	movs	r1, r4
 80005e6:	2011      	movs	r0, #17
 80005e8:	f003 f9f8 	bl	80039dc <prvTraceStoreEvent2>
 80005ec:	e7ad      	b.n	800054a <xQueueGenericCreate+0x82>
 80005ee:	0021      	movs	r1, r4
 80005f0:	2012      	movs	r0, #18
 80005f2:	f003 f987 	bl	8003904 <prvTraceStoreEvent1>
 80005f6:	e7a8      	b.n	800054a <xQueueGenericCreate+0x82>
			traceQUEUE_CREATE_FAILED( ucQueueType );
 80005f8:	2100      	movs	r1, #0
 80005fa:	2042      	movs	r0, #66	; 0x42
 80005fc:	f003 f982 	bl	8003904 <prvTraceStoreEvent1>
 8000600:	e7a3      	b.n	800054a <xQueueGenericCreate+0x82>
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	20000004 	.word	0x20000004
 8000608:	20000006 	.word	0x20000006

0800060c <xQueueGenericSend>:
{
 800060c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060e:	46de      	mov	lr, fp
 8000610:	4645      	mov	r5, r8
 8000612:	4657      	mov	r7, sl
 8000614:	464e      	mov	r6, r9
 8000616:	b5e0      	push	{r5, r6, r7, lr}
 8000618:	b085      	sub	sp, #20
 800061a:	1e04      	subs	r4, r0, #0
 800061c:	4688      	mov	r8, r1
 800061e:	469b      	mov	fp, r3
 8000620:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8000622:	d100      	bne.n	8000626 <xQueueGenericSend+0x1a>
 8000624:	e100      	b.n	8000828 <xQueueGenericSend+0x21c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000626:	2900      	cmp	r1, #0
 8000628:	d010      	beq.n	800064c <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800062a:	465b      	mov	r3, fp
 800062c:	2b02      	cmp	r3, #2
 800062e:	d104      	bne.n	800063a <xQueueGenericSend+0x2e>
 8000630:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000632:	2b01      	cmp	r3, #1
 8000634:	d001      	beq.n	800063a <xQueueGenericSend+0x2e>
 8000636:	b672      	cpsid	i
 8000638:	e7fe      	b.n	8000638 <xQueueGenericSend+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800063a:	f001 ff33 	bl	80024a4 <xTaskGetSchedulerState>
 800063e:	2800      	cmp	r0, #0
 8000640:	d109      	bne.n	8000656 <xQueueGenericSend+0x4a>
 8000642:	9b01      	ldr	r3, [sp, #4]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d006      	beq.n	8000656 <xQueueGenericSend+0x4a>
 8000648:	b672      	cpsid	i
 800064a:	e7fe      	b.n	800064a <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800064c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0eb      	beq.n	800062a <xQueueGenericSend+0x1e>
 8000652:	b672      	cpsid	i
 8000654:	e7fe      	b.n	8000654 <xQueueGenericSend+0x48>
 8000656:	465a      	mov	r2, fp
 8000658:	23c2      	movs	r3, #194	; 0xc2
 800065a:	2a00      	cmp	r2, #0
 800065c:	d100      	bne.n	8000660 <xQueueGenericSend+0x54>
 800065e:	e0fb      	b.n	8000858 <xQueueGenericSend+0x24c>
 8000660:	b29b      	uxth	r3, r3
 8000662:	469a      	mov	sl, r3
 8000664:	4bb8      	ldr	r3, [pc, #736]	; (8000948 <xQueueGenericSend+0x33c>)
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000666:	0025      	movs	r5, r4
{
 8000668:	2600      	movs	r6, #0
 800066a:	4699      	mov	r9, r3
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800066c:	3524      	adds	r5, #36	; 0x24
		taskENTER_CRITICAL();
 800066e:	f002 fab5 	bl	8002bdc <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000672:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000674:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000676:	429a      	cmp	r2, r3
 8000678:	d200      	bcs.n	800067c <xQueueGenericSend+0x70>
 800067a:	e0ef      	b.n	800085c <xQueueGenericSend+0x250>
 800067c:	465b      	mov	r3, fp
 800067e:	2b02      	cmp	r3, #2
 8000680:	d100      	bne.n	8000684 <xQueueGenericSend+0x78>
 8000682:	e0eb      	b.n	800085c <xQueueGenericSend+0x250>
				if( xTicksToWait == ( TickType_t ) 0 )
 8000684:	9b01      	ldr	r3, [sp, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d100      	bne.n	800068c <xQueueGenericSend+0x80>
 800068a:	e107      	b.n	800089c <xQueueGenericSend+0x290>
				else if( xEntryTimeSet == pdFALSE )
 800068c:	2e00      	cmp	r6, #0
 800068e:	d100      	bne.n	8000692 <xQueueGenericSend+0x86>
 8000690:	e0c6      	b.n	8000820 <xQueueGenericSend+0x214>
		taskEXIT_CRITICAL();
 8000692:	f002 faaf 	bl	8002bf4 <vPortExitCritical>
		vTaskSuspendAll();
 8000696:	f001 fabb 	bl	8001c10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800069a:	f002 fa9f 	bl	8002bdc <vPortEnterCritical>
 800069e:	2244      	movs	r2, #68	; 0x44
 80006a0:	5ca3      	ldrb	r3, [r4, r2]
 80006a2:	b25b      	sxtb	r3, r3
 80006a4:	3301      	adds	r3, #1
 80006a6:	d101      	bne.n	80006ac <xQueueGenericSend+0xa0>
 80006a8:	2300      	movs	r3, #0
 80006aa:	54a3      	strb	r3, [r4, r2]
 80006ac:	2245      	movs	r2, #69	; 0x45
 80006ae:	5ca3      	ldrb	r3, [r4, r2]
 80006b0:	b25b      	sxtb	r3, r3
 80006b2:	3301      	adds	r3, #1
 80006b4:	d101      	bne.n	80006ba <xQueueGenericSend+0xae>
 80006b6:	2300      	movs	r3, #0
 80006b8:	54a3      	strb	r3, [r4, r2]
 80006ba:	f002 fa9b 	bl	8002bf4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80006be:	a901      	add	r1, sp, #4
 80006c0:	a802      	add	r0, sp, #8
 80006c2:	f001 fe9f 	bl	8002404 <xTaskCheckForTimeOut>
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d000      	beq.n	80006cc <xQueueGenericSend+0xc0>
 80006ca:	e0f3      	b.n	80008b4 <xQueueGenericSend+0x2a8>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80006cc:	f002 fa86 	bl	8002bdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80006d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80006d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d049      	beq.n	800076c <xQueueGenericSend+0x160>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80006d8:	f002 fa8c 	bl	8002bf4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80006dc:	f002 fa7e 	bl	8002bdc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80006e0:	2345      	movs	r3, #69	; 0x45
 80006e2:	5ce6      	ldrb	r6, [r4, r3]
 80006e4:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80006e6:	2e00      	cmp	r6, #0
 80006e8:	dc05      	bgt.n	80006f6 <xQueueGenericSend+0xea>
 80006ea:	e013      	b.n	8000714 <xQueueGenericSend+0x108>
			--cTxLock;
 80006ec:	3e01      	subs	r6, #1
 80006ee:	b2f2      	uxtb	r2, r6
 80006f0:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80006f2:	2a00      	cmp	r2, #0
 80006f4:	d00e      	beq.n	8000714 <xQueueGenericSend+0x108>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80006f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00b      	beq.n	8000714 <xQueueGenericSend+0x108>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80006fc:	0028      	movs	r0, r5
 80006fe:	f001 fde1 	bl	80022c4 <xTaskRemoveFromEventList>
 8000702:	2800      	cmp	r0, #0
 8000704:	d0f2      	beq.n	80006ec <xQueueGenericSend+0xe0>
						vTaskMissedYield();
 8000706:	3e01      	subs	r6, #1
 8000708:	f001 feb6 	bl	8002478 <vTaskMissedYield>
			--cTxLock;
 800070c:	b2f2      	uxtb	r2, r6
 800070e:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000710:	2a00      	cmp	r2, #0
 8000712:	d1f0      	bne.n	80006f6 <xQueueGenericSend+0xea>
		pxQueue->cTxLock = queueUNLOCKED;
 8000714:	2345      	movs	r3, #69	; 0x45
 8000716:	22ff      	movs	r2, #255	; 0xff
 8000718:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 800071a:	f002 fa6b 	bl	8002bf4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800071e:	f002 fa5d 	bl	8002bdc <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8000722:	2344      	movs	r3, #68	; 0x44
 8000724:	5ce7      	ldrb	r7, [r4, r3]
 8000726:	b27f      	sxtb	r7, r7
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000728:	2f00      	cmp	r7, #0
 800072a:	dd16      	ble.n	800075a <xQueueGenericSend+0x14e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800072c:	0026      	movs	r6, r4
 800072e:	3610      	adds	r6, #16
 8000730:	e004      	b.n	800073c <xQueueGenericSend+0x130>
				--cRxLock;
 8000732:	3f01      	subs	r7, #1
 8000734:	b2fb      	uxtb	r3, r7
 8000736:	b27f      	sxtb	r7, r7
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00e      	beq.n	800075a <xQueueGenericSend+0x14e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800073c:	6923      	ldr	r3, [r4, #16]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00b      	beq.n	800075a <xQueueGenericSend+0x14e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000742:	0030      	movs	r0, r6
 8000744:	f001 fdbe 	bl	80022c4 <xTaskRemoveFromEventList>
 8000748:	2800      	cmp	r0, #0
 800074a:	d0f2      	beq.n	8000732 <xQueueGenericSend+0x126>
					vTaskMissedYield();
 800074c:	3f01      	subs	r7, #1
 800074e:	f001 fe93 	bl	8002478 <vTaskMissedYield>
				--cRxLock;
 8000752:	b2fb      	uxtb	r3, r7
 8000754:	b27f      	sxtb	r7, r7
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000756:	2b00      	cmp	r3, #0
 8000758:	d1f0      	bne.n	800073c <xQueueGenericSend+0x130>
		pxQueue->cRxLock = queueUNLOCKED;
 800075a:	2344      	movs	r3, #68	; 0x44
 800075c:	22ff      	movs	r2, #255	; 0xff
 800075e:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8000760:	f002 fa48 	bl	8002bf4 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8000764:	f001 fbe0 	bl	8001f28 <xTaskResumeAll>
{
 8000768:	2601      	movs	r6, #1
 800076a:	e780      	b.n	800066e <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800076c:	f002 fa42 	bl	8002bf4 <vPortExitCritical>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8000770:	f002 fe88 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8000774:	f002 fdd2 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8000778:	464b      	mov	r3, r9
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	4203      	tst	r3, r0
 800077e:	d155      	bne.n	800082c <xQueueGenericSend+0x220>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000780:	0026      	movs	r6, r4
 8000782:	3610      	adds	r6, #16
 8000784:	0030      	movs	r0, r6
 8000786:	9901      	ldr	r1, [sp, #4]
 8000788:	f001 fca8 	bl	80020dc <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800078c:	f002 fa26 	bl	8002bdc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8000790:	2345      	movs	r3, #69	; 0x45
 8000792:	5ce7      	ldrb	r7, [r4, r3]
 8000794:	b27f      	sxtb	r7, r7
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000796:	2f00      	cmp	r7, #0
 8000798:	dc05      	bgt.n	80007a6 <xQueueGenericSend+0x19a>
 800079a:	e013      	b.n	80007c4 <xQueueGenericSend+0x1b8>
			--cTxLock;
 800079c:	3f01      	subs	r7, #1
 800079e:	b2fa      	uxtb	r2, r7
 80007a0:	b27f      	sxtb	r7, r7
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80007a2:	2a00      	cmp	r2, #0
 80007a4:	d00e      	beq.n	80007c4 <xQueueGenericSend+0x1b8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80007a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d00b      	beq.n	80007c4 <xQueueGenericSend+0x1b8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80007ac:	0028      	movs	r0, r5
 80007ae:	f001 fd89 	bl	80022c4 <xTaskRemoveFromEventList>
 80007b2:	2800      	cmp	r0, #0
 80007b4:	d0f2      	beq.n	800079c <xQueueGenericSend+0x190>
						vTaskMissedYield();
 80007b6:	3f01      	subs	r7, #1
 80007b8:	f001 fe5e 	bl	8002478 <vTaskMissedYield>
			--cTxLock;
 80007bc:	b2fa      	uxtb	r2, r7
 80007be:	b27f      	sxtb	r7, r7
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80007c0:	2a00      	cmp	r2, #0
 80007c2:	d1f0      	bne.n	80007a6 <xQueueGenericSend+0x19a>
		pxQueue->cTxLock = queueUNLOCKED;
 80007c4:	2345      	movs	r3, #69	; 0x45
 80007c6:	22ff      	movs	r2, #255	; 0xff
 80007c8:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 80007ca:	f002 fa13 	bl	8002bf4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80007ce:	f002 fa05 	bl	8002bdc <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80007d2:	2344      	movs	r3, #68	; 0x44
 80007d4:	5ce7      	ldrb	r7, [r4, r3]
 80007d6:	b27f      	sxtb	r7, r7
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80007d8:	2f00      	cmp	r7, #0
 80007da:	dc05      	bgt.n	80007e8 <xQueueGenericSend+0x1dc>
 80007dc:	e013      	b.n	8000806 <xQueueGenericSend+0x1fa>
				--cRxLock;
 80007de:	3f01      	subs	r7, #1
 80007e0:	b2fa      	uxtb	r2, r7
 80007e2:	b27f      	sxtb	r7, r7
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	d00e      	beq.n	8000806 <xQueueGenericSend+0x1fa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007e8:	6923      	ldr	r3, [r4, #16]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d00b      	beq.n	8000806 <xQueueGenericSend+0x1fa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007ee:	0030      	movs	r0, r6
 80007f0:	f001 fd68 	bl	80022c4 <xTaskRemoveFromEventList>
 80007f4:	2800      	cmp	r0, #0
 80007f6:	d0f2      	beq.n	80007de <xQueueGenericSend+0x1d2>
					vTaskMissedYield();
 80007f8:	3f01      	subs	r7, #1
 80007fa:	f001 fe3d 	bl	8002478 <vTaskMissedYield>
				--cRxLock;
 80007fe:	b2fa      	uxtb	r2, r7
 8000800:	b27f      	sxtb	r7, r7
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000802:	2a00      	cmp	r2, #0
 8000804:	d1f0      	bne.n	80007e8 <xQueueGenericSend+0x1dc>
		pxQueue->cRxLock = queueUNLOCKED;
 8000806:	2344      	movs	r3, #68	; 0x44
 8000808:	22ff      	movs	r2, #255	; 0xff
 800080a:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 800080c:	f002 f9f2 	bl	8002bf4 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8000810:	f001 fb8a 	bl	8001f28 <xTaskResumeAll>
 8000814:	2800      	cmp	r0, #0
 8000816:	d1a7      	bne.n	8000768 <xQueueGenericSend+0x15c>
					portYIELD_WITHIN_API();
 8000818:	f002 f9d4 	bl	8002bc4 <vPortYield>
{
 800081c:	2601      	movs	r6, #1
 800081e:	e726      	b.n	800066e <xQueueGenericSend+0x62>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000820:	a802      	add	r0, sp, #8
 8000822:	f001 fde3 	bl	80023ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000826:	e734      	b.n	8000692 <xQueueGenericSend+0x86>
	configASSERT( pxQueue );
 8000828:	b672      	cpsid	i
 800082a:	e7fe      	b.n	800082a <xQueueGenericSend+0x21e>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 800082c:	0020      	movs	r0, r4
 800082e:	f002 fd89 	bl	8003344 <prvTraceGetQueueNumberHigh16>
 8000832:	464b      	mov	r3, r9
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	4203      	tst	r3, r0
 8000838:	d0a2      	beq.n	8000780 <xQueueGenericSend+0x174>
 800083a:	234c      	movs	r3, #76	; 0x4c
 800083c:	5ce3      	ldrb	r3, [r4, r3]
 800083e:	2b03      	cmp	r3, #3
 8000840:	d829      	bhi.n	8000896 <xQueueGenericSend+0x28a>
 8000842:	2b01      	cmp	r3, #1
 8000844:	d900      	bls.n	8000848 <xQueueGenericSend+0x23c>
 8000846:	e0b2      	b.n	80009ae <xQueueGenericSend+0x3a2>
 8000848:	2b00      	cmp	r3, #0
 800084a:	d100      	bne.n	800084e <xQueueGenericSend+0x242>
 800084c:	e0b5      	b.n	80009ba <xQueueGenericSend+0x3ae>
 800084e:	0021      	movs	r1, r4
 8000850:	2058      	movs	r0, #88	; 0x58
 8000852:	f003 f857 	bl	8003904 <prvTraceStoreEvent1>
 8000856:	e793      	b.n	8000780 <xQueueGenericSend+0x174>
 8000858:	2356      	movs	r3, #86	; 0x56
 800085a:	e701      	b.n	8000660 <xQueueGenericSend+0x54>
				traceQUEUE_SEND( pxQueue );
 800085c:	f002 fe12 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8000860:	f002 fd5c 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8000864:	464b      	mov	r3, r9
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	4203      	tst	r3, r0
 800086a:	d000      	beq.n	800086e <xQueueGenericSend+0x262>
 800086c:	e06e      	b.n	800094c <xQueueGenericSend+0x340>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800086e:	465a      	mov	r2, fp
 8000870:	4641      	mov	r1, r8
 8000872:	0020      	movs	r0, r4
 8000874:	f7ff fdee 	bl	8000454 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800087a:	2b00      	cmp	r3, #0
 800087c:	d15e      	bne.n	800093c <xQueueGenericSend+0x330>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800087e:	2800      	cmp	r0, #0
 8000880:	d159      	bne.n	8000936 <xQueueGenericSend+0x32a>
				taskEXIT_CRITICAL();
 8000882:	f002 f9b7 	bl	8002bf4 <vPortExitCritical>
				return pdPASS;
 8000886:	2001      	movs	r0, #1
}
 8000888:	b005      	add	sp, #20
 800088a:	bcf0      	pop	{r4, r5, r6, r7}
 800088c:	46bb      	mov	fp, r7
 800088e:	46b2      	mov	sl, r6
 8000890:	46a9      	mov	r9, r5
 8000892:	46a0      	mov	r8, r4
 8000894:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8000896:	2b04      	cmp	r3, #4
 8000898:	d0d9      	beq.n	800084e <xQueueGenericSend+0x242>
 800089a:	e771      	b.n	8000780 <xQueueGenericSend+0x174>
					taskEXIT_CRITICAL();
 800089c:	f002 f9aa 	bl	8002bf4 <vPortExitCritical>
			traceQUEUE_SEND_FAILED( pxQueue );
 80008a0:	f002 fdf0 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 80008a4:	f002 fd3a 	bl	800331c <prvTraceGetTaskNumberHigh16>
 80008a8:	464b      	mov	r3, r9
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	4203      	tst	r3, r0
 80008ae:	d162      	bne.n	8000976 <xQueueGenericSend+0x36a>
			return errQUEUE_FULL;
 80008b0:	2000      	movs	r0, #0
			traceQUEUE_SEND_FAILED( pxQueue );
 80008b2:	e7e9      	b.n	8000888 <xQueueGenericSend+0x27c>
	taskENTER_CRITICAL();
 80008b4:	f002 f992 	bl	8002bdc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80008b8:	2345      	movs	r3, #69	; 0x45
 80008ba:	5ce5      	ldrb	r5, [r4, r3]
 80008bc:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80008be:	2d00      	cmp	r5, #0
 80008c0:	dd12      	ble.n	80008e8 <xQueueGenericSend+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008c2:	0026      	movs	r6, r4
 80008c4:	3624      	adds	r6, #36	; 0x24
 80008c6:	e004      	b.n	80008d2 <xQueueGenericSend+0x2c6>
			--cTxLock;
 80008c8:	3d01      	subs	r5, #1
 80008ca:	b2ea      	uxtb	r2, r5
 80008cc:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80008ce:	2a00      	cmp	r2, #0
 80008d0:	d00a      	beq.n	80008e8 <xQueueGenericSend+0x2dc>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d007      	beq.n	80008e8 <xQueueGenericSend+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008d8:	0030      	movs	r0, r6
 80008da:	f001 fcf3 	bl	80022c4 <xTaskRemoveFromEventList>
 80008de:	2800      	cmp	r0, #0
 80008e0:	d0f2      	beq.n	80008c8 <xQueueGenericSend+0x2bc>
						vTaskMissedYield();
 80008e2:	f001 fdc9 	bl	8002478 <vTaskMissedYield>
 80008e6:	e7ef      	b.n	80008c8 <xQueueGenericSend+0x2bc>
		pxQueue->cTxLock = queueUNLOCKED;
 80008e8:	2345      	movs	r3, #69	; 0x45
 80008ea:	22ff      	movs	r2, #255	; 0xff
 80008ec:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 80008ee:	f002 f981 	bl	8002bf4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80008f2:	f002 f973 	bl	8002bdc <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80008f6:	2344      	movs	r3, #68	; 0x44
 80008f8:	5ce5      	ldrb	r5, [r4, r3]
 80008fa:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80008fc:	2d00      	cmp	r5, #0
 80008fe:	dd12      	ble.n	8000926 <xQueueGenericSend+0x31a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000900:	0026      	movs	r6, r4
 8000902:	3610      	adds	r6, #16
 8000904:	e004      	b.n	8000910 <xQueueGenericSend+0x304>
				--cRxLock;
 8000906:	3d01      	subs	r5, #1
 8000908:	b2ea      	uxtb	r2, r5
 800090a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800090c:	2a00      	cmp	r2, #0
 800090e:	d00a      	beq.n	8000926 <xQueueGenericSend+0x31a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000910:	6923      	ldr	r3, [r4, #16]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d007      	beq.n	8000926 <xQueueGenericSend+0x31a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000916:	0030      	movs	r0, r6
 8000918:	f001 fcd4 	bl	80022c4 <xTaskRemoveFromEventList>
 800091c:	2800      	cmp	r0, #0
 800091e:	d0f2      	beq.n	8000906 <xQueueGenericSend+0x2fa>
					vTaskMissedYield();
 8000920:	f001 fdaa 	bl	8002478 <vTaskMissedYield>
 8000924:	e7ef      	b.n	8000906 <xQueueGenericSend+0x2fa>
		pxQueue->cRxLock = queueUNLOCKED;
 8000926:	2344      	movs	r3, #68	; 0x44
 8000928:	22ff      	movs	r2, #255	; 0xff
 800092a:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 800092c:	f002 f962 	bl	8002bf4 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8000930:	f001 fafa 	bl	8001f28 <xTaskResumeAll>
 8000934:	e7b4      	b.n	80008a0 <xQueueGenericSend+0x294>
							queueYIELD_IF_USING_PREEMPTION();
 8000936:	f002 f945 	bl	8002bc4 <vPortYield>
 800093a:	e7a2      	b.n	8000882 <xQueueGenericSend+0x276>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800093c:	0020      	movs	r0, r4
 800093e:	3024      	adds	r0, #36	; 0x24
 8000940:	f001 fcc0 	bl	80022c4 <xTaskRemoveFromEventList>
 8000944:	e79b      	b.n	800087e <xQueueGenericSend+0x272>
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	20000006 	.word	0x20000006
				traceQUEUE_SEND( pxQueue );
 800094c:	0020      	movs	r0, r4
 800094e:	f002 fcf9 	bl	8003344 <prvTraceGetQueueNumberHigh16>
 8000952:	464b      	mov	r3, r9
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	4203      	tst	r3, r0
 8000958:	d100      	bne.n	800095c <xQueueGenericSend+0x350>
 800095a:	e788      	b.n	800086e <xQueueGenericSend+0x262>
 800095c:	234c      	movs	r3, #76	; 0x4c
 800095e:	5ce3      	ldrb	r3, [r4, r3]
 8000960:	2b03      	cmp	r3, #3
 8000962:	d830      	bhi.n	80009c6 <xQueueGenericSend+0x3ba>
 8000964:	2b01      	cmp	r3, #1
 8000966:	d83a      	bhi.n	80009de <xQueueGenericSend+0x3d2>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d03f      	beq.n	80009ec <xQueueGenericSend+0x3e0>
 800096c:	0021      	movs	r1, r4
 800096e:	2052      	movs	r0, #82	; 0x52
 8000970:	f002 ffc8 	bl	8003904 <prvTraceStoreEvent1>
 8000974:	e77b      	b.n	800086e <xQueueGenericSend+0x262>
			traceQUEUE_SEND_FAILED( pxQueue );
 8000976:	0020      	movs	r0, r4
 8000978:	f002 fce4 	bl	8003344 <prvTraceGetQueueNumberHigh16>
 800097c:	464b      	mov	r3, r9
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	4203      	tst	r3, r0
 8000982:	d095      	beq.n	80008b0 <xQueueGenericSend+0x2a4>
 8000984:	234c      	movs	r3, #76	; 0x4c
 8000986:	5ce3      	ldrb	r3, [r4, r3]
 8000988:	2b03      	cmp	r3, #3
 800098a:	d81f      	bhi.n	80009cc <xQueueGenericSend+0x3c0>
 800098c:	2b01      	cmp	r3, #1
 800098e:	d83a      	bhi.n	8000a06 <xQueueGenericSend+0x3fa>
 8000990:	2b00      	cmp	r3, #0
 8000992:	d11e      	bne.n	80009d2 <xQueueGenericSend+0x3c6>
 8000994:	4658      	mov	r0, fp
 8000996:	4243      	negs	r3, r0
 8000998:	4158      	adcs	r0, r3
 800099a:	236d      	movs	r3, #109	; 0x6d
 800099c:	4240      	negs	r0, r0
 800099e:	4398      	bics	r0, r3
 80009a0:	30c1      	adds	r0, #193	; 0xc1
 80009a2:	0021      	movs	r1, r4
 80009a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80009a6:	f003 f819 	bl	80039dc <prvTraceStoreEvent2>
			return errQUEUE_FULL;
 80009aa:	2000      	movs	r0, #0
			traceQUEUE_SEND_FAILED( pxQueue );
 80009ac:	e76c      	b.n	8000888 <xQueueGenericSend+0x27c>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80009ae:	0021      	movs	r1, r4
 80009b0:	2057      	movs	r0, #87	; 0x57
 80009b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80009b4:	f003 f812 	bl	80039dc <prvTraceStoreEvent2>
 80009b8:	e6e2      	b.n	8000780 <xQueueGenericSend+0x174>
 80009ba:	0021      	movs	r1, r4
 80009bc:	4650      	mov	r0, sl
 80009be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80009c0:	f003 f80c 	bl	80039dc <prvTraceStoreEvent2>
 80009c4:	e6dc      	b.n	8000780 <xQueueGenericSend+0x174>
				traceQUEUE_SEND( pxQueue );
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	d0d0      	beq.n	800096c <xQueueGenericSend+0x360>
 80009ca:	e750      	b.n	800086e <xQueueGenericSend+0x262>
					traceQUEUE_SEND_FAILED( pxQueue );
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	d000      	beq.n	80009d2 <xQueueGenericSend+0x3c6>
 80009d0:	e76e      	b.n	80008b0 <xQueueGenericSend+0x2a4>
 80009d2:	2055      	movs	r0, #85	; 0x55
 80009d4:	0021      	movs	r1, r4
 80009d6:	f002 ff95 	bl	8003904 <prvTraceStoreEvent1>
					return errQUEUE_FULL;
 80009da:	2000      	movs	r0, #0
					traceQUEUE_SEND_FAILED( pxQueue );
 80009dc:	e754      	b.n	8000888 <xQueueGenericSend+0x27c>
				traceQUEUE_SEND( pxQueue );
 80009de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80009e0:	0021      	movs	r1, r4
 80009e2:	2051      	movs	r0, #81	; 0x51
 80009e4:	3201      	adds	r2, #1
 80009e6:	f002 fff9 	bl	80039dc <prvTraceStoreEvent2>
 80009ea:	e740      	b.n	800086e <xQueueGenericSend+0x262>
 80009ec:	465b      	mov	r3, fp
 80009ee:	4258      	negs	r0, r3
 80009f0:	4158      	adcs	r0, r3
 80009f2:	236f      	movs	r3, #111	; 0x6f
 80009f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80009f6:	4240      	negs	r0, r0
 80009f8:	4398      	bics	r0, r3
 80009fa:	0021      	movs	r1, r4
 80009fc:	30c0      	adds	r0, #192	; 0xc0
 80009fe:	3201      	adds	r2, #1
 8000a00:	f002 ffec 	bl	80039dc <prvTraceStoreEvent2>
 8000a04:	e733      	b.n	800086e <xQueueGenericSend+0x262>
			traceQUEUE_SEND_FAILED( pxQueue );
 8000a06:	2054      	movs	r0, #84	; 0x54
 8000a08:	0021      	movs	r1, r4
 8000a0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000a0c:	f002 ffe6 	bl	80039dc <prvTraceStoreEvent2>
			return errQUEUE_FULL;
 8000a10:	2000      	movs	r0, #0
 8000a12:	e739      	b.n	8000888 <xQueueGenericSend+0x27c>

08000a14 <xQueueCreateMutex>:
	{
 8000a14:	b570      	push	{r4, r5, r6, lr}
 8000a16:	0005      	movs	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000a18:	2050      	movs	r0, #80	; 0x50
 8000a1a:	f002 f935 	bl	8002c88 <pvPortMalloc>
 8000a1e:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 8000a20:	d04d      	beq.n	8000abe <xQueueCreateMutex+0xaa>
	pxNewQueue->uxLength = uxQueueLength;
 8000a22:	2301      	movs	r3, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8000a24:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
 8000a26:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000a28:	6406      	str	r6, [r0, #64]	; 0x40
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000a2a:	6000      	str	r0, [r0, #0]
	taskENTER_CRITICAL();
 8000a2c:	f002 f8d6 	bl	8002bdc <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a30:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000a32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a34:	6822      	ldr	r2, [r4, #0]
 8000a36:	434b      	muls	r3, r1
 8000a38:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a3a:	1a5b      	subs	r3, r3, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000a3c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a3e:	18d2      	adds	r2, r2, r3
 8000a40:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000a42:	23ff      	movs	r3, #255	; 0xff
 8000a44:	2244      	movs	r2, #68	; 0x44
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a46:	60a0      	str	r0, [r4, #8]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000a48:	0020      	movs	r0, r4
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000a4a:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8000a4c:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8000a4e:	3201      	adds	r2, #1
 8000a50:	54a3      	strb	r3, [r4, r2]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000a52:	3010      	adds	r0, #16
 8000a54:	f7ff fcb8 	bl	80003c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000a58:	0020      	movs	r0, r4
 8000a5a:	3024      	adds	r0, #36	; 0x24
 8000a5c:	f7ff fcb4 	bl	80003c8 <vListInitialise>
	taskEXIT_CRITICAL();
 8000a60:	f002 f8c8 	bl	8002bf4 <vPortExitCritical>
	traceQUEUE_CREATE( pxNewQueue );
 8000a64:	4b32      	ldr	r3, [pc, #200]	; (8000b30 <xQueueCreateMutex+0x11c>)
		pxNewQueue->ucQueueType = ucQueueType;
 8000a66:	364c      	adds	r6, #76	; 0x4c
	traceQUEUE_CREATE( pxNewQueue );
 8000a68:	8819      	ldrh	r1, [r3, #0]
 8000a6a:	0020      	movs	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8000a6c:	55a5      	strb	r5, [r4, r6]
	traceQUEUE_CREATE( pxNewQueue );
 8000a6e:	f002 fc6f 	bl	8003350 <prvTraceSetQueueNumberHigh16>
 8000a72:	f002 fd07 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8000a76:	f002 fc51 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8000a7a:	4d2e      	ldr	r5, [pc, #184]	; (8000b34 <xQueueCreateMutex+0x120>)
 8000a7c:	882b      	ldrh	r3, [r5, #0]
 8000a7e:	4203      	tst	r3, r0
 8000a80:	d10a      	bne.n	8000a98 <xQueueCreateMutex+0x84>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8000a82:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	0020      	movs	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8000a8a:	60a3      	str	r3, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8000a8c:	6023      	str	r3, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8000a8e:	60e3      	str	r3, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8000a90:	f7ff fdbc 	bl	800060c <xQueueGenericSend>
	}
 8000a94:	0020      	movs	r0, r4
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
	traceQUEUE_CREATE( pxNewQueue );
 8000a98:	0020      	movs	r0, r4
 8000a9a:	f002 fc53 	bl	8003344 <prvTraceGetQueueNumberHigh16>
 8000a9e:	882b      	ldrh	r3, [r5, #0]
 8000aa0:	4203      	tst	r3, r0
 8000aa2:	d0ee      	beq.n	8000a82 <xQueueCreateMutex+0x6e>
 8000aa4:	5da3      	ldrb	r3, [r4, r6]
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d03c      	beq.n	8000b24 <xQueueCreateMutex+0x110>
 8000aaa:	d823      	bhi.n	8000af4 <xQueueCreateMutex+0xe0>
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d033      	beq.n	8000b18 <xQueueCreateMutex+0x104>
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d1e6      	bne.n	8000a82 <xQueueCreateMutex+0x6e>
 8000ab4:	0021      	movs	r1, r4
 8000ab6:	2013      	movs	r0, #19
 8000ab8:	f002 ff24 	bl	8003904 <prvTraceStoreEvent1>
 8000abc:	e7e1      	b.n	8000a82 <xQueueCreateMutex+0x6e>
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8000abe:	f002 fce1 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8000ac2:	f002 fc2b 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <xQueueCreateMutex+0x120>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	4203      	tst	r3, r0
 8000acc:	d0e2      	beq.n	8000a94 <xQueueCreateMutex+0x80>
 8000ace:	2d03      	cmp	r5, #3
 8000ad0:	d017      	beq.n	8000b02 <xQueueCreateMutex+0xee>
 8000ad2:	d808      	bhi.n	8000ae6 <xQueueCreateMutex+0xd2>
 8000ad4:	2d00      	cmp	r5, #0
 8000ad6:	d019      	beq.n	8000b0c <xQueueCreateMutex+0xf8>
 8000ad8:	2d01      	cmp	r5, #1
 8000ada:	d1db      	bne.n	8000a94 <xQueueCreateMutex+0x80>
 8000adc:	2100      	movs	r1, #0
 8000ade:	2043      	movs	r0, #67	; 0x43
 8000ae0:	f002 ff10 	bl	8003904 <prvTraceStoreEvent1>
 8000ae4:	e7d6      	b.n	8000a94 <xQueueCreateMutex+0x80>
 8000ae6:	2d04      	cmp	r5, #4
 8000ae8:	d1d4      	bne.n	8000a94 <xQueueCreateMutex+0x80>
 8000aea:	2100      	movs	r1, #0
 8000aec:	2047      	movs	r0, #71	; 0x47
 8000aee:	f002 ff09 	bl	8003904 <prvTraceStoreEvent1>
 8000af2:	e7cf      	b.n	8000a94 <xQueueCreateMutex+0x80>
	traceQUEUE_CREATE( pxNewQueue );
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	d1c4      	bne.n	8000a82 <xQueueCreateMutex+0x6e>
 8000af8:	0021      	movs	r1, r4
 8000afa:	2017      	movs	r0, #23
 8000afc:	f002 ff02 	bl	8003904 <prvTraceStoreEvent1>
 8000b00:	e7bf      	b.n	8000a82 <xQueueCreateMutex+0x6e>
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8000b02:	2100      	movs	r1, #0
 8000b04:	2042      	movs	r0, #66	; 0x42
 8000b06:	f002 fefd 	bl	8003904 <prvTraceStoreEvent1>
 8000b0a:	e7c3      	b.n	8000a94 <xQueueCreateMutex+0x80>
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2041      	movs	r0, #65	; 0x41
 8000b12:	f002 ff63 	bl	80039dc <prvTraceStoreEvent2>
 8000b16:	e7bd      	b.n	8000a94 <xQueueCreateMutex+0x80>
	traceQUEUE_CREATE( pxNewQueue );
 8000b18:	2201      	movs	r2, #1
 8000b1a:	0021      	movs	r1, r4
 8000b1c:	2011      	movs	r0, #17
 8000b1e:	f002 ff5d 	bl	80039dc <prvTraceStoreEvent2>
 8000b22:	e7ae      	b.n	8000a82 <xQueueCreateMutex+0x6e>
 8000b24:	0021      	movs	r1, r4
 8000b26:	2012      	movs	r0, #18
 8000b28:	f002 feec 	bl	8003904 <prvTraceStoreEvent1>
 8000b2c:	e7a9      	b.n	8000a82 <xQueueCreateMutex+0x6e>
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	20000004 	.word	0x20000004
 8000b34:	20000006 	.word	0x20000006

08000b38 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 8000b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3a:	46c6      	mov	lr, r8
 8000b3c:	0004      	movs	r4, r0
 8000b3e:	000d      	movs	r5, r1
 8000b40:	b500      	push	{lr}
	configASSERT( pxQueue );
 8000b42:	2800      	cmp	r0, #0
 8000b44:	d037      	beq.n	8000bb6 <xQueueGiveFromISR+0x7e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8000b46:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <xQueueGiveFromISR+0x18>
 8000b4c:	b672      	cpsid	i
 8000b4e:	e7fe      	b.n	8000b4e <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000b50:	6803      	ldr	r3, [r0, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d031      	beq.n	8000bba <xQueueGiveFromISR+0x82>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b56:	f002 f85b 	bl	8002c10 <ulSetInterruptMaskFromISR>
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b5c:	0006      	movs	r6, r0
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b5e:	4698      	mov	r8, r3
		if( uxMessagesWaiting < pxQueue->uxLength )
 8000b60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b62:	4598      	cmp	r8, r3
 8000b64:	d22e      	bcs.n	8000bc4 <xQueueGiveFromISR+0x8c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8000b66:	2345      	movs	r3, #69	; 0x45
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000b68:	0020      	movs	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8000b6a:	5ce7      	ldrb	r7, [r4, r3]
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000b6c:	f002 fbea 	bl	8003344 <prvTraceGetQueueNumberHigh16>
 8000b70:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <xQueueGiveFromISR+0xf0>)
			const int8_t cTxLock = pxQueue->cTxLock;
 8000b72:	b27f      	sxtb	r7, r7
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	4203      	tst	r3, r0
 8000b78:	d00c      	beq.n	8000b94 <xQueueGiveFromISR+0x5c>
 8000b7a:	234c      	movs	r3, #76	; 0x4c
 8000b7c:	5ce3      	ldrb	r3, [r4, r3]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d035      	beq.n	8000bee <xQueueGiveFromISR+0xb6>
 8000b82:	3b02      	subs	r3, #2
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d805      	bhi.n	8000b94 <xQueueGiveFromISR+0x5c>
 8000b88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000b8a:	0021      	movs	r1, r4
 8000b8c:	205a      	movs	r0, #90	; 0x5a
 8000b8e:	3201      	adds	r2, #1
 8000b90:	f002 ff24 	bl	80039dc <prvTraceStoreEvent2>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000b94:	4643      	mov	r3, r8
 8000b96:	3301      	adds	r3, #1
 8000b98:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8000b9a:	1c7b      	adds	r3, r7, #1
 8000b9c:	d034      	beq.n	8000c08 <xQueueGiveFromISR+0xd0>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000b9e:	2345      	movs	r3, #69	; 0x45
 8000ba0:	3701      	adds	r7, #1
 8000ba2:	b27f      	sxtb	r7, r7
 8000ba4:	54e7      	strb	r7, [r4, r3]
			xReturn = pdPASS;
 8000ba6:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8000ba8:	0030      	movs	r0, r6
 8000baa:	f002 f835 	bl	8002c18 <vClearInterruptMaskFromISR>
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 8000bae:	0028      	movs	r0, r5
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	46b8      	mov	r8, r7
 8000bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 8000bb6:	b672      	cpsid	i
 8000bb8:	e7fe      	b.n	8000bb8 <xQueueGiveFromISR+0x80>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000bba:	6883      	ldr	r3, [r0, #8]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0ca      	beq.n	8000b56 <xQueueGiveFromISR+0x1e>
 8000bc0:	b672      	cpsid	i
 8000bc2:	e7fe      	b.n	8000bc2 <xQueueGiveFromISR+0x8a>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000bc4:	0020      	movs	r0, r4
 8000bc6:	f002 fbbd 	bl	8003344 <prvTraceGetQueueNumberHigh16>
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <xQueueGiveFromISR+0xf0>)
			xReturn = errQUEUE_FULL;
 8000bcc:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	4203      	tst	r3, r0
 8000bd2:	d0e9      	beq.n	8000ba8 <xQueueGiveFromISR+0x70>
 8000bd4:	234c      	movs	r3, #76	; 0x4c
 8000bd6:	5ce3      	ldrb	r3, [r4, r3]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00f      	beq.n	8000bfc <xQueueGiveFromISR+0xc4>
 8000bdc:	3b02      	subs	r3, #2
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d8e2      	bhi.n	8000ba8 <xQueueGiveFromISR+0x70>
 8000be2:	0021      	movs	r1, r4
 8000be4:	205d      	movs	r0, #93	; 0x5d
 8000be6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000be8:	f002 fef8 	bl	80039dc <prvTraceStoreEvent2>
 8000bec:	e7dc      	b.n	8000ba8 <xQueueGiveFromISR+0x70>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000bee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000bf0:	0021      	movs	r1, r4
 8000bf2:	2059      	movs	r0, #89	; 0x59
 8000bf4:	3201      	adds	r2, #1
 8000bf6:	f002 fef1 	bl	80039dc <prvTraceStoreEvent2>
 8000bfa:	e7cb      	b.n	8000b94 <xQueueGiveFromISR+0x5c>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000bfc:	0021      	movs	r1, r4
 8000bfe:	205c      	movs	r0, #92	; 0x5c
 8000c00:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000c02:	f002 feeb 	bl	80039dc <prvTraceStoreEvent2>
 8000c06:	e7cf      	b.n	8000ba8 <xQueueGiveFromISR+0x70>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0cb      	beq.n	8000ba6 <xQueueGiveFromISR+0x6e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c0e:	0020      	movs	r0, r4
 8000c10:	3024      	adds	r0, #36	; 0x24
 8000c12:	f001 fb57 	bl	80022c4 <xTaskRemoveFromEventList>
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d0c5      	beq.n	8000ba6 <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0c3      	beq.n	8000ba6 <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 8000c22:	2501      	movs	r5, #1
 8000c24:	e7c0      	b.n	8000ba8 <xQueueGiveFromISR+0x70>
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	20000006 	.word	0x20000006

08000c2c <xQueueReceive>:
{
 8000c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c2e:	4646      	mov	r6, r8
 8000c30:	46d6      	mov	lr, sl
 8000c32:	464f      	mov	r7, r9
 8000c34:	b5c0      	push	{r6, r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	1e04      	subs	r4, r0, #0
 8000c3a:	4688      	mov	r8, r1
 8000c3c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8000c3e:	d100      	bne.n	8000c42 <xQueueReceive+0x16>
 8000c40:	e175      	b.n	8000f2e <xQueueReceive+0x302>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d100      	bne.n	8000c48 <xQueueReceive+0x1c>
 8000c46:	e0a6      	b.n	8000d96 <xQueueReceive+0x16a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c48:	f001 fc2c 	bl	80024a4 <xTaskGetSchedulerState>
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d100      	bne.n	8000c52 <xQueueReceive+0x26>
 8000c50:	e0a7      	b.n	8000da2 <xQueueReceive+0x176>
		taskENTER_CRITICAL();
 8000c52:	f001 ffc3 	bl	8002bdc <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c56:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c58:	2d00      	cmp	r5, #0
 8000c5a:	d000      	beq.n	8000c5e <xQueueReceive+0x32>
 8000c5c:	e1b9      	b.n	8000fd2 <xQueueReceive+0x3a6>
				if( xTicksToWait == ( TickType_t ) 0 )
 8000c5e:	9b01      	ldr	r3, [sp, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d100      	bne.n	8000c66 <xQueueReceive+0x3a>
 8000c64:	e1b8      	b.n	8000fd8 <xQueueReceive+0x3ac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000c66:	a802      	add	r0, sp, #8
 8000c68:	f001 fbc0 	bl	80023ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000c6c:	4bbb      	ldr	r3, [pc, #748]	; (8000f5c <xQueueReceive+0x330>)
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c6e:	0026      	movs	r6, r4
 8000c70:	4699      	mov	r9, r3
		prvLockQueue( pxQueue );
 8000c72:	2744      	movs	r7, #68	; 0x44
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c74:	3624      	adds	r6, #36	; 0x24
		taskEXIT_CRITICAL();
 8000c76:	f001 ffbd 	bl	8002bf4 <vPortExitCritical>
		vTaskSuspendAll();
 8000c7a:	f000 ffc9 	bl	8001c10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000c7e:	f001 ffad 	bl	8002bdc <vPortEnterCritical>
 8000c82:	5de3      	ldrb	r3, [r4, r7]
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	3301      	adds	r3, #1
 8000c88:	d101      	bne.n	8000c8e <xQueueReceive+0x62>
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	55e3      	strb	r3, [r4, r7]
 8000c8e:	2245      	movs	r2, #69	; 0x45
 8000c90:	5ca3      	ldrb	r3, [r4, r2]
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	3301      	adds	r3, #1
 8000c96:	d101      	bne.n	8000c9c <xQueueReceive+0x70>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	54a3      	strb	r3, [r4, r2]
 8000c9c:	f001 ffaa 	bl	8002bf4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ca0:	a901      	add	r1, sp, #4
 8000ca2:	a802      	add	r0, sp, #8
 8000ca4:	f001 fbae 	bl	8002404 <xTaskCheckForTimeOut>
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	d000      	beq.n	8000cae <xQueueReceive+0x82>
 8000cac:	e07f      	b.n	8000dae <xQueueReceive+0x182>
	taskENTER_CRITICAL();
 8000cae:	f001 ff95 	bl	8002bdc <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000cb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d100      	bne.n	8000cba <xQueueReceive+0x8e>
 8000cb8:	e0e0      	b.n	8000e7c <xQueueReceive+0x250>
	taskEXIT_CRITICAL();
 8000cba:	f001 ff9b 	bl	8002bf4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8000cbe:	f001 ff8d 	bl	8002bdc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8000cc2:	2345      	movs	r3, #69	; 0x45
 8000cc4:	5ce5      	ldrb	r5, [r4, r3]
 8000cc6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	dc05      	bgt.n	8000cd8 <xQueueReceive+0xac>
 8000ccc:	e013      	b.n	8000cf6 <xQueueReceive+0xca>
			--cTxLock;
 8000cce:	3d01      	subs	r5, #1
 8000cd0:	b2ea      	uxtb	r2, r5
 8000cd2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	d00e      	beq.n	8000cf6 <xQueueReceive+0xca>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d00b      	beq.n	8000cf6 <xQueueReceive+0xca>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000cde:	0030      	movs	r0, r6
 8000ce0:	f001 faf0 	bl	80022c4 <xTaskRemoveFromEventList>
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	d0f2      	beq.n	8000cce <xQueueReceive+0xa2>
						vTaskMissedYield();
 8000ce8:	3d01      	subs	r5, #1
 8000cea:	f001 fbc5 	bl	8002478 <vTaskMissedYield>
			--cTxLock;
 8000cee:	b2ea      	uxtb	r2, r5
 8000cf0:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	d1f0      	bne.n	8000cd8 <xQueueReceive+0xac>
		pxQueue->cTxLock = queueUNLOCKED;
 8000cf6:	2345      	movs	r3, #69	; 0x45
 8000cf8:	22ff      	movs	r2, #255	; 0xff
 8000cfa:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8000cfc:	f001 ff7a 	bl	8002bf4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8000d00:	f001 ff6c 	bl	8002bdc <vPortEnterCritical>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d04:	2310      	movs	r3, #16
 8000d06:	469a      	mov	sl, r3
		int8_t cRxLock = pxQueue->cRxLock;
 8000d08:	5de5      	ldrb	r5, [r4, r7]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d0a:	44a2      	add	sl, r4
		int8_t cRxLock = pxQueue->cRxLock;
 8000d0c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	dc05      	bgt.n	8000d1e <xQueueReceive+0xf2>
 8000d12:	e013      	b.n	8000d3c <xQueueReceive+0x110>
				--cRxLock;
 8000d14:	3d01      	subs	r5, #1
 8000d16:	b2ea      	uxtb	r2, r5
 8000d18:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	d00e      	beq.n	8000d3c <xQueueReceive+0x110>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d1e:	6923      	ldr	r3, [r4, #16]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00b      	beq.n	8000d3c <xQueueReceive+0x110>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d24:	4650      	mov	r0, sl
 8000d26:	f001 facd 	bl	80022c4 <xTaskRemoveFromEventList>
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	d0f2      	beq.n	8000d14 <xQueueReceive+0xe8>
					vTaskMissedYield();
 8000d2e:	3d01      	subs	r5, #1
 8000d30:	f001 fba2 	bl	8002478 <vTaskMissedYield>
				--cRxLock;
 8000d34:	b2ea      	uxtb	r2, r5
 8000d36:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d1f0      	bne.n	8000d1e <xQueueReceive+0xf2>
		pxQueue->cRxLock = queueUNLOCKED;
 8000d3c:	23ff      	movs	r3, #255	; 0xff
 8000d3e:	55e3      	strb	r3, [r4, r7]
	taskEXIT_CRITICAL();
 8000d40:	f001 ff58 	bl	8002bf4 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8000d44:	f001 f8f0 	bl	8001f28 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8000d48:	f001 ff48 	bl	8002bdc <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	d100      	bne.n	8000d54 <xQueueReceive+0x128>
 8000d52:	e07e      	b.n	8000e52 <xQueueReceive+0x226>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000d54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d00a      	beq.n	8000d70 <xQueueReceive+0x144>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000d5a:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000d5c:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000d5e:	1889      	adds	r1, r1, r2
 8000d60:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d301      	bcc.n	8000d6a <xQueueReceive+0x13e>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000d66:	6821      	ldr	r1, [r4, #0]
 8000d68:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000d6a:	4640      	mov	r0, r8
 8000d6c:	f004 fa4a 	bl	8005204 <memcpy>
				traceQUEUE_RECEIVE( pxQueue );
 8000d70:	f002 fb88 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8000d74:	f002 fad2 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8000d78:	464b      	mov	r3, r9
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	4203      	tst	r3, r0
 8000d7e:	d000      	beq.n	8000d82 <xQueueReceive+0x156>
 8000d80:	e137      	b.n	8000ff2 <xQueueReceive+0x3c6>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000d82:	3d01      	subs	r5, #1
 8000d84:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d86:	6923      	ldr	r3, [r4, #16]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d000      	beq.n	8000d8e <xQueueReceive+0x162>
 8000d8c:	e127      	b.n	8000fde <xQueueReceive+0x3b2>
				taskEXIT_CRITICAL();
 8000d8e:	f001 ff31 	bl	8002bf4 <vPortExitCritical>
				return pdPASS;
 8000d92:	2001      	movs	r0, #1
 8000d94:	e06c      	b.n	8000e70 <xQueueReceive+0x244>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d96:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d100      	bne.n	8000d9e <xQueueReceive+0x172>
 8000d9c:	e754      	b.n	8000c48 <xQueueReceive+0x1c>
 8000d9e:	b672      	cpsid	i
 8000da0:	e7fe      	b.n	8000da0 <xQueueReceive+0x174>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000da2:	9b01      	ldr	r3, [sp, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d100      	bne.n	8000daa <xQueueReceive+0x17e>
 8000da8:	e753      	b.n	8000c52 <xQueueReceive+0x26>
 8000daa:	b672      	cpsid	i
 8000dac:	e7fe      	b.n	8000dac <xQueueReceive+0x180>
	taskENTER_CRITICAL();
 8000dae:	f001 ff15 	bl	8002bdc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8000db2:	2345      	movs	r3, #69	; 0x45
 8000db4:	5ce5      	ldrb	r5, [r4, r3]
 8000db6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	dc05      	bgt.n	8000dc8 <xQueueReceive+0x19c>
 8000dbc:	e013      	b.n	8000de6 <xQueueReceive+0x1ba>
			--cTxLock;
 8000dbe:	3d01      	subs	r5, #1
 8000dc0:	b2ea      	uxtb	r2, r5
 8000dc2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	d00e      	beq.n	8000de6 <xQueueReceive+0x1ba>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00b      	beq.n	8000de6 <xQueueReceive+0x1ba>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000dce:	0030      	movs	r0, r6
 8000dd0:	f001 fa78 	bl	80022c4 <xTaskRemoveFromEventList>
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	d0f2      	beq.n	8000dbe <xQueueReceive+0x192>
						vTaskMissedYield();
 8000dd8:	3d01      	subs	r5, #1
 8000dda:	f001 fb4d 	bl	8002478 <vTaskMissedYield>
			--cTxLock;
 8000dde:	b2ea      	uxtb	r2, r5
 8000de0:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d1f0      	bne.n	8000dc8 <xQueueReceive+0x19c>
		pxQueue->cTxLock = queueUNLOCKED;
 8000de6:	2345      	movs	r3, #69	; 0x45
 8000de8:	22ff      	movs	r2, #255	; 0xff
 8000dea:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8000dec:	f001 ff02 	bl	8002bf4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8000df0:	f001 fef4 	bl	8002bdc <vPortEnterCritical>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000df4:	2310      	movs	r3, #16
 8000df6:	469a      	mov	sl, r3
		int8_t cRxLock = pxQueue->cRxLock;
 8000df8:	5de5      	ldrb	r5, [r4, r7]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000dfa:	44a2      	add	sl, r4
		int8_t cRxLock = pxQueue->cRxLock;
 8000dfc:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000dfe:	2d00      	cmp	r5, #0
 8000e00:	dc05      	bgt.n	8000e0e <xQueueReceive+0x1e2>
 8000e02:	e013      	b.n	8000e2c <xQueueReceive+0x200>
				--cRxLock;
 8000e04:	3d01      	subs	r5, #1
 8000e06:	b2ea      	uxtb	r2, r5
 8000e08:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d00e      	beq.n	8000e2c <xQueueReceive+0x200>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e0e:	6923      	ldr	r3, [r4, #16]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00b      	beq.n	8000e2c <xQueueReceive+0x200>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e14:	4650      	mov	r0, sl
 8000e16:	f001 fa55 	bl	80022c4 <xTaskRemoveFromEventList>
 8000e1a:	2800      	cmp	r0, #0
 8000e1c:	d0f2      	beq.n	8000e04 <xQueueReceive+0x1d8>
					vTaskMissedYield();
 8000e1e:	3d01      	subs	r5, #1
 8000e20:	f001 fb2a 	bl	8002478 <vTaskMissedYield>
				--cRxLock;
 8000e24:	b2ea      	uxtb	r2, r5
 8000e26:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	d1f0      	bne.n	8000e0e <xQueueReceive+0x1e2>
		pxQueue->cRxLock = queueUNLOCKED;
 8000e2c:	23ff      	movs	r3, #255	; 0xff
 8000e2e:	55e3      	strb	r3, [r4, r7]
	taskEXIT_CRITICAL();
 8000e30:	f001 fee0 	bl	8002bf4 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8000e34:	f001 f878 	bl	8001f28 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8000e38:	f001 fed0 	bl	8002bdc <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000e3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00b      	beq.n	8000e5a <xQueueReceive+0x22e>
	taskEXIT_CRITICAL();
 8000e42:	f001 fed7 	bl	8002bf4 <vPortExitCritical>
		taskENTER_CRITICAL();
 8000e46:	f001 fec9 	bl	8002bdc <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e4a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e4c:	2d00      	cmp	r5, #0
 8000e4e:	d000      	beq.n	8000e52 <xQueueReceive+0x226>
 8000e50:	e780      	b.n	8000d54 <xQueueReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e52:	9b01      	ldr	r3, [sp, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d000      	beq.n	8000e5a <xQueueReceive+0x22e>
 8000e58:	e70d      	b.n	8000c76 <xQueueReceive+0x4a>
	taskEXIT_CRITICAL();
 8000e5a:	f001 fecb 	bl	8002bf4 <vPortExitCritical>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e5e:	f002 fb11 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8000e62:	f002 fa5b 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8000e66:	464b      	mov	r3, r9
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	4203      	tst	r3, r0
 8000e6c:	d161      	bne.n	8000f32 <xQueueReceive+0x306>
				return errQUEUE_EMPTY;
 8000e6e:	2000      	movs	r0, #0
}
 8000e70:	b004      	add	sp, #16
 8000e72:	bce0      	pop	{r5, r6, r7}
 8000e74:	46ba      	mov	sl, r7
 8000e76:	46b1      	mov	r9, r6
 8000e78:	46a8      	mov	r8, r5
 8000e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	taskEXIT_CRITICAL();
 8000e7c:	f001 feba 	bl	8002bf4 <vPortExitCritical>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000e80:	f002 fb00 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8000e84:	f002 fa4a 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8000e88:	464b      	mov	r3, r9
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	4203      	tst	r3, r0
 8000e8e:	d16a      	bne.n	8000f66 <xQueueReceive+0x33a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e90:	0030      	movs	r0, r6
 8000e92:	9901      	ldr	r1, [sp, #4]
 8000e94:	f001 f922 	bl	80020dc <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8000e98:	f001 fea0 	bl	8002bdc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8000e9c:	2345      	movs	r3, #69	; 0x45
 8000e9e:	5ce5      	ldrb	r5, [r4, r3]
 8000ea0:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	dc05      	bgt.n	8000eb2 <xQueueReceive+0x286>
 8000ea6:	e013      	b.n	8000ed0 <xQueueReceive+0x2a4>
			--cTxLock;
 8000ea8:	3d01      	subs	r5, #1
 8000eaa:	b2ea      	uxtb	r2, r5
 8000eac:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000eae:	2a00      	cmp	r2, #0
 8000eb0:	d00e      	beq.n	8000ed0 <xQueueReceive+0x2a4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d00b      	beq.n	8000ed0 <xQueueReceive+0x2a4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000eb8:	0030      	movs	r0, r6
 8000eba:	f001 fa03 	bl	80022c4 <xTaskRemoveFromEventList>
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	d0f2      	beq.n	8000ea8 <xQueueReceive+0x27c>
						vTaskMissedYield();
 8000ec2:	3d01      	subs	r5, #1
 8000ec4:	f001 fad8 	bl	8002478 <vTaskMissedYield>
			--cTxLock;
 8000ec8:	b2ea      	uxtb	r2, r5
 8000eca:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	d1f0      	bne.n	8000eb2 <xQueueReceive+0x286>
		pxQueue->cTxLock = queueUNLOCKED;
 8000ed0:	2345      	movs	r3, #69	; 0x45
 8000ed2:	22ff      	movs	r2, #255	; 0xff
 8000ed4:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8000ed6:	f001 fe8d 	bl	8002bf4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8000eda:	f001 fe7f 	bl	8002bdc <vPortEnterCritical>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ede:	2310      	movs	r3, #16
 8000ee0:	469a      	mov	sl, r3
		int8_t cRxLock = pxQueue->cRxLock;
 8000ee2:	5de5      	ldrb	r5, [r4, r7]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ee4:	44a2      	add	sl, r4
		int8_t cRxLock = pxQueue->cRxLock;
 8000ee6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ee8:	2d00      	cmp	r5, #0
 8000eea:	dc05      	bgt.n	8000ef8 <xQueueReceive+0x2cc>
 8000eec:	e013      	b.n	8000f16 <xQueueReceive+0x2ea>
				--cRxLock;
 8000eee:	3d01      	subs	r5, #1
 8000ef0:	b2ea      	uxtb	r2, r5
 8000ef2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ef4:	2a00      	cmp	r2, #0
 8000ef6:	d00e      	beq.n	8000f16 <xQueueReceive+0x2ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ef8:	6923      	ldr	r3, [r4, #16]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00b      	beq.n	8000f16 <xQueueReceive+0x2ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000efe:	4650      	mov	r0, sl
 8000f00:	f001 f9e0 	bl	80022c4 <xTaskRemoveFromEventList>
 8000f04:	2800      	cmp	r0, #0
 8000f06:	d0f2      	beq.n	8000eee <xQueueReceive+0x2c2>
					vTaskMissedYield();
 8000f08:	3d01      	subs	r5, #1
 8000f0a:	f001 fab5 	bl	8002478 <vTaskMissedYield>
				--cRxLock;
 8000f0e:	b2ea      	uxtb	r2, r5
 8000f10:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f12:	2a00      	cmp	r2, #0
 8000f14:	d1f0      	bne.n	8000ef8 <xQueueReceive+0x2cc>
		pxQueue->cRxLock = queueUNLOCKED;
 8000f16:	23ff      	movs	r3, #255	; 0xff
 8000f18:	55e3      	strb	r3, [r4, r7]
	taskEXIT_CRITICAL();
 8000f1a:	f001 fe6b 	bl	8002bf4 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8000f1e:	f001 f803 	bl	8001f28 <xTaskResumeAll>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d000      	beq.n	8000f28 <xQueueReceive+0x2fc>
 8000f26:	e78e      	b.n	8000e46 <xQueueReceive+0x21a>
					portYIELD_WITHIN_API();
 8000f28:	f001 fe4c 	bl	8002bc4 <vPortYield>
		taskENTER_CRITICAL();
 8000f2c:	e78b      	b.n	8000e46 <xQueueReceive+0x21a>
	configASSERT( ( pxQueue ) );
 8000f2e:	b672      	cpsid	i
 8000f30:	e7fe      	b.n	8000f30 <xQueueReceive+0x304>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000f32:	0020      	movs	r0, r4
 8000f34:	f002 fa06 	bl	8003344 <prvTraceGetQueueNumberHigh16>
 8000f38:	464b      	mov	r3, r9
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	4203      	tst	r3, r0
 8000f3e:	d096      	beq.n	8000e6e <xQueueReceive+0x242>
 8000f40:	234c      	movs	r3, #76	; 0x4c
 8000f42:	5ce3      	ldrb	r3, [r4, r3]
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d80b      	bhi.n	8000f60 <xQueueReceive+0x334>
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d833      	bhi.n	8000fb4 <xQueueReceive+0x388>
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d022      	beq.n	8000f96 <xQueueReceive+0x36a>
 8000f50:	0021      	movs	r1, r4
 8000f52:	2065      	movs	r0, #101	; 0x65
 8000f54:	9a01      	ldr	r2, [sp, #4]
 8000f56:	f002 fd41 	bl	80039dc <prvTraceStoreEvent2>
 8000f5a:	e788      	b.n	8000e6e <xQueueReceive+0x242>
 8000f5c:	20000006 	.word	0x20000006
 8000f60:	2b04      	cmp	r3, #4
 8000f62:	d0f5      	beq.n	8000f50 <xQueueReceive+0x324>
 8000f64:	e783      	b.n	8000e6e <xQueueReceive+0x242>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000f66:	0020      	movs	r0, r4
 8000f68:	f002 f9ec 	bl	8003344 <prvTraceGetQueueNumberHigh16>
 8000f6c:	464b      	mov	r3, r9
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	4203      	tst	r3, r0
 8000f72:	d08d      	beq.n	8000e90 <xQueueReceive+0x264>
 8000f74:	234c      	movs	r3, #76	; 0x4c
 8000f76:	5ce3      	ldrb	r3, [r4, r3]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d809      	bhi.n	8000f90 <xQueueReceive+0x364>
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d821      	bhi.n	8000fc4 <xQueueReceive+0x398>
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d010      	beq.n	8000fa6 <xQueueReceive+0x37a>
 8000f84:	0021      	movs	r1, r4
 8000f86:	2068      	movs	r0, #104	; 0x68
 8000f88:	9a01      	ldr	r2, [sp, #4]
 8000f8a:	f002 fd27 	bl	80039dc <prvTraceStoreEvent2>
 8000f8e:	e77f      	b.n	8000e90 <xQueueReceive+0x264>
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d0f7      	beq.n	8000f84 <xQueueReceive+0x358>
 8000f94:	e77c      	b.n	8000e90 <xQueueReceive+0x264>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000f96:	2063      	movs	r0, #99	; 0x63
 8000f98:	0021      	movs	r1, r4
 8000f9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f9c:	9a01      	ldr	r2, [sp, #4]
 8000f9e:	f002 fd8d 	bl	8003abc <prvTraceStoreEvent3>
				return errQUEUE_EMPTY;
 8000fa2:	2000      	movs	r0, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000fa4:	e764      	b.n	8000e70 <xQueueReceive+0x244>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000fa6:	0021      	movs	r1, r4
 8000fa8:	2066      	movs	r0, #102	; 0x66
 8000faa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000fac:	9a01      	ldr	r2, [sp, #4]
 8000fae:	f002 fd85 	bl	8003abc <prvTraceStoreEvent3>
 8000fb2:	e76d      	b.n	8000e90 <xQueueReceive+0x264>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000fb4:	2064      	movs	r0, #100	; 0x64
 8000fb6:	0021      	movs	r1, r4
 8000fb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000fba:	9a01      	ldr	r2, [sp, #4]
 8000fbc:	f002 fd7e 	bl	8003abc <prvTraceStoreEvent3>
				return errQUEUE_EMPTY;
 8000fc0:	2000      	movs	r0, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000fc2:	e755      	b.n	8000e70 <xQueueReceive+0x244>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000fc4:	0021      	movs	r1, r4
 8000fc6:	2067      	movs	r0, #103	; 0x67
 8000fc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000fca:	9a01      	ldr	r2, [sp, #4]
 8000fcc:	f002 fd76 	bl	8003abc <prvTraceStoreEvent3>
 8000fd0:	e75e      	b.n	8000e90 <xQueueReceive+0x264>
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <xQueueReceive+0x418>)
 8000fd4:	4699      	mov	r9, r3
 8000fd6:	e6bd      	b.n	8000d54 <xQueueReceive+0x128>
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <xQueueReceive+0x418>)
 8000fda:	4699      	mov	r9, r3
 8000fdc:	e73d      	b.n	8000e5a <xQueueReceive+0x22e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fde:	0020      	movs	r0, r4
 8000fe0:	3010      	adds	r0, #16
 8000fe2:	f001 f96f 	bl	80022c4 <xTaskRemoveFromEventList>
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	d100      	bne.n	8000fec <xQueueReceive+0x3c0>
 8000fea:	e6d0      	b.n	8000d8e <xQueueReceive+0x162>
						queueYIELD_IF_USING_PREEMPTION();
 8000fec:	f001 fdea 	bl	8002bc4 <vPortYield>
 8000ff0:	e6cd      	b.n	8000d8e <xQueueReceive+0x162>
				traceQUEUE_RECEIVE( pxQueue );
 8000ff2:	0020      	movs	r0, r4
 8000ff4:	f002 f9a6 	bl	8003344 <prvTraceGetQueueNumberHigh16>
 8000ff8:	464b      	mov	r3, r9
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	4203      	tst	r3, r0
 8000ffe:	d100      	bne.n	8001002 <xQueueReceive+0x3d6>
 8001000:	e6bf      	b.n	8000d82 <xQueueReceive+0x156>
 8001002:	234c      	movs	r3, #76	; 0x4c
 8001004:	5ce3      	ldrb	r3, [r4, r3]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d809      	bhi.n	800101e <xQueueReceive+0x3f2>
 800100a:	2b01      	cmp	r3, #1
 800100c:	d812      	bhi.n	8001034 <xQueueReceive+0x408>
 800100e:	2b00      	cmp	r3, #0
 8001010:	d008      	beq.n	8001024 <xQueueReceive+0x3f8>
 8001012:	0021      	movs	r1, r4
 8001014:	2062      	movs	r0, #98	; 0x62
 8001016:	9a01      	ldr	r2, [sp, #4]
 8001018:	f002 fce0 	bl	80039dc <prvTraceStoreEvent2>
 800101c:	e6b1      	b.n	8000d82 <xQueueReceive+0x156>
 800101e:	2b04      	cmp	r3, #4
 8001020:	d0f7      	beq.n	8001012 <xQueueReceive+0x3e6>
 8001022:	e6ae      	b.n	8000d82 <xQueueReceive+0x156>
 8001024:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001026:	0021      	movs	r1, r4
 8001028:	2060      	movs	r0, #96	; 0x60
 800102a:	9a01      	ldr	r2, [sp, #4]
 800102c:	3b01      	subs	r3, #1
 800102e:	f002 fd45 	bl	8003abc <prvTraceStoreEvent3>
 8001032:	e6a6      	b.n	8000d82 <xQueueReceive+0x156>
 8001034:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001036:	0021      	movs	r1, r4
 8001038:	2061      	movs	r0, #97	; 0x61
 800103a:	9a01      	ldr	r2, [sp, #4]
 800103c:	3b01      	subs	r3, #1
 800103e:	f002 fd3d 	bl	8003abc <prvTraceStoreEvent3>
 8001042:	e69e      	b.n	8000d82 <xQueueReceive+0x156>
 8001044:	20000006 	.word	0x20000006

08001048 <xQueueSemaphoreTake>:
{
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104a:	46d6      	mov	lr, sl
 800104c:	464f      	mov	r7, r9
 800104e:	4646      	mov	r6, r8
 8001050:	b5c0      	push	{r6, r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	1e04      	subs	r4, r0, #0
 8001056:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001058:	d05b      	beq.n	8001112 <xQueueSemaphoreTake+0xca>
	configASSERT( pxQueue->uxItemSize == 0 );
 800105a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <xQueueSemaphoreTake+0x1c>
 8001060:	b672      	cpsid	i
 8001062:	e7fe      	b.n	8001062 <xQueueSemaphoreTake+0x1a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001064:	f001 fa1e 	bl	80024a4 <xTaskGetSchedulerState>
 8001068:	1e05      	subs	r5, r0, #0
 800106a:	d054      	beq.n	8001116 <xQueueSemaphoreTake+0xce>
 800106c:	2300      	movs	r3, #0
 800106e:	2500      	movs	r5, #0
 8001070:	469a      	mov	sl, r3
 8001072:	4bba      	ldr	r3, [pc, #744]	; (800135c <xQueueSemaphoreTake+0x314>)
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001074:	0026      	movs	r6, r4
 8001076:	4698      	mov	r8, r3
 8001078:	3624      	adds	r6, #36	; 0x24
		taskENTER_CRITICAL();
 800107a:	f001 fdaf 	bl	8002bdc <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800107e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001080:	4699      	mov	r9, r3
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001082:	2b00      	cmp	r3, #0
 8001084:	d000      	beq.n	8001088 <xQueueSemaphoreTake+0x40>
 8001086:	e18e      	b.n	80013a6 <xQueueSemaphoreTake+0x35e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001088:	9b01      	ldr	r3, [sp, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d100      	bne.n	8001090 <xQueueSemaphoreTake+0x48>
 800108e:	e185      	b.n	800139c <xQueueSemaphoreTake+0x354>
				else if( xEntryTimeSet == pdFALSE )
 8001090:	2d00      	cmp	r5, #0
 8001092:	d100      	bne.n	8001096 <xQueueSemaphoreTake+0x4e>
 8001094:	e094      	b.n	80011c0 <xQueueSemaphoreTake+0x178>
		taskEXIT_CRITICAL();
 8001096:	f001 fdad 	bl	8002bf4 <vPortExitCritical>
		vTaskSuspendAll();
 800109a:	f000 fdb9 	bl	8001c10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800109e:	f001 fd9d 	bl	8002bdc <vPortEnterCritical>
 80010a2:	2244      	movs	r2, #68	; 0x44
 80010a4:	5ca3      	ldrb	r3, [r4, r2]
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	3301      	adds	r3, #1
 80010aa:	d101      	bne.n	80010b0 <xQueueSemaphoreTake+0x68>
 80010ac:	2300      	movs	r3, #0
 80010ae:	54a3      	strb	r3, [r4, r2]
 80010b0:	2245      	movs	r2, #69	; 0x45
 80010b2:	5ca3      	ldrb	r3, [r4, r2]
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	3301      	adds	r3, #1
 80010b8:	d101      	bne.n	80010be <xQueueSemaphoreTake+0x76>
 80010ba:	2300      	movs	r3, #0
 80010bc:	54a3      	strb	r3, [r4, r2]
 80010be:	f001 fd99 	bl	8002bf4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80010c2:	a901      	add	r1, sp, #4
 80010c4:	a802      	add	r0, sp, #8
 80010c6:	f001 f99d 	bl	8002404 <xTaskCheckForTimeOut>
 80010ca:	2800      	cmp	r0, #0
 80010cc:	d129      	bne.n	8001122 <xQueueSemaphoreTake+0xda>
	taskENTER_CRITICAL();
 80010ce:	f001 fd85 	bl	8002bdc <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80010d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d100      	bne.n	80010da <xQueueSemaphoreTake+0x92>
 80010d8:	e0b6      	b.n	8001248 <xQueueSemaphoreTake+0x200>
	taskEXIT_CRITICAL();
 80010da:	f001 fd8b 	bl	8002bf4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80010de:	f001 fd7d 	bl	8002bdc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80010e2:	2345      	movs	r3, #69	; 0x45
 80010e4:	5ce5      	ldrb	r5, [r4, r3]
 80010e6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80010e8:	2d00      	cmp	r5, #0
 80010ea:	dc06      	bgt.n	80010fa <xQueueSemaphoreTake+0xb2>
 80010ec:	e084      	b.n	80011f8 <xQueueSemaphoreTake+0x1b0>
			--cTxLock;
 80010ee:	3d01      	subs	r5, #1
 80010f0:	b2ea      	uxtb	r2, r5
 80010f2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80010f4:	2a00      	cmp	r2, #0
 80010f6:	d100      	bne.n	80010fa <xQueueSemaphoreTake+0xb2>
 80010f8:	e07e      	b.n	80011f8 <xQueueSemaphoreTake+0x1b0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d100      	bne.n	8001102 <xQueueSemaphoreTake+0xba>
 8001100:	e07a      	b.n	80011f8 <xQueueSemaphoreTake+0x1b0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001102:	0030      	movs	r0, r6
 8001104:	f001 f8de 	bl	80022c4 <xTaskRemoveFromEventList>
 8001108:	2800      	cmp	r0, #0
 800110a:	d0f0      	beq.n	80010ee <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
 800110c:	f001 f9b4 	bl	8002478 <vTaskMissedYield>
 8001110:	e7ed      	b.n	80010ee <xQueueSemaphoreTake+0xa6>
	configASSERT( ( pxQueue ) );
 8001112:	b672      	cpsid	i
 8001114:	e7fe      	b.n	8001114 <xQueueSemaphoreTake+0xcc>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001116:	9b01      	ldr	r3, [sp, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d100      	bne.n	800111e <xQueueSemaphoreTake+0xd6>
 800111c:	e0eb      	b.n	80012f6 <xQueueSemaphoreTake+0x2ae>
 800111e:	b672      	cpsid	i
 8001120:	e7fe      	b.n	8001120 <xQueueSemaphoreTake+0xd8>
	taskENTER_CRITICAL();
 8001122:	f001 fd5b 	bl	8002bdc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001126:	2345      	movs	r3, #69	; 0x45
 8001128:	5ce5      	ldrb	r5, [r4, r3]
 800112a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800112c:	2d00      	cmp	r5, #0
 800112e:	dc05      	bgt.n	800113c <xQueueSemaphoreTake+0xf4>
 8001130:	e013      	b.n	800115a <xQueueSemaphoreTake+0x112>
			--cTxLock;
 8001132:	3d01      	subs	r5, #1
 8001134:	b2ea      	uxtb	r2, r5
 8001136:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001138:	2a00      	cmp	r2, #0
 800113a:	d00e      	beq.n	800115a <xQueueSemaphoreTake+0x112>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800113c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00b      	beq.n	800115a <xQueueSemaphoreTake+0x112>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001142:	0030      	movs	r0, r6
 8001144:	f001 f8be 	bl	80022c4 <xTaskRemoveFromEventList>
 8001148:	2800      	cmp	r0, #0
 800114a:	d0f2      	beq.n	8001132 <xQueueSemaphoreTake+0xea>
						vTaskMissedYield();
 800114c:	3d01      	subs	r5, #1
 800114e:	f001 f993 	bl	8002478 <vTaskMissedYield>
			--cTxLock;
 8001152:	b2ea      	uxtb	r2, r5
 8001154:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001156:	2a00      	cmp	r2, #0
 8001158:	d1f0      	bne.n	800113c <xQueueSemaphoreTake+0xf4>
		pxQueue->cTxLock = queueUNLOCKED;
 800115a:	2345      	movs	r3, #69	; 0x45
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 8001160:	f001 fd48 	bl	8002bf4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001164:	f001 fd3a 	bl	8002bdc <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001168:	2344      	movs	r3, #68	; 0x44
 800116a:	5ce5      	ldrb	r5, [r4, r3]
 800116c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800116e:	2d00      	cmp	r5, #0
 8001170:	dd16      	ble.n	80011a0 <xQueueSemaphoreTake+0x158>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001172:	0027      	movs	r7, r4
 8001174:	3710      	adds	r7, #16
 8001176:	e004      	b.n	8001182 <xQueueSemaphoreTake+0x13a>
				--cRxLock;
 8001178:	3d01      	subs	r5, #1
 800117a:	b2ea      	uxtb	r2, r5
 800117c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800117e:	2a00      	cmp	r2, #0
 8001180:	d00e      	beq.n	80011a0 <xQueueSemaphoreTake+0x158>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001182:	6923      	ldr	r3, [r4, #16]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00b      	beq.n	80011a0 <xQueueSemaphoreTake+0x158>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001188:	0038      	movs	r0, r7
 800118a:	f001 f89b 	bl	80022c4 <xTaskRemoveFromEventList>
 800118e:	2800      	cmp	r0, #0
 8001190:	d0f2      	beq.n	8001178 <xQueueSemaphoreTake+0x130>
					vTaskMissedYield();
 8001192:	3d01      	subs	r5, #1
 8001194:	f001 f970 	bl	8002478 <vTaskMissedYield>
				--cRxLock;
 8001198:	b2ea      	uxtb	r2, r5
 800119a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800119c:	2a00      	cmp	r2, #0
 800119e:	d1f0      	bne.n	8001182 <xQueueSemaphoreTake+0x13a>
		pxQueue->cRxLock = queueUNLOCKED;
 80011a0:	2344      	movs	r3, #68	; 0x44
 80011a2:	22ff      	movs	r2, #255	; 0xff
 80011a4:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 80011a6:	f001 fd25 	bl	8002bf4 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80011aa:	f000 febd 	bl	8001f28 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80011ae:	f001 fd15 	bl	8002bdc <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80011b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d007      	beq.n	80011c8 <xQueueSemaphoreTake+0x180>
	taskEXIT_CRITICAL();
 80011b8:	f001 fd1c 	bl	8002bf4 <vPortExitCritical>
	return xReturn;
 80011bc:	2501      	movs	r5, #1
 80011be:	e75c      	b.n	800107a <xQueueSemaphoreTake+0x32>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80011c0:	a802      	add	r0, sp, #8
 80011c2:	f001 f913 	bl	80023ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80011c6:	e766      	b.n	8001096 <xQueueSemaphoreTake+0x4e>
	taskEXIT_CRITICAL();
 80011c8:	f001 fd14 	bl	8002bf4 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80011cc:	4653      	mov	r3, sl
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d000      	beq.n	80011d4 <xQueueSemaphoreTake+0x18c>
 80011d2:	e0c5      	b.n	8001360 <xQueueSemaphoreTake+0x318>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80011d4:	f002 f956 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 80011d8:	f002 f8a0 	bl	800331c <prvTraceGetTaskNumberHigh16>
 80011dc:	4643      	mov	r3, r8
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	4203      	tst	r3, r0
 80011e2:	d000      	beq.n	80011e6 <xQueueSemaphoreTake+0x19e>
 80011e4:	e0a1      	b.n	800132a <xQueueSemaphoreTake+0x2e2>
				return errQUEUE_EMPTY;
 80011e6:	2300      	movs	r3, #0
 80011e8:	469a      	mov	sl, r3
}
 80011ea:	4650      	mov	r0, sl
 80011ec:	b004      	add	sp, #16
 80011ee:	bce0      	pop	{r5, r6, r7}
 80011f0:	46ba      	mov	sl, r7
 80011f2:	46b1      	mov	r9, r6
 80011f4:	46a8      	mov	r8, r5
 80011f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxQueue->cTxLock = queueUNLOCKED;
 80011f8:	2345      	movs	r3, #69	; 0x45
 80011fa:	22ff      	movs	r2, #255	; 0xff
 80011fc:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 80011fe:	f001 fcf9 	bl	8002bf4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001202:	f001 fceb 	bl	8002bdc <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001206:	2344      	movs	r3, #68	; 0x44
 8001208:	5ce5      	ldrb	r5, [r4, r3]
 800120a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800120c:	2d00      	cmp	r5, #0
 800120e:	dd12      	ble.n	8001236 <xQueueSemaphoreTake+0x1ee>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001210:	0027      	movs	r7, r4
 8001212:	3710      	adds	r7, #16
 8001214:	e004      	b.n	8001220 <xQueueSemaphoreTake+0x1d8>
				--cRxLock;
 8001216:	3d01      	subs	r5, #1
 8001218:	b2ea      	uxtb	r2, r5
 800121a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800121c:	2a00      	cmp	r2, #0
 800121e:	d00a      	beq.n	8001236 <xQueueSemaphoreTake+0x1ee>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001220:	6923      	ldr	r3, [r4, #16]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d007      	beq.n	8001236 <xQueueSemaphoreTake+0x1ee>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001226:	0038      	movs	r0, r7
 8001228:	f001 f84c 	bl	80022c4 <xTaskRemoveFromEventList>
 800122c:	2800      	cmp	r0, #0
 800122e:	d0f2      	beq.n	8001216 <xQueueSemaphoreTake+0x1ce>
					vTaskMissedYield();
 8001230:	f001 f922 	bl	8002478 <vTaskMissedYield>
 8001234:	e7ef      	b.n	8001216 <xQueueSemaphoreTake+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
 8001236:	2344      	movs	r3, #68	; 0x44
 8001238:	22ff      	movs	r2, #255	; 0xff
 800123a:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 800123c:	f001 fcda 	bl	8002bf4 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8001240:	2501      	movs	r5, #1
 8001242:	f000 fe71 	bl	8001f28 <xTaskResumeAll>
 8001246:	e718      	b.n	800107a <xQueueSemaphoreTake+0x32>
	taskEXIT_CRITICAL();
 8001248:	f001 fcd4 	bl	8002bf4 <vPortExitCritical>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800124c:	f002 f91a 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8001250:	f002 f864 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8001254:	4643      	mov	r3, r8
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	4203      	tst	r3, r0
 800125a:	d14f      	bne.n	80012fc <xQueueSemaphoreTake+0x2b4>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d100      	bne.n	8001264 <xQueueSemaphoreTake+0x21c>
 8001262:	e08c      	b.n	800137e <xQueueSemaphoreTake+0x336>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001264:	0030      	movs	r0, r6
 8001266:	9901      	ldr	r1, [sp, #4]
 8001268:	f000 ff38 	bl	80020dc <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800126c:	f001 fcb6 	bl	8002bdc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001270:	2345      	movs	r3, #69	; 0x45
 8001272:	5ce5      	ldrb	r5, [r4, r3]
 8001274:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001276:	2d00      	cmp	r5, #0
 8001278:	dc05      	bgt.n	8001286 <xQueueSemaphoreTake+0x23e>
 800127a:	e00f      	b.n	800129c <xQueueSemaphoreTake+0x254>
			--cTxLock;
 800127c:	3d01      	subs	r5, #1
 800127e:	b2ea      	uxtb	r2, r5
 8001280:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001282:	2a00      	cmp	r2, #0
 8001284:	d00a      	beq.n	800129c <xQueueSemaphoreTake+0x254>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001288:	2b00      	cmp	r3, #0
 800128a:	d007      	beq.n	800129c <xQueueSemaphoreTake+0x254>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800128c:	0030      	movs	r0, r6
 800128e:	f001 f819 	bl	80022c4 <xTaskRemoveFromEventList>
 8001292:	2800      	cmp	r0, #0
 8001294:	d0f2      	beq.n	800127c <xQueueSemaphoreTake+0x234>
						vTaskMissedYield();
 8001296:	f001 f8ef 	bl	8002478 <vTaskMissedYield>
 800129a:	e7ef      	b.n	800127c <xQueueSemaphoreTake+0x234>
		pxQueue->cTxLock = queueUNLOCKED;
 800129c:	2345      	movs	r3, #69	; 0x45
 800129e:	22ff      	movs	r2, #255	; 0xff
 80012a0:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 80012a2:	f001 fca7 	bl	8002bf4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80012a6:	f001 fc99 	bl	8002bdc <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80012aa:	2344      	movs	r3, #68	; 0x44
 80012ac:	5ce5      	ldrb	r5, [r4, r3]
 80012ae:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80012b0:	2d00      	cmp	r5, #0
 80012b2:	dd12      	ble.n	80012da <xQueueSemaphoreTake+0x292>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012b4:	0027      	movs	r7, r4
 80012b6:	3710      	adds	r7, #16
 80012b8:	e004      	b.n	80012c4 <xQueueSemaphoreTake+0x27c>
				--cRxLock;
 80012ba:	3d01      	subs	r5, #1
 80012bc:	b2ea      	uxtb	r2, r5
 80012be:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80012c0:	2a00      	cmp	r2, #0
 80012c2:	d00a      	beq.n	80012da <xQueueSemaphoreTake+0x292>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012c4:	6923      	ldr	r3, [r4, #16]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d007      	beq.n	80012da <xQueueSemaphoreTake+0x292>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012ca:	0038      	movs	r0, r7
 80012cc:	f000 fffa 	bl	80022c4 <xTaskRemoveFromEventList>
 80012d0:	2800      	cmp	r0, #0
 80012d2:	d0f2      	beq.n	80012ba <xQueueSemaphoreTake+0x272>
					vTaskMissedYield();
 80012d4:	f001 f8d0 	bl	8002478 <vTaskMissedYield>
 80012d8:	e7ef      	b.n	80012ba <xQueueSemaphoreTake+0x272>
		pxQueue->cRxLock = queueUNLOCKED;
 80012da:	2344      	movs	r3, #68	; 0x44
 80012dc:	22ff      	movs	r2, #255	; 0xff
 80012de:	54e2      	strb	r2, [r4, r3]
	taskEXIT_CRITICAL();
 80012e0:	f001 fc88 	bl	8002bf4 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80012e4:	f000 fe20 	bl	8001f28 <xTaskResumeAll>
 80012e8:	2800      	cmp	r0, #0
 80012ea:	d000      	beq.n	80012ee <xQueueSemaphoreTake+0x2a6>
 80012ec:	e766      	b.n	80011bc <xQueueSemaphoreTake+0x174>
					portYIELD_WITHIN_API();
 80012ee:	f001 fc69 	bl	8002bc4 <vPortYield>
 80012f2:	2501      	movs	r5, #1
 80012f4:	e6c1      	b.n	800107a <xQueueSemaphoreTake+0x32>
 80012f6:	2300      	movs	r3, #0
 80012f8:	469a      	mov	sl, r3
 80012fa:	e6ba      	b.n	8001072 <xQueueSemaphoreTake+0x2a>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80012fc:	0020      	movs	r0, r4
 80012fe:	f002 f821 	bl	8003344 <prvTraceGetQueueNumberHigh16>
 8001302:	4643      	mov	r3, r8
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	4203      	tst	r3, r0
 8001308:	d0a8      	beq.n	800125c <xQueueSemaphoreTake+0x214>
 800130a:	234c      	movs	r3, #76	; 0x4c
 800130c:	5ce3      	ldrb	r3, [r4, r3]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d83e      	bhi.n	8001390 <xQueueSemaphoreTake+0x348>
 8001312:	2b01      	cmp	r3, #1
 8001314:	d900      	bls.n	8001318 <xQueueSemaphoreTake+0x2d0>
 8001316:	e09f      	b.n	8001458 <xQueueSemaphoreTake+0x410>
 8001318:	2b00      	cmp	r3, #0
 800131a:	d100      	bne.n	800131e <xQueueSemaphoreTake+0x2d6>
 800131c:	e0a3      	b.n	8001466 <xQueueSemaphoreTake+0x41e>
 800131e:	0021      	movs	r1, r4
 8001320:	2068      	movs	r0, #104	; 0x68
 8001322:	9a01      	ldr	r2, [sp, #4]
 8001324:	f002 fb5a 	bl	80039dc <prvTraceStoreEvent2>
 8001328:	e798      	b.n	800125c <xQueueSemaphoreTake+0x214>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800132a:	0020      	movs	r0, r4
 800132c:	f002 f80a 	bl	8003344 <prvTraceGetQueueNumberHigh16>
 8001330:	4643      	mov	r3, r8
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	4203      	tst	r3, r0
 8001336:	d100      	bne.n	800133a <xQueueSemaphoreTake+0x2f2>
 8001338:	e755      	b.n	80011e6 <xQueueSemaphoreTake+0x19e>
 800133a:	234c      	movs	r3, #76	; 0x4c
 800133c:	5ce3      	ldrb	r3, [r4, r3]
 800133e:	2b03      	cmp	r3, #3
 8001340:	d829      	bhi.n	8001396 <xQueueSemaphoreTake+0x34e>
 8001342:	2b01      	cmp	r3, #1
 8001344:	d900      	bls.n	8001348 <xQueueSemaphoreTake+0x300>
 8001346:	e09e      	b.n	8001486 <xQueueSemaphoreTake+0x43e>
 8001348:	2b00      	cmp	r3, #0
 800134a:	d100      	bne.n	800134e <xQueueSemaphoreTake+0x306>
 800134c:	e092      	b.n	8001474 <xQueueSemaphoreTake+0x42c>
 800134e:	0021      	movs	r1, r4
 8001350:	2065      	movs	r0, #101	; 0x65
 8001352:	9a01      	ldr	r2, [sp, #4]
 8001354:	f002 fb42 	bl	80039dc <prvTraceStoreEvent2>
 8001358:	e745      	b.n	80011e6 <xQueueSemaphoreTake+0x19e>
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	20000006 	.word	0x20000006
						taskENTER_CRITICAL();
 8001360:	f001 fc3c 	bl	8002bdc <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001364:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001366:	2900      	cmp	r1, #0
 8001368:	d003      	beq.n	8001372 <xQueueSemaphoreTake+0x32a>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800136a:	2105      	movs	r1, #5
 800136c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001372:	68a0      	ldr	r0, [r4, #8]
 8001374:	f001 f96a 	bl	800264c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8001378:	f001 fc3c 	bl	8002bf4 <vPortExitCritical>
 800137c:	e72a      	b.n	80011d4 <xQueueSemaphoreTake+0x18c>
						taskENTER_CRITICAL();
 800137e:	f001 fc2d 	bl	8002bdc <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001382:	68a0      	ldr	r0, [r4, #8]
 8001384:	f001 f89e 	bl	80024c4 <xTaskPriorityInherit>
 8001388:	4682      	mov	sl, r0
						taskEXIT_CRITICAL();
 800138a:	f001 fc33 	bl	8002bf4 <vPortExitCritical>
 800138e:	e769      	b.n	8001264 <xQueueSemaphoreTake+0x21c>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8001390:	2b04      	cmp	r3, #4
 8001392:	d0c4      	beq.n	800131e <xQueueSemaphoreTake+0x2d6>
 8001394:	e762      	b.n	800125c <xQueueSemaphoreTake+0x214>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001396:	2b04      	cmp	r3, #4
 8001398:	d0d9      	beq.n	800134e <xQueueSemaphoreTake+0x306>
 800139a:	e724      	b.n	80011e6 <xQueueSemaphoreTake+0x19e>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800139c:	4653      	mov	r3, sl
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d017      	beq.n	80013d2 <xQueueSemaphoreTake+0x38a>
 80013a2:	b672      	cpsid	i
 80013a4:	e7fe      	b.n	80013a4 <xQueueSemaphoreTake+0x35c>
				traceQUEUE_RECEIVE( pxQueue );
 80013a6:	f002 f86d 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 80013aa:	f001 ffb7 	bl	800331c <prvTraceGetTaskNumberHigh16>
 80013ae:	4643      	mov	r3, r8
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	4203      	tst	r3, r0
 80013b4:	d13b      	bne.n	800142e <xQueueSemaphoreTake+0x3e6>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80013b6:	464b      	mov	r3, r9
 80013b8:	3b01      	subs	r3, #1
 80013ba:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80013bc:	6823      	ldr	r3, [r4, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d031      	beq.n	8001426 <xQueueSemaphoreTake+0x3de>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013c2:	6923      	ldr	r3, [r4, #16]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d125      	bne.n	8001414 <xQueueSemaphoreTake+0x3cc>
				taskEXIT_CRITICAL();
 80013c8:	f001 fc14 	bl	8002bf4 <vPortExitCritical>
				return pdPASS;
 80013cc:	2301      	movs	r3, #1
 80013ce:	469a      	mov	sl, r3
 80013d0:	e70b      	b.n	80011ea <xQueueSemaphoreTake+0x1a2>
					taskEXIT_CRITICAL();
 80013d2:	f001 fc0f 	bl	8002bf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80013d6:	f002 f855 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 80013da:	f001 ff9f 	bl	800331c <prvTraceGetTaskNumberHigh16>
 80013de:	4643      	mov	r3, r8
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	4203      	tst	r3, r0
 80013e4:	d100      	bne.n	80013e8 <xQueueSemaphoreTake+0x3a0>
 80013e6:	e6fe      	b.n	80011e6 <xQueueSemaphoreTake+0x19e>
 80013e8:	0020      	movs	r0, r4
 80013ea:	f001 ffab 	bl	8003344 <prvTraceGetQueueNumberHigh16>
 80013ee:	4643      	mov	r3, r8
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	4203      	tst	r3, r0
 80013f4:	d100      	bne.n	80013f8 <xQueueSemaphoreTake+0x3b0>
 80013f6:	e6f6      	b.n	80011e6 <xQueueSemaphoreTake+0x19e>
 80013f8:	234c      	movs	r3, #76	; 0x4c
 80013fa:	5ce3      	ldrb	r3, [r4, r3]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d85d      	bhi.n	80014bc <xQueueSemaphoreTake+0x474>
 8001400:	2b01      	cmp	r3, #1
 8001402:	d854      	bhi.n	80014ae <xQueueSemaphoreTake+0x466>
 8001404:	2b00      	cmp	r3, #0
 8001406:	d05c      	beq.n	80014c2 <xQueueSemaphoreTake+0x47a>
 8001408:	0021      	movs	r1, r4
 800140a:	2065      	movs	r0, #101	; 0x65
 800140c:	9a01      	ldr	r2, [sp, #4]
 800140e:	f002 fae5 	bl	80039dc <prvTraceStoreEvent2>
 8001412:	e6ea      	b.n	80011ea <xQueueSemaphoreTake+0x1a2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001414:	0020      	movs	r0, r4
 8001416:	3010      	adds	r0, #16
 8001418:	f000 ff54 	bl	80022c4 <xTaskRemoveFromEventList>
 800141c:	2800      	cmp	r0, #0
 800141e:	d0d3      	beq.n	80013c8 <xQueueSemaphoreTake+0x380>
						queueYIELD_IF_USING_PREEMPTION();
 8001420:	f001 fbd0 	bl	8002bc4 <vPortYield>
 8001424:	e7d0      	b.n	80013c8 <xQueueSemaphoreTake+0x380>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001426:	f001 f97f 	bl	8002728 <pvTaskIncrementMutexHeldCount>
 800142a:	60a0      	str	r0, [r4, #8]
 800142c:	e7c9      	b.n	80013c2 <xQueueSemaphoreTake+0x37a>
				traceQUEUE_RECEIVE( pxQueue );
 800142e:	0020      	movs	r0, r4
 8001430:	f001 ff88 	bl	8003344 <prvTraceGetQueueNumberHigh16>
 8001434:	4643      	mov	r3, r8
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	4203      	tst	r3, r0
 800143a:	d0bc      	beq.n	80013b6 <xQueueSemaphoreTake+0x36e>
 800143c:	234c      	movs	r3, #76	; 0x4c
 800143e:	5ce3      	ldrb	r3, [r4, r3]
 8001440:	2b03      	cmp	r3, #3
 8001442:	d829      	bhi.n	8001498 <xQueueSemaphoreTake+0x450>
 8001444:	2b01      	cmp	r3, #1
 8001446:	d82a      	bhi.n	800149e <xQueueSemaphoreTake+0x456>
 8001448:	2b00      	cmp	r3, #0
 800144a:	d041      	beq.n	80014d0 <xQueueSemaphoreTake+0x488>
 800144c:	0021      	movs	r1, r4
 800144e:	2062      	movs	r0, #98	; 0x62
 8001450:	9a01      	ldr	r2, [sp, #4]
 8001452:	f002 fac3 	bl	80039dc <prvTraceStoreEvent2>
 8001456:	e7ae      	b.n	80013b6 <xQueueSemaphoreTake+0x36e>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8001458:	0021      	movs	r1, r4
 800145a:	2067      	movs	r0, #103	; 0x67
 800145c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800145e:	9a01      	ldr	r2, [sp, #4]
 8001460:	f002 fb2c 	bl	8003abc <prvTraceStoreEvent3>
 8001464:	e6fa      	b.n	800125c <xQueueSemaphoreTake+0x214>
 8001466:	0021      	movs	r1, r4
 8001468:	2066      	movs	r0, #102	; 0x66
 800146a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800146c:	9a01      	ldr	r2, [sp, #4]
 800146e:	f002 fb25 	bl	8003abc <prvTraceStoreEvent3>
 8001472:	e6f3      	b.n	800125c <xQueueSemaphoreTake+0x214>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001474:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001476:	0021      	movs	r1, r4
 8001478:	2063      	movs	r0, #99	; 0x63
 800147a:	9a01      	ldr	r2, [sp, #4]
 800147c:	f002 fb1e 	bl	8003abc <prvTraceStoreEvent3>
				return errQUEUE_EMPTY;
 8001480:	2300      	movs	r3, #0
 8001482:	469a      	mov	sl, r3
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001484:	e6b1      	b.n	80011ea <xQueueSemaphoreTake+0x1a2>
 8001486:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001488:	0021      	movs	r1, r4
 800148a:	2064      	movs	r0, #100	; 0x64
 800148c:	9a01      	ldr	r2, [sp, #4]
 800148e:	f002 fb15 	bl	8003abc <prvTraceStoreEvent3>
				return errQUEUE_EMPTY;
 8001492:	2300      	movs	r3, #0
 8001494:	469a      	mov	sl, r3
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001496:	e6a8      	b.n	80011ea <xQueueSemaphoreTake+0x1a2>
				traceQUEUE_RECEIVE( pxQueue );
 8001498:	2b04      	cmp	r3, #4
 800149a:	d0d7      	beq.n	800144c <xQueueSemaphoreTake+0x404>
 800149c:	e78b      	b.n	80013b6 <xQueueSemaphoreTake+0x36e>
 800149e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014a0:	0021      	movs	r1, r4
 80014a2:	2061      	movs	r0, #97	; 0x61
 80014a4:	9a01      	ldr	r2, [sp, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	f002 fb08 	bl	8003abc <prvTraceStoreEvent3>
 80014ac:	e783      	b.n	80013b6 <xQueueSemaphoreTake+0x36e>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80014ae:	0021      	movs	r1, r4
 80014b0:	2064      	movs	r0, #100	; 0x64
 80014b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014b4:	9a01      	ldr	r2, [sp, #4]
 80014b6:	f002 fb01 	bl	8003abc <prvTraceStoreEvent3>
 80014ba:	e696      	b.n	80011ea <xQueueSemaphoreTake+0x1a2>
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d0a3      	beq.n	8001408 <xQueueSemaphoreTake+0x3c0>
 80014c0:	e691      	b.n	80011e6 <xQueueSemaphoreTake+0x19e>
 80014c2:	0021      	movs	r1, r4
 80014c4:	2063      	movs	r0, #99	; 0x63
 80014c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014c8:	9a01      	ldr	r2, [sp, #4]
 80014ca:	f002 faf7 	bl	8003abc <prvTraceStoreEvent3>
 80014ce:	e68c      	b.n	80011ea <xQueueSemaphoreTake+0x1a2>
				traceQUEUE_RECEIVE( pxQueue );
 80014d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014d2:	0021      	movs	r1, r4
 80014d4:	2060      	movs	r0, #96	; 0x60
 80014d6:	9a01      	ldr	r2, [sp, #4]
 80014d8:	3b01      	subs	r3, #1
 80014da:	f002 faef 	bl	8003abc <prvTraceStoreEvent3>
 80014de:	e76a      	b.n	80013b6 <xQueueSemaphoreTake+0x36e>

080014e0 <uxQueueGetQueueNumber>:
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 80014e0:	6c80      	ldr	r0, [r0, #72]	; 0x48
	}
 80014e2:	4770      	bx	lr

080014e4 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 80014e4:	6481      	str	r1, [r0, #72]	; 0x48
	}
 80014e6:	4770      	bx	lr

080014e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80014e8:	b570      	push	{r4, r5, r6, lr}
 80014ea:	0005      	movs	r5, r0
 80014ec:	0016      	movs	r6, r2
 80014ee:	000c      	movs	r4, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80014f0:	f001 fb74 	bl	8002bdc <vPortEnterCritical>
 80014f4:	2244      	movs	r2, #68	; 0x44
 80014f6:	5cab      	ldrb	r3, [r5, r2]
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	3301      	adds	r3, #1
 80014fc:	d101      	bne.n	8001502 <vQueueWaitForMessageRestricted+0x1a>
 80014fe:	2300      	movs	r3, #0
 8001500:	54ab      	strb	r3, [r5, r2]
 8001502:	2245      	movs	r2, #69	; 0x45
 8001504:	5cab      	ldrb	r3, [r5, r2]
 8001506:	b25b      	sxtb	r3, r3
 8001508:	3301      	adds	r3, #1
 800150a:	d101      	bne.n	8001510 <vQueueWaitForMessageRestricted+0x28>
 800150c:	2300      	movs	r3, #0
 800150e:	54ab      	strb	r3, [r5, r2]
 8001510:	f001 fb70 	bl	8002bf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001514:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001516:	2b00      	cmp	r3, #0
 8001518:	d046      	beq.n	80015a8 <vQueueWaitForMessageRestricted+0xc0>
	taskENTER_CRITICAL();
 800151a:	f001 fb5f 	bl	8002bdc <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800151e:	2345      	movs	r3, #69	; 0x45
 8001520:	5cec      	ldrb	r4, [r5, r3]
 8001522:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001524:	2c00      	cmp	r4, #0
 8001526:	dd16      	ble.n	8001556 <vQueueWaitForMessageRestricted+0x6e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001528:	002e      	movs	r6, r5
 800152a:	3624      	adds	r6, #36	; 0x24
 800152c:	e004      	b.n	8001538 <vQueueWaitForMessageRestricted+0x50>
			--cTxLock;
 800152e:	3c01      	subs	r4, #1
 8001530:	b2e2      	uxtb	r2, r4
 8001532:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001534:	2a00      	cmp	r2, #0
 8001536:	d00e      	beq.n	8001556 <vQueueWaitForMessageRestricted+0x6e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001538:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <vQueueWaitForMessageRestricted+0x6e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800153e:	0030      	movs	r0, r6
 8001540:	f000 fec0 	bl	80022c4 <xTaskRemoveFromEventList>
 8001544:	2800      	cmp	r0, #0
 8001546:	d0f2      	beq.n	800152e <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8001548:	3c01      	subs	r4, #1
 800154a:	f000 ff95 	bl	8002478 <vTaskMissedYield>
			--cTxLock;
 800154e:	b2e2      	uxtb	r2, r4
 8001550:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001552:	2a00      	cmp	r2, #0
 8001554:	d1f0      	bne.n	8001538 <vQueueWaitForMessageRestricted+0x50>
		pxQueue->cTxLock = queueUNLOCKED;
 8001556:	2345      	movs	r3, #69	; 0x45
 8001558:	22ff      	movs	r2, #255	; 0xff
 800155a:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 800155c:	f001 fb4a 	bl	8002bf4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001560:	f001 fb3c 	bl	8002bdc <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001564:	2344      	movs	r3, #68	; 0x44
 8001566:	5cec      	ldrb	r4, [r5, r3]
 8001568:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800156a:	2c00      	cmp	r4, #0
 800156c:	dd16      	ble.n	800159c <vQueueWaitForMessageRestricted+0xb4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800156e:	002e      	movs	r6, r5
 8001570:	3610      	adds	r6, #16
 8001572:	e004      	b.n	800157e <vQueueWaitForMessageRestricted+0x96>
				--cRxLock;
 8001574:	3c01      	subs	r4, #1
 8001576:	b2e2      	uxtb	r2, r4
 8001578:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800157a:	2a00      	cmp	r2, #0
 800157c:	d00e      	beq.n	800159c <vQueueWaitForMessageRestricted+0xb4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800157e:	692b      	ldr	r3, [r5, #16]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00b      	beq.n	800159c <vQueueWaitForMessageRestricted+0xb4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001584:	0030      	movs	r0, r6
 8001586:	f000 fe9d 	bl	80022c4 <xTaskRemoveFromEventList>
 800158a:	2800      	cmp	r0, #0
 800158c:	d0f2      	beq.n	8001574 <vQueueWaitForMessageRestricted+0x8c>
					vTaskMissedYield();
 800158e:	3c01      	subs	r4, #1
 8001590:	f000 ff72 	bl	8002478 <vTaskMissedYield>
				--cRxLock;
 8001594:	b2e2      	uxtb	r2, r4
 8001596:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001598:	2a00      	cmp	r2, #0
 800159a:	d1f0      	bne.n	800157e <vQueueWaitForMessageRestricted+0x96>
		pxQueue->cRxLock = queueUNLOCKED;
 800159c:	2344      	movs	r3, #68	; 0x44
 800159e:	22ff      	movs	r2, #255	; 0xff
 80015a0:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 80015a2:	f001 fb27 	bl	8002bf4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 80015a6:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80015a8:	0028      	movs	r0, r5
 80015aa:	0032      	movs	r2, r6
 80015ac:	0021      	movs	r1, r4
 80015ae:	3024      	adds	r0, #36	; 0x24
 80015b0:	f000 fe1c 	bl	80021ec <vTaskPlaceOnEventListRestricted>
 80015b4:	e7b1      	b.n	800151a <vQueueWaitForMessageRestricted+0x32>
 80015b6:	46c0      	nop			; (mov r8, r8)

080015b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ba:	46c6      	mov	lr, r8
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <prvIdleTask+0x50>)
 80015be:	b500      	push	{lr}
 80015c0:	4698      	mov	r8, r3
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80015c2:	4d12      	ldr	r5, [pc, #72]	; (800160c <prvIdleTask+0x54>)
 80015c4:	4f12      	ldr	r7, [pc, #72]	; (8001610 <prvIdleTask+0x58>)
 80015c6:	4e13      	ldr	r6, [pc, #76]	; (8001614 <prvIdleTask+0x5c>)
 80015c8:	e014      	b.n	80015f4 <prvIdleTask+0x3c>
		{
			taskENTER_CRITICAL();
 80015ca:	f001 fb07 	bl	8002bdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015d2:	1d20      	adds	r0, r4, #4
 80015d4:	f7fe ff2c 	bl	8000430 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80015d8:	6833      	ldr	r3, [r6, #0]
 80015da:	3b01      	subs	r3, #1
 80015dc:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80015de:	682b      	ldr	r3, [r5, #0]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 80015e4:	f001 fb06 	bl	8002bf4 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80015e8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80015ea:	f001 fb77 	bl	8002cdc <vPortFree>
			vPortFree( pxTCB );
 80015ee:	0020      	movs	r0, r4
 80015f0:	f001 fb74 	bl	8002cdc <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80015f4:	682b      	ldr	r3, [r5, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1e7      	bne.n	80015ca <prvIdleTask+0x12>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80015fa:	4643      	mov	r3, r8
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d9f8      	bls.n	80015f4 <prvIdleTask+0x3c>
				taskYIELD();
 8001602:	f001 fadf 	bl	8002bc4 <vPortYield>
 8001606:	e7f5      	b.n	80015f4 <prvIdleTask+0x3c>
 8001608:	20000038 	.word	0x20000038
 800160c:	200000a0 	.word	0x200000a0
 8001610:	20000114 	.word	0x20000114
 8001614:	2000009c 	.word	0x2000009c

08001618 <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 8001618:	2200      	movs	r2, #0
 800161a:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <vTaskSwitchContext.part.0+0xd0>)
void vTaskSwitchContext( void )
 800161c:	b570      	push	{r4, r5, r6, lr}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800161e:	4c33      	ldr	r4, [pc, #204]	; (80016ec <vTaskSwitchContext.part.0+0xd4>)
		xYieldPending = pdFALSE;
 8001620:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001622:	6822      	ldr	r2, [r4, #0]
 8001624:	4932      	ldr	r1, [pc, #200]	; (80016f0 <vTaskSwitchContext.part.0+0xd8>)
 8001626:	0093      	lsls	r3, r2, #2
 8001628:	1898      	adds	r0, r3, r2
 800162a:	0080      	lsls	r0, r0, #2
 800162c:	5808      	ldr	r0, [r1, r0]
 800162e:	2800      	cmp	r0, #0
 8001630:	d12f      	bne.n	8001692 <vTaskSwitchContext.part.0+0x7a>
 8001632:	2a00      	cmp	r2, #0
 8001634:	d02a      	beq.n	800168c <vTaskSwitchContext.part.0+0x74>
 8001636:	1e50      	subs	r0, r2, #1
 8001638:	0083      	lsls	r3, r0, #2
 800163a:	181d      	adds	r5, r3, r0
 800163c:	00ad      	lsls	r5, r5, #2
 800163e:	594d      	ldr	r5, [r1, r5]
 8001640:	2d00      	cmp	r5, #0
 8001642:	d125      	bne.n	8001690 <vTaskSwitchContext.part.0+0x78>
 8001644:	2800      	cmp	r0, #0
 8001646:	d021      	beq.n	800168c <vTaskSwitchContext.part.0+0x74>
 8001648:	1e90      	subs	r0, r2, #2
 800164a:	0083      	lsls	r3, r0, #2
 800164c:	181d      	adds	r5, r3, r0
 800164e:	00ad      	lsls	r5, r5, #2
 8001650:	594d      	ldr	r5, [r1, r5]
 8001652:	2d00      	cmp	r5, #0
 8001654:	d11c      	bne.n	8001690 <vTaskSwitchContext.part.0+0x78>
 8001656:	2800      	cmp	r0, #0
 8001658:	d018      	beq.n	800168c <vTaskSwitchContext.part.0+0x74>
 800165a:	1ed0      	subs	r0, r2, #3
 800165c:	0083      	lsls	r3, r0, #2
 800165e:	181d      	adds	r5, r3, r0
 8001660:	00ad      	lsls	r5, r5, #2
 8001662:	594d      	ldr	r5, [r1, r5]
 8001664:	2d00      	cmp	r5, #0
 8001666:	d113      	bne.n	8001690 <vTaskSwitchContext.part.0+0x78>
 8001668:	2800      	cmp	r0, #0
 800166a:	d00f      	beq.n	800168c <vTaskSwitchContext.part.0+0x74>
 800166c:	1f10      	subs	r0, r2, #4
 800166e:	0083      	lsls	r3, r0, #2
 8001670:	181d      	adds	r5, r3, r0
 8001672:	00ad      	lsls	r5, r5, #2
 8001674:	594d      	ldr	r5, [r1, r5]
 8001676:	2d00      	cmp	r5, #0
 8001678:	d10a      	bne.n	8001690 <vTaskSwitchContext.part.0+0x78>
 800167a:	2800      	cmp	r0, #0
 800167c:	d006      	beq.n	800168c <vTaskSwitchContext.part.0+0x74>
 800167e:	3a05      	subs	r2, #5
 8001680:	0093      	lsls	r3, r2, #2
 8001682:	1898      	adds	r0, r3, r2
 8001684:	0080      	lsls	r0, r0, #2
 8001686:	5808      	ldr	r0, [r1, r0]
 8001688:	2800      	cmp	r0, #0
 800168a:	d102      	bne.n	8001692 <vTaskSwitchContext.part.0+0x7a>
 800168c:	b672      	cpsid	i
 800168e:	e7fe      	b.n	800168e <vTaskSwitchContext.part.0+0x76>
 8001690:	0002      	movs	r2, r0
 8001692:	189b      	adds	r3, r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	18cd      	adds	r5, r1, r3
 8001698:	6868      	ldr	r0, [r5, #4]
 800169a:	3308      	adds	r3, #8
 800169c:	6840      	ldr	r0, [r0, #4]
 800169e:	18c9      	adds	r1, r1, r3
 80016a0:	6068      	str	r0, [r5, #4]
 80016a2:	4288      	cmp	r0, r1
 80016a4:	d01d      	beq.n	80016e2 <vTaskSwitchContext.part.0+0xca>
 80016a6:	68c3      	ldr	r3, [r0, #12]
 80016a8:	4d12      	ldr	r5, [pc, #72]	; (80016f4 <vTaskSwitchContext.part.0+0xdc>)
 80016aa:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
 80016ac:	2301      	movs	r3, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016ae:	6022      	str	r2, [r4, #0]
		traceTASK_SWITCHED_IN();
 80016b0:	4c11      	ldr	r4, [pc, #68]	; (80016f8 <vTaskSwitchContext.part.0+0xe0>)
 80016b2:	6023      	str	r3, [r4, #0]
 80016b4:	f001 fee6 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 80016b8:	f001 fe30 	bl	800331c <prvTraceGetTaskNumberHigh16>
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <vTaskSwitchContext.part.0+0xe4>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	4203      	tst	r3, r0
 80016c2:	d102      	bne.n	80016ca <vTaskSwitchContext.part.0+0xb2>
 80016c4:	2302      	movs	r3, #2
 80016c6:	6023      	str	r3, [r4, #0]
}
 80016c8:	bd70      	pop	{r4, r5, r6, pc}
		traceTASK_SWITCHED_IN();
 80016ca:	6828      	ldr	r0, [r5, #0]
 80016cc:	f001 fede 	bl	800348c <prvIsNewTCB>
 80016d0:	2800      	cmp	r0, #0
 80016d2:	d0f7      	beq.n	80016c4 <vTaskSwitchContext.part.0+0xac>
 80016d4:	6829      	ldr	r1, [r5, #0]
 80016d6:	682b      	ldr	r3, [r5, #0]
 80016d8:	2037      	movs	r0, #55	; 0x37
 80016da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016dc:	f002 f97e 	bl	80039dc <prvTraceStoreEvent2>
 80016e0:	e7f0      	b.n	80016c4 <vTaskSwitchContext.part.0+0xac>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016e2:	6840      	ldr	r0, [r0, #4]
 80016e4:	6068      	str	r0, [r5, #4]
 80016e6:	e7de      	b.n	80016a6 <vTaskSwitchContext.part.0+0x8e>
 80016e8:	2000012c 	.word	0x2000012c
 80016ec:	200000b0 	.word	0x200000b0
 80016f0:	20000038 	.word	0x20000038
 80016f4:	2000002c 	.word	0x2000002c
 80016f8:	20003898 	.word	0x20003898
 80016fc:	20000006 	.word	0x20000006

08001700 <xTaskCreate>:
	{
 8001700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001702:	464e      	mov	r6, r9
 8001704:	4645      	mov	r5, r8
 8001706:	46de      	mov	lr, fp
 8001708:	4657      	mov	r7, sl
 800170a:	b5e0      	push	{r5, r6, r7, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800170c:	0096      	lsls	r6, r2, #2
	{
 800170e:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001710:	0030      	movs	r0, r6
	{
 8001712:	000d      	movs	r5, r1
 8001714:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001716:	f001 fab7 	bl	8002c88 <pvPortMalloc>
 800171a:	1e07      	subs	r7, r0, #0
			if( pxStack != NULL )
 800171c:	d100      	bne.n	8001720 <xTaskCreate+0x20>
 800171e:	e0cd      	b.n	80018bc <xTaskCreate+0x1bc>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001720:	2058      	movs	r0, #88	; 0x58
 8001722:	f001 fab1 	bl	8002c88 <pvPortMalloc>
 8001726:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 8001728:	d100      	bne.n	800172c <xTaskCreate+0x2c>
 800172a:	e0de      	b.n	80018ea <xTaskCreate+0x1ea>
					pxNewTCB->pxStack = pxStack;
 800172c:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800172e:	0032      	movs	r2, r6
 8001730:	21a5      	movs	r1, #165	; 0xa5
 8001732:	0038      	movs	r0, r7
 8001734:	f003 fd3a 	bl	80051ac <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001738:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800173a:	469a      	mov	sl, r3
	if( pcName != NULL )
 800173c:	2d00      	cmp	r5, #0
 800173e:	d100      	bne.n	8001742 <xTaskCreate+0x42>
 8001740:	e0e1      	b.n	8001906 <xTaskCreate+0x206>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001742:	2234      	movs	r2, #52	; 0x34
 8001744:	782b      	ldrb	r3, [r5, #0]
 8001746:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 8001748:	2b00      	cmp	r3, #0
 800174a:	d02a      	beq.n	80017a2 <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800174c:	786b      	ldrb	r3, [r5, #1]
 800174e:	3201      	adds	r2, #1
 8001750:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 8001752:	2b00      	cmp	r3, #0
 8001754:	d025      	beq.n	80017a2 <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001756:	78ab      	ldrb	r3, [r5, #2]
 8001758:	3201      	adds	r2, #1
 800175a:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001760:	78eb      	ldrb	r3, [r5, #3]
 8001762:	3201      	adds	r2, #1
 8001764:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 8001766:	2b00      	cmp	r3, #0
 8001768:	d01b      	beq.n	80017a2 <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800176a:	792b      	ldrb	r3, [r5, #4]
 800176c:	3201      	adds	r2, #1
 800176e:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 8001770:	2b00      	cmp	r3, #0
 8001772:	d016      	beq.n	80017a2 <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001774:	796b      	ldrb	r3, [r5, #5]
 8001776:	3201      	adds	r2, #1
 8001778:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 800177a:	2b00      	cmp	r3, #0
 800177c:	d011      	beq.n	80017a2 <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800177e:	79ab      	ldrb	r3, [r5, #6]
 8001780:	3201      	adds	r2, #1
 8001782:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00c      	beq.n	80017a2 <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001788:	79eb      	ldrb	r3, [r5, #7]
 800178a:	3201      	adds	r2, #1
 800178c:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001792:	7a2b      	ldrb	r3, [r5, #8]
 8001794:	3201      	adds	r2, #1
 8001796:	54a3      	strb	r3, [r4, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <xTaskCreate+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800179c:	233d      	movs	r3, #61	; 0x3d
 800179e:	7a6a      	ldrb	r2, [r5, #9]
 80017a0:	54e2      	strb	r2, [r4, r3]
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80017a2:	233d      	movs	r3, #61	; 0x3d
 80017a4:	2200      	movs	r2, #0
 80017a6:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80017a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80017aa:	2f04      	cmp	r7, #4
 80017ac:	d900      	bls.n	80017b0 <xTaskCreate+0xb0>
 80017ae:	e088      	b.n	80018c2 <xTaskCreate+0x1c2>
		pxNewTCB->uxMutexesHeld = 0;
 80017b0:	2300      	movs	r3, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80017b2:	1d25      	adds	r5, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80017b4:	64e3      	str	r3, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80017b6:	0028      	movs	r0, r5
	pxNewTCB->uxPriority = uxPriority;
 80017b8:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80017ba:	64a7      	str	r7, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80017bc:	469b      	mov	fp, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80017be:	f7fe fe0f 	bl	80003e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80017c2:	0020      	movs	r0, r4
 80017c4:	3018      	adds	r0, #24
 80017c6:	f7fe fe0b 	bl	80003e0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017ca:	2305      	movs	r3, #5
 80017cc:	1bdb      	subs	r3, r3, r7
 80017ce:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 80017d0:	465b      	mov	r3, fp
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80017d2:	465a      	mov	r2, fp
		pxNewTCB->ulNotifiedValue = 0;
 80017d4:	6523      	str	r3, [r4, #80]	; 0x50
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80017d6:	1f30      	subs	r0, r6, #4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80017d8:	3354      	adds	r3, #84	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80017da:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80017dc:	6264      	str	r4, [r4, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80017de:	4450      	add	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80017e0:	54e2      	strb	r2, [r4, r3]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80017e2:	3b4d      	subs	r3, #77	; 0x4d
 80017e4:	4398      	bics	r0, r3
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80017e6:	464a      	mov	r2, r9
 80017e8:	4641      	mov	r1, r8
 80017ea:	f001 f9a3 	bl	8002b34 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 80017ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80017f0:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d000      	beq.n	80017f8 <xTaskCreate+0xf8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80017f6:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 80017f8:	f001 f9f0 	bl	8002bdc <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80017fc:	4a58      	ldr	r2, [pc, #352]	; (8001960 <xTaskCreate+0x260>)
		if( pxCurrentTCB == NULL )
 80017fe:	4f59      	ldr	r7, [pc, #356]	; (8001964 <xTaskCreate+0x264>)
		uxCurrentNumberOfTasks++;
 8001800:	6813      	ldr	r3, [r2, #0]
 8001802:	3301      	adds	r3, #1
 8001804:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d100      	bne.n	800180e <xTaskCreate+0x10e>
 800180c:	e073      	b.n	80018f6 <xTaskCreate+0x1f6>
			if( xSchedulerRunning == pdFALSE )
 800180e:	4b56      	ldr	r3, [pc, #344]	; (8001968 <xTaskCreate+0x268>)
 8001810:	4698      	mov	r8, r3
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d105      	bne.n	8001824 <xTaskCreate+0x124>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800181e:	429a      	cmp	r2, r3
 8001820:	d800      	bhi.n	8001824 <xTaskCreate+0x124>
					pxCurrentTCB = pxNewTCB;
 8001822:	603c      	str	r4, [r7, #0]
 8001824:	4e51      	ldr	r6, [pc, #324]	; (800196c <xTaskCreate+0x26c>)
		uxTaskNumber++;
 8001826:	4a52      	ldr	r2, [pc, #328]	; (8001970 <xTaskCreate+0x270>)
		traceTASK_CREATE( pxNewTCB );
 8001828:	0020      	movs	r0, r4
		uxTaskNumber++;
 800182a:	6813      	ldr	r3, [r2, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001830:	6423      	str	r3, [r4, #64]	; 0x40
		traceTASK_CREATE( pxNewTCB );
 8001832:	2334      	movs	r3, #52	; 0x34
 8001834:	4699      	mov	r9, r3
 8001836:	44a1      	add	r9, r4
 8001838:	4649      	mov	r1, r9
 800183a:	f002 f9b7 	bl	8003bac <prvTraceSaveObjectSymbol>
 800183e:	0020      	movs	r0, r4
 8001840:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001842:	f002 fa29 	bl	8003c98 <prvTraceSaveObjectData>
 8001846:	464a      	mov	r2, r9
 8001848:	0023      	movs	r3, r4
 800184a:	2103      	movs	r1, #3
 800184c:	2001      	movs	r0, #1
 800184e:	f001 ff4d 	bl	80036ec <prvTraceStoreStringEvent>
 8001852:	4b48      	ldr	r3, [pc, #288]	; (8001974 <xTaskCreate+0x274>)
 8001854:	0020      	movs	r0, r4
 8001856:	8819      	ldrh	r1, [r3, #0]
 8001858:	f001 fd66 	bl	8003328 <prvTraceSetTaskNumberHigh16>
 800185c:	f001 fe12 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8001860:	f001 fd5c 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8001864:	4b44      	ldr	r3, [pc, #272]	; (8001978 <xTaskCreate+0x278>)
 8001866:	4699      	mov	r9, r3
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	4203      	tst	r3, r0
 800186c:	d130      	bne.n	80018d0 <xTaskCreate+0x1d0>
		prvAddTaskToReadyList( pxNewTCB );
 800186e:	0020      	movs	r0, r4
 8001870:	f001 fd54 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8001874:	464b      	mov	r3, r9
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	4203      	tst	r3, r0
 800187a:	d124      	bne.n	80018c6 <xTaskCreate+0x1c6>
 800187c:	4b3f      	ldr	r3, [pc, #252]	; (800197c <xTaskCreate+0x27c>)
 800187e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001880:	6819      	ldr	r1, [r3, #0]
 8001882:	428a      	cmp	r2, r1
 8001884:	d900      	bls.n	8001888 <xTaskCreate+0x188>
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	0093      	lsls	r3, r2, #2
 800188a:	189b      	adds	r3, r3, r2
 800188c:	0098      	lsls	r0, r3, #2
 800188e:	0029      	movs	r1, r5
 8001890:	1830      	adds	r0, r6, r0
 8001892:	f7fe fda9 	bl	80003e8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001896:	f001 f9ad 	bl	8002bf4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800189a:	4643      	mov	r3, r8
 800189c:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800189e:	2501      	movs	r5, #1
	if( xSchedulerRunning != pdFALSE )
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <xTaskCreate+0x1ae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d32e      	bcc.n	800190c <xTaskCreate+0x20c>
	}
 80018ae:	0028      	movs	r0, r5
 80018b0:	bcf0      	pop	{r4, r5, r6, r7}
 80018b2:	46bb      	mov	fp, r7
 80018b4:	46b2      	mov	sl, r6
 80018b6:	46a9      	mov	r9, r5
 80018b8:	46a0      	mov	r8, r4
 80018ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80018bc:	2501      	movs	r5, #1
 80018be:	426d      	negs	r5, r5
 80018c0:	e7f5      	b.n	80018ae <xTaskCreate+0x1ae>
 80018c2:	2704      	movs	r7, #4
 80018c4:	e774      	b.n	80017b0 <xTaskCreate+0xb0>
		prvAddTaskToReadyList( pxNewTCB );
 80018c6:	0021      	movs	r1, r4
 80018c8:	2030      	movs	r0, #48	; 0x30
 80018ca:	f002 f81b 	bl	8003904 <prvTraceStoreEvent1>
 80018ce:	e7d5      	b.n	800187c <xTaskCreate+0x17c>
		traceTASK_CREATE( pxNewTCB );
 80018d0:	0020      	movs	r0, r4
 80018d2:	f001 fd23 	bl	800331c <prvTraceGetTaskNumberHigh16>
 80018d6:	464b      	mov	r3, r9
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	4203      	tst	r3, r0
 80018dc:	d0c7      	beq.n	800186e <xTaskCreate+0x16e>
 80018de:	0021      	movs	r1, r4
 80018e0:	2010      	movs	r0, #16
 80018e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018e4:	f002 f87a 	bl	80039dc <prvTraceStoreEvent2>
 80018e8:	e7c1      	b.n	800186e <xTaskCreate+0x16e>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80018ea:	2501      	movs	r5, #1
					vPortFree( pxStack );
 80018ec:	0038      	movs	r0, r7
 80018ee:	f001 f9f5 	bl	8002cdc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80018f2:	426d      	negs	r5, r5
 80018f4:	e7db      	b.n	80018ae <xTaskCreate+0x1ae>
			pxCurrentTCB = pxNewTCB;
 80018f6:	603c      	str	r4, [r7, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80018f8:	6813      	ldr	r3, [r2, #0]
 80018fa:	4e1c      	ldr	r6, [pc, #112]	; (800196c <xTaskCreate+0x26c>)
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d008      	beq.n	8001912 <xTaskCreate+0x212>
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <xTaskCreate+0x268>)
 8001902:	4698      	mov	r8, r3
}
 8001904:	e78f      	b.n	8001826 <xTaskCreate+0x126>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001906:	2334      	movs	r3, #52	; 0x34
 8001908:	54e5      	strb	r5, [r4, r3]
 800190a:	e74d      	b.n	80017a8 <xTaskCreate+0xa8>
			taskYIELD_IF_USING_PREEMPTION();
 800190c:	f001 f95a 	bl	8002bc4 <vPortYield>
 8001910:	e7cd      	b.n	80018ae <xTaskCreate+0x1ae>
 8001912:	2364      	movs	r3, #100	; 0x64
 8001914:	4699      	mov	r9, r3
 8001916:	46b0      	mov	r8, r6
 8001918:	44b1      	add	r9, r6
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800191a:	4640      	mov	r0, r8
 800191c:	f7fe fd54 	bl	80003c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001920:	2314      	movs	r3, #20
 8001922:	469c      	mov	ip, r3
 8001924:	44e0      	add	r8, ip
 8001926:	45c1      	cmp	r9, r8
 8001928:	d1f7      	bne.n	800191a <xTaskCreate+0x21a>
	vListInitialise( &xDelayedTaskList1 );
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <xTaskCreate+0x280>)
 800192c:	4699      	mov	r9, r3
 800192e:	0018      	movs	r0, r3
 8001930:	f7fe fd4a 	bl	80003c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <xTaskCreate+0x284>)
 8001936:	0018      	movs	r0, r3
 8001938:	4698      	mov	r8, r3
 800193a:	f7fe fd45 	bl	80003c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800193e:	4812      	ldr	r0, [pc, #72]	; (8001988 <xTaskCreate+0x288>)
 8001940:	f7fe fd42 	bl	80003c8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001944:	4811      	ldr	r0, [pc, #68]	; (800198c <xTaskCreate+0x28c>)
 8001946:	f7fe fd3f 	bl	80003c8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800194a:	4811      	ldr	r0, [pc, #68]	; (8001990 <xTaskCreate+0x290>)
 800194c:	f7fe fd3c 	bl	80003c8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001950:	464a      	mov	r2, r9
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <xTaskCreate+0x294>)
 8001954:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001956:	4642      	mov	r2, r8
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <xTaskCreate+0x298>)
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e7d0      	b.n	8001900 <xTaskCreate+0x200>
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	2000009c 	.word	0x2000009c
 8001964:	2000002c 	.word	0x2000002c
 8001968:	200000fc 	.word	0x200000fc
 800196c:	20000038 	.word	0x20000038
 8001970:	200000ac 	.word	0x200000ac
 8001974:	20000004 	.word	0x20000004
 8001978:	20000006 	.word	0x20000006
 800197c:	200000b0 	.word	0x200000b0
 8001980:	200000b4 	.word	0x200000b4
 8001984:	200000c8 	.word	0x200000c8
 8001988:	200000e8 	.word	0x200000e8
 800198c:	20000114 	.word	0x20000114
 8001990:	20000100 	.word	0x20000100
 8001994:	20000030 	.word	0x20000030
 8001998:	20000034 	.word	0x20000034

0800199c <vTaskStartScheduler>:
{
 800199c:	b5f0      	push	{r4, r5, r6, r7, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800199e:	208c      	movs	r0, #140	; 0x8c
{
 80019a0:	46d6      	mov	lr, sl
 80019a2:	464f      	mov	r7, r9
 80019a4:	4646      	mov	r6, r8
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80019a6:	0040      	lsls	r0, r0, #1
{
 80019a8:	b5c0      	push	{r6, r7, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80019aa:	f001 f96d 	bl	8002c88 <pvPortMalloc>
 80019ae:	1e05      	subs	r5, r0, #0
			if( pxStack != NULL )
 80019b0:	d100      	bne.n	80019b4 <vTaskStartScheduler+0x18>
 80019b2:	e098      	b.n	8001ae6 <vTaskStartScheduler+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80019b4:	2058      	movs	r0, #88	; 0x58
 80019b6:	f001 f967 	bl	8002c88 <pvPortMalloc>
 80019ba:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 80019bc:	d100      	bne.n	80019c0 <vTaskStartScheduler+0x24>
 80019be:	e08f      	b.n	8001ae0 <vTaskStartScheduler+0x144>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80019c0:	228c      	movs	r2, #140	; 0x8c
 80019c2:	21a5      	movs	r1, #165	; 0xa5
 80019c4:	0052      	lsls	r2, r2, #1
					pxNewTCB->pxStack = pxStack;
 80019c6:	6305      	str	r5, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80019c8:	0028      	movs	r0, r5
 80019ca:	f003 fbef 	bl	80051ac <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80019ce:	2334      	movs	r3, #52	; 0x34
 80019d0:	4698      	mov	r8, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80019d2:	4b7a      	ldr	r3, [pc, #488]	; (8001bbc <vTaskStartScheduler+0x220>)
 80019d4:	2500      	movs	r5, #0
 80019d6:	6363      	str	r3, [r4, #52]	; 0x34
 80019d8:	2338      	movs	r3, #56	; 0x38
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80019da:	6b26      	ldr	r6, [r4, #48]	; 0x30
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80019dc:	1d27      	adds	r7, r4, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80019de:	54e5      	strb	r5, [r4, r3]
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80019e0:	3305      	adds	r3, #5
 80019e2:	54e5      	strb	r5, [r4, r3]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80019e4:	0038      	movs	r0, r7
	pxNewTCB->uxPriority = uxPriority;
 80019e6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80019e8:	64a5      	str	r5, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80019ea:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80019ec:	f7fe fcf8 	bl	80003e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80019f0:	0020      	movs	r0, r4
 80019f2:	3018      	adds	r0, #24
 80019f4:	f7fe fcf4 	bl	80003e0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019f8:	2305      	movs	r3, #5
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80019fa:	0030      	movs	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019fc:	61a3      	str	r3, [r4, #24]
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80019fe:	3015      	adds	r0, #21
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001a00:	334f      	adds	r3, #79	; 0x4f
		pxNewTCB->ulNotifiedValue = 0;
 8001a02:	6525      	str	r5, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a04:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a06:	6264      	str	r4, [r4, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001a08:	30ff      	adds	r0, #255	; 0xff
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001a0a:	54e5      	strb	r5, [r4, r3]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001a0c:	3b4d      	subs	r3, #77	; 0x4d
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a0e:	2200      	movs	r2, #0
 8001a10:	496b      	ldr	r1, [pc, #428]	; (8001bc0 <vTaskStartScheduler+0x224>)
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001a12:	4398      	bics	r0, r3
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a14:	f001 f88e 	bl	8002b34 <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a18:	4b6a      	ldr	r3, [pc, #424]	; (8001bc4 <vTaskStartScheduler+0x228>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a1a:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a1c:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8001a1e:	f001 f8dd 	bl	8002bdc <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001a22:	4a69      	ldr	r2, [pc, #420]	; (8001bc8 <vTaskStartScheduler+0x22c>)
		if( pxCurrentTCB == NULL )
 8001a24:	4d69      	ldr	r5, [pc, #420]	; (8001bcc <vTaskStartScheduler+0x230>)
		uxCurrentNumberOfTasks++;
 8001a26:	6813      	ldr	r3, [r2, #0]
 8001a28:	44a0      	add	r8, r4
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001a2e:	682b      	ldr	r3, [r5, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d100      	bne.n	8001a36 <vTaskStartScheduler+0x9a>
 8001a34:	e091      	b.n	8001b5a <vTaskStartScheduler+0x1be>
			if( xSchedulerRunning == pdFALSE )
 8001a36:	4e66      	ldr	r6, [pc, #408]	; (8001bd0 <vTaskStartScheduler+0x234>)
 8001a38:	6833      	ldr	r3, [r6, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d105      	bne.n	8001a4a <vTaskStartScheduler+0xae>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001a3e:	682b      	ldr	r3, [r5, #0]
 8001a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d800      	bhi.n	8001a4a <vTaskStartScheduler+0xae>
					pxCurrentTCB = pxNewTCB;
 8001a48:	602c      	str	r4, [r5, #0]
 8001a4a:	4b62      	ldr	r3, [pc, #392]	; (8001bd4 <vTaskStartScheduler+0x238>)
 8001a4c:	4699      	mov	r9, r3
		uxTaskNumber++;
 8001a4e:	4a62      	ldr	r2, [pc, #392]	; (8001bd8 <vTaskStartScheduler+0x23c>)
		traceTASK_CREATE( pxNewTCB );
 8001a50:	4641      	mov	r1, r8
		uxTaskNumber++;
 8001a52:	6813      	ldr	r3, [r2, #0]
		traceTASK_CREATE( pxNewTCB );
 8001a54:	0020      	movs	r0, r4
		uxTaskNumber++;
 8001a56:	3301      	adds	r3, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001a58:	6423      	str	r3, [r4, #64]	; 0x40
		uxTaskNumber++;
 8001a5a:	6013      	str	r3, [r2, #0]
		traceTASK_CREATE( pxNewTCB );
 8001a5c:	f002 f8a6 	bl	8003bac <prvTraceSaveObjectSymbol>
 8001a60:	0020      	movs	r0, r4
 8001a62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001a64:	f002 f918 	bl	8003c98 <prvTraceSaveObjectData>
 8001a68:	4642      	mov	r2, r8
 8001a6a:	0023      	movs	r3, r4
 8001a6c:	2103      	movs	r1, #3
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f001 fe3c 	bl	80036ec <prvTraceStoreStringEvent>
 8001a74:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <vTaskStartScheduler+0x240>)
 8001a76:	0020      	movs	r0, r4
 8001a78:	8819      	ldrh	r1, [r3, #0]
 8001a7a:	f001 fc55 	bl	8003328 <prvTraceSetTaskNumberHigh16>
 8001a7e:	f001 fd01 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8001a82:	f001 fc4b 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8001a86:	4b56      	ldr	r3, [pc, #344]	; (8001be0 <vTaskStartScheduler+0x244>)
 8001a88:	4698      	mov	r8, r3
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	4203      	tst	r3, r0
 8001a8e:	d14b      	bne.n	8001b28 <vTaskStartScheduler+0x18c>
		prvAddTaskToReadyList( pxNewTCB );
 8001a90:	0020      	movs	r0, r4
 8001a92:	f001 fc43 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8001a96:	4643      	mov	r3, r8
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	4203      	tst	r3, r0
 8001a9c:	d13f      	bne.n	8001b1e <vTaskStartScheduler+0x182>
 8001a9e:	4b51      	ldr	r3, [pc, #324]	; (8001be4 <vTaskStartScheduler+0x248>)
 8001aa0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	428a      	cmp	r2, r1
 8001aa6:	d838      	bhi.n	8001b1a <vTaskStartScheduler+0x17e>
 8001aa8:	0093      	lsls	r3, r2, #2
 8001aaa:	189b      	adds	r3, r3, r2
 8001aac:	0098      	lsls	r0, r3, #2
 8001aae:	0039      	movs	r1, r7
 8001ab0:	4448      	add	r0, r9
 8001ab2:	f7fe fc99 	bl	80003e8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001ab6:	f001 f89d 	bl	8002bf4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001aba:	6833      	ldr	r3, [r6, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <vTaskStartScheduler+0x12e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001ac0:	682b      	ldr	r3, [r5, #0]
 8001ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d34f      	bcc.n	8001b6a <vTaskStartScheduler+0x1ce>
			xReturn = xTimerCreateTimerTask();
 8001aca:	f000 ffc3 	bl	8002a54 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8001ace:	2801      	cmp	r0, #1
 8001ad0:	d00b      	beq.n	8001aea <vTaskStartScheduler+0x14e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ad2:	3001      	adds	r0, #1
 8001ad4:	d007      	beq.n	8001ae6 <vTaskStartScheduler+0x14a>
}
 8001ad6:	bce0      	pop	{r5, r6, r7}
 8001ad8:	46ba      	mov	sl, r7
 8001ada:	46b1      	mov	r9, r6
 8001adc:	46a8      	mov	r8, r5
 8001ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 8001ae0:	0028      	movs	r0, r5
 8001ae2:	f001 f8fb 	bl	8002cdc <vPortFree>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ae6:	b672      	cpsid	i
 8001ae8:	e7fe      	b.n	8001ae8 <vTaskStartScheduler+0x14c>
		portDISABLE_INTERRUPTS();
 8001aea:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8001aec:	2201      	movs	r2, #1
 8001aee:	4b3e      	ldr	r3, [pc, #248]	; (8001be8 <vTaskStartScheduler+0x24c>)
 8001af0:	4252      	negs	r2, r2
 8001af2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001af4:	2200      	movs	r2, #0
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <vTaskStartScheduler+0x250>)
		traceTASK_SWITCHED_IN();
 8001af8:	4c3d      	ldr	r4, [pc, #244]	; (8001bf0 <vTaskStartScheduler+0x254>)
		xSchedulerRunning = pdTRUE;
 8001afa:	6030      	str	r0, [r6, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001afc:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
 8001afe:	6020      	str	r0, [r4, #0]
 8001b00:	f001 fcc0 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8001b04:	f001 fc0a 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8001b08:	4643      	mov	r3, r8
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	4203      	tst	r3, r0
 8001b0e:	d118      	bne.n	8001b42 <vTaskStartScheduler+0x1a6>
 8001b10:	2302      	movs	r3, #2
 8001b12:	6023      	str	r3, [r4, #0]
		if( xPortStartScheduler() != pdFALSE )
 8001b14:	f001 f820 	bl	8002b58 <xPortStartScheduler>
 8001b18:	e7dd      	b.n	8001ad6 <vTaskStartScheduler+0x13a>
		prvAddTaskToReadyList( pxNewTCB );
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	e7c4      	b.n	8001aa8 <vTaskStartScheduler+0x10c>
 8001b1e:	0021      	movs	r1, r4
 8001b20:	2030      	movs	r0, #48	; 0x30
 8001b22:	f001 feef 	bl	8003904 <prvTraceStoreEvent1>
 8001b26:	e7ba      	b.n	8001a9e <vTaskStartScheduler+0x102>
		traceTASK_CREATE( pxNewTCB );
 8001b28:	0020      	movs	r0, r4
 8001b2a:	f001 fbf7 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8001b2e:	4643      	mov	r3, r8
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	4203      	tst	r3, r0
 8001b34:	d0ac      	beq.n	8001a90 <vTaskStartScheduler+0xf4>
 8001b36:	0021      	movs	r1, r4
 8001b38:	2010      	movs	r0, #16
 8001b3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b3c:	f001 ff4e 	bl	80039dc <prvTraceStoreEvent2>
 8001b40:	e7a6      	b.n	8001a90 <vTaskStartScheduler+0xf4>
		traceTASK_SWITCHED_IN();
 8001b42:	6828      	ldr	r0, [r5, #0]
 8001b44:	f001 fca2 	bl	800348c <prvIsNewTCB>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d0e1      	beq.n	8001b10 <vTaskStartScheduler+0x174>
 8001b4c:	6829      	ldr	r1, [r5, #0]
 8001b4e:	682b      	ldr	r3, [r5, #0]
 8001b50:	2037      	movs	r0, #55	; 0x37
 8001b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b54:	f001 ff42 	bl	80039dc <prvTraceStoreEvent2>
 8001b58:	e7da      	b.n	8001b10 <vTaskStartScheduler+0x174>
			pxCurrentTCB = pxNewTCB;
 8001b5a:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b5c:	6813      	ldr	r3, [r2, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d006      	beq.n	8001b70 <vTaskStartScheduler+0x1d4>
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <vTaskStartScheduler+0x238>)
 8001b64:	4e1a      	ldr	r6, [pc, #104]	; (8001bd0 <vTaskStartScheduler+0x234>)
 8001b66:	4699      	mov	r9, r3
 8001b68:	e771      	b.n	8001a4e <vTaskStartScheduler+0xb2>
			taskYIELD_IF_USING_PREEMPTION();
 8001b6a:	f001 f82b 	bl	8002bc4 <vPortYield>
		if( xReturn == pdPASS )
 8001b6e:	e7ac      	b.n	8001aca <vTaskStartScheduler+0x12e>
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <vTaskStartScheduler+0x238>)
 8001b72:	4699      	mov	r9, r3
 8001b74:	001e      	movs	r6, r3
 8001b76:	2364      	movs	r3, #100	; 0x64
 8001b78:	444b      	add	r3, r9
 8001b7a:	469a      	mov	sl, r3
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b7c:	0030      	movs	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b7e:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b80:	f7fe fc22 	bl	80003c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b84:	45b2      	cmp	sl, r6
 8001b86:	d1f9      	bne.n	8001b7c <vTaskStartScheduler+0x1e0>
	vListInitialise( &xDelayedTaskList1 );
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <vTaskStartScheduler+0x258>)
 8001b8a:	469a      	mov	sl, r3
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7fe fc1b 	bl	80003c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001b92:	4e19      	ldr	r6, [pc, #100]	; (8001bf8 <vTaskStartScheduler+0x25c>)
 8001b94:	0030      	movs	r0, r6
 8001b96:	f7fe fc17 	bl	80003c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001b9a:	4818      	ldr	r0, [pc, #96]	; (8001bfc <vTaskStartScheduler+0x260>)
 8001b9c:	f7fe fc14 	bl	80003c8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001ba0:	4817      	ldr	r0, [pc, #92]	; (8001c00 <vTaskStartScheduler+0x264>)
 8001ba2:	f7fe fc11 	bl	80003c8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001ba6:	4817      	ldr	r0, [pc, #92]	; (8001c04 <vTaskStartScheduler+0x268>)
 8001ba8:	f7fe fc0e 	bl	80003c8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001bac:	4652      	mov	r2, sl
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <vTaskStartScheduler+0x26c>)
 8001bb0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <vTaskStartScheduler+0x270>)
 8001bb4:	601e      	str	r6, [r3, #0]
 8001bb6:	4e06      	ldr	r6, [pc, #24]	; (8001bd0 <vTaskStartScheduler+0x234>)
}
 8001bb8:	e749      	b.n	8001a4e <vTaskStartScheduler+0xb2>
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	454c4449 	.word	0x454c4449
 8001bc0:	080015b9 	.word	0x080015b9
 8001bc4:	200000dc 	.word	0x200000dc
 8001bc8:	2000009c 	.word	0x2000009c
 8001bcc:	2000002c 	.word	0x2000002c
 8001bd0:	200000fc 	.word	0x200000fc
 8001bd4:	20000038 	.word	0x20000038
 8001bd8:	200000ac 	.word	0x200000ac
 8001bdc:	20000004 	.word	0x20000004
 8001be0:	20000006 	.word	0x20000006
 8001be4:	200000b0 	.word	0x200000b0
 8001be8:	200000e0 	.word	0x200000e0
 8001bec:	20000128 	.word	0x20000128
 8001bf0:	20003898 	.word	0x20003898
 8001bf4:	200000b4 	.word	0x200000b4
 8001bf8:	200000c8 	.word	0x200000c8
 8001bfc:	200000e8 	.word	0x200000e8
 8001c00:	20000114 	.word	0x20000114
 8001c04:	20000100 	.word	0x20000100
 8001c08:	20000030 	.word	0x20000030
 8001c0c:	20000034 	.word	0x20000034

08001c10 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001c10:	4a02      	ldr	r2, [pc, #8]	; (8001c1c <vTaskSuspendAll+0xc>)
 8001c12:	6813      	ldr	r3, [r2, #0]
 8001c14:	3301      	adds	r3, #1
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	4770      	bx	lr
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	200000a8 	.word	0x200000a8

08001c20 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8001c20:	4b01      	ldr	r3, [pc, #4]	; (8001c28 <xTaskGetTickCount+0x8>)
 8001c22:	6818      	ldr	r0, [r3, #0]
}
 8001c24:	4770      	bx	lr
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	20000128 	.word	0x20000128

08001c2c <xTaskIncrementTick>:
{
 8001c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c2e:	46de      	mov	lr, fp
 8001c30:	4657      	mov	r7, sl
 8001c32:	464e      	mov	r6, r9
 8001c34:	4645      	mov	r5, r8
 8001c36:	b5e0      	push	{r5, r6, r7, lr}
	traceTASK_INCREMENT_TICK( xTickCount );
 8001c38:	4b60      	ldr	r3, [pc, #384]	; (8001dbc <xTaskIncrementTick+0x190>)
{
 8001c3a:	b083      	sub	sp, #12
	traceTASK_INCREMENT_TICK( xTickCount );
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	2a01      	cmp	r2, #1
 8001c40:	d05d      	beq.n	8001cfe <xTaskIncrementTick+0xd2>
 8001c42:	4a5f      	ldr	r2, [pc, #380]	; (8001dc0 <xTaskIncrementTick+0x194>)
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	2a00      	cmp	r2, #0
 8001c48:	d059      	beq.n	8001cfe <xTaskIncrementTick+0xd2>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d15d      	bne.n	8001d0c <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001c50:	4b5c      	ldr	r3, [pc, #368]	; (8001dc4 <xTaskIncrementTick+0x198>)
 8001c52:	681e      	ldr	r6, [r3, #0]
 8001c54:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8001c56:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001c58:	2e00      	cmp	r6, #0
 8001c5a:	d06b      	beq.n	8001d34 <xTaskIncrementTick+0x108>
 8001c5c:	4b5a      	ldr	r3, [pc, #360]	; (8001dc8 <xTaskIncrementTick+0x19c>)
 8001c5e:	469a      	mov	sl, r3
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001c60:	4653      	mov	r3, sl
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	42b3      	cmp	r3, r6
 8001c66:	d900      	bls.n	8001c6a <xTaskIncrementTick+0x3e>
 8001c68:	e07d      	b.n	8001d66 <xTaskIncrementTick+0x13a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c6a:	4f58      	ldr	r7, [pc, #352]	; (8001dcc <xTaskIncrementTick+0x1a0>)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d100      	bne.n	8001c76 <xTaskIncrementTick+0x4a>
 8001c74:	e08c      	b.n	8001d90 <xTaskIncrementTick+0x164>
BaseType_t xSwitchRequired = pdFALSE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	4698      	mov	r8, r3
 8001c7a:	4b55      	ldr	r3, [pc, #340]	; (8001dd0 <xTaskIncrementTick+0x1a4>)
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	4b55      	ldr	r3, [pc, #340]	; (8001dd4 <xTaskIncrementTick+0x1a8>)
 8001c80:	469b      	mov	fp, r3
					prvAddTaskToReadyList( pxTCB );
 8001c82:	4b55      	ldr	r3, [pc, #340]	; (8001dd8 <xTaskIncrementTick+0x1ac>)
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	4b55      	ldr	r3, [pc, #340]	; (8001ddc <xTaskIncrementTick+0x1b0>)
 8001c88:	4699      	mov	r9, r3
 8001c8a:	e01b      	b.n	8001cc4 <xTaskIncrementTick+0x98>
 8001c8c:	464a      	mov	r2, r9
 8001c8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <xTaskIncrementTick+0x6e>
 8001c96:	464a      	mov	r2, r9
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	0098      	lsls	r0, r3, #2
 8001c9c:	18c0      	adds	r0, r0, r3
 8001c9e:	9b00      	ldr	r3, [sp, #0]
 8001ca0:	0080      	lsls	r0, r0, #2
 8001ca2:	469c      	mov	ip, r3
 8001ca4:	0029      	movs	r1, r5
 8001ca6:	4460      	add	r0, ip
 8001ca8:	f7fe fb9e 	bl	80003e8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001cac:	465b      	mov	r3, fp
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d301      	bcc.n	8001cbc <xTaskIncrementTick+0x90>
							xSwitchRequired = pdTRUE;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	4698      	mov	r8, r3
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d06b      	beq.n	8001d9c <xTaskIncrementTick+0x170>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001cca:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8001ccc:	429e      	cmp	r6, r3
 8001cce:	d36a      	bcc.n	8001da6 <xTaskIncrementTick+0x17a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cd0:	1d25      	adds	r5, r4, #4
 8001cd2:	0028      	movs	r0, r5
 8001cd4:	f7fe fbac 	bl	8000430 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001cd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001cde:	0020      	movs	r0, r4
 8001ce0:	3018      	adds	r0, #24
 8001ce2:	f7fe fba5 	bl	8000430 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001ce6:	0020      	movs	r0, r4
 8001ce8:	f001 fb18 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8001cec:	9b01      	ldr	r3, [sp, #4]
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	4203      	tst	r3, r0
 8001cf2:	d0cb      	beq.n	8001c8c <xTaskIncrementTick+0x60>
 8001cf4:	0021      	movs	r1, r4
 8001cf6:	2030      	movs	r0, #48	; 0x30
 8001cf8:	f001 fe04 	bl	8003904 <prvTraceStoreEvent1>
 8001cfc:	e7c6      	b.n	8001c8c <xTaskIncrementTick+0x60>
	traceTASK_INCREMENT_TICK( xTickCount );
 8001cfe:	4938      	ldr	r1, [pc, #224]	; (8001de0 <xTaskIncrementTick+0x1b4>)
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d00:	681b      	ldr	r3, [r3, #0]
	traceTASK_INCREMENT_TICK( xTickCount );
 8001d02:	680a      	ldr	r2, [r1, #0]
 8001d04:	3201      	adds	r2, #1
 8001d06:	600a      	str	r2, [r1, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0a1      	beq.n	8001c50 <xTaskIncrementTick+0x24>
		++uxPendedTicks;
 8001d0c:	4a2c      	ldr	r2, [pc, #176]	; (8001dc0 <xTaskIncrementTick+0x194>)
 8001d0e:	6813      	ldr	r3, [r2, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	4698      	mov	r8, r3
		if( xYieldPending != pdFALSE )
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <xTaskIncrementTick+0x1b8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <xTaskIncrementTick+0xf8>
			xSwitchRequired = pdTRUE;
 8001d20:	2301      	movs	r3, #1
 8001d22:	4698      	mov	r8, r3
}
 8001d24:	4640      	mov	r0, r8
 8001d26:	b003      	add	sp, #12
 8001d28:	bcf0      	pop	{r4, r5, r6, r7}
 8001d2a:	46bb      	mov	fp, r7
 8001d2c:	46b2      	mov	sl, r6
 8001d2e:	46a9      	mov	r9, r5
 8001d30:	46a0      	mov	r8, r4
 8001d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
			taskSWITCH_DELAYED_LISTS();
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <xTaskIncrementTick+0x1a0>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	2a00      	cmp	r2, #0
 8001d3c:	d126      	bne.n	8001d8c <xTaskIncrementTick+0x160>
 8001d3e:	4a2a      	ldr	r2, [pc, #168]	; (8001de8 <xTaskIncrementTick+0x1bc>)
 8001d40:	6819      	ldr	r1, [r3, #0]
 8001d42:	6810      	ldr	r0, [r2, #0]
 8001d44:	6018      	str	r0, [r3, #0]
 8001d46:	6011      	str	r1, [r2, #0]
 8001d48:	4928      	ldr	r1, [pc, #160]	; (8001dec <xTaskIncrementTick+0x1c0>)
 8001d4a:	680a      	ldr	r2, [r1, #0]
 8001d4c:	3201      	adds	r2, #1
 8001d4e:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	2a00      	cmp	r2, #0
 8001d56:	d129      	bne.n	8001dac <xTaskIncrementTick+0x180>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <xTaskIncrementTick+0x19c>)
 8001d5a:	469a      	mov	sl, r3
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	4652      	mov	r2, sl
 8001d60:	425b      	negs	r3, r3
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	e77c      	b.n	8001c60 <xTaskIncrementTick+0x34>
BaseType_t xSwitchRequired = pdFALSE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	4698      	mov	r8, r3
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <xTaskIncrementTick+0x1a4>)
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <xTaskIncrementTick+0x1a8>)
 8001d70:	469b      	mov	fp, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001d72:	465b      	mov	r3, fp
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d78:	0093      	lsls	r3, r2, #2
 8001d7a:	189b      	adds	r3, r3, r2
 8001d7c:	9a00      	ldr	r2, [sp, #0]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	58d3      	ldr	r3, [r2, r3]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d9c8      	bls.n	8001d18 <xTaskIncrementTick+0xec>
				xSwitchRequired = pdTRUE;
 8001d86:	2301      	movs	r3, #1
 8001d88:	4698      	mov	r8, r3
 8001d8a:	e7c5      	b.n	8001d18 <xTaskIncrementTick+0xec>
			taskSWITCH_DELAYED_LISTS();
 8001d8c:	b672      	cpsid	i
 8001d8e:	e7fe      	b.n	8001d8e <xTaskIncrementTick+0x162>
BaseType_t xSwitchRequired = pdFALSE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	4698      	mov	r8, r3
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <xTaskIncrementTick+0x1a4>)
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <xTaskIncrementTick+0x1a8>)
 8001d9a:	469b      	mov	fp, r3
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	4652      	mov	r2, sl
 8001da0:	425b      	negs	r3, r3
 8001da2:	6013      	str	r3, [r2, #0]
					break;
 8001da4:	e7e5      	b.n	8001d72 <xTaskIncrementTick+0x146>
						xNextTaskUnblockTime = xItemValue;
 8001da6:	4652      	mov	r2, sl
 8001da8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001daa:	e7e2      	b.n	8001d72 <xTaskIncrementTick+0x146>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dac:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001dae:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <xTaskIncrementTick+0x19c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001db0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001db2:	4692      	mov	sl, r2
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	6013      	str	r3, [r2, #0]
	}
}
 8001dba:	e751      	b.n	8001c60 <xTaskIncrementTick+0x34>
 8001dbc:	200000a8 	.word	0x200000a8
 8001dc0:	200000a4 	.word	0x200000a4
 8001dc4:	20000128 	.word	0x20000128
 8001dc8:	200000e0 	.word	0x200000e0
 8001dcc:	20000030 	.word	0x20000030
 8001dd0:	20000038 	.word	0x20000038
 8001dd4:	2000002c 	.word	0x2000002c
 8001dd8:	20000006 	.word	0x20000006
 8001ddc:	200000b0 	.word	0x200000b0
 8001de0:	2000389c 	.word	0x2000389c
 8001de4:	2000012c 	.word	0x2000012c
 8001de8:	20000034 	.word	0x20000034
 8001dec:	200000e4 	.word	0x200000e4

08001df0 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df2:	46de      	mov	lr, fp
 8001df4:	4657      	mov	r7, sl
 8001df6:	464e      	mov	r6, r9
 8001df8:	4645      	mov	r5, r8
 8001dfa:	b5e0      	push	{r5, r6, r7, lr}
	taskENTER_CRITICAL();
 8001dfc:	f000 feee 	bl	8002bdc <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001e00:	4b3e      	ldr	r3, [pc, #248]	; (8001efc <xTaskResumeAll.part.0+0x10c>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	3a01      	subs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d15b      	bne.n	8001ec6 <xTaskResumeAll.part.0+0xd6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e0e:	4b3c      	ldr	r3, [pc, #240]	; (8001f00 <xTaskResumeAll.part.0+0x110>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d057      	beq.n	8001ec6 <xTaskResumeAll.part.0+0xd6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e16:	4e3b      	ldr	r6, [pc, #236]	; (8001f04 <xTaskResumeAll.part.0+0x114>)
 8001e18:	6833      	ldr	r3, [r6, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d06a      	beq.n	8001ef4 <xTaskResumeAll.part.0+0x104>
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	; (8001f08 <xTaskResumeAll.part.0+0x118>)
 8001e20:	4f3a      	ldr	r7, [pc, #232]	; (8001f0c <xTaskResumeAll.part.0+0x11c>)
 8001e22:	469a      	mov	sl, r3
 8001e24:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <xTaskResumeAll.part.0+0x120>)
 8001e26:	4699      	mov	r9, r3
 8001e28:	4b3a      	ldr	r3, [pc, #232]	; (8001f14 <xTaskResumeAll.part.0+0x124>)
 8001e2a:	4698      	mov	r8, r3
 8001e2c:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <xTaskResumeAll.part.0+0x128>)
 8001e2e:	469b      	mov	fp, r3
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e30:	68f3      	ldr	r3, [r6, #12]
 8001e32:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e34:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e36:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e38:	3018      	adds	r0, #24
 8001e3a:	f7fe faf9 	bl	8000430 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e3e:	0028      	movs	r0, r5
 8001e40:	f7fe faf6 	bl	8000430 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e44:	0020      	movs	r0, r4
 8001e46:	f001 fa69 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8001e4a:	4653      	mov	r3, sl
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	4203      	tst	r3, r0
 8001e50:	d147      	bne.n	8001ee2 <xTaskResumeAll.part.0+0xf2>
 8001e52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d900      	bls.n	8001e5c <xTaskResumeAll.part.0+0x6c>
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	0098      	lsls	r0, r3, #2
 8001e5e:	18c0      	adds	r0, r0, r3
 8001e60:	0080      	lsls	r0, r0, #2
 8001e62:	0029      	movs	r1, r5
 8001e64:	4448      	add	r0, r9
 8001e66:	f7fe fabf 	bl	80003e8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e6a:	4643      	mov	r3, r8
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d331      	bcc.n	8001eda <xTaskResumeAll.part.0+0xea>
						xYieldPending = pdTRUE;
 8001e76:	465b      	mov	r3, fp
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e7c:	6833      	ldr	r3, [r6, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1d6      	bne.n	8001e30 <xTaskResumeAll.part.0+0x40>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <xTaskResumeAll.part.0+0x12c>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	2a00      	cmp	r2, #0
 8001e8a:	d02f      	beq.n	8001eec <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <xTaskResumeAll.part.0+0x130>)
 8001e96:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001e98:	4e22      	ldr	r6, [pc, #136]	; (8001f24 <xTaskResumeAll.part.0+0x134>)
 8001e9a:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001e9c:	2c00      	cmp	r4, #0
 8001e9e:	d00a      	beq.n	8001eb6 <xTaskResumeAll.part.0+0xc6>
								xYieldPending = pdTRUE;
 8001ea0:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001ea2:	f7ff fec3 	bl	8001c2c <xTaskIncrementTick>
 8001ea6:	2800      	cmp	r0, #0
 8001ea8:	d001      	beq.n	8001eae <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 8001eaa:	465b      	mov	r3, fp
 8001eac:	601d      	str	r5, [r3, #0]
							--uxPendedCounts;
 8001eae:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001eb0:	2c00      	cmp	r4, #0
 8001eb2:	d1f6      	bne.n	8001ea2 <xTaskResumeAll.part.0+0xb2>
						uxPendedTicks = 0;
 8001eb4:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8001eb6:	465b      	mov	r3, fp
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <xTaskResumeAll.part.0+0xd6>
					taskYIELD_IF_USING_PREEMPTION();
 8001ebe:	f000 fe81 	bl	8002bc4 <vPortYield>
						xAlreadyYielded = pdTRUE;
 8001ec2:	2401      	movs	r4, #1
 8001ec4:	e000      	b.n	8001ec8 <xTaskResumeAll.part.0+0xd8>
BaseType_t xAlreadyYielded = pdFALSE;
 8001ec6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001ec8:	f000 fe94 	bl	8002bf4 <vPortExitCritical>
}
 8001ecc:	0020      	movs	r0, r4
 8001ece:	bcf0      	pop	{r4, r5, r6, r7}
 8001ed0:	46bb      	mov	fp, r7
 8001ed2:	46b2      	mov	sl, r6
 8001ed4:	46a9      	mov	r9, r5
 8001ed6:	46a0      	mov	r8, r4
 8001ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001eda:	6833      	ldr	r3, [r6, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1a7      	bne.n	8001e30 <xTaskResumeAll.part.0+0x40>
 8001ee0:	e7cf      	b.n	8001e82 <xTaskResumeAll.part.0+0x92>
					prvAddTaskToReadyList( pxTCB );
 8001ee2:	0021      	movs	r1, r4
 8001ee4:	2030      	movs	r0, #48	; 0x30
 8001ee6:	f001 fd0d 	bl	8003904 <prvTraceStoreEvent1>
 8001eea:	e7b2      	b.n	8001e52 <xTaskResumeAll.part.0+0x62>
		xNextTaskUnblockTime = portMAX_DELAY;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <xTaskResumeAll.part.0+0x130>)
 8001eee:	3a01      	subs	r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	e7d1      	b.n	8001e98 <xTaskResumeAll.part.0+0xa8>
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <xTaskResumeAll.part.0+0x128>)
 8001ef6:	469b      	mov	fp, r3
 8001ef8:	e7ce      	b.n	8001e98 <xTaskResumeAll.part.0+0xa8>
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	200000a8 	.word	0x200000a8
 8001f00:	2000009c 	.word	0x2000009c
 8001f04:	200000e8 	.word	0x200000e8
 8001f08:	20000006 	.word	0x20000006
 8001f0c:	200000b0 	.word	0x200000b0
 8001f10:	20000038 	.word	0x20000038
 8001f14:	2000002c 	.word	0x2000002c
 8001f18:	2000012c 	.word	0x2000012c
 8001f1c:	20000030 	.word	0x20000030
 8001f20:	200000e0 	.word	0x200000e0
 8001f24:	200000a4 	.word	0x200000a4

08001f28 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <xTaskResumeAll+0x14>)
{
 8001f2a:	b510      	push	{r4, lr}
	configASSERT( uxSchedulerSuspended );
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <xTaskResumeAll+0xe>
 8001f32:	b672      	cpsid	i
 8001f34:	e7fe      	b.n	8001f34 <xTaskResumeAll+0xc>
 8001f36:	f7ff ff5b 	bl	8001df0 <xTaskResumeAll.part.0>
}
 8001f3a:	bd10      	pop	{r4, pc}
 8001f3c:	200000a8 	.word	0x200000a8

08001f40 <vTaskDelayUntil>:
	{
 8001f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f42:	46c6      	mov	lr, r8
 8001f44:	b500      	push	{lr}
		configASSERT( pxPreviousWakeTime );
 8001f46:	2800      	cmp	r0, #0
 8001f48:	d018      	beq.n	8001f7c <vTaskDelayUntil+0x3c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8001f4a:	2900      	cmp	r1, #0
 8001f4c:	d101      	bne.n	8001f52 <vTaskDelayUntil+0x12>
 8001f4e:	b672      	cpsid	i
 8001f50:	e7fe      	b.n	8001f50 <vTaskDelayUntil+0x10>
		configASSERT( uxSchedulerSuspended == 0 );
 8001f52:	4d2a      	ldr	r5, [pc, #168]	; (8001ffc <vTaskDelayUntil+0xbc>)
 8001f54:	682b      	ldr	r3, [r5, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d112      	bne.n	8001f80 <vTaskDelayUntil+0x40>
	++uxSchedulerSuspended;
 8001f5a:	682b      	ldr	r3, [r5, #0]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	602b      	str	r3, [r5, #0]
			const TickType_t xConstTickCount = xTickCount;
 8001f60:	4f27      	ldr	r7, [pc, #156]	; (8002000 <vTaskDelayUntil+0xc0>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001f62:	6803      	ldr	r3, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 8001f64:	683e      	ldr	r6, [r7, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001f66:	185c      	adds	r4, r3, r1
			if( xConstTickCount < *pxPreviousWakeTime )
 8001f68:	42b3      	cmp	r3, r6
 8001f6a:	d90b      	bls.n	8001f84 <vTaskDelayUntil+0x44>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001f6c:	42a3      	cmp	r3, r4
 8001f6e:	d80b      	bhi.n	8001f88 <vTaskDelayUntil+0x48>
			*pxPreviousWakeTime = xTimeToWake;
 8001f70:	6004      	str	r4, [r0, #0]
	configASSERT( uxSchedulerSuspended );
 8001f72:	682b      	ldr	r3, [r5, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d12b      	bne.n	8001fd0 <vTaskDelayUntil+0x90>
 8001f78:	b672      	cpsid	i
 8001f7a:	e7fe      	b.n	8001f7a <vTaskDelayUntil+0x3a>
		configASSERT( pxPreviousWakeTime );
 8001f7c:	b672      	cpsid	i
 8001f7e:	e7fe      	b.n	8001f7e <vTaskDelayUntil+0x3e>
		configASSERT( uxSchedulerSuspended == 0 );
 8001f80:	b672      	cpsid	i
 8001f82:	e7fe      	b.n	8001f82 <vTaskDelayUntil+0x42>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001f84:	42a3      	cmp	r3, r4
 8001f86:	d801      	bhi.n	8001f8c <vTaskDelayUntil+0x4c>
 8001f88:	42a6      	cmp	r6, r4
 8001f8a:	d2f1      	bcs.n	8001f70 <vTaskDelayUntil+0x30>
			*pxPreviousWakeTime = xTimeToWake;
 8001f8c:	6004      	str	r4, [r0, #0]
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8001f8e:	f001 fa79 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8001f92:	f001 f9c3 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <vTaskDelayUntil+0xc4>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	4203      	tst	r3, r0
 8001f9c:	d129      	bne.n	8001ff2 <vTaskDelayUntil+0xb2>
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001f9e:	683b      	ldr	r3, [r7, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001fa0:	4f19      	ldr	r7, [pc, #100]	; (8002008 <vTaskDelayUntil+0xc8>)
const TickType_t xConstTickCount = xTickCount;
 8001fa2:	4698      	mov	r8, r3
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001fa4:	6838      	ldr	r0, [r7, #0]
 8001fa6:	1b9e      	subs	r6, r3, r6
 8001fa8:	3004      	adds	r0, #4
 8001faa:	f7fe fa41 	bl	8000430 <uxListRemove>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001fae:	683b      	ldr	r3, [r7, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001fb0:	19a6      	adds	r6, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001fb2:	605e      	str	r6, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8001fb4:	45b0      	cmp	r8, r6
 8001fb6:	d812      	bhi.n	8001fde <vTaskDelayUntil+0x9e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <vTaskDelayUntil+0xcc>)
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	6839      	ldr	r1, [r7, #0]
 8001fbe:	3104      	adds	r1, #4
 8001fc0:	f7fe fa1e 	bl	8000400 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <vTaskDelayUntil+0xd0>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4296      	cmp	r6, r2
 8001fca:	d2d2      	bcs.n	8001f72 <vTaskDelayUntil+0x32>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8001fcc:	601e      	str	r6, [r3, #0]
 8001fce:	e7d0      	b.n	8001f72 <vTaskDelayUntil+0x32>
 8001fd0:	f7ff ff0e 	bl	8001df0 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d009      	beq.n	8001fec <vTaskDelayUntil+0xac>
	}
 8001fd8:	bc80      	pop	{r7}
 8001fda:	46b8      	mov	r8, r7
 8001fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <vTaskDelayUntil+0xd4>)
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	6839      	ldr	r1, [r7, #0]
 8001fe4:	3104      	adds	r1, #4
 8001fe6:	f7fe fa0b 	bl	8000400 <vListInsert>
 8001fea:	e7c2      	b.n	8001f72 <vTaskDelayUntil+0x32>
			portYIELD_WITHIN_API();
 8001fec:	f000 fdea 	bl	8002bc4 <vPortYield>
	}
 8001ff0:	e7f2      	b.n	8001fd8 <vTaskDelayUntil+0x98>
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8001ff2:	0021      	movs	r1, r4
 8001ff4:	2079      	movs	r0, #121	; 0x79
 8001ff6:	f001 fc85 	bl	8003904 <prvTraceStoreEvent1>
 8001ffa:	e7d0      	b.n	8001f9e <vTaskDelayUntil+0x5e>
 8001ffc:	200000a8 	.word	0x200000a8
 8002000:	20000128 	.word	0x20000128
 8002004:	20000006 	.word	0x20000006
 8002008:	2000002c 	.word	0x2000002c
 800200c:	20000030 	.word	0x20000030
 8002010:	200000e0 	.word	0x200000e0
 8002014:	20000034 	.word	0x20000034

08002018 <vTaskDelay>:
	{
 8002018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201a:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800201c:	d030      	beq.n	8002080 <vTaskDelay+0x68>
			configASSERT( uxSchedulerSuspended == 0 );
 800201e:	4d20      	ldr	r5, [pc, #128]	; (80020a0 <vTaskDelay+0x88>)
 8002020:	682b      	ldr	r3, [r5, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <vTaskDelay+0x12>
 8002026:	b672      	cpsid	i
 8002028:	e7fe      	b.n	8002028 <vTaskDelay+0x10>
	++uxSchedulerSuspended;
 800202a:	682b      	ldr	r3, [r5, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	602b      	str	r3, [r5, #0]
				traceTASK_DELAY();
 8002030:	f001 fa28 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8002034:	f001 f972 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <vTaskDelay+0x8c>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	4203      	tst	r3, r0
 800203e:	d129      	bne.n	8002094 <vTaskDelay+0x7c>
const TickType_t xConstTickCount = xTickCount;
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <vTaskDelay+0x90>)
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002042:	4e1a      	ldr	r6, [pc, #104]	; (80020ac <vTaskDelay+0x94>)
const TickType_t xConstTickCount = xTickCount;
 8002044:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002046:	6830      	ldr	r0, [r6, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002048:	19e4      	adds	r4, r4, r7
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800204a:	3004      	adds	r0, #4
 800204c:	f7fe f9f0 	bl	8000430 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002050:	6833      	ldr	r3, [r6, #0]
 8002052:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002054:	42a7      	cmp	r7, r4
 8002056:	d816      	bhi.n	8002086 <vTaskDelay+0x6e>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <vTaskDelay+0x98>)
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	6831      	ldr	r1, [r6, #0]
 800205e:	3104      	adds	r1, #4
 8002060:	f7fe f9ce 	bl	8000400 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <vTaskDelay+0x9c>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4294      	cmp	r4, r2
 800206a:	d200      	bcs.n	800206e <vTaskDelay+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800206c:	601c      	str	r4, [r3, #0]
	configASSERT( uxSchedulerSuspended );
 800206e:	682b      	ldr	r3, [r5, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <vTaskDelay+0x60>
 8002074:	b672      	cpsid	i
 8002076:	e7fe      	b.n	8002076 <vTaskDelay+0x5e>
 8002078:	f7ff feba 	bl	8001df0 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800207c:	2800      	cmp	r0, #0
 800207e:	d101      	bne.n	8002084 <vTaskDelay+0x6c>
			portYIELD_WITHIN_API();
 8002080:	f000 fda0 	bl	8002bc4 <vPortYield>
	}
 8002084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <vTaskDelay+0xa0>)
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	6831      	ldr	r1, [r6, #0]
 800208c:	3104      	adds	r1, #4
 800208e:	f7fe f9b7 	bl	8000400 <vListInsert>
 8002092:	e7ec      	b.n	800206e <vTaskDelay+0x56>
				traceTASK_DELAY();
 8002094:	0021      	movs	r1, r4
 8002096:	207a      	movs	r0, #122	; 0x7a
 8002098:	f001 fc34 	bl	8003904 <prvTraceStoreEvent1>
 800209c:	e7d0      	b.n	8002040 <vTaskDelay+0x28>
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	200000a8 	.word	0x200000a8
 80020a4:	20000006 	.word	0x20000006
 80020a8:	20000128 	.word	0x20000128
 80020ac:	2000002c 	.word	0x2000002c
 80020b0:	20000030 	.word	0x20000030
 80020b4:	200000e0 	.word	0x200000e0
 80020b8:	20000034 	.word	0x20000034

080020bc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <vTaskSwitchContext+0x18>)
{
 80020be:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 80020c6:	2201      	movs	r2, #1
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <vTaskSwitchContext+0x1c>)
 80020ca:	601a      	str	r2, [r3, #0]
}
 80020cc:	bd10      	pop	{r4, pc}
 80020ce:	f7ff faa3 	bl	8001618 <vTaskSwitchContext.part.0>
 80020d2:	e7fb      	b.n	80020cc <vTaskSwitchContext+0x10>
 80020d4:	200000a8 	.word	0x200000a8
 80020d8:	2000012c 	.word	0x2000012c

080020dc <vTaskPlaceOnEventList>:
{
 80020dc:	b570      	push	{r4, r5, r6, lr}
 80020de:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 80020e0:	2800      	cmp	r0, #0
 80020e2:	d01d      	beq.n	8002120 <vTaskPlaceOnEventList+0x44>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80020e4:	4d16      	ldr	r5, [pc, #88]	; (8002140 <vTaskPlaceOnEventList+0x64>)
 80020e6:	6829      	ldr	r1, [r5, #0]
 80020e8:	3118      	adds	r1, #24
 80020ea:	f7fe f989 	bl	8000400 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <vTaskPlaceOnEventList+0x68>)
 80020f0:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020f2:	6828      	ldr	r0, [r5, #0]
 80020f4:	3004      	adds	r0, #4
 80020f6:	f7fe f99b 	bl	8000430 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80020fa:	1c63      	adds	r3, r4, #1
 80020fc:	d012      	beq.n	8002124 <vTaskPlaceOnEventList+0x48>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80020fe:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002100:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002102:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002104:	42a6      	cmp	r6, r4
 8002106:	d813      	bhi.n	8002130 <vTaskPlaceOnEventList+0x54>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <vTaskPlaceOnEventList+0x6c>)
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	6829      	ldr	r1, [r5, #0]
 800210e:	3104      	adds	r1, #4
 8002110:	f7fe f976 	bl	8000400 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <vTaskPlaceOnEventList+0x70>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4294      	cmp	r4, r2
 800211a:	d208      	bcs.n	800212e <vTaskPlaceOnEventList+0x52>
					xNextTaskUnblockTime = xTimeToWake;
 800211c:	601c      	str	r4, [r3, #0]
}
 800211e:	e006      	b.n	800212e <vTaskPlaceOnEventList+0x52>
	configASSERT( pxEventList );
 8002120:	b672      	cpsid	i
 8002122:	e7fe      	b.n	8002122 <vTaskPlaceOnEventList+0x46>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002124:	6829      	ldr	r1, [r5, #0]
 8002126:	480a      	ldr	r0, [pc, #40]	; (8002150 <vTaskPlaceOnEventList+0x74>)
 8002128:	3104      	adds	r1, #4
 800212a:	f7fe f95d 	bl	80003e8 <vListInsertEnd>
}
 800212e:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <vTaskPlaceOnEventList+0x78>)
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	6829      	ldr	r1, [r5, #0]
 8002136:	3104      	adds	r1, #4
 8002138:	f7fe f962 	bl	8000400 <vListInsert>
 800213c:	e7f7      	b.n	800212e <vTaskPlaceOnEventList+0x52>
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	2000002c 	.word	0x2000002c
 8002144:	20000128 	.word	0x20000128
 8002148:	20000030 	.word	0x20000030
 800214c:	200000e0 	.word	0x200000e0
 8002150:	20000100 	.word	0x20000100
 8002154:	20000034 	.word	0x20000034

08002158 <vTaskPlaceOnUnorderedEventList>:
{
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	0014      	movs	r4, r2
	configASSERT( pxEventList );
 800215c:	2800      	cmp	r0, #0
 800215e:	d023      	beq.n	80021a8 <vTaskPlaceOnUnorderedEventList+0x50>
	configASSERT( uxSchedulerSuspended != 0 );
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <vTaskPlaceOnUnorderedEventList+0x78>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <vTaskPlaceOnUnorderedEventList+0x14>
 8002168:	b672      	cpsid	i
 800216a:	e7fe      	b.n	800216a <vTaskPlaceOnUnorderedEventList+0x12>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	4d19      	ldr	r5, [pc, #100]	; (80021d4 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8002170:	061b      	lsls	r3, r3, #24
 8002172:	430b      	orrs	r3, r1
 8002174:	682a      	ldr	r2, [r5, #0]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002176:	6829      	ldr	r1, [r5, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002178:	6193      	str	r3, [r2, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800217a:	3118      	adds	r1, #24
 800217c:	f7fe f934 	bl	80003e8 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 8002180:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <vTaskPlaceOnUnorderedEventList+0x80>)
 8002182:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002184:	6828      	ldr	r0, [r5, #0]
 8002186:	3004      	adds	r0, #4
 8002188:	f7fe f952 	bl	8000430 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800218c:	1c63      	adds	r3, r4, #1
 800218e:	d00d      	beq.n	80021ac <vTaskPlaceOnUnorderedEventList+0x54>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002190:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002192:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002194:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002196:	42a6      	cmp	r6, r4
 8002198:	d90e      	bls.n	80021b8 <vTaskPlaceOnUnorderedEventList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <vTaskPlaceOnUnorderedEventList+0x84>)
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	6829      	ldr	r1, [r5, #0]
 80021a0:	3104      	adds	r1, #4
 80021a2:	f7fe f92d 	bl	8000400 <vListInsert>
}
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
 80021a8:	b672      	cpsid	i
 80021aa:	e7fe      	b.n	80021aa <vTaskPlaceOnUnorderedEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021ac:	6829      	ldr	r1, [r5, #0]
 80021ae:	480c      	ldr	r0, [pc, #48]	; (80021e0 <vTaskPlaceOnUnorderedEventList+0x88>)
 80021b0:	3104      	adds	r1, #4
 80021b2:	f7fe f919 	bl	80003e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80021b6:	e7f6      	b.n	80021a6 <vTaskPlaceOnUnorderedEventList+0x4e>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <vTaskPlaceOnUnorderedEventList+0x8c>)
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	6829      	ldr	r1, [r5, #0]
 80021be:	3104      	adds	r1, #4
 80021c0:	f7fe f91e 	bl	8000400 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <vTaskPlaceOnUnorderedEventList+0x90>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4294      	cmp	r4, r2
 80021ca:	d2ec      	bcs.n	80021a6 <vTaskPlaceOnUnorderedEventList+0x4e>
					xNextTaskUnblockTime = xTimeToWake;
 80021cc:	601c      	str	r4, [r3, #0]
}
 80021ce:	e7ea      	b.n	80021a6 <vTaskPlaceOnUnorderedEventList+0x4e>
 80021d0:	200000a8 	.word	0x200000a8
 80021d4:	2000002c 	.word	0x2000002c
 80021d8:	20000128 	.word	0x20000128
 80021dc:	20000034 	.word	0x20000034
 80021e0:	20000100 	.word	0x20000100
 80021e4:	20000030 	.word	0x20000030
 80021e8:	200000e0 	.word	0x200000e0

080021ec <vTaskPlaceOnEventListRestricted>:
	{
 80021ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ee:	000c      	movs	r4, r1
 80021f0:	0015      	movs	r5, r2
		configASSERT( pxEventList );
 80021f2:	2800      	cmp	r0, #0
 80021f4:	d034      	beq.n	8002260 <vTaskPlaceOnEventListRestricted+0x74>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80021f6:	4e2c      	ldr	r6, [pc, #176]	; (80022a8 <vTaskPlaceOnEventListRestricted+0xbc>)
 80021f8:	6831      	ldr	r1, [r6, #0]
 80021fa:	3118      	adds	r1, #24
 80021fc:	f7fe f8f4 	bl	80003e8 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8002200:	2d00      	cmp	r5, #0
 8002202:	d013      	beq.n	800222c <vTaskPlaceOnEventListRestricted+0x40>
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002204:	f001 f93e 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8002208:	f001 f888 	bl	800331c <prvTraceGetTaskNumberHigh16>
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <vTaskPlaceOnEventListRestricted+0xc0>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	4203      	tst	r3, r0
 8002212:	d127      	bne.n	8002264 <vTaskPlaceOnEventListRestricted+0x78>
const TickType_t xConstTickCount = xTickCount;
 8002214:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <vTaskPlaceOnEventListRestricted+0xc4>)
 8002216:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002218:	6830      	ldr	r0, [r6, #0]
 800221a:	3004      	adds	r0, #4
 800221c:	f7fe f908 	bl	8000430 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002220:	6831      	ldr	r1, [r6, #0]
 8002222:	4824      	ldr	r0, [pc, #144]	; (80022b4 <vTaskPlaceOnEventListRestricted+0xc8>)
 8002224:	3104      	adds	r1, #4
 8002226:	f7fe f8df 	bl	80003e8 <vListInsertEnd>
	}
 800222a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800222c:	f001 f92a 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8002230:	f001 f874 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <vTaskPlaceOnEventListRestricted+0xc0>)
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	4203      	tst	r3, r0
 800223a:	d115      	bne.n	8002268 <vTaskPlaceOnEventListRestricted+0x7c>
const TickType_t xConstTickCount = xTickCount;
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <vTaskPlaceOnEventListRestricted+0xc4>)
 800223e:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002240:	6830      	ldr	r0, [r6, #0]
 8002242:	3004      	adds	r0, #4
 8002244:	f7fe f8f4 	bl	8000430 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002248:	6833      	ldr	r3, [r6, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 800224a:	193c      	adds	r4, r7, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800224c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800224e:	42bc      	cmp	r4, r7
 8002250:	d21e      	bcs.n	8002290 <vTaskPlaceOnEventListRestricted+0xa4>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002252:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <vTaskPlaceOnEventListRestricted+0xcc>)
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	6831      	ldr	r1, [r6, #0]
 8002258:	3104      	adds	r1, #4
 800225a:	f7fe f8d1 	bl	8000400 <vListInsert>
 800225e:	e7e4      	b.n	800222a <vTaskPlaceOnEventListRestricted+0x3e>
		configASSERT( pxEventList );
 8002260:	b672      	cpsid	i
 8002262:	e7fe      	b.n	8002262 <vTaskPlaceOnEventListRestricted+0x76>
			xTicksToWait = portMAX_DELAY;
 8002264:	2401      	movs	r4, #1
 8002266:	4264      	negs	r4, r4
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002268:	4f11      	ldr	r7, [pc, #68]	; (80022b0 <vTaskPlaceOnEventListRestricted+0xc4>)
 800226a:	2079      	movs	r0, #121	; 0x79
 800226c:	6839      	ldr	r1, [r7, #0]
 800226e:	1909      	adds	r1, r1, r4
 8002270:	f001 fb48 	bl	8003904 <prvTraceStoreEvent1>
const TickType_t xConstTickCount = xTickCount;
 8002274:	683f      	ldr	r7, [r7, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002276:	6830      	ldr	r0, [r6, #0]
 8002278:	3004      	adds	r0, #4
 800227a:	f7fe f8d9 	bl	8000430 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800227e:	1c63      	adds	r3, r4, #1
 8002280:	d1e2      	bne.n	8002248 <vTaskPlaceOnEventListRestricted+0x5c>
 8002282:	2d00      	cmp	r5, #0
 8002284:	d1cc      	bne.n	8002220 <vTaskPlaceOnEventListRestricted+0x34>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002286:	6833      	ldr	r3, [r6, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002288:	193c      	adds	r4, r7, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800228a:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800228c:	42bc      	cmp	r4, r7
 800228e:	d3e0      	bcc.n	8002252 <vTaskPlaceOnEventListRestricted+0x66>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002290:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <vTaskPlaceOnEventListRestricted+0xd0>)
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	6831      	ldr	r1, [r6, #0]
 8002296:	3104      	adds	r1, #4
 8002298:	f7fe f8b2 	bl	8000400 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <vTaskPlaceOnEventListRestricted+0xd4>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4294      	cmp	r4, r2
 80022a2:	d2c2      	bcs.n	800222a <vTaskPlaceOnEventListRestricted+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
 80022a4:	601c      	str	r4, [r3, #0]
	}
 80022a6:	e7c0      	b.n	800222a <vTaskPlaceOnEventListRestricted+0x3e>
 80022a8:	2000002c 	.word	0x2000002c
 80022ac:	20000006 	.word	0x20000006
 80022b0:	20000128 	.word	0x20000128
 80022b4:	20000100 	.word	0x20000100
 80022b8:	20000034 	.word	0x20000034
 80022bc:	20000030 	.word	0x20000030
 80022c0:	200000e0 	.word	0x200000e0

080022c4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022c4:	68c3      	ldr	r3, [r0, #12]
{
 80022c6:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022c8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80022ca:	2c00      	cmp	r4, #0
 80022cc:	d032      	beq.n	8002334 <xTaskRemoveFromEventList+0x70>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80022ce:	0025      	movs	r5, r4
 80022d0:	3518      	adds	r5, #24
 80022d2:	0028      	movs	r0, r5
 80022d4:	f7fe f8ac 	bl	8000430 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <xTaskRemoveFromEventList+0x80>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00f      	beq.n	8002300 <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80022e0:	0029      	movs	r1, r5
 80022e2:	4819      	ldr	r0, [pc, #100]	; (8002348 <xTaskRemoveFromEventList+0x84>)
 80022e4:	f7fe f880 	bl	80003e8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <xTaskRemoveFromEventList+0x88>)
 80022ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80022ec:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 80022ee:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d903      	bls.n	80022fe <xTaskRemoveFromEventList+0x3a>
		xYieldPending = pdTRUE;
 80022f6:	2201      	movs	r2, #1
 80022f8:	4b15      	ldr	r3, [pc, #84]	; (8002350 <xTaskRemoveFromEventList+0x8c>)
		xReturn = pdTRUE;
 80022fa:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 80022fc:	601a      	str	r2, [r3, #0]
}
 80022fe:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002300:	1d25      	adds	r5, r4, #4
 8002302:	0028      	movs	r0, r5
 8002304:	f7fe f894 	bl	8000430 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002308:	0020      	movs	r0, r4
 800230a:	f001 f807 	bl	800331c <prvTraceGetTaskNumberHigh16>
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <xTaskRemoveFromEventList+0x90>)
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	4203      	tst	r3, r0
 8002314:	d110      	bne.n	8002338 <xTaskRemoveFromEventList+0x74>
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <xTaskRemoveFromEventList+0x94>)
 8002318:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4291      	cmp	r1, r2
 800231e:	d900      	bls.n	8002322 <xTaskRemoveFromEventList+0x5e>
 8002320:	6019      	str	r1, [r3, #0]
 8002322:	008a      	lsls	r2, r1, #2
 8002324:	1852      	adds	r2, r2, r1
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <xTaskRemoveFromEventList+0x98>)
 8002328:	0090      	lsls	r0, r2, #2
 800232a:	0029      	movs	r1, r5
 800232c:	1818      	adds	r0, r3, r0
 800232e:	f7fe f85b 	bl	80003e8 <vListInsertEnd>
 8002332:	e7d9      	b.n	80022e8 <xTaskRemoveFromEventList+0x24>
	configASSERT( pxUnblockedTCB );
 8002334:	b672      	cpsid	i
 8002336:	e7fe      	b.n	8002336 <xTaskRemoveFromEventList+0x72>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002338:	0021      	movs	r1, r4
 800233a:	2030      	movs	r0, #48	; 0x30
 800233c:	f001 fae2 	bl	8003904 <prvTraceStoreEvent1>
 8002340:	e7e9      	b.n	8002316 <xTaskRemoveFromEventList+0x52>
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	200000a8 	.word	0x200000a8
 8002348:	200000e8 	.word	0x200000e8
 800234c:	2000002c 	.word	0x2000002c
 8002350:	2000012c 	.word	0x2000012c
 8002354:	20000006 	.word	0x20000006
 8002358:	200000b0 	.word	0x200000b0
 800235c:	20000038 	.word	0x20000038

08002360 <vTaskRemoveFromUnorderedEventList>:
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8002360:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <vTaskRemoveFromUnorderedEventList+0x74>)
{
 8002362:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <vTaskRemoveFromUnorderedEventList+0xe>
 800236a:	b672      	cpsid	i
 800236c:	e7fe      	b.n	800236c <vTaskRemoveFromUnorderedEventList+0xc>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800236e:	2380      	movs	r3, #128	; 0x80
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002370:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002372:	061b      	lsls	r3, r3, #24
 8002374:	430b      	orrs	r3, r1
 8002376:	6003      	str	r3, [r0, #0]
	configASSERT( pxUnblockedTCB );
 8002378:	2c00      	cmp	r4, #0
 800237a:	d024      	beq.n	80023c6 <vTaskRemoveFromUnorderedEventList+0x66>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800237c:	1d25      	adds	r5, r4, #4
	( void ) uxListRemove( pxEventListItem );
 800237e:	f7fe f857 	bl	8000430 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002382:	0028      	movs	r0, r5
 8002384:	f7fe f854 	bl	8000430 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8002388:	0020      	movs	r0, r4
 800238a:	f000 ffc7 	bl	800331c <prvTraceGetTaskNumberHigh16>
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <vTaskRemoveFromUnorderedEventList+0x78>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	4203      	tst	r3, r0
 8002394:	d119      	bne.n	80023ca <vTaskRemoveFromUnorderedEventList+0x6a>
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <vTaskRemoveFromUnorderedEventList+0x7c>)
 8002398:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4291      	cmp	r1, r2
 800239e:	d900      	bls.n	80023a2 <vTaskRemoveFromUnorderedEventList+0x42>
 80023a0:	6019      	str	r1, [r3, #0]
 80023a2:	008a      	lsls	r2, r1, #2
 80023a4:	1852      	adds	r2, r2, r1
 80023a6:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <vTaskRemoveFromUnorderedEventList+0x80>)
 80023a8:	0090      	lsls	r0, r2, #2
 80023aa:	1818      	adds	r0, r3, r0
 80023ac:	0029      	movs	r1, r5
 80023ae:	f7fe f81b 	bl	80003e8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <vTaskRemoveFromUnorderedEventList+0x84>)
 80023b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d902      	bls.n	80023c4 <vTaskRemoveFromUnorderedEventList+0x64>
		xYieldPending = pdTRUE;
 80023be:	2201      	movs	r2, #1
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <vTaskRemoveFromUnorderedEventList+0x88>)
 80023c2:	601a      	str	r2, [r3, #0]
}
 80023c4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 80023c6:	b672      	cpsid	i
 80023c8:	e7fe      	b.n	80023c8 <vTaskRemoveFromUnorderedEventList+0x68>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80023ca:	0021      	movs	r1, r4
 80023cc:	2030      	movs	r0, #48	; 0x30
 80023ce:	f001 fa99 	bl	8003904 <prvTraceStoreEvent1>
 80023d2:	e7e0      	b.n	8002396 <vTaskRemoveFromUnorderedEventList+0x36>
 80023d4:	200000a8 	.word	0x200000a8
 80023d8:	20000006 	.word	0x20000006
 80023dc:	200000b0 	.word	0x200000b0
 80023e0:	20000038 	.word	0x20000038
 80023e4:	2000002c 	.word	0x2000002c
 80023e8:	2000012c 	.word	0x2000012c

080023ec <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <vTaskInternalSetTimeOutState+0x10>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80023f2:	4b03      	ldr	r3, [pc, #12]	; (8002400 <vTaskInternalSetTimeOutState+0x14>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6043      	str	r3, [r0, #4]
}
 80023f8:	4770      	bx	lr
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	200000e4 	.word	0x200000e4
 8002400:	20000128 	.word	0x20000128

08002404 <xTaskCheckForTimeOut>:
{
 8002404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002406:	46c6      	mov	lr, r8
 8002408:	0004      	movs	r4, r0
 800240a:	000d      	movs	r5, r1
 800240c:	b500      	push	{lr}
	configASSERT( pxTimeOut );
 800240e:	2800      	cmp	r0, #0
 8002410:	d025      	beq.n	800245e <xTaskCheckForTimeOut+0x5a>
	configASSERT( pxTicksToWait );
 8002412:	2900      	cmp	r1, #0
 8002414:	d021      	beq.n	800245a <xTaskCheckForTimeOut+0x56>
	taskENTER_CRITICAL();
 8002416:	f000 fbe1 	bl	8002bdc <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800241a:	4a15      	ldr	r2, [pc, #84]	; (8002470 <xTaskCheckForTimeOut+0x6c>)
			if( *pxTicksToWait == portMAX_DELAY )
 800241c:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800241e:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8002420:	1c58      	adds	r0, r3, #1
 8002422:	d01e      	beq.n	8002462 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002424:	4f13      	ldr	r7, [pc, #76]	; (8002474 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002426:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002428:	683e      	ldr	r6, [r7, #0]
 800242a:	46b0      	mov	r8, r6
 800242c:	6826      	ldr	r6, [r4, #0]
 800242e:	4546      	cmp	r6, r8
 8002430:	d002      	beq.n	8002438 <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
 8002432:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002434:	4288      	cmp	r0, r1
 8002436:	d90a      	bls.n	800244e <xTaskCheckForTimeOut+0x4a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002438:	1a0e      	subs	r6, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800243a:	42b3      	cmp	r3, r6
 800243c:	d913      	bls.n	8002466 <xTaskCheckForTimeOut+0x62>
			xReturn = pdFALSE;
 800243e:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 8002440:	1a5b      	subs	r3, r3, r1
 8002442:	181b      	adds	r3, r3, r0
 8002444:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800244a:	6813      	ldr	r3, [r2, #0]
 800244c:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800244e:	f000 fbd1 	bl	8002bf4 <vPortExitCritical>
}
 8002452:	0030      	movs	r0, r6
 8002454:	bc80      	pop	{r7}
 8002456:	46b8      	mov	r8, r7
 8002458:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
 800245a:	b672      	cpsid	i
 800245c:	e7fe      	b.n	800245c <xTaskCheckForTimeOut+0x58>
	configASSERT( pxTimeOut );
 800245e:	b672      	cpsid	i
 8002460:	e7fe      	b.n	8002460 <xTaskCheckForTimeOut+0x5c>
				xReturn = pdFALSE;
 8002462:	2600      	movs	r6, #0
 8002464:	e7f3      	b.n	800244e <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
 8002466:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8002468:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 800246a:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800246c:	e7ef      	b.n	800244e <xTaskCheckForTimeOut+0x4a>
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	20000128 	.word	0x20000128
 8002474:	200000e4 	.word	0x200000e4

08002478 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002478:	2201      	movs	r2, #1
 800247a:	4b01      	ldr	r3, [pc, #4]	; (8002480 <vTaskMissedYield+0x8>)
 800247c:	601a      	str	r2, [r3, #0]
}
 800247e:	4770      	bx	lr
 8002480:	2000012c 	.word	0x2000012c

08002484 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
 8002484:	2800      	cmp	r0, #0
 8002486:	d001      	beq.n	800248c <uxTaskGetTaskNumber+0x8>
			uxReturn = pxTCB->uxTaskNumber;
 8002488:	6c40      	ldr	r0, [r0, #68]	; 0x44
	}
 800248a:	4770      	bx	lr
			uxReturn = 0U;
 800248c:	2000      	movs	r0, #0
		return uxReturn;
 800248e:	e7fc      	b.n	800248a <uxTaskGetTaskNumber+0x6>

08002490 <vTaskSetTaskNumber>:
		if( xTask != NULL )
 8002490:	2800      	cmp	r0, #0
 8002492:	d000      	beq.n	8002496 <vTaskSetTaskNumber+0x6>
			pxTCB->uxTaskNumber = uxHandle;
 8002494:	6441      	str	r1, [r0, #68]	; 0x44
	}
 8002496:	4770      	bx	lr

08002498 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8002498:	4b01      	ldr	r3, [pc, #4]	; (80024a0 <xTaskGetCurrentTaskHandle+0x8>)
 800249a:	6818      	ldr	r0, [r3, #0]
	}
 800249c:	4770      	bx	lr
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	2000002c 	.word	0x2000002c

080024a4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 80024a6:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d004      	beq.n	80024b8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <xTaskGetSchedulerState+0x1c>)
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	4243      	negs	r3, r0
 80024b4:	4158      	adcs	r0, r3
 80024b6:	0040      	lsls	r0, r0, #1
	}
 80024b8:	4770      	bx	lr
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	200000fc 	.word	0x200000fc
 80024c0:	200000a8 	.word	0x200000a8

080024c4 <xTaskPriorityInherit>:
	{
 80024c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024c6:	46c6      	mov	lr, r8
 80024c8:	0004      	movs	r4, r0
 80024ca:	b500      	push	{lr}
		if( pxMutexHolder != NULL )
 80024cc:	2800      	cmp	r0, #0
 80024ce:	d02b      	beq.n	8002528 <xTaskPriorityInherit+0x64>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80024d0:	4d2e      	ldr	r5, [pc, #184]	; (800258c <xTaskPriorityInherit+0xc8>)
 80024d2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80024d4:	682b      	ldr	r3, [r5, #0]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	429a      	cmp	r2, r3
 80024da:	d21c      	bcs.n	8002516 <xTaskPriorityInherit+0x52>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80024dc:	6983      	ldr	r3, [r0, #24]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db04      	blt.n	80024ec <xTaskPriorityInherit+0x28>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024e2:	682b      	ldr	r3, [r5, #0]
 80024e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024e6:	2305      	movs	r3, #5
 80024e8:	1a5b      	subs	r3, r3, r1
 80024ea:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80024ec:	0093      	lsls	r3, r2, #2
 80024ee:	189b      	adds	r3, r3, r2
 80024f0:	4e27      	ldr	r6, [pc, #156]	; (8002590 <xTaskPriorityInherit+0xcc>)
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	6962      	ldr	r2, [r4, #20]
 80024f6:	18f3      	adds	r3, r6, r3
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d025      	beq.n	8002548 <xTaskPriorityInherit+0x84>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80024fc:	682b      	ldr	r3, [r5, #0]
 80024fe:	4f25      	ldr	r7, [pc, #148]	; (8002594 <xTaskPriorityInherit+0xd0>)
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	62e3      	str	r3, [r4, #44]	; 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8002504:	f000 ffbe 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 8002508:	f000 ff08 	bl	800331c <prvTraceGetTaskNumberHigh16>
 800250c:	883b      	ldrh	r3, [r7, #0]
 800250e:	4203      	tst	r3, r0
 8002510:	d10c      	bne.n	800252c <xTaskPriorityInherit+0x68>
				xReturn = pdTRUE;
 8002512:	2001      	movs	r0, #1
 8002514:	e005      	b.n	8002522 <xTaskPriorityInherit+0x5e>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002516:	682b      	ldr	r3, [r5, #0]
 8002518:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	4298      	cmp	r0, r3
 800251e:	4180      	sbcs	r0, r0
 8002520:	4240      	negs	r0, r0
	}
 8002522:	bc80      	pop	{r7}
 8002524:	46b8      	mov	r8, r7
 8002526:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
 8002528:	2000      	movs	r0, #0
		return xReturn;
 800252a:	e7fa      	b.n	8002522 <xTaskPriorityInherit+0x5e>
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800252c:	0020      	movs	r0, r4
 800252e:	f000 fef5 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8002532:	883b      	ldrh	r3, [r7, #0]
 8002534:	4203      	tst	r3, r0
 8002536:	d0ec      	beq.n	8002512 <xTaskPriorityInherit+0x4e>
 8002538:	682b      	ldr	r3, [r5, #0]
 800253a:	2005      	movs	r0, #5
 800253c:	0021      	movs	r1, r4
 800253e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002540:	f001 fa4c 	bl	80039dc <prvTraceStoreEvent2>
				xReturn = pdTRUE;
 8002544:	2001      	movs	r0, #1
 8002546:	e7ec      	b.n	8002522 <xTaskPriorityInherit+0x5e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002548:	1d23      	adds	r3, r4, #4
 800254a:	0018      	movs	r0, r3
 800254c:	4698      	mov	r8, r3
 800254e:	f7fd ff6f 	bl	8000430 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002552:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002554:	0020      	movs	r0, r4
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800255a:	f000 fedf 	bl	800331c <prvTraceGetTaskNumberHigh16>
 800255e:	4f0d      	ldr	r7, [pc, #52]	; (8002594 <xTaskPriorityInherit+0xd0>)
 8002560:	883b      	ldrh	r3, [r7, #0]
 8002562:	4203      	tst	r3, r0
 8002564:	d10d      	bne.n	8002582 <xTaskPriorityInherit+0xbe>
 8002566:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <xTaskPriorityInherit+0xd4>)
 8002568:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800256a:	6819      	ldr	r1, [r3, #0]
 800256c:	428a      	cmp	r2, r1
 800256e:	d900      	bls.n	8002572 <xTaskPriorityInherit+0xae>
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	0093      	lsls	r3, r2, #2
 8002574:	189b      	adds	r3, r3, r2
 8002576:	0098      	lsls	r0, r3, #2
 8002578:	4641      	mov	r1, r8
 800257a:	1830      	adds	r0, r6, r0
 800257c:	f7fd ff34 	bl	80003e8 <vListInsertEnd>
 8002580:	e7c0      	b.n	8002504 <xTaskPriorityInherit+0x40>
 8002582:	0021      	movs	r1, r4
 8002584:	2030      	movs	r0, #48	; 0x30
 8002586:	f001 f9bd 	bl	8003904 <prvTraceStoreEvent1>
 800258a:	e7ec      	b.n	8002566 <xTaskPriorityInherit+0xa2>
 800258c:	2000002c 	.word	0x2000002c
 8002590:	20000038 	.word	0x20000038
 8002594:	20000006 	.word	0x20000006
 8002598:	200000b0 	.word	0x200000b0

0800259c <xTaskPriorityDisinherit>:
	{
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 80025a0:	d010      	beq.n	80025c4 <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB == pxCurrentTCB );
 80025a2:	4b26      	ldr	r3, [pc, #152]	; (800263c <xTaskPriorityDisinherit+0xa0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4283      	cmp	r3, r0
 80025a8:	d001      	beq.n	80025ae <xTaskPriorityDisinherit+0x12>
 80025aa:	b672      	cpsid	i
 80025ac:	e7fe      	b.n	80025ac <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 80025ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d009      	beq.n	80025c8 <xTaskPriorityDisinherit+0x2c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80025b4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80025b6:	6c82      	ldr	r2, [r0, #72]	; 0x48
			( pxTCB->uxMutexesHeld )--;
 80025b8:	3b01      	subs	r3, #1
 80025ba:	64c3      	str	r3, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80025bc:	4291      	cmp	r1, r2
 80025be:	d001      	beq.n	80025c4 <xTaskPriorityDisinherit+0x28>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <xTaskPriorityDisinherit+0x30>
	BaseType_t xReturn = pdFALSE;
 80025c4:	2000      	movs	r0, #0
	}
 80025c6:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 80025c8:	b672      	cpsid	i
 80025ca:	e7fe      	b.n	80025ca <xTaskPriorityDisinherit+0x2e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025cc:	1d05      	adds	r5, r0, #4
 80025ce:	0028      	movs	r0, r5
 80025d0:	f7fd ff2e 	bl	8000430 <uxListRemove>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80025d4:	f000 ff56 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 80025d8:	f000 fea0 	bl	800331c <prvTraceGetTaskNumberHigh16>
 80025dc:	4e18      	ldr	r6, [pc, #96]	; (8002640 <xTaskPriorityDisinherit+0xa4>)
 80025de:	8833      	ldrh	r3, [r6, #0]
 80025e0:	4203      	tst	r3, r0
 80025e2:	d11f      	bne.n	8002624 <xTaskPriorityDisinherit+0x88>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025e4:	2305      	movs	r3, #5
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80025e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
					prvAddTaskToReadyList( pxTCB );
 80025e8:	0020      	movs	r0, r4
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	61a3      	str	r3, [r4, #24]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80025ee:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80025f0:	f000 fe94 	bl	800331c <prvTraceGetTaskNumberHigh16>
 80025f4:	8833      	ldrh	r3, [r6, #0]
 80025f6:	4203      	tst	r3, r0
 80025f8:	d10f      	bne.n	800261a <xTaskPriorityDisinherit+0x7e>
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <xTaskPriorityDisinherit+0xa8>)
 80025fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4291      	cmp	r1, r2
 8002602:	d900      	bls.n	8002606 <xTaskPriorityDisinherit+0x6a>
 8002604:	6019      	str	r1, [r3, #0]
 8002606:	008a      	lsls	r2, r1, #2
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <xTaskPriorityDisinherit+0xac>)
 800260a:	1852      	adds	r2, r2, r1
 800260c:	0092      	lsls	r2, r2, #2
 800260e:	1898      	adds	r0, r3, r2
 8002610:	0029      	movs	r1, r5
 8002612:	f7fd fee9 	bl	80003e8 <vListInsertEnd>
					xReturn = pdTRUE;
 8002616:	2001      	movs	r0, #1
		return xReturn;
 8002618:	e7d5      	b.n	80025c6 <xTaskPriorityDisinherit+0x2a>
					prvAddTaskToReadyList( pxTCB );
 800261a:	0021      	movs	r1, r4
 800261c:	2030      	movs	r0, #48	; 0x30
 800261e:	f001 f971 	bl	8003904 <prvTraceStoreEvent1>
 8002622:	e7ea      	b.n	80025fa <xTaskPriorityDisinherit+0x5e>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8002624:	0020      	movs	r0, r4
 8002626:	f000 fe79 	bl	800331c <prvTraceGetTaskNumberHigh16>
 800262a:	8833      	ldrh	r3, [r6, #0]
 800262c:	4203      	tst	r3, r0
 800262e:	d0d9      	beq.n	80025e4 <xTaskPriorityDisinherit+0x48>
 8002630:	0021      	movs	r1, r4
 8002632:	2006      	movs	r0, #6
 8002634:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002636:	f001 f9d1 	bl	80039dc <prvTraceStoreEvent2>
 800263a:	e7d3      	b.n	80025e4 <xTaskPriorityDisinherit+0x48>
 800263c:	2000002c 	.word	0x2000002c
 8002640:	20000006 	.word	0x20000006
 8002644:	200000b0 	.word	0x200000b0
 8002648:	20000038 	.word	0x20000038

0800264c <vTaskPriorityDisinheritAfterTimeout>:
	{
 800264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8002650:	d00d      	beq.n	800266e <vTaskPriorityDisinheritAfterTimeout+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002652:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <vTaskPriorityDisinheritAfterTimeout+0x10>
 8002658:	b672      	cpsid	i
 800265a:	e7fe      	b.n	800265a <vTaskPriorityDisinheritAfterTimeout+0xe>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800265c:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800265e:	428d      	cmp	r5, r1
 8002660:	d200      	bcs.n	8002664 <vTaskPriorityDisinheritAfterTimeout+0x18>
 8002662:	000d      	movs	r5, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8002664:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002666:	42aa      	cmp	r2, r5
 8002668:	d001      	beq.n	800266e <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800266a:	2b01      	cmp	r3, #1
 800266c:	d000      	beq.n	8002670 <vTaskPriorityDisinheritAfterTimeout+0x24>
	}
 800266e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8002670:	4b23      	ldr	r3, [pc, #140]	; (8002700 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	42a3      	cmp	r3, r4
 8002676:	d02f      	beq.n	80026d8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8002678:	f000 ff04 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 800267c:	f000 fe4e 	bl	800331c <prvTraceGetTaskNumberHigh16>
 8002680:	4e20      	ldr	r6, [pc, #128]	; (8002704 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8002682:	8833      	ldrh	r3, [r6, #0]
 8002684:	4203      	tst	r3, r0
 8002686:	d129      	bne.n	80026dc <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002688:	69a3      	ldr	r3, [r4, #24]
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800268a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
					pxTCB->uxPriority = uxPriorityToUse;
 800268c:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800268e:	2b00      	cmp	r3, #0
 8002690:	db02      	blt.n	8002698 <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002692:	2305      	movs	r3, #5
 8002694:	1b5b      	subs	r3, r3, r5
 8002696:	61a3      	str	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002698:	0093      	lsls	r3, r2, #2
 800269a:	189b      	adds	r3, r3, r2
 800269c:	4d1a      	ldr	r5, [pc, #104]	; (8002708 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	6962      	ldr	r2, [r4, #20]
 80026a2:	18eb      	adds	r3, r5, r3
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d1e2      	bne.n	800266e <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026a8:	1d27      	adds	r7, r4, #4
 80026aa:	0038      	movs	r0, r7
 80026ac:	f7fd fec0 	bl	8000430 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80026b0:	0020      	movs	r0, r4
 80026b2:	f000 fe33 	bl	800331c <prvTraceGetTaskNumberHigh16>
 80026b6:	8833      	ldrh	r3, [r6, #0]
 80026b8:	4203      	tst	r3, r0
 80026ba:	d11b      	bne.n	80026f4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 80026be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026c0:	6819      	ldr	r1, [r3, #0]
 80026c2:	428a      	cmp	r2, r1
 80026c4:	d900      	bls.n	80026c8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	0093      	lsls	r3, r2, #2
 80026ca:	189b      	adds	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	0039      	movs	r1, r7
 80026d0:	18e8      	adds	r0, r5, r3
 80026d2:	f7fd fe89 	bl	80003e8 <vListInsertEnd>
	}
 80026d6:	e7ca      	b.n	800266e <vTaskPriorityDisinheritAfterTimeout+0x22>
					configASSERT( pxTCB != pxCurrentTCB );
 80026d8:	b672      	cpsid	i
 80026da:	e7fe      	b.n	80026da <vTaskPriorityDisinheritAfterTimeout+0x8e>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80026dc:	0020      	movs	r0, r4
 80026de:	f000 fe1d 	bl	800331c <prvTraceGetTaskNumberHigh16>
 80026e2:	8833      	ldrh	r3, [r6, #0]
 80026e4:	4203      	tst	r3, r0
 80026e6:	d0cf      	beq.n	8002688 <vTaskPriorityDisinheritAfterTimeout+0x3c>
 80026e8:	0021      	movs	r1, r4
 80026ea:	2006      	movs	r0, #6
 80026ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80026ee:	f001 f975 	bl	80039dc <prvTraceStoreEvent2>
 80026f2:	e7c9      	b.n	8002688 <vTaskPriorityDisinheritAfterTimeout+0x3c>
						prvAddTaskToReadyList( pxTCB );
 80026f4:	0021      	movs	r1, r4
 80026f6:	2030      	movs	r0, #48	; 0x30
 80026f8:	f001 f904 	bl	8003904 <prvTraceStoreEvent1>
 80026fc:	e7de      	b.n	80026bc <vTaskPriorityDisinheritAfterTimeout+0x70>
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	2000002c 	.word	0x2000002c
 8002704:	20000006 	.word	0x20000006
 8002708:	20000038 	.word	0x20000038
 800270c:	200000b0 	.word	0x200000b0

08002710 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <uxTaskResetEventItemValue+0x14>)
 8002712:	681a      	ldr	r2, [r3, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002714:	6819      	ldr	r1, [r3, #0]
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8002716:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	2305      	movs	r3, #5
 800271c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800271e:	1a5b      	subs	r3, r3, r1
 8002720:	6193      	str	r3, [r2, #24]
}
 8002722:	4770      	bx	lr
 8002724:	2000002c 	.word	0x2000002c

08002728 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <pvTaskIncrementMutexHeldCount+0x14>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	2a00      	cmp	r2, #0
 800272e:	d003      	beq.n	8002738 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8002730:	6819      	ldr	r1, [r3, #0]
 8002732:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002734:	3201      	adds	r2, #1
 8002736:	64ca      	str	r2, [r1, #76]	; 0x4c
		return pxCurrentTCB;
 8002738:	6818      	ldr	r0, [r3, #0]
	}
 800273a:	4770      	bx	lr
 800273c:	2000002c 	.word	0x2000002c

08002740 <prvSwitchTimerLists>:
		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002740:	2328      	movs	r3, #40	; 0x28
{
 8002742:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002744:	464f      	mov	r7, r9
 8002746:	4646      	mov	r6, r8
 8002748:	46d6      	mov	lr, sl
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800274a:	4699      	mov	r9, r3
	if( xTimerQueue != NULL )
 800274c:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <prvSwitchTimerLists+0x98>)
{
 800274e:	b5c0      	push	{r6, r7, lr}
	if( xTimerQueue != NULL )
 8002750:	4698      	mov	r8, r3
 8002752:	4d22      	ldr	r5, [pc, #136]	; (80027dc <prvSwitchTimerLists+0x9c>)
{
 8002754:	b084      	sub	sp, #16
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002756:	2604      	movs	r6, #4
 8002758:	e00e      	b.n	8002778 <prvSwitchTimerLists+0x38>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800275a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800275c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800275e:	681a      	ldr	r2, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002760:	1d27      	adds	r7, r4, #4
 8002762:	0038      	movs	r0, r7
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002764:	4692      	mov	sl, r2
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002766:	f7fd fe63 	bl	8000430 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800276a:	6a23      	ldr	r3, [r4, #32]
 800276c:	0020      	movs	r0, r4
 800276e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002770:	464b      	mov	r3, r9
 8002772:	5ce3      	ldrb	r3, [r4, r3]
 8002774:	421e      	tst	r6, r3
 8002776:	d10d      	bne.n	8002794 <prvSwitchTimerLists+0x54>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002778:	682b      	ldr	r3, [r5, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	2a00      	cmp	r2, #0
 800277e:	d1ec      	bne.n	800275a <prvSwitchTimerLists+0x1a>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8002780:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <prvSwitchTimerLists+0xa0>)
 8002782:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002784:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8002786:	6029      	str	r1, [r5, #0]
}
 8002788:	b004      	add	sp, #16
 800278a:	bce0      	pop	{r5, r6, r7}
 800278c:	46ba      	mov	sl, r7
 800278e:	46b1      	mov	r9, r6
 8002790:	46a8      	mov	r8, r5
 8002792:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002794:	69a3      	ldr	r3, [r4, #24]
 8002796:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8002798:	459a      	cmp	sl, r3
 800279a:	d206      	bcs.n	80027aa <prvSwitchTimerLists+0x6a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800279c:	0039      	movs	r1, r7
 800279e:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80027a0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80027a2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027a4:	f7fd fe2c 	bl	8000400 <vListInsert>
 80027a8:	e7d5      	b.n	8002756 <prvSwitchTimerLists+0x16>
	if( xTimerQueue != NULL )
 80027aa:	4643      	mov	r3, r8
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00f      	beq.n	80027d2 <prvSwitchTimerLists+0x92>
		xMessage.xMessageID = xCommandID;
 80027b2:	2300      	movs	r3, #0
 80027b4:	9301      	str	r3, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80027b6:	4653      	mov	r3, sl
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80027b8:	9403      	str	r4, [sp, #12]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80027ba:	9302      	str	r3, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80027bc:	f7ff fe72 	bl	80024a4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80027c0:	4643      	mov	r3, r8
 80027c2:	2200      	movs	r2, #0
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	a901      	add	r1, sp, #4
 80027c8:	2300      	movs	r3, #0
 80027ca:	f7fd ff1f 	bl	800060c <xQueueGenericSend>
				configASSERT( xResult );
 80027ce:	2800      	cmp	r0, #0
 80027d0:	d1c1      	bne.n	8002756 <prvSwitchTimerLists+0x16>
 80027d2:	b672      	cpsid	i
 80027d4:	e7fe      	b.n	80027d4 <prvSwitchTimerLists+0x94>
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	20000164 	.word	0x20000164
 80027dc:	20000130 	.word	0x20000130
 80027e0:	20000134 	.word	0x20000134

080027e4 <prvTimerTask>:
{
 80027e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e6:	4657      	mov	r7, sl
 80027e8:	464e      	mov	r6, r9
 80027ea:	4645      	mov	r5, r8
 80027ec:	46de      	mov	lr, fp
 80027ee:	b5e0      	push	{r5, r6, r7, lr}
 80027f0:	4b93      	ldr	r3, [pc, #588]	; (8002a40 <prvTimerTask+0x25c>)
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	4699      	mov	r9, r3
 80027f6:	4b93      	ldr	r3, [pc, #588]	; (8002a44 <prvTimerTask+0x260>)
 80027f8:	4f93      	ldr	r7, [pc, #588]	; (8002a48 <prvTimerTask+0x264>)
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	4b93      	ldr	r3, [pc, #588]	; (8002a4c <prvTimerTask+0x268>)
 80027fe:	4c94      	ldr	r4, [pc, #592]	; (8002a50 <prvTimerTask+0x26c>)
 8002800:	9300      	str	r3, [sp, #0]
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002802:	2328      	movs	r3, #40	; 0x28
 8002804:	4698      	mov	r8, r3
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002806:	464b      	mov	r3, r9
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681e      	ldr	r6, [r3, #0]
 800280c:	2e00      	cmp	r6, #0
 800280e:	d100      	bne.n	8002812 <prvTimerTask+0x2e>
 8002810:	e091      	b.n	8002936 <prvTimerTask+0x152>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 8002816:	f7ff f9fb 	bl	8001c10 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800281a:	f7ff fa01 	bl	8001c20 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800281e:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 8002820:	0005      	movs	r5, r0
	if( xTimeNow < xLastTime )
 8002822:	4283      	cmp	r3, r0
 8002824:	d900      	bls.n	8002828 <prvTimerTask+0x44>
 8002826:	e0a0      	b.n	800296a <prvTimerTask+0x186>
	xLastTime = xTimeNow;
 8002828:	6038      	str	r0, [r7, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800282a:	4286      	cmp	r6, r0
 800282c:	d800      	bhi.n	8002830 <prvTimerTask+0x4c>
 800282e:	e0a5      	b.n	800297c <prvTimerTask+0x198>
 8002830:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002832:	6820      	ldr	r0, [r4, #0]
 8002834:	1b71      	subs	r1, r6, r5
 8002836:	f7fe fe57 	bl	80014e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800283a:	f7ff fb75 	bl	8001f28 <xTaskResumeAll>
 800283e:	2800      	cmp	r0, #0
 8002840:	d100      	bne.n	8002844 <prvTimerTask+0x60>
 8002842:	e08f      	b.n	8002964 <prvTimerTask+0x180>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002844:	2302      	movs	r3, #2
 8002846:	469b      	mov	fp, r3
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002848:	3b01      	subs	r3, #1
 800284a:	469a      	mov	sl, r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800284c:	2200      	movs	r2, #0
 800284e:	6820      	ldr	r0, [r4, #0]
 8002850:	a902      	add	r1, sp, #8
 8002852:	f7fe f9eb 	bl	8000c2c <xQueueReceive>
 8002856:	2800      	cmp	r0, #0
 8002858:	d0d5      	beq.n	8002806 <prvTimerTask+0x22>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800285a:	9b02      	ldr	r3, [sp, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	dbf5      	blt.n	800284c <prvTimerTask+0x68>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002860:	9d04      	ldr	r5, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002862:	696b      	ldr	r3, [r5, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <prvTimerTask+0x8a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002868:	1d28      	adds	r0, r5, #4
 800286a:	f7fd fde1 	bl	8000430 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800286e:	f7ff f9d7 	bl	8001c20 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8002872:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 8002874:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 8002876:	4298      	cmp	r0, r3
 8002878:	d37d      	bcc.n	8002976 <prvTimerTask+0x192>
			switch( xMessage.xMessageID )
 800287a:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 800287c:	603e      	str	r6, [r7, #0]
			switch( xMessage.xMessageID )
 800287e:	2b09      	cmp	r3, #9
 8002880:	d8e4      	bhi.n	800284c <prvTimerTask+0x68>
 8002882:	9a00      	ldr	r2, [sp, #0]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	58d3      	ldr	r3, [r2, r3]
 8002888:	469f      	mov	pc, r3
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800288a:	4643      	mov	r3, r8
 800288c:	2201      	movs	r2, #1
 800288e:	5ceb      	ldrb	r3, [r5, r3]
 8002890:	4313      	orrs	r3, r2
 8002892:	4642      	mov	r2, r8
 8002894:	54ab      	strb	r3, [r5, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002896:	69a9      	ldr	r1, [r5, #24]
 8002898:	9b03      	ldr	r3, [sp, #12]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800289a:	612d      	str	r5, [r5, #16]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800289c:	185a      	adds	r2, r3, r1
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800289e:	606a      	str	r2, [r5, #4]
	if( xNextExpiryTime <= xTimeNow )
 80028a0:	42b2      	cmp	r2, r6
 80028a2:	d900      	bls.n	80028a6 <prvTimerTask+0xc2>
 80028a4:	e086      	b.n	80029b4 <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028a6:	1af3      	subs	r3, r6, r3
 80028a8:	4299      	cmp	r1, r3
 80028aa:	d900      	bls.n	80028ae <prvTimerTask+0xca>
 80028ac:	e0a4      	b.n	80029f8 <prvTimerTask+0x214>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80028ae:	6a2b      	ldr	r3, [r5, #32]
 80028b0:	0028      	movs	r0, r5
 80028b2:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80028b4:	4643      	mov	r3, r8
 80028b6:	5ceb      	ldrb	r3, [r5, r3]
 80028b8:	075b      	lsls	r3, r3, #29
 80028ba:	d5c7      	bpl.n	800284c <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
 80028bc:	6822      	ldr	r2, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80028be:	9903      	ldr	r1, [sp, #12]
 80028c0:	69ab      	ldr	r3, [r5, #24]
	if( xTimerQueue != NULL )
 80028c2:	2a00      	cmp	r2, #0
 80028c4:	d00e      	beq.n	80028e4 <prvTimerTask+0x100>
		xMessage.xMessageID = xCommandID;
 80028c6:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80028c8:	185b      	adds	r3, r3, r1
		xMessage.xMessageID = xCommandID;
 80028ca:	9205      	str	r2, [sp, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80028cc:	9306      	str	r3, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80028ce:	9507      	str	r5, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80028d0:	f7ff fde8 	bl	80024a4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80028d4:	2300      	movs	r3, #0
 80028d6:	6820      	ldr	r0, [r4, #0]
 80028d8:	001a      	movs	r2, r3
 80028da:	a905      	add	r1, sp, #20
 80028dc:	f7fd fe96 	bl	800060c <xQueueGenericSend>
							configASSERT( xResult );
 80028e0:	2800      	cmp	r0, #0
 80028e2:	d1b3      	bne.n	800284c <prvTimerTask+0x68>
 80028e4:	b672      	cpsid	i
 80028e6:	e7fe      	b.n	80028e6 <prvTimerTask+0x102>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80028e8:	4643      	mov	r3, r8
 80028ea:	2201      	movs	r2, #1
 80028ec:	5ceb      	ldrb	r3, [r5, r3]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	4642      	mov	r2, r8
 80028f2:	54ab      	strb	r3, [r5, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80028f4:	9b03      	ldr	r3, [sp, #12]
 80028f6:	61ab      	str	r3, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d100      	bne.n	80028fe <prvTimerTask+0x11a>
 80028fc:	e09e      	b.n	8002a3c <prvTimerTask+0x258>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80028fe:	199b      	adds	r3, r3, r6
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002900:	606b      	str	r3, [r5, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002902:	612d      	str	r5, [r5, #16]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002904:	1d29      	adds	r1, r5, #4
	if( xNextExpiryTime <= xTimeNow )
 8002906:	42b3      	cmp	r3, r6
 8002908:	d85f      	bhi.n	80029ca <prvTimerTask+0x1e6>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800290a:	9b01      	ldr	r3, [sp, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	f7fd fd77 	bl	8000400 <vListInsert>
	return xProcessTimerNow;
 8002912:	e79b      	b.n	800284c <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002914:	4643      	mov	r3, r8
 8002916:	4652      	mov	r2, sl
 8002918:	5ceb      	ldrb	r3, [r5, r3]
 800291a:	4393      	bics	r3, r2
 800291c:	4642      	mov	r2, r8
 800291e:	54ab      	strb	r3, [r5, r2]
					break;
 8002920:	e794      	b.n	800284c <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002922:	4643      	mov	r3, r8
 8002924:	465a      	mov	r2, fp
 8002926:	5ceb      	ldrb	r3, [r5, r3]
 8002928:	421a      	tst	r2, r3
 800292a:	d053      	beq.n	80029d4 <prvTimerTask+0x1f0>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800292c:	4652      	mov	r2, sl
 800292e:	4393      	bics	r3, r2
 8002930:	4642      	mov	r2, r8
 8002932:	54ab      	strb	r3, [r5, r2]
 8002934:	e78a      	b.n	800284c <prvTimerTask+0x68>
	vTaskSuspendAll();
 8002936:	f7ff f96b 	bl	8001c10 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800293a:	f7ff f971 	bl	8001c20 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800293e:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 8002940:	0005      	movs	r5, r0
	if( xTimeNow < xLastTime )
 8002942:	4283      	cmp	r3, r0
 8002944:	d811      	bhi.n	800296a <prvTimerTask+0x186>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002946:	9b01      	ldr	r3, [sp, #4]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002948:	6820      	ldr	r0, [r4, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800294a:	681b      	ldr	r3, [r3, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800294c:	1b71      	subs	r1, r6, r5
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800294e:	681a      	ldr	r2, [r3, #0]
	xLastTime = xTimeNow;
 8002950:	603d      	str	r5, [r7, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002952:	4253      	negs	r3, r2
 8002954:	415a      	adcs	r2, r3
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002956:	f7fe fdc7 	bl	80014e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800295a:	f7ff fae5 	bl	8001f28 <xTaskResumeAll>
 800295e:	2800      	cmp	r0, #0
 8002960:	d000      	beq.n	8002964 <prvTimerTask+0x180>
 8002962:	e76f      	b.n	8002844 <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
 8002964:	f000 f92e 	bl	8002bc4 <vPortYield>
 8002968:	e76c      	b.n	8002844 <prvTimerTask+0x60>
		prvSwitchTimerLists();
 800296a:	f7ff fee9 	bl	8002740 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800296e:	603d      	str	r5, [r7, #0]
			( void ) xTaskResumeAll();
 8002970:	f7ff fada 	bl	8001f28 <xTaskResumeAll>
 8002974:	e766      	b.n	8002844 <prvTimerTask+0x60>
		prvSwitchTimerLists();
 8002976:	f7ff fee3 	bl	8002740 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800297a:	e77e      	b.n	800287a <prvTimerTask+0x96>
				( void ) xTaskResumeAll();
 800297c:	f7ff fad4 	bl	8001f28 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002980:	464b      	mov	r3, r9
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	469a      	mov	sl, r3
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800298a:	2304      	movs	r3, #4
 800298c:	4453      	add	r3, sl
 800298e:	0018      	movs	r0, r3
 8002990:	469b      	mov	fp, r3
 8002992:	f7fd fd4d 	bl	8000430 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002996:	4653      	mov	r3, sl
 8002998:	4642      	mov	r2, r8
 800299a:	5c9b      	ldrb	r3, [r3, r2]
 800299c:	075a      	lsls	r2, r3, #29
 800299e:	d41d      	bmi.n	80029dc <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80029a0:	2201      	movs	r2, #1
 80029a2:	4641      	mov	r1, r8
 80029a4:	4393      	bics	r3, r2
 80029a6:	4652      	mov	r2, sl
 80029a8:	5453      	strb	r3, [r2, r1]
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029aa:	4653      	mov	r3, sl
 80029ac:	4650      	mov	r0, sl
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4798      	blx	r3
}
 80029b2:	e747      	b.n	8002844 <prvTimerTask+0x60>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80029b4:	42b3      	cmp	r3, r6
 80029b6:	d902      	bls.n	80029be <prvTimerTask+0x1da>
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d800      	bhi.n	80029be <prvTimerTask+0x1da>
 80029bc:	e777      	b.n	80028ae <prvTimerTask+0xca>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80029be:	464b      	mov	r3, r9
 80029c0:	1d29      	adds	r1, r5, #4
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	f7fd fd1c 	bl	8000400 <vListInsert>
	return xProcessTimerNow;
 80029c8:	e740      	b.n	800284c <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80029ca:	464b      	mov	r3, r9
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	f7fd fd17 	bl	8000400 <vListInsert>
 80029d2:	e73b      	b.n	800284c <prvTimerTask+0x68>
							vPortFree( pxTimer );
 80029d4:	0028      	movs	r0, r5
 80029d6:	f000 f981 	bl	8002cdc <vPortFree>
 80029da:	e737      	b.n	800284c <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80029dc:	4653      	mov	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80029de:	4651      	mov	r1, sl
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80029e0:	699a      	ldr	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80029e2:	6109      	str	r1, [r1, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80029e4:	18b3      	adds	r3, r6, r2
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80029e6:	604b      	str	r3, [r1, #4]
	if( xNextExpiryTime <= xTimeNow )
 80029e8:	42ab      	cmp	r3, r5
 80029ea:	d90b      	bls.n	8002a04 <prvTimerTask+0x220>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80029ec:	464b      	mov	r3, r9
 80029ee:	4659      	mov	r1, fp
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	f7fd fd05 	bl	8000400 <vListInsert>
	return xProcessTimerNow;
 80029f6:	e7d8      	b.n	80029aa <prvTimerTask+0x1c6>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80029f8:	9b01      	ldr	r3, [sp, #4]
 80029fa:	1d29      	adds	r1, r5, #4
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	f7fd fcff 	bl	8000400 <vListInsert>
	return xProcessTimerNow;
 8002a02:	e723      	b.n	800284c <prvTimerTask+0x68>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a04:	1bad      	subs	r5, r5, r6
 8002a06:	42aa      	cmp	r2, r5
 8002a08:	d812      	bhi.n	8002a30 <prvTimerTask+0x24c>
	if( xTimerQueue != NULL )
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00d      	beq.n	8002a2c <prvTimerTask+0x248>
		xMessage.xMessageID = xCommandID;
 8002a10:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002a12:	9107      	str	r1, [sp, #28]
		xMessage.xMessageID = xCommandID;
 8002a14:	9305      	str	r3, [sp, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002a16:	9606      	str	r6, [sp, #24]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002a18:	f7ff fd44 	bl	80024a4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	6820      	ldr	r0, [r4, #0]
 8002a20:	001a      	movs	r2, r3
 8002a22:	a905      	add	r1, sp, #20
 8002a24:	f7fd fdf2 	bl	800060c <xQueueGenericSend>
			configASSERT( xResult );
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	d1be      	bne.n	80029aa <prvTimerTask+0x1c6>
 8002a2c:	b672      	cpsid	i
 8002a2e:	e7fe      	b.n	8002a2e <prvTimerTask+0x24a>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002a30:	9b01      	ldr	r3, [sp, #4]
 8002a32:	4659      	mov	r1, fp
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	f7fd fce3 	bl	8000400 <vListInsert>
	return xProcessTimerNow;
 8002a3a:	e7b6      	b.n	80029aa <prvTimerTask+0x1c6>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002a3c:	b672      	cpsid	i
 8002a3e:	e7fe      	b.n	8002a3e <prvTimerTask+0x25a>
 8002a40:	20000130 	.word	0x20000130
 8002a44:	20000134 	.word	0x20000134
 8002a48:	20000160 	.word	0x20000160
 8002a4c:	08005230 	.word	0x08005230
 8002a50:	20000164 	.word	0x20000164

08002a54 <xTimerCreateTimerTask>:
{
 8002a54:	b570      	push	{r4, r5, r6, lr}
 8002a56:	b082      	sub	sp, #8
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002a58:	f000 f8c0 	bl	8002bdc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002a5c:	4c15      	ldr	r4, [pc, #84]	; (8002ab4 <xTimerCreateTimerTask+0x60>)
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d014      	beq.n	8002a8e <xTimerCreateTimerTask+0x3a>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a64:	f000 f8c6 	bl	8002bf4 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <xTimerCreateTimerTask+0x32>
			xReturn = xTaskCreate(	prvTimerTask,
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <xTimerCreateTimerTask+0x64>)
 8002a70:	2246      	movs	r2, #70	; 0x46
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	2303      	movs	r3, #3
 8002a76:	4911      	ldr	r1, [pc, #68]	; (8002abc <xTimerCreateTimerTask+0x68>)
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	4811      	ldr	r0, [pc, #68]	; (8002ac0 <xTimerCreateTimerTask+0x6c>)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f7fe fe3f 	bl	8001700 <xTaskCreate>
	configASSERT( xReturn );
 8002a82:	2800      	cmp	r0, #0
 8002a84:	d101      	bne.n	8002a8a <xTimerCreateTimerTask+0x36>
 8002a86:	b672      	cpsid	i
 8002a88:	e7fe      	b.n	8002a88 <xTimerCreateTimerTask+0x34>
}
 8002a8a:	b002      	add	sp, #8
 8002a8c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 8002a8e:	4e0d      	ldr	r6, [pc, #52]	; (8002ac4 <xTimerCreateTimerTask+0x70>)
 8002a90:	0030      	movs	r0, r6
 8002a92:	f7fd fc99 	bl	80003c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002a96:	4d0c      	ldr	r5, [pc, #48]	; (8002ac8 <xTimerCreateTimerTask+0x74>)
 8002a98:	0028      	movs	r0, r5
 8002a9a:	f7fd fc95 	bl	80003c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <xTimerCreateTimerTask+0x78>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002aa0:	2200      	movs	r2, #0
			pxCurrentTimerList = &xActiveTimerList1;
 8002aa2:	601e      	str	r6, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <xTimerCreateTimerTask+0x7c>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002aa6:	210c      	movs	r1, #12
 8002aa8:	2005      	movs	r0, #5
			pxOverflowTimerList = &xActiveTimerList2;
 8002aaa:	601d      	str	r5, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002aac:	f7fd fd0c 	bl	80004c8 <xQueueGenericCreate>
 8002ab0:	6020      	str	r0, [r4, #0]
 8002ab2:	e7d7      	b.n	8002a64 <xTimerCreateTimerTask+0x10>
 8002ab4:	20000164 	.word	0x20000164
 8002ab8:	20000168 	.word	0x20000168
 8002abc:	08005258 	.word	0x08005258
 8002ac0:	080027e5 	.word	0x080027e5
 8002ac4:	20000138 	.word	0x20000138
 8002ac8:	2000014c 	.word	0x2000014c
 8002acc:	20000130 	.word	0x20000130
 8002ad0:	20000134 	.word	0x20000134

08002ad4 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8002ad4:	2300      	movs	r3, #0
{
 8002ad6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8002ad8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <prvTaskExitError+0x20>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	d001      	beq.n	8002ae6 <prvTaskExitError+0x12>
 8002ae2:	b672      	cpsid	i
 8002ae4:	e7fe      	b.n	8002ae4 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 8002ae6:	b672      	cpsid	i
	while( ulDummy == 0 )
 8002ae8:	9b01      	ldr	r3, [sp, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0fc      	beq.n	8002ae8 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002aee:	b002      	add	sp, #8
 8002af0:	4770      	bx	lr
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	20000000 	.word	0x20000000
	...

08002b00 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8002b00:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <pxCurrentTCBConst2>)
 8002b02:	6813      	ldr	r3, [r2, #0]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	3020      	adds	r0, #32
 8002b08:	f380 8809 	msr	PSP, r0
 8002b0c:	2002      	movs	r0, #2
 8002b0e:	f380 8814 	msr	CONTROL, r0
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002b18:	46ae      	mov	lr, r5
 8002b1a:	bc08      	pop	{r3}
 8002b1c:	bc04      	pop	{r2}
 8002b1e:	b662      	cpsie	i
 8002b20:	4718      	bx	r3
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46c0      	nop			; (mov r8, r8)
 8002b2e:	46c0      	nop			; (mov r8, r8)

08002b30 <pxCurrentTCBConst2>:
 8002b30:	2000002c 	.word	0x2000002c

08002b34 <pxPortInitialiseStack>:
{
 8002b34:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002b36:	2480      	movs	r4, #128	; 0x80
 8002b38:	1f03      	subs	r3, r0, #4
 8002b3a:	0464      	lsls	r4, r4, #17
 8002b3c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8002b3e:	3b04      	subs	r3, #4
 8002b40:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002b42:	4903      	ldr	r1, [pc, #12]	; (8002b50 <pxPortInitialiseStack+0x1c>)
 8002b44:	3b04      	subs	r3, #4
 8002b46:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002b48:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 8002b4a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002b4c:	601a      	str	r2, [r3, #0]
}
 8002b4e:	bd10      	pop	{r4, pc}
 8002b50:	08002ad5 	.word	0x08002ad5

08002b54 <SVC_Handler>:
}
 8002b54:	4770      	bx	lr
 8002b56:	46c0      	nop			; (mov r8, r8)

08002b58 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8002b58:	22ff      	movs	r2, #255	; 0xff
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <xPortStartScheduler+0x54>)
 8002b5c:	0412      	lsls	r2, r2, #16
 8002b5e:	6819      	ldr	r1, [r3, #0]
{
 8002b60:	b530      	push	{r4, r5, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8002b62:	430a      	orrs	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8002b66:	22ff      	movs	r2, #255	; 0xff
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
 8002b68:	2400      	movs	r4, #0
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8002b6a:	6819      	ldr	r1, [r3, #0]
 8002b6c:	0612      	lsls	r2, r2, #24
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = 0UL;
 8002b72:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <xPortStartScheduler+0x58>)
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
 8002b74:	4a0f      	ldr	r2, [pc, #60]	; (8002bb4 <xPortStartScheduler+0x5c>)
	*(portNVIC_SYSTICK_CTRL) = 0UL;
 8002b76:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b78:	490f      	ldr	r1, [pc, #60]	; (8002bb8 <xPortStartScheduler+0x60>)
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
 8002b7a:	6014      	str	r4, [r2, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b7c:	4a0f      	ldr	r2, [pc, #60]	; (8002bbc <xPortStartScheduler+0x64>)
	uxCriticalNesting = 0;
 8002b7e:	4d10      	ldr	r5, [pc, #64]	; (8002bc0 <xPortStartScheduler+0x68>)
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b80:	6011      	str	r1, [r2, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8002b82:	2207      	movs	r2, #7
{
 8002b84:	b083      	sub	sp, #12
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8002b86:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 8002b88:	602c      	str	r4, [r5, #0]
	vPortStartFirstTask();
 8002b8a:	f7ff ffb9 	bl	8002b00 <vPortStartFirstTask>
	vTaskSwitchContext();
 8002b8e:	f7ff fa95 	bl	80020bc <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8002b92:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0UL;
 8002b94:	9401      	str	r4, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8002b96:	3301      	adds	r3, #1
 8002b98:	d001      	beq.n	8002b9e <xPortStartScheduler+0x46>
 8002b9a:	b672      	cpsid	i
 8002b9c:	e7fe      	b.n	8002b9c <xPortStartScheduler+0x44>
	portDISABLE_INTERRUPTS();
 8002b9e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8002ba0:	9b01      	ldr	r3, [sp, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0fc      	beq.n	8002ba0 <xPortStartScheduler+0x48>
}
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	b003      	add	sp, #12
 8002baa:	bd30      	pop	{r4, r5, pc}
 8002bac:	e000ed20 	.word	0xe000ed20
 8002bb0:	e000e010 	.word	0xe000e010
 8002bb4:	e000e018 	.word	0xe000e018
 8002bb8:	0000270f 	.word	0x0000270f
 8002bbc:	e000e014 	.word	0xe000e014
 8002bc0:	20000000 	.word	0x20000000

08002bc4 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <vPortYield+0x14>)
 8002bc8:	0552      	lsls	r2, r2, #21
 8002bca:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8002bcc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002bd0:	f3bf 8f6f 	isb	sy
}
 8002bd4:	4770      	bx	lr
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	e000ed04 	.word	0xe000ed04

08002bdc <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8002bdc:	b672      	cpsid	i
    uxCriticalNesting++;
 8002bde:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <vPortEnterCritical+0x14>)
 8002be0:	6813      	ldr	r3, [r2, #0]
 8002be2:	3301      	adds	r3, #1
 8002be4:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 8002be6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002bea:	f3bf 8f6f 	isb	sy
}
 8002bee:	4770      	bx	lr
 8002bf0:	20000000 	.word	0x20000000

08002bf4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002bf4:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <vPortExitCritical+0x18>)
 8002bf6:	6813      	ldr	r3, [r2, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <vPortExitCritical+0xc>
 8002bfc:	b672      	cpsid	i
 8002bfe:	e7fe      	b.n	8002bfe <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8002c00:	3b01      	subs	r3, #1
 8002c02:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d100      	bne.n	8002c0a <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
 8002c08:	b662      	cpsie	i
}
 8002c0a:	4770      	bx	lr
 8002c0c:	20000000 	.word	0x20000000

08002c10 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8002c10:	f3ef 8010 	mrs	r0, PRIMASK
 8002c14:	b672      	cpsid	i
 8002c16:	4770      	bx	lr

08002c18 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8002c18:	f380 8810 	msr	PRIMASK, r0
 8002c1c:	4770      	bx	lr
 8002c1e:	46c0      	nop			; (mov r8, r8)

08002c20 <PendSV_Handler>:
	__asm volatile
 8002c20:	f3ef 8009 	mrs	r0, PSP
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <pxCurrentTCBConst>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	3820      	subs	r0, #32
 8002c2a:	6010      	str	r0, [r2, #0]
 8002c2c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002c2e:	4644      	mov	r4, r8
 8002c30:	464d      	mov	r5, r9
 8002c32:	4656      	mov	r6, sl
 8002c34:	465f      	mov	r7, fp
 8002c36:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002c38:	b508      	push	{r3, lr}
 8002c3a:	b672      	cpsid	i
 8002c3c:	f7ff fa3e 	bl	80020bc <vTaskSwitchContext>
 8002c40:	b662      	cpsie	i
 8002c42:	bc0c      	pop	{r2, r3}
 8002c44:	6811      	ldr	r1, [r2, #0]
 8002c46:	6808      	ldr	r0, [r1, #0]
 8002c48:	3010      	adds	r0, #16
 8002c4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002c4c:	46a0      	mov	r8, r4
 8002c4e:	46a9      	mov	r9, r5
 8002c50:	46b2      	mov	sl, r6
 8002c52:	46bb      	mov	fp, r7
 8002c54:	f380 8809 	msr	PSP, r0
 8002c58:	3820      	subs	r0, #32
 8002c5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002c5c:	4718      	bx	r3
 8002c5e:	46c0      	nop			; (mov r8, r8)

08002c60 <pxCurrentTCBConst>:
 8002c60:	2000002c 	.word	0x2000002c

08002c64 <SysTick_Handler>:
{
 8002c64:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c66:	f7ff ffd3 	bl	8002c10 <ulSetInterruptMaskFromISR>
 8002c6a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8002c6c:	f7fe ffde 	bl	8001c2c <xTaskIncrementTick>
 8002c70:	2800      	cmp	r0, #0
 8002c72:	d003      	beq.n	8002c7c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8002c74:	2280      	movs	r2, #128	; 0x80
 8002c76:	4b03      	ldr	r3, [pc, #12]	; (8002c84 <SysTick_Handler+0x20>)
 8002c78:	0552      	lsls	r2, r2, #21
 8002c7a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002c7c:	0020      	movs	r0, r4
 8002c7e:	f7ff ffcb 	bl	8002c18 <vClearInterruptMaskFromISR>
}
 8002c82:	bd10      	pop	{r4, pc}
 8002c84:	e000ed04 	.word	0xe000ed04

08002c88 <pvPortMalloc>:
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002c88:	2307      	movs	r3, #7
{
 8002c8a:	b570      	push	{r4, r5, r6, lr}
 8002c8c:	0004      	movs	r4, r0
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002c8e:	4203      	tst	r3, r0
 8002c90:	d001      	beq.n	8002c96 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002c92:	439c      	bics	r4, r3
 8002c94:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
 8002c96:	f7fe ffbb 	bl	8001c10 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8002c9a:	4a0c      	ldr	r2, [pc, #48]	; (8002ccc <pvPortMalloc+0x44>)
 8002c9c:	6813      	ldr	r3, [r2, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00f      	beq.n	8002cc2 <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002ca2:	490b      	ldr	r1, [pc, #44]	; (8002cd0 <pvPortMalloc+0x48>)
 8002ca4:	480b      	ldr	r0, [pc, #44]	; (8002cd4 <pvPortMalloc+0x4c>)
 8002ca6:	680d      	ldr	r5, [r1, #0]
 8002ca8:	192c      	adds	r4, r5, r4
 8002caa:	4284      	cmp	r4, r0
 8002cac:	d807      	bhi.n	8002cbe <pvPortMalloc+0x36>
 8002cae:	42a5      	cmp	r5, r4
 8002cb0:	d205      	bcs.n	8002cbe <pvPortMalloc+0x36>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8002cb2:	195d      	adds	r5, r3, r5
			xNextFreeByte += xWantedSize;
 8002cb4:	600c      	str	r4, [r1, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002cb6:	f7ff f937 	bl	8001f28 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 8002cba:	0028      	movs	r0, r5
 8002cbc:	bd70      	pop	{r4, r5, r6, pc}
void *pvReturn = NULL;
 8002cbe:	2500      	movs	r5, #0
 8002cc0:	e7f9      	b.n	8002cb6 <pvPortMalloc+0x2e>
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002cc2:	2107      	movs	r1, #7
 8002cc4:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <pvPortMalloc+0x50>)
 8002cc6:	438b      	bics	r3, r1
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	e7ea      	b.n	8002ca2 <pvPortMalloc+0x1a>
 8002ccc:	2000016c 	.word	0x2000016c
 8002cd0:	20001d70 	.word	0x20001d70
 8002cd4:	00001bf7 	.word	0x00001bf7
 8002cd8:	20000178 	.word	0x20000178

08002cdc <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	d001      	beq.n	8002ce4 <vPortFree+0x8>
 8002ce0:	b672      	cpsid	i
 8002ce2:	e7fe      	b.n	8002ce2 <vPortFree+0x6>
}
 8002ce4:	4770      	bx	lr
 8002ce6:	46c0      	nop			; (mov r8, r8)

08002ce8 <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8002ce8:	4b02      	ldr	r3, [pc, #8]	; (8002cf4 <xPortGetFreeHeapSize+0xc>)
 8002cea:	4803      	ldr	r0, [pc, #12]	; (8002cf8 <xPortGetFreeHeapSize+0x10>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	1ac0      	subs	r0, r0, r3
}
 8002cf0:	4770      	bx	lr
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	20001d70 	.word	0x20001d70
 8002cf8:	00001bf8 	.word	0x00001bf8

08002cfc <SEGGER_RTT_Read>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 8002cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfe:	4657      	mov	r7, sl
 8002d00:	464e      	mov	r6, r9
 8002d02:	46de      	mov	lr, fp
 8002d04:	4645      	mov	r5, r8
 8002d06:	b5e0      	push	{r5, r6, r7, lr}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	0006      	movs	r6, r0
 8002d0c:	4692      	mov	sl, r2
 8002d0e:	9100      	str	r1, [sp, #0]
  unsigned NumBytesRead;
  //
  SEGGER_RTT_LOCK();
 8002d10:	f3ef 8b10 	mrs	fp, PRIMASK
 8002d14:	2101      	movs	r1, #1
 8002d16:	f381 8810 	msr	PRIMASK, r1
  INIT();
 8002d1a:	4c44      	ldr	r4, [pc, #272]	; (8002e2c <SEGGER_RTT_Read+0x130>)
 8002d1c:	7823      	ldrb	r3, [r4, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d059      	beq.n	8002dd6 <SEGGER_RTT_Read+0xda>
  RdOff = pRing->RdOff;
 8002d22:	0077      	lsls	r7, r6, #1
 8002d24:	19bb      	adds	r3, r7, r6
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	18e3      	adds	r3, r4, r3
 8002d2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d2c:	4690      	mov	r8, r2
  WrOff = pRing->WrOff;
 8002d2e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d30:	4691      	mov	r9, r2
  if (RdOff > WrOff) {
 8002d32:	4590      	cmp	r8, r2
 8002d34:	d827      	bhi.n	8002d86 <SEGGER_RTT_Read+0x8a>
  NumBytesRem = WrOff - RdOff;
 8002d36:	0013      	movs	r3, r2
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002d38:	4655      	mov	r5, sl
  NumBytesRem = WrOff - RdOff;
 8002d3a:	4642      	mov	r2, r8
 8002d3c:	1a9b      	subs	r3, r3, r2
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002d3e:	429d      	cmp	r5, r3
 8002d40:	d80b      	bhi.n	8002d5a <SEGGER_RTT_Read+0x5e>
  if (NumBytesRem > 0u) {
 8002d42:	2d00      	cmp	r5, #0
 8002d44:	d10b      	bne.n	8002d5e <SEGGER_RTT_Read+0x62>
  //
  NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8002d46:	f38b 8810 	msr	PRIMASK, fp
  //
  return NumBytesRead;
}
 8002d4a:	0028      	movs	r0, r5
 8002d4c:	b003      	add	sp, #12
 8002d4e:	bcf0      	pop	{r4, r5, r6, r7}
 8002d50:	46bb      	mov	fp, r7
 8002d52:	46b2      	mov	sl, r6
 8002d54:	46a9      	mov	r9, r5
 8002d56:	46a0      	mov	r8, r4
 8002d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002d5a:	1e1d      	subs	r5, r3, #0
  if (NumBytesRem > 0u) {
 8002d5c:	d0f3      	beq.n	8002d46 <SEGGER_RTT_Read+0x4a>
 8002d5e:	46a9      	mov	r9, r5
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002d60:	19bb      	adds	r3, r7, r6
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	18e3      	adds	r3, r4, r3
 8002d66:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8002d68:	002a      	movs	r2, r5
 8002d6a:	4441      	add	r1, r8
 8002d6c:	9800      	ldr	r0, [sp, #0]
    RdOff        += NumBytesRem;
 8002d6e:	44a8      	add	r8, r5
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002d70:	f002 fa48 	bl	8005204 <memcpy>
    NumBytesRead += NumBytesRem;
 8002d74:	464d      	mov	r5, r9
  if (NumBytesRead) {
 8002d76:	2d00      	cmp	r5, #0
 8002d78:	d0e5      	beq.n	8002d46 <SEGGER_RTT_Read+0x4a>
    pRing->RdOff = RdOff;
 8002d7a:	4643      	mov	r3, r8
 8002d7c:	19bf      	adds	r7, r7, r6
 8002d7e:	00ff      	lsls	r7, r7, #3
 8002d80:	19e7      	adds	r7, r4, r7
 8002d82:	673b      	str	r3, [r7, #112]	; 0x70
 8002d84:	e7df      	b.n	8002d46 <SEGGER_RTT_Read+0x4a>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002d86:	4642      	mov	r2, r8
 8002d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002d8a:	4655      	mov	r5, sl
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002d8c:	1a9b      	subs	r3, r3, r2
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002d8e:	459a      	cmp	sl, r3
 8002d90:	d847      	bhi.n	8002e22 <SEGGER_RTT_Read+0x126>
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002d92:	19bb      	adds	r3, r7, r6
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	18e3      	adds	r3, r4, r3
 8002d98:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8002d9a:	002a      	movs	r2, r5
 8002d9c:	4441      	add	r1, r8
 8002d9e:	9800      	ldr	r0, [sp, #0]
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	f002 fa2f 	bl	8005204 <memcpy>
    BufferSize   -= NumBytesRem;
 8002da6:	4651      	mov	r1, sl
    if (RdOff == pRing->SizeOfBuffer) {
 8002da8:	9a01      	ldr	r2, [sp, #4]
    RdOff        += NumBytesRem;
 8002daa:	44a8      	add	r8, r5
    if (RdOff == pRing->SizeOfBuffer) {
 8002dac:	6e92      	ldr	r2, [r2, #104]	; 0x68
    BufferSize   -= NumBytesRem;
 8002dae:	1b4b      	subs	r3, r1, r5
    if (RdOff == pRing->SizeOfBuffer) {
 8002db0:	4590      	cmp	r8, r2
 8002db2:	d038      	beq.n	8002e26 <SEGGER_RTT_Read+0x12a>
  NumBytesRem = WrOff - RdOff;
 8002db4:	464a      	mov	r2, r9
 8002db6:	4641      	mov	r1, r8
 8002db8:	1a52      	subs	r2, r2, r1
 8002dba:	4691      	mov	r9, r2
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002dbc:	454b      	cmp	r3, r9
 8002dbe:	d82c      	bhi.n	8002e1a <SEGGER_RTT_Read+0x11e>
  if (NumBytesRem > 0u) {
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0d8      	beq.n	8002d76 <SEGGER_RTT_Read+0x7a>
    pBuffer      += NumBytesRem;
 8002dc4:	9a00      	ldr	r2, [sp, #0]
    NumBytesRead += NumBytesRem;
 8002dc6:	46a9      	mov	r9, r5
    pBuffer      += NumBytesRem;
 8002dc8:	4694      	mov	ip, r2
 8002dca:	44ac      	add	ip, r5
 8002dcc:	4662      	mov	r2, ip
    NumBytesRead += NumBytesRem;
 8002dce:	001d      	movs	r5, r3
    pBuffer      += NumBytesRem;
 8002dd0:	9200      	str	r2, [sp, #0]
    NumBytesRead += NumBytesRem;
 8002dd2:	4499      	add	r9, r3
 8002dd4:	e7c4      	b.n	8002d60 <SEGGER_RTT_Read+0x64>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002dd6:	2003      	movs	r0, #3
 8002dd8:	2103      	movs	r1, #3
  p->aUp[0].sName         = "Terminal";
 8002dda:	4a15      	ldr	r2, [pc, #84]	; (8002e30 <SEGGER_RTT_Read+0x134>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002ddc:	6120      	str	r0, [r4, #16]
 8002dde:	6161      	str	r1, [r4, #20]
  p->aUp[0].sName         = "Terminal";
 8002de0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002de2:	4914      	ldr	r1, [pc, #80]	; (8002e34 <SEGGER_RTT_Read+0x138>)
  p->aDown[0].sName         = "Terminal";
 8002de4:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002de6:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <SEGGER_RTT_Read+0x13c>)
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002de8:	61e1      	str	r1, [r4, #28]
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002dea:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002dec:	2140      	movs	r1, #64	; 0x40
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002dee:	2210      	movs	r2, #16
  p->aUp[0].RdOff         = 0u;
 8002df0:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002df2:	6221      	str	r1, [r4, #32]
  p->aUp[0].WrOff         = 0u;
 8002df4:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002df6:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002df8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002dfa:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002dfc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002dfe:	6763      	str	r3, [r4, #116]	; 0x74
  strcpy(&p->acID[7], "RTT");
 8002e00:	3a0c      	subs	r2, #12
 8002e02:	490e      	ldr	r1, [pc, #56]	; (8002e3c <SEGGER_RTT_Read+0x140>)
 8002e04:	1de0      	adds	r0, r4, #7
 8002e06:	f002 f9fd 	bl	8005204 <memcpy>
  strcpy(&p->acID[0], "SEGGER");
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <SEGGER_RTT_Read+0x144>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	6022      	str	r2, [r4, #0]
 8002e10:	889b      	ldrh	r3, [r3, #4]
 8002e12:	80a3      	strh	r3, [r4, #4]
  p->acID[6] = ' ';
 8002e14:	2320      	movs	r3, #32
 8002e16:	71a3      	strb	r3, [r4, #6]
}
 8002e18:	e783      	b.n	8002d22 <SEGGER_RTT_Read+0x26>
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002e1a:	464b      	mov	r3, r9
  if (NumBytesRem > 0u) {
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0aa      	beq.n	8002d76 <SEGGER_RTT_Read+0x7a>
 8002e20:	e7d0      	b.n	8002dc4 <SEGGER_RTT_Read+0xc8>
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002e22:	001d      	movs	r5, r3
 8002e24:	e7b5      	b.n	8002d92 <SEGGER_RTT_Read+0x96>
      RdOff = 0u;
 8002e26:	2200      	movs	r2, #0
 8002e28:	4690      	mov	r8, r2
 8002e2a:	e7c7      	b.n	8002dbc <SEGGER_RTT_Read+0xc0>
 8002e2c:	20001d78 	.word	0x20001d78
 8002e30:	08005260 	.word	0x08005260
 8002e34:	20001e30 	.word	0x20001e30
 8002e38:	20001e20 	.word	0x20001e20
 8002e3c:	0800526c 	.word	0x0800526c
 8002e40:	08005270 	.word	0x08005270

08002e44 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e46:	4657      	mov	r7, sl
 8002e48:	464e      	mov	r6, r9
 8002e4a:	46de      	mov	lr, fp
 8002e4c:	4645      	mov	r5, r8
 8002e4e:	b5e0      	push	{r5, r6, r7, lr}
  unsigned Status;
  //
  INIT();
 8002e50:	4b88      	ldr	r3, [pc, #544]	; (8003074 <SEGGER_RTT_Write+0x230>)
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002e52:	0004      	movs	r4, r0
  INIT();
 8002e54:	4699      	mov	r9, r3
 8002e56:	781b      	ldrb	r3, [r3, #0]
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002e58:	468a      	mov	sl, r1
 8002e5a:	0017      	movs	r7, r2
 8002e5c:	b085      	sub	sp, #20
  INIT();
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01d      	beq.n	8002e9e <SEGGER_RTT_Write+0x5a>
  SEGGER_RTT_LOCK();
 8002e62:	f3ef 8b10 	mrs	fp, PRIMASK
 8002e66:	2101      	movs	r1, #1
 8002e68:	f381 8810 	msr	PRIMASK, r1
  switch (pRing->Flags) {
 8002e6c:	0065      	lsls	r5, r4, #1
 8002e6e:	192e      	adds	r6, r5, r4
 8002e70:	00f6      	lsls	r6, r6, #3
 8002e72:	444e      	add	r6, r9
 8002e74:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002e76:	4698      	mov	r8, r3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d100      	bne.n	8002e7e <SEGGER_RTT_Write+0x3a>
 8002e7c:	e091      	b.n	8002fa2 <SEGGER_RTT_Write+0x15e>
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d058      	beq.n	8002f34 <SEGGER_RTT_Write+0xf0>
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d031      	beq.n	8002eea <SEGGER_RTT_Write+0xa6>
 8002e86:	2300      	movs	r3, #0
 8002e88:	4698      	mov	r8, r3
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8002e8a:	f38b 8810 	msr	PRIMASK, fp
  //
  return Status;
}
 8002e8e:	4640      	mov	r0, r8
 8002e90:	b005      	add	sp, #20
 8002e92:	bcf0      	pop	{r4, r5, r6, r7}
 8002e94:	46bb      	mov	fp, r7
 8002e96:	46b2      	mov	sl, r6
 8002e98:	46a9      	mov	r9, r5
 8002e9a:	46a0      	mov	r8, r4
 8002e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002e9e:	2003      	movs	r0, #3
 8002ea0:	2103      	movs	r1, #3
 8002ea2:	464a      	mov	r2, r9
 8002ea4:	6110      	str	r0, [r2, #16]
 8002ea6:	6151      	str	r1, [r2, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002ea8:	4648      	mov	r0, r9
  p->aUp[0].sName         = "Terminal";
 8002eaa:	4649      	mov	r1, r9
 8002eac:	4a72      	ldr	r2, [pc, #456]	; (8003078 <SEGGER_RTT_Write+0x234>)
  p->aUp[0].RdOff         = 0u;
 8002eae:	6283      	str	r3, [r0, #40]	; 0x28
  p->aUp[0].sName         = "Terminal";
 8002eb0:	618a      	str	r2, [r1, #24]
  p->aDown[0].sName         = "Terminal";
 8002eb2:	6602      	str	r2, [r0, #96]	; 0x60
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002eb4:	4971      	ldr	r1, [pc, #452]	; (800307c <SEGGER_RTT_Write+0x238>)
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002eb6:	4a72      	ldr	r2, [pc, #456]	; (8003080 <SEGGER_RTT_Write+0x23c>)
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002eb8:	61c1      	str	r1, [r0, #28]
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002eba:	6642      	str	r2, [r0, #100]	; 0x64
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002ebc:	2140      	movs	r1, #64	; 0x40
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002ebe:	2210      	movs	r2, #16
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002ec0:	6201      	str	r1, [r0, #32]
  p->aUp[0].WrOff         = 0u;
 8002ec2:	6243      	str	r3, [r0, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002ec4:	62c3      	str	r3, [r0, #44]	; 0x2c
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002ec6:	6682      	str	r2, [r0, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002ec8:	6703      	str	r3, [r0, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002eca:	66c3      	str	r3, [r0, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002ecc:	6743      	str	r3, [r0, #116]	; 0x74
  strcpy(&p->acID[7], "RTT");
 8002ece:	2204      	movs	r2, #4
 8002ed0:	496c      	ldr	r1, [pc, #432]	; (8003084 <SEGGER_RTT_Write+0x240>)
 8002ed2:	3007      	adds	r0, #7
 8002ed4:	f002 f996 	bl	8005204 <memcpy>
  strcpy(&p->acID[0], "SEGGER");
 8002ed8:	4649      	mov	r1, r9
 8002eda:	4b6b      	ldr	r3, [pc, #428]	; (8003088 <SEGGER_RTT_Write+0x244>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	600a      	str	r2, [r1, #0]
 8002ee0:	889b      	ldrh	r3, [r3, #4]
 8002ee2:	808b      	strh	r3, [r1, #4]
  p->acID[6] = ' ';
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	718b      	strb	r3, [r1, #6]
}
 8002ee8:	e7bb      	b.n	8002e62 <SEGGER_RTT_Write+0x1e>
  WrOff = pRing->WrOff;
 8002eea:	6a71      	ldr	r1, [r6, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002eec:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002eee:	9101      	str	r1, [sp, #4]
  if (RdOff <= WrOff) {
 8002ef0:	428b      	cmp	r3, r1
 8002ef2:	d800      	bhi.n	8002ef6 <SEGGER_RTT_Write+0xb2>
 8002ef4:	e082      	b.n	8002ffc <SEGGER_RTT_Write+0x1b8>
    r = RdOff - WrOff - 1u;
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	1a5b      	subs	r3, r3, r1
    if (Avail < NumBytes) {
 8002efa:	429f      	cmp	r7, r3
 8002efc:	d8c5      	bhi.n	8002e8a <SEGGER_RTT_Write+0x46>
  Rem = pRing->SizeOfBuffer - WrOff;
 8002efe:	192d      	adds	r5, r5, r4
 8002f00:	00ed      	lsls	r5, r5, #3
 8002f02:	444d      	add	r5, r9
 8002f04:	6a2b      	ldr	r3, [r5, #32]
 8002f06:	9a01      	ldr	r2, [sp, #4]
 8002f08:	4698      	mov	r8, r3
 8002f0a:	1a9e      	subs	r6, r3, r2
  if (Rem > NumBytes) {
 8002f0c:	42b7      	cmp	r7, r6
 8002f0e:	d300      	bcc.n	8002f12 <SEGGER_RTT_Write+0xce>
 8002f10:	e094      	b.n	800303c <SEGGER_RTT_Write+0x1f8>
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8002f12:	3401      	adds	r4, #1
 8002f14:	4694      	mov	ip, r2
 8002f16:	0063      	lsls	r3, r4, #1
 8002f18:	191b      	adds	r3, r3, r4
 8002f1a:	0014      	movs	r4, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	444b      	add	r3, r9
 8002f20:	6858      	ldr	r0, [r3, #4]
 8002f22:	003a      	movs	r2, r7
 8002f24:	4651      	mov	r1, sl
 8002f26:	4460      	add	r0, ip
 8002f28:	f002 f96c 	bl	8005204 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8002f2c:	193b      	adds	r3, r7, r4
 8002f2e:	46b8      	mov	r8, r7
 8002f30:	626b      	str	r3, [r5, #36]	; 0x24
 8002f32:	e7aa      	b.n	8002e8a <SEGGER_RTT_Write+0x46>
  NumBytesWritten = 0u;
 8002f34:	2300      	movs	r3, #0
 8002f36:	3401      	adds	r4, #1
 8002f38:	4698      	mov	r8, r3
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8002f3a:	0063      	lsls	r3, r4, #1
 8002f3c:	191b      	adds	r3, r3, r4
 8002f3e:	00db      	lsls	r3, r3, #3
  WrOff = pRing->WrOff;
 8002f40:	6a75      	ldr	r5, [r6, #36]	; 0x24
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8002f42:	9301      	str	r3, [sp, #4]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002f44:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    if (RdOff > WrOff) {
 8002f46:	42ab      	cmp	r3, r5
 8002f48:	d91f      	bls.n	8002f8a <SEGGER_RTT_Write+0x146>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002f4a:	3b01      	subs	r3, #1
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002f4c:	6a34      	ldr	r4, [r6, #32]
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002f4e:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8002f50:	42bb      	cmp	r3, r7
 8002f52:	d900      	bls.n	8002f56 <SEGGER_RTT_Write+0x112>
 8002f54:	003b      	movs	r3, r7
 8002f56:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8002f58:	429c      	cmp	r4, r3
 8002f5a:	d900      	bls.n	8002f5e <SEGGER_RTT_Write+0x11a>
 8002f5c:	001c      	movs	r4, r3
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8002f5e:	9b01      	ldr	r3, [sp, #4]
 8002f60:	4651      	mov	r1, sl
 8002f62:	444b      	add	r3, r9
 8002f64:	6858      	ldr	r0, [r3, #4]
 8002f66:	0022      	movs	r2, r4
 8002f68:	1940      	adds	r0, r0, r5
 8002f6a:	f002 f94b 	bl	8005204 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
 8002f6e:	6a33      	ldr	r3, [r6, #32]
    WrOff           += NumBytesToWrite;
 8002f70:	192d      	adds	r5, r5, r4
    NumBytesWritten += NumBytesToWrite;
 8002f72:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
 8002f74:	44a2      	add	sl, r4
    NumBytes        -= NumBytesToWrite;
 8002f76:	1b3f      	subs	r7, r7, r4
    if (WrOff == pRing->SizeOfBuffer) {
 8002f78:	429d      	cmp	r5, r3
 8002f7a:	d00b      	beq.n	8002f94 <SEGGER_RTT_Write+0x150>
    pRing->WrOff = WrOff;
 8002f7c:	6275      	str	r5, [r6, #36]	; 0x24
  } while (NumBytes);
 8002f7e:	2f00      	cmp	r7, #0
 8002f80:	d100      	bne.n	8002f84 <SEGGER_RTT_Write+0x140>
 8002f82:	e782      	b.n	8002e8a <SEGGER_RTT_Write+0x46>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002f84:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    if (RdOff > WrOff) {
 8002f86:	42ab      	cmp	r3, r5
 8002f88:	d8df      	bhi.n	8002f4a <SEGGER_RTT_Write+0x106>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002f8a:	6a34      	ldr	r4, [r6, #32]
 8002f8c:	191b      	adds	r3, r3, r4
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	1b5b      	subs	r3, r3, r5
 8002f92:	e7dd      	b.n	8002f50 <SEGGER_RTT_Write+0x10c>
    pRing->WrOff = WrOff;
 8002f94:	2300      	movs	r3, #0
 8002f96:	6273      	str	r3, [r6, #36]	; 0x24
  } while (NumBytes);
 8002f98:	2f00      	cmp	r7, #0
 8002f9a:	d100      	bne.n	8002f9e <SEGGER_RTT_Write+0x15a>
 8002f9c:	e775      	b.n	8002e8a <SEGGER_RTT_Write+0x46>
      WrOff = 0u;
 8002f9e:	2500      	movs	r5, #0
 8002fa0:	e7d0      	b.n	8002f44 <SEGGER_RTT_Write+0x100>
  WrOff = pRing->WrOff;
 8002fa2:	6a72      	ldr	r2, [r6, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002fa4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002fa6:	9201      	str	r2, [sp, #4]
  if (RdOff <= WrOff) {
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d920      	bls.n	8002fee <SEGGER_RTT_Write+0x1aa>
    r = RdOff - WrOff - 1u;
 8002fac:	3b01      	subs	r3, #1
 8002fae:	1a9b      	subs	r3, r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002fb0:	6a32      	ldr	r2, [r6, #32]
 8002fb2:	9202      	str	r2, [sp, #8]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8002fb4:	46b8      	mov	r8, r7
 8002fb6:	429f      	cmp	r7, r3
 8002fb8:	d900      	bls.n	8002fbc <SEGGER_RTT_Write+0x178>
 8002fba:	4698      	mov	r8, r3
  Rem = pRing->SizeOfBuffer - WrOff;
 8002fbc:	9b02      	ldr	r3, [sp, #8]
 8002fbe:	9901      	ldr	r1, [sp, #4]
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8002fc0:	1c62      	adds	r2, r4, #1
  Rem = pRing->SizeOfBuffer - WrOff;
 8002fc2:	1a5e      	subs	r6, r3, r1
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8002fc4:	0053      	lsls	r3, r2, #1
 8002fc6:	189b      	adds	r3, r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	444b      	add	r3, r9
  if (Rem > NumBytes) {
 8002fcc:	45b0      	cmp	r8, r6
 8002fce:	d21a      	bcs.n	8003006 <SEGGER_RTT_Write+0x1c2>
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8002fd0:	468c      	mov	ip, r1
 8002fd2:	000e      	movs	r6, r1
 8002fd4:	6858      	ldr	r0, [r3, #4]
 8002fd6:	4642      	mov	r2, r8
 8002fd8:	4651      	mov	r1, sl
 8002fda:	4460      	add	r0, ip
 8002fdc:	f002 f912 	bl	8005204 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8002fe0:	0033      	movs	r3, r6
 8002fe2:	192d      	adds	r5, r5, r4
 8002fe4:	00ed      	lsls	r5, r5, #3
 8002fe6:	444d      	add	r5, r9
 8002fe8:	4443      	add	r3, r8
 8002fea:	626b      	str	r3, [r5, #36]	; 0x24
 8002fec:	e74d      	b.n	8002e8a <SEGGER_RTT_Write+0x46>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002fee:	6a31      	ldr	r1, [r6, #32]
 8002ff0:	468c      	mov	ip, r1
 8002ff2:	4463      	add	r3, ip
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	9102      	str	r1, [sp, #8]
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	e7db      	b.n	8002fb4 <SEGGER_RTT_Write+0x170>
 8002ffc:	6a32      	ldr	r2, [r6, #32]
 8002ffe:	189b      	adds	r3, r3, r2
 8003000:	3b01      	subs	r3, #1
 8003002:	1a5b      	subs	r3, r3, r1
 8003004:	e779      	b.n	8002efa <SEGGER_RTT_Write+0xb6>
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8003006:	9a01      	ldr	r2, [sp, #4]
 8003008:	6858      	ldr	r0, [r3, #4]
 800300a:	4694      	mov	ip, r2
 800300c:	4651      	mov	r1, sl
 800300e:	0032      	movs	r2, r6
 8003010:	4460      	add	r0, ip
 8003012:	9303      	str	r3, [sp, #12]
 8003014:	f002 f8f6 	bl	8005204 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003018:	4641      	mov	r1, r8
 800301a:	9a01      	ldr	r2, [sp, #4]
 800301c:	9802      	ldr	r0, [sp, #8]
 800301e:	4694      	mov	ip, r2
 8003020:	1a0f      	subs	r7, r1, r0
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8003022:	0031      	movs	r1, r6
 8003024:	9b03      	ldr	r3, [sp, #12]
    pRing->WrOff = NumBytesAtOnce;
 8003026:	192d      	adds	r5, r5, r4
    NumBytesAtOnce = NumBytes - Rem;
 8003028:	4467      	add	r7, ip
    pRing->WrOff = NumBytesAtOnce;
 800302a:	00ed      	lsls	r5, r5, #3
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800302c:	003a      	movs	r2, r7
 800302e:	6858      	ldr	r0, [r3, #4]
 8003030:	4451      	add	r1, sl
    pRing->WrOff = NumBytesAtOnce;
 8003032:	444d      	add	r5, r9
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8003034:	f002 f8e6 	bl	8005204 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8003038:	626f      	str	r7, [r5, #36]	; 0x24
 800303a:	e726      	b.n	8002e8a <SEGGER_RTT_Write+0x46>
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 800303c:	1c63      	adds	r3, r4, #1
 800303e:	005c      	lsls	r4, r3, #1
 8003040:	18e4      	adds	r4, r4, r3
 8003042:	9b01      	ldr	r3, [sp, #4]
 8003044:	00e4      	lsls	r4, r4, #3
 8003046:	469c      	mov	ip, r3
 8003048:	444c      	add	r4, r9
 800304a:	6860      	ldr	r0, [r4, #4]
 800304c:	0032      	movs	r2, r6
 800304e:	4651      	mov	r1, sl
 8003050:	4460      	add	r0, ip
 8003052:	f002 f8d7 	bl	8005204 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003056:	4642      	mov	r2, r8
 8003058:	9b01      	ldr	r3, [sp, #4]
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800305a:	0031      	movs	r1, r6
    NumBytesAtOnce = NumBytes - Rem;
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	4698      	mov	r8, r3
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8003062:	001a      	movs	r2, r3
 8003064:	6860      	ldr	r0, [r4, #4]
 8003066:	4451      	add	r1, sl
 8003068:	f002 f8cc 	bl	8005204 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800306c:	4643      	mov	r3, r8
 800306e:	46b8      	mov	r8, r7
 8003070:	626b      	str	r3, [r5, #36]	; 0x24
 8003072:	e70a      	b.n	8002e8a <SEGGER_RTT_Write+0x46>
 8003074:	20001d78 	.word	0x20001d78
 8003078:	08005260 	.word	0x08005260
 800307c:	20001e30 	.word	0x20001e30
 8003080:	20001e20 	.word	0x20001e20
 8003084:	0800526c 	.word	0x0800526c
 8003088:	08005270 	.word	0x08005270

0800308c <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800308c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800308e:	46c6      	mov	lr, r8
  int r;

  INIT();
 8003090:	4c2a      	ldr	r4, [pc, #168]	; (800313c <SEGGER_RTT_ConfigUpBuffer+0xb0>)
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003092:	001e      	movs	r6, r3
  INIT();
 8003094:	7823      	ldrb	r3, [r4, #0]
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003096:	0005      	movs	r5, r0
 8003098:	4688      	mov	r8, r1
 800309a:	0017      	movs	r7, r2
 800309c:	b500      	push	{lr}
  INIT();
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d026      	beq.n	80030f0 <SEGGER_RTT_ConfigUpBuffer+0x64>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 80030a2:	6923      	ldr	r3, [r4, #16]
 80030a4:	429d      	cmp	r5, r3
 80030a6:	d246      	bcs.n	8003136 <SEGGER_RTT_ConfigUpBuffer+0xaa>
    SEGGER_RTT_LOCK();
 80030a8:	f3ef 8310 	mrs	r3, PRIMASK
 80030ac:	2101      	movs	r1, #1
 80030ae:	f381 8810 	msr	PRIMASK, r1
    if (BufferIndex > 0u) {
 80030b2:	2000      	movs	r0, #0
 80030b4:	2d00      	cmp	r5, #0
 80030b6:	d10a      	bne.n	80030ce <SEGGER_RTT_ConfigUpBuffer+0x42>
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80030b8:	1940      	adds	r0, r0, r5
 80030ba:	9a06      	ldr	r2, [sp, #24]
 80030bc:	00c0      	lsls	r0, r0, #3
 80030be:	1824      	adds	r4, r4, r0
 80030c0:	62e2      	str	r2, [r4, #44]	; 0x2c
    SEGGER_RTT_UNLOCK();
 80030c2:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 80030c6:	2000      	movs	r0, #0
  } else {
    r = -1;
  }
  return r;
}
 80030c8:	bc80      	pop	{r7}
 80030ca:	46b8      	mov	r8, r7
 80030cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 80030ce:	1c6a      	adds	r2, r5, #1
 80030d0:	0050      	lsls	r0, r2, #1
 80030d2:	1880      	adds	r0, r0, r2
 80030d4:	4642      	mov	r2, r8
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80030d6:	2100      	movs	r1, #0
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 80030d8:	00c0      	lsls	r0, r0, #3
 80030da:	5022      	str	r2, [r4, r0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80030dc:	1820      	adds	r0, r4, r0
 80030de:	6047      	str	r7, [r0, #4]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80030e0:	0068      	lsls	r0, r5, #1
 80030e2:	1942      	adds	r2, r0, r5
 80030e4:	00d2      	lsls	r2, r2, #3
 80030e6:	18a2      	adds	r2, r4, r2
 80030e8:	6216      	str	r6, [r2, #32]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80030ea:	6291      	str	r1, [r2, #40]	; 0x28
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80030ec:	6251      	str	r1, [r2, #36]	; 0x24
 80030ee:	e7e3      	b.n	80030b8 <SEGGER_RTT_ConfigUpBuffer+0x2c>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80030f0:	2003      	movs	r0, #3
 80030f2:	2103      	movs	r1, #3
  p->aUp[0].sName         = "Terminal";
 80030f4:	4a12      	ldr	r2, [pc, #72]	; (8003140 <SEGGER_RTT_ConfigUpBuffer+0xb4>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80030f6:	6120      	str	r0, [r4, #16]
 80030f8:	6161      	str	r1, [r4, #20]
  p->aUp[0].sName         = "Terminal";
 80030fa:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80030fc:	4911      	ldr	r1, [pc, #68]	; (8003144 <SEGGER_RTT_ConfigUpBuffer+0xb8>)
  p->aDown[0].sName         = "Terminal";
 80030fe:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003100:	4a11      	ldr	r2, [pc, #68]	; (8003148 <SEGGER_RTT_ConfigUpBuffer+0xbc>)
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003102:	61e1      	str	r1, [r4, #28]
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003104:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8003106:	2140      	movs	r1, #64	; 0x40
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8003108:	2210      	movs	r2, #16
  p->aUp[0].RdOff         = 0u;
 800310a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800310c:	6221      	str	r1, [r4, #32]
  p->aUp[0].WrOff         = 0u;
 800310e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003110:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8003112:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003114:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003116:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003118:	6763      	str	r3, [r4, #116]	; 0x74
  strcpy(&p->acID[7], "RTT");
 800311a:	3a0c      	subs	r2, #12
 800311c:	490b      	ldr	r1, [pc, #44]	; (800314c <SEGGER_RTT_ConfigUpBuffer+0xc0>)
 800311e:	1de0      	adds	r0, r4, #7
 8003120:	f002 f870 	bl	8005204 <memcpy>
  strcpy(&p->acID[0], "SEGGER");
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <SEGGER_RTT_ConfigUpBuffer+0xc4>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	6022      	str	r2, [r4, #0]
 800312a:	889b      	ldrh	r3, [r3, #4]
 800312c:	80a3      	strh	r3, [r4, #4]
  p->acID[6] = ' ';
 800312e:	2320      	movs	r3, #32
 8003130:	71a3      	strb	r3, [r4, #6]
}
 8003132:	3b1d      	subs	r3, #29
 8003134:	e7b6      	b.n	80030a4 <SEGGER_RTT_ConfigUpBuffer+0x18>
    r = -1;
 8003136:	2001      	movs	r0, #1
 8003138:	4240      	negs	r0, r0
  return r;
 800313a:	e7c5      	b.n	80030c8 <SEGGER_RTT_ConfigUpBuffer+0x3c>
 800313c:	20001d78 	.word	0x20001d78
 8003140:	08005260 	.word	0x08005260
 8003144:	20001e30 	.word	0x20001e30
 8003148:	20001e20 	.word	0x20001e20
 800314c:	0800526c 	.word	0x0800526c
 8003150:	08005270 	.word	0x08005270

08003154 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	4647      	mov	r7, r8
 8003158:	46ce      	mov	lr, r9
  int r;

  INIT();
 800315a:	4c29      	ldr	r4, [pc, #164]	; (8003200 <SEGGER_RTT_ConfigDownBuffer+0xac>)
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800315c:	b580      	push	{r7, lr}
 800315e:	001f      	movs	r7, r3
  INIT();
 8003160:	7823      	ldrb	r3, [r4, #0]
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003162:	0005      	movs	r5, r0
 8003164:	4689      	mov	r9, r1
 8003166:	4690      	mov	r8, r2
  INIT();
 8003168:	2b00      	cmp	r3, #0
 800316a:	d023      	beq.n	80031b4 <SEGGER_RTT_ConfigDownBuffer+0x60>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800316c:	6963      	ldr	r3, [r4, #20]
 800316e:	429d      	cmp	r5, r3
 8003170:	d243      	bcs.n	80031fa <SEGGER_RTT_ConfigDownBuffer+0xa6>
    SEGGER_RTT_LOCK();
 8003172:	f3ef 8310 	mrs	r3, PRIMASK
 8003176:	2101      	movs	r1, #1
 8003178:	f381 8810 	msr	PRIMASK, r1
    if (BufferIndex > 0u) {
 800317c:	2000      	movs	r0, #0
 800317e:	2d00      	cmp	r5, #0
 8003180:	d10b      	bne.n	800319a <SEGGER_RTT_ConfigDownBuffer+0x46>
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8003182:	1940      	adds	r0, r0, r5
 8003184:	9a08      	ldr	r2, [sp, #32]
 8003186:	00c0      	lsls	r0, r0, #3
 8003188:	1824      	adds	r4, r4, r0
 800318a:	6762      	str	r2, [r4, #116]	; 0x74
    SEGGER_RTT_UNLOCK();
 800318c:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 8003190:	2000      	movs	r0, #0
  } else {
    r = -1;
  }
  return r;
}
 8003192:	bcc0      	pop	{r6, r7}
 8003194:	46b9      	mov	r9, r7
 8003196:	46b0      	mov	r8, r6
 8003198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800319a:	464a      	mov	r2, r9
 800319c:	0068      	lsls	r0, r5, #1
 800319e:	1946      	adds	r6, r0, r5
 80031a0:	00f6      	lsls	r6, r6, #3
 80031a2:	19a6      	adds	r6, r4, r6
 80031a4:	6632      	str	r2, [r6, #96]	; 0x60
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80031a6:	4642      	mov	r2, r8
 80031a8:	6672      	str	r2, [r6, #100]	; 0x64
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 80031aa:	2200      	movs	r2, #0
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80031ac:	66b7      	str	r7, [r6, #104]	; 0x68
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 80031ae:	6732      	str	r2, [r6, #112]	; 0x70
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 80031b0:	66f2      	str	r2, [r6, #108]	; 0x6c
 80031b2:	e7e6      	b.n	8003182 <SEGGER_RTT_ConfigDownBuffer+0x2e>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80031b4:	2003      	movs	r0, #3
 80031b6:	2103      	movs	r1, #3
  p->aUp[0].sName         = "Terminal";
 80031b8:	4a12      	ldr	r2, [pc, #72]	; (8003204 <SEGGER_RTT_ConfigDownBuffer+0xb0>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80031ba:	6120      	str	r0, [r4, #16]
 80031bc:	6161      	str	r1, [r4, #20]
  p->aUp[0].sName         = "Terminal";
 80031be:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80031c0:	4911      	ldr	r1, [pc, #68]	; (8003208 <SEGGER_RTT_ConfigDownBuffer+0xb4>)
  p->aDown[0].sName         = "Terminal";
 80031c2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80031c4:	4a11      	ldr	r2, [pc, #68]	; (800320c <SEGGER_RTT_ConfigDownBuffer+0xb8>)
  p->aUp[0].pBuffer       = _acUpBuffer;
 80031c6:	61e1      	str	r1, [r4, #28]
  p->aDown[0].pBuffer       = _acDownBuffer;
 80031c8:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80031ca:	2140      	movs	r1, #64	; 0x40
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80031cc:	2210      	movs	r2, #16
  p->aUp[0].RdOff         = 0u;
 80031ce:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80031d0:	6221      	str	r1, [r4, #32]
  p->aUp[0].WrOff         = 0u;
 80031d2:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80031d4:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80031d6:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80031d8:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80031da:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80031dc:	6763      	str	r3, [r4, #116]	; 0x74
  strcpy(&p->acID[7], "RTT");
 80031de:	3a0c      	subs	r2, #12
 80031e0:	490b      	ldr	r1, [pc, #44]	; (8003210 <SEGGER_RTT_ConfigDownBuffer+0xbc>)
 80031e2:	1de0      	adds	r0, r4, #7
 80031e4:	f002 f80e 	bl	8005204 <memcpy>
  strcpy(&p->acID[0], "SEGGER");
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <SEGGER_RTT_ConfigDownBuffer+0xc0>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	6022      	str	r2, [r4, #0]
 80031ee:	889b      	ldrh	r3, [r3, #4]
 80031f0:	80a3      	strh	r3, [r4, #4]
  p->acID[6] = ' ';
 80031f2:	2320      	movs	r3, #32
 80031f4:	71a3      	strb	r3, [r4, #6]
}
 80031f6:	3b1d      	subs	r3, #29
 80031f8:	e7b9      	b.n	800316e <SEGGER_RTT_ConfigDownBuffer+0x1a>
    r = -1;
 80031fa:	2001      	movs	r0, #1
 80031fc:	4240      	negs	r0, r0
  return r;
 80031fe:	e7c8      	b.n	8003192 <SEGGER_RTT_ConfigDownBuffer+0x3e>
 8003200:	20001d78 	.word	0x20001d78
 8003204:	08005260 	.word	0x08005260
 8003208:	20001e30 	.word	0x20001e30
 800320c:	20001e20 	.word	0x20001e20
 8003210:	0800526c 	.word	0x0800526c
 8003214:	08005270 	.word	0x08005270

08003218 <readFromRTT>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1)
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

int32_t readFromRTT(void* ptrData, uint32_t size, int32_t* ptrBytesRead)
{
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	0014      	movs	r4, r2
	uint32_t bytesRead = 0; 
	
	if (SEGGER_RTT_HASDATA(TRC_CFG_RTT_DOWN_BUFFER_INDEX))
 800321c:	2588      	movs	r5, #136	; 0x88
 800321e:	2284      	movs	r2, #132	; 0x84
 8003220:	4b07      	ldr	r3, [pc, #28]	; (8003240 <readFromRTT+0x28>)
 8003222:	589a      	ldr	r2, [r3, r2]
 8003224:	595b      	ldr	r3, [r3, r5]
 8003226:	429a      	cmp	r2, r3
 8003228:	d101      	bne.n	800322e <readFromRTT+0x16>
			*ptrBytesRead = (int32_t)bytesRead;

	}

	return 0;
}
 800322a:	2000      	movs	r0, #0
 800322c:	bd70      	pop	{r4, r5, r6, pc}
		bytesRead = SEGGER_RTT_Read((TRC_CFG_RTT_DOWN_BUFFER_INDEX), (char*)ptrData, size);
 800322e:	000a      	movs	r2, r1
 8003230:	0001      	movs	r1, r0
 8003232:	2001      	movs	r0, #1
 8003234:	f7ff fd62 	bl	8002cfc <SEGGER_RTT_Read>
		if (ptrBytesRead != NULL)
 8003238:	2c00      	cmp	r4, #0
 800323a:	d0f6      	beq.n	800322a <readFromRTT+0x12>
			*ptrBytesRead = (int32_t)bytesRead;
 800323c:	6020      	str	r0, [r4, #0]
 800323e:	e7f4      	b.n	800322a <readFromRTT+0x12>
 8003240:	20001d78 	.word	0x20001d78

08003244 <writeToRTT>:

int32_t writeToRTT(void* ptrData, uint32_t size, int32_t* ptrBytesWritten)
{
 8003244:	b510      	push	{r4, lr}
 8003246:	0014      	movs	r4, r2
	uint32_t bytesWritten = SEGGER_RTT_Write((TRC_CFG_RTT_UP_BUFFER_INDEX), (const char*)ptrData, size);
 8003248:	000a      	movs	r2, r1
 800324a:	0001      	movs	r1, r0
 800324c:	2001      	movs	r0, #1
 800324e:	f7ff fdf9 	bl	8002e44 <SEGGER_RTT_Write>
	
	if (ptrBytesWritten != NULL)
 8003252:	2c00      	cmp	r4, #0
 8003254:	d000      	beq.n	8003258 <writeToRTT+0x14>
		*ptrBytesWritten = (int32_t)bytesWritten;
 8003256:	6020      	str	r0, [r4, #0]

	return 0;
}
 8003258:	2000      	movs	r0, #0
 800325a:	bd10      	pop	{r4, pc}

0800325c <TzCtrl>:
 * Task for sending the trace data from the internal buffer to the stream 
 * interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
 * receiving commands from Tracealyzer. Also does some diagnostics.
 ******************************************************************************/
static portTASK_FUNCTION( TzCtrl, pvParameters )
{
 800325c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800325e:	4647      	mov	r7, r8
 8003260:	46ce      	mov	lr, r9
 8003262:	b580      	push	{r7, lr}
 8003264:	4b29      	ldr	r3, [pc, #164]	; (800330c <TzCtrl+0xb0>)
	while (1)
	{
		do
		{
			/* Listen for new commands */
			bytes = 0;
 8003266:	2500      	movs	r5, #0
 8003268:	4699      	mov	r9, r3
 800326a:	4b29      	ldr	r3, [pc, #164]	; (8003310 <TzCtrl+0xb4>)
 800326c:	4f29      	ldr	r7, [pc, #164]	; (8003314 <TzCtrl+0xb8>)
 800326e:	4698      	mov	r8, r3
 8003270:	4e29      	ldr	r6, [pc, #164]	; (8003318 <TzCtrl+0xbc>)
{
 8003272:	b085      	sub	sp, #20
 8003274:	e004      	b.n	8003280 <TzCtrl+0x24>
			{
				/* The connection has failed, stop tracing */
				vTraceStop();
			}

			if ((status == 0) && (bytes == sizeof(TracealyzerCommandType)))
 8003276:	9c01      	ldr	r4, [sp, #4]
 8003278:	2c08      	cmp	r4, #8
 800327a:	d024      	beq.n	80032c6 <TzCtrl+0x6a>
#endif			
			
		/* If there was data sent or received (bytes != 0), loop around and repeat, if there is more data to send or receive.
		Otherwise, step out of this loop and sleep for a while. */		
		
		} while (bytes != 0);
 800327c:	2c00      	cmp	r4, #0
 800327e:	d00c      	beq.n	800329a <TzCtrl+0x3e>
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 8003280:	2108      	movs	r1, #8
 8003282:	aa01      	add	r2, sp, #4
 8003284:	a802      	add	r0, sp, #8
			bytes = 0;
 8003286:	9501      	str	r5, [sp, #4]
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 8003288:	f7ff ffc6 	bl	8003218 <readFromRTT>
			if (status != 0)
 800328c:	2800      	cmp	r0, #0
 800328e:	d0f2      	beq.n	8003276 <TzCtrl+0x1a>
				vTraceStop();
 8003290:	f000 fa16 	bl	80036c0 <vTraceStop>
		} while (bytes != 0);
 8003294:	9c01      	ldr	r4, [sp, #4]
 8003296:	2c00      	cmp	r4, #0
 8003298:	d1f2      	bne.n	8003280 <TzCtrl+0x24>

		if (xTraceIsRecordingEnabled())
 800329a:	f000 fa21 	bl	80036e0 <xTraceIsRecordingEnabled>
 800329e:	2800      	cmp	r0, #0
 80032a0:	d00d      	beq.n	80032be <TzCtrl+0x62>
	if (NoRoomForSymbol > 0)
 80032a2:	464b      	mov	r3, r9
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d129      	bne.n	80032fe <TzCtrl+0xa2>
	if (NoRoomForObjectData > 0)
 80032aa:	4643      	mov	r3, r8
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d11f      	bne.n	80032f2 <TzCtrl+0x96>
	if (LongestSymbolName > (TRC_CFG_SYMBOL_MAX_LENGTH))
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b19      	cmp	r3, #25
 80032b6:	d817      	bhi.n	80032e8 <TzCtrl+0x8c>
	if (MaxBytesTruncated > 0)
 80032b8:	6833      	ldr	r3, [r6, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10f      	bne.n	80032de <TzCtrl+0x82>
		{
			prvCheckRecorderStatus();
			prvReportStackUsage();
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 80032be:	200a      	movs	r0, #10
 80032c0:	f7fe feaa 	bl	8002018 <vTaskDelay>
	while (1)
 80032c4:	e7dc      	b.n	8003280 <TzCtrl+0x24>
				if (prvIsValidCommand(&msg))
 80032c6:	a802      	add	r0, sp, #8
 80032c8:	f000 fd26 	bl	8003d18 <prvIsValidCommand>
 80032cc:	2800      	cmp	r0, #0
 80032ce:	d101      	bne.n	80032d4 <TzCtrl+0x78>
		} while (bytes != 0);
 80032d0:	9c01      	ldr	r4, [sp, #4]
 80032d2:	e7d3      	b.n	800327c <TzCtrl+0x20>
					prvProcessCommand(&msg); /* Start or Stop currently... */
 80032d4:	a802      	add	r0, sp, #8
 80032d6:	f000 fd3d 	bl	8003d54 <prvProcessCommand>
		} while (bytes != 0);
 80032da:	9c01      	ldr	r4, [sp, #4]
 80032dc:	e7ce      	b.n	800327c <TzCtrl+0x20>
		prvTraceWarning(PSF_WARNING_STRING_TOO_LONG);
 80032de:	200a      	movs	r0, #10
 80032e0:	f001 f806 	bl	80042f0 <prvTraceWarning>
		MaxBytesTruncated = 0;
 80032e4:	6035      	str	r5, [r6, #0]
 80032e6:	e7ea      	b.n	80032be <TzCtrl+0x62>
		prvTraceWarning(PSF_WARNING_SYMBOL_MAX_LENGTH);
 80032e8:	2008      	movs	r0, #8
 80032ea:	f001 f801 	bl	80042f0 <prvTraceWarning>
		LongestSymbolName = 0;
 80032ee:	603d      	str	r5, [r7, #0]
 80032f0:	e7e2      	b.n	80032b8 <TzCtrl+0x5c>
		prvTraceWarning(PSF_WARNING_OBJECT_DATA_SLOTS);
 80032f2:	2009      	movs	r0, #9
 80032f4:	f000 fffc 	bl	80042f0 <prvTraceWarning>
		NoRoomForObjectData = 0;
 80032f8:	4643      	mov	r3, r8
 80032fa:	601d      	str	r5, [r3, #0]
 80032fc:	e7d9      	b.n	80032b2 <TzCtrl+0x56>
		prvTraceWarning(PSF_WARNING_SYMBOL_TABLE_SLOTS);
 80032fe:	2007      	movs	r0, #7
 8003300:	f000 fff6 	bl	80042f0 <prvTraceWarning>
		NoRoomForSymbol = 0;
 8003304:	464b      	mov	r3, r9
 8003306:	601c      	str	r4, [r3, #0]
 8003308:	e7cf      	b.n	80032aa <TzCtrl+0x4e>
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	20003234 	.word	0x20003234
 8003310:	20003230 	.word	0x20003230
 8003314:	20003228 	.word	0x20003228
 8003318:	2000322c 	.word	0x2000322c

0800331c <prvTraceGetTaskNumberHigh16>:
{
 800331c:	b510      	push	{r4, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 800331e:	f7ff f8b1 	bl	8002484 <uxTaskGetTaskNumber>
 8003322:	0c00      	lsrs	r0, r0, #16
}
 8003324:	bd10      	pop	{r4, pc}
 8003326:	46c0      	nop			; (mov r8, r8)

08003328 <prvTraceSetTaskNumberHigh16>:
{
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	0005      	movs	r5, r0
 800332c:	000c      	movs	r4, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 800332e:	f7ff f8a9 	bl	8002484 <uxTaskGetTaskNumber>
 8003332:	0401      	lsls	r1, r0, #16
 8003334:	0424      	lsls	r4, r4, #16
 8003336:	0c09      	lsrs	r1, r1, #16
 8003338:	0028      	movs	r0, r5
 800333a:	4321      	orrs	r1, r4
 800333c:	f7ff f8a8 	bl	8002490 <vTaskSetTaskNumber>
}
 8003340:	bd70      	pop	{r4, r5, r6, pc}
 8003342:	46c0      	nop			; (mov r8, r8)

08003344 <prvTraceGetQueueNumberHigh16>:
{
 8003344:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8003346:	f7fe f8cb 	bl	80014e0 <uxQueueGetQueueNumber>
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
 800334a:	0c00      	lsrs	r0, r0, #16
}
 800334c:	bd10      	pop	{r4, pc}
 800334e:	46c0      	nop			; (mov r8, r8)

08003350 <prvTraceSetQueueNumberHigh16>:
{
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	0005      	movs	r5, r0
 8003354:	000c      	movs	r4, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8003356:	f7fe f8c3 	bl	80014e0 <uxQueueGetQueueNumber>
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 800335a:	0401      	lsls	r1, r0, #16
 800335c:	0424      	lsls	r4, r4, #16
 800335e:	0c09      	lsrs	r1, r1, #16
 8003360:	0028      	movs	r0, r5
 8003362:	4321      	orrs	r1, r4
 8003364:	f7fe f8be 	bl	80014e4 <vQueueSetQueueNumber>
}
 8003368:	bd70      	pop	{r4, r5, r6, pc}
 800336a:	46c0      	nop			; (mov r8, r8)

0800336c <prvTraceGetEventGroupNumberHigh16>:
{
 800336c:	b510      	push	{r4, lr}
	return TRACE_GET_HIGH16(uxEventGroupGetNumber(handle));
 800336e:	f7fd f823 	bl	80003b8 <uxEventGroupGetNumber>
 8003372:	0c00      	lsrs	r0, r0, #16
}
 8003374:	bd10      	pop	{r4, pc}
 8003376:	46c0      	nop			; (mov r8, r8)

08003378 <prvTraceSetEventGroupNumberHigh16>:
{
 8003378:	b570      	push	{r4, r5, r6, lr}
 800337a:	0005      	movs	r5, r0
 800337c:	000c      	movs	r4, r1
	vEventGroupSetNumber(handle, TRACE_SET_HIGH16(uxEventGroupGetNumber(handle), value));
 800337e:	f7fd f81b 	bl	80003b8 <uxEventGroupGetNumber>
 8003382:	0401      	lsls	r1, r0, #16
 8003384:	0424      	lsls	r4, r4, #16
 8003386:	0c09      	lsrs	r1, r1, #16
 8003388:	0028      	movs	r0, r5
 800338a:	4321      	orrs	r1, r4
 800338c:	f7fd f81a 	bl	80003c4 <vEventGroupSetNumber>
}
 8003390:	bd70      	pop	{r4, r5, r6, pc}
 8003392:	46c0      	nop			; (mov r8, r8)

08003394 <vTraceEnable>:
	int32_t bytes = 0;
 8003394:	2300      	movs	r3, #0
{
 8003396:	b570      	push	{r4, r5, r6, lr}
	if (HandleTzCtrl == NULL)
 8003398:	4d2a      	ldr	r5, [pc, #168]	; (8003444 <vTraceEnable+0xb0>)
{
 800339a:	b086      	sub	sp, #24
	if (HandleTzCtrl == NULL)
 800339c:	682e      	ldr	r6, [r5, #0]
{
 800339e:	0004      	movs	r4, r0
	int32_t bytes = 0;
 80033a0:	9303      	str	r3, [sp, #12]
	if (HandleTzCtrl == NULL)
 80033a2:	2e00      	cmp	r6, #0
 80033a4:	d023      	beq.n	80033ee <vTraceEnable+0x5a>
	if (startOption == TRC_START_AWAIT_HOST)
 80033a6:	2c02      	cmp	r4, #2
 80033a8:	d003      	beq.n	80033b2 <vTraceEnable+0x1e>
	else if (startOption == TRC_START)
 80033aa:	2c01      	cmp	r4, #1
 80033ac:	d043      	beq.n	8003436 <vTraceEnable+0xa2>
}
 80033ae:	b006      	add	sp, #24
 80033b0:	bd70      	pop	{r4, r5, r6, pc}
			bytes = 0;
 80033b2:	2400      	movs	r4, #0
 80033b4:	4d24      	ldr	r5, [pc, #144]	; (8003448 <vTraceEnable+0xb4>)
 80033b6:	e005      	b.n	80033c4 <vTraceEnable+0x30>
			if ((status == 0) && (bytes == sizeof(TracealyzerCommandType)))
 80033b8:	9b03      	ldr	r3, [sp, #12]
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d00e      	beq.n	80033dc <vTraceEnable+0x48>
		while (RecorderEnabled == 0);
 80033be:	682b      	ldr	r3, [r5, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f4      	bne.n	80033ae <vTraceEnable+0x1a>
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 80033c4:	2108      	movs	r1, #8
 80033c6:	aa03      	add	r2, sp, #12
 80033c8:	a804      	add	r0, sp, #16
			bytes = 0;
 80033ca:	9403      	str	r4, [sp, #12]
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 80033cc:	f7ff ff24 	bl	8003218 <readFromRTT>
			if (status != 0)
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d0f1      	beq.n	80033b8 <vTraceEnable+0x24>
				prvTraceWarning(PSF_WARNING_STREAM_PORT_READ);
 80033d4:	200b      	movs	r0, #11
 80033d6:	f000 ff8b 	bl	80042f0 <prvTraceWarning>
			if ((status == 0) && (bytes == sizeof(TracealyzerCommandType)))
 80033da:	e7f0      	b.n	80033be <vTraceEnable+0x2a>
				if (prvIsValidCommand(&msg))
 80033dc:	a804      	add	r0, sp, #16
 80033de:	f000 fc9b 	bl	8003d18 <prvIsValidCommand>
 80033e2:	2800      	cmp	r0, #0
 80033e4:	d0eb      	beq.n	80033be <vTraceEnable+0x2a>
					prvProcessCommand(&msg);
 80033e6:	a804      	add	r0, sp, #16
 80033e8:	f000 fcb4 	bl	8003d54 <prvProcessCommand>
 80033ec:	e7e7      	b.n	80033be <vTraceEnable+0x2a>
		TRC_STREAM_PORT_INIT();
 80033ee:	4a17      	ldr	r2, [pc, #92]	; (800344c <vTraceEnable+0xb8>)
 80033f0:	4917      	ldr	r1, [pc, #92]	; (8003450 <vTraceEnable+0xbc>)
 80033f2:	4b18      	ldr	r3, [pc, #96]	; (8003454 <vTraceEnable+0xc0>)
 80033f4:	9600      	str	r6, [sp, #0]
 80033f6:	2001      	movs	r0, #1
 80033f8:	f7ff fe48 	bl	800308c <SEGGER_RTT_ConfigUpBuffer>
 80033fc:	4916      	ldr	r1, [pc, #88]	; (8003458 <vTraceEnable+0xc4>)
 80033fe:	2320      	movs	r3, #32
 8003400:	4a16      	ldr	r2, [pc, #88]	; (800345c <vTraceEnable+0xc8>)
 8003402:	9600      	str	r6, [sp, #0]
 8003404:	2001      	movs	r0, #1
 8003406:	000e      	movs	r6, r1
 8003408:	f7ff fea4 	bl	8003154 <SEGGER_RTT_ConfigDownBuffer>
		trcWarningChannel = xTraceRegisterString("#WFR"); 
 800340c:	4814      	ldr	r0, [pc, #80]	; (8003460 <vTraceEnable+0xcc>)
 800340e:	f000 fc21 	bl	8003c54 <xTraceRegisterString>
 8003412:	4b14      	ldr	r3, [pc, #80]	; (8003464 <vTraceEnable+0xd0>)
		xTaskCreate( TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl );
 8003414:	228c      	movs	r2, #140	; 0x8c
		trcWarningChannel = xTraceRegisterString("#WFR"); 
 8003416:	6018      	str	r0, [r3, #0]
		xTaskCreate( TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl );
 8003418:	2301      	movs	r3, #1
 800341a:	0031      	movs	r1, r6
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	4812      	ldr	r0, [pc, #72]	; (8003468 <vTraceEnable+0xd4>)
 8003420:	2300      	movs	r3, #0
 8003422:	9501      	str	r5, [sp, #4]
 8003424:	f7fe f96c 	bl	8001700 <xTaskCreate>
		if (HandleTzCtrl == NULL)
 8003428:	682b      	ldr	r3, [r5, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1bb      	bne.n	80033a6 <vTraceEnable+0x12>
			prvTraceError(PSF_ERROR_TZCTRLTASK_NOT_CREATED);
 800342e:	2005      	movs	r0, #5
 8003430:	f000 ff7c 	bl	800432c <prvTraceError>
 8003434:	e7b7      	b.n	80033a6 <vTraceEnable+0x12>
		msg.cmdCode = CMD_SET_ACTIVE;
 8003436:	2302      	movs	r3, #2
 8003438:	a804      	add	r0, sp, #16
 800343a:	33ff      	adds	r3, #255	; 0xff
 800343c:	8003      	strh	r3, [r0, #0]
		prvProcessCommand(&msg);
 800343e:	f000 fc89 	bl	8003d54 <prvProcessCommand>
}
 8003442:	e7b4      	b.n	80033ae <vTraceEnable+0x1a>
 8003444:	20001e70 	.word	0x20001e70
 8003448:	20003238 	.word	0x20003238
 800344c:	20001e94 	.word	0x20001e94
 8003450:	08005278 	.word	0x08005278
 8003454:	00001388 	.word	0x00001388
 8003458:	08005280 	.word	0x08005280
 800345c:	20001e74 	.word	0x20001e74
 8003460:	08005288 	.word	0x08005288
 8003464:	20003220 	.word	0x20003220
 8003468:	0800325d 	.word	0x0800325d

0800346c <vTraceSetQueueName>:
{
 800346c:	b510      	push	{r4, lr}
	vTraceStoreKernelObjectName(object, name);
 800346e:	f000 fbe5 	bl	8003c3c <vTraceStoreKernelObjectName>
}
 8003472:	bd10      	pop	{r4, pc}

08003474 <vTraceSetSemaphoreName>:
 8003474:	b510      	push	{r4, lr}
 8003476:	f000 fbe1 	bl	8003c3c <vTraceStoreKernelObjectName>
 800347a:	bd10      	pop	{r4, pc}

0800347c <vTraceSetMutexName>:
 800347c:	b510      	push	{r4, lr}
 800347e:	f000 fbdd 	bl	8003c3c <vTraceStoreKernelObjectName>
 8003482:	bd10      	pop	{r4, pc}

08003484 <prvTraceGetCurrentTaskHandle>:
{
 8003484:	b510      	push	{r4, lr}
	return xTaskGetCurrentTaskHandle();
 8003486:	f7ff f807 	bl	8002498 <xTaskGetCurrentTaskHandle>
}
 800348a:	bd10      	pop	{r4, pc}

0800348c <prvIsNewTCB>:
	if (pCurrentTCB != pNewTCB)
 800348c:	4a04      	ldr	r2, [pc, #16]	; (80034a0 <prvIsNewTCB+0x14>)
{
 800348e:	0003      	movs	r3, r0
	if (pCurrentTCB != pNewTCB)
 8003490:	6811      	ldr	r1, [r2, #0]
	return 0;
 8003492:	2000      	movs	r0, #0
	if (pCurrentTCB != pNewTCB)
 8003494:	4299      	cmp	r1, r3
 8003496:	d001      	beq.n	800349c <prvIsNewTCB+0x10>
		pCurrentTCB = pNewTCB;
 8003498:	6013      	str	r3, [r2, #0]
		return 1;
 800349a:	3001      	adds	r0, #1
}
 800349c:	4770      	bx	lr
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	2000321c 	.word	0x2000321c

080034a4 <prvTraceStoreStringEventHelper>:
										uint16_t eventID,
										traceString userEvtChannel,
										int len,
										const char* str,
										va_list vl)
{
 80034a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034a6:	46de      	mov	lr, fp
 80034a8:	4657      	mov	r7, sl
 80034aa:	464e      	mov	r6, r9
 80034ac:	4645      	mov	r5, r8
	int i;
	int offset = 0;
  	TRACE_ALLOC_CRITICAL_SECTION();
	
	/* The string length in multiples of 32 bit words (+1 for null character) */
	nStrWords = (len+1+3)/4;
 80034ae:	2403      	movs	r4, #3
{
 80034b0:	b5e0      	push	{r5, r6, r7, lr}
 80034b2:	001d      	movs	r5, r3
	nStrWords = (len+1+3)/4;
 80034b4:	3304      	adds	r3, #4
 80034b6:	17df      	asrs	r7, r3, #31
 80034b8:	403c      	ands	r4, r7
 80034ba:	18e4      	adds	r4, r4, r3
 80034bc:	10a4      	asrs	r4, r4, #2
{
 80034be:	b093      	sub	sp, #76	; 0x4c

	offset = nArgs * 4;

	/* The total number of 32-bit words needed for the whole payload */
	nWords = nStrWords + nArgs;
 80034c0:	1824      	adds	r4, r4, r0
{
 80034c2:	468c      	mov	ip, r1
 80034c4:	4693      	mov	fp, r2
 80034c6:	991d      	ldr	r1, [sp, #116]	; 0x74
	offset = nArgs * 4;
 80034c8:	0086      	lsls	r6, r0, #2

	if (nWords > 15) /* if attempting to store more than 60 byte (= max) */
 80034ca:	2c0f      	cmp	r4, #15
 80034cc:	dd08      	ble.n	80034e0 <prvTraceStoreStringEventHelper+0x3c>
		of parameters... */

		/* Diagnostics ... */
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;

		if (bytesTruncated > MaxBytesTruncated)
 80034ce:	4b3d      	ldr	r3, [pc, #244]	; (80035c4 <prvTraceStoreStringEventHelper+0x120>)
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 80034d0:	3c0f      	subs	r4, #15
		if (bytesTruncated > MaxBytesTruncated)
 80034d2:	681d      	ldr	r5, [r3, #0]
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 80034d4:	00a4      	lsls	r4, r4, #2
		if (bytesTruncated > MaxBytesTruncated)
 80034d6:	42a5      	cmp	r5, r4
 80034d8:	d35d      	bcc.n	8003596 <prvTraceStoreStringEventHelper+0xf2>
		{
			MaxBytesTruncated = bytesTruncated;
		}

		nWords = 15;
		len = 15 * 4 - offset;
 80034da:	253c      	movs	r5, #60	; 0x3c
		nWords = 15;
 80034dc:	240f      	movs	r4, #15
		len = 15 * 4 - offset;
 80034de:	1bad      	subs	r5, r5, r6
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e0:	f3ef 8810 	mrs	r8, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e4:	2301      	movs	r3, #1
 80034e6:	f383 8810 	msr	PRIMASK, r3
	}

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
 80034ea:	4f37      	ldr	r7, [pc, #220]	; (80035c8 <prvTraceStoreStringEventHelper+0x124>)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d048      	beq.n	8003584 <prvTraceStoreStringEventHelper+0xe0>
	{
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 80034f2:	1ca3      	adds	r3, r4, #2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4699      	mov	r9, r3

		eventCounter++;
 80034f8:	4b34      	ldr	r3, [pc, #208]	; (80035cc <prvTraceStoreStringEventHelper+0x128>)
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
			if (event != NULL)
			{
				uint32_t* data32;
				uint8_t* data8;
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 80034fa:	0324      	lsls	r4, r4, #12
		eventCounter++;
 80034fc:	469a      	mov	sl, r3
 80034fe:	4652      	mov	r2, sl
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3301      	adds	r3, #1
 8003504:	6013      	str	r3, [r2, #0]
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8003506:	4662      	mov	r2, ip
 8003508:	4322      	orrs	r2, r4
 800350a:	0014      	movs	r4, r2
 800350c:	466a      	mov	r2, sp
				event->base.EventCount = (uint16_t)eventCounter;
 800350e:	80d3      	strh	r3, [r2, #6]
	return TRC_HWTC_COUNT;
#endif
	
#if ((TRC_HWTC_TYPE == TRC_OS_TIMER_INCR) || (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR))
	uint32_t ticks = TRACE_GET_OS_TICKS();
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003510:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <prvTraceStoreStringEventHelper+0x12c>)
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8003512:	8094      	strh	r4, [r2, #4]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003514:	681c      	ldr	r4, [r3, #0]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 8003516:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <prvTraceStoreStringEventHelper+0x130>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003518:	0224      	lsls	r4, r4, #8
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0a24      	lsrs	r4, r4, #8
 800351e:	061b      	lsls	r3, r3, #24
 8003520:	191b      	adds	r3, r3, r4
				event->base.TS = prvGetTimestamp32();
 8003522:	9302      	str	r3, [sp, #8]
				for (i = 0; i < nArgs; i++)
 8003524:	2800      	cmp	r0, #0
 8003526:	dd11      	ble.n	800354c <prvTraceStoreStringEventHelper+0xa8>
 8003528:	465b      	mov	r3, fp
 800352a:	2b00      	cmp	r3, #0
 800352c:	d041      	beq.n	80035b2 <prvTraceStoreStringEventHelper+0x10e>
 800352e:	2400      	movs	r4, #0
 8003530:	ab03      	add	r3, sp, #12
					if ((userEvtChannel != NULL) && (i == 0))
 8003532:	2c00      	cmp	r4, #0
 8003534:	d105      	bne.n	8003542 <prvTraceStoreStringEventHelper+0x9e>
						data32[i] = (uint32_t)userEvtChannel;
 8003536:	465a      	mov	r2, fp
				for (i = 0; i < nArgs; i++)
 8003538:	3304      	adds	r3, #4
						data32[i] = (uint32_t)userEvtChannel;
 800353a:	9203      	str	r2, [sp, #12]
				for (i = 0; i < nArgs; i++)
 800353c:	2801      	cmp	r0, #1
 800353e:	d005      	beq.n	800354c <prvTraceStoreStringEventHelper+0xa8>
 8003540:	3401      	adds	r4, #1
						data32[i] = va_arg(vl, uint32_t);
 8003542:	c904      	ldmia	r1!, {r2}
				for (i = 0; i < nArgs; i++)
 8003544:	3401      	adds	r4, #1
						data32[i] = va_arg(vl, uint32_t);
 8003546:	c304      	stmia	r3!, {r2}
				for (i = 0; i < nArgs; i++)
 8003548:	42a0      	cmp	r0, r4
 800354a:	d1f2      	bne.n	8003532 <prvTraceStoreStringEventHelper+0x8e>
				for (i = 0; i < len; i++)
 800354c:	2d00      	cmp	r5, #0
 800354e:	dd05      	ble.n	800355c <prvTraceStoreStringEventHelper+0xb8>
					data8[offset + i] = str[i];
 8003550:	ab03      	add	r3, sp, #12
 8003552:	002a      	movs	r2, r5
 8003554:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003556:	1998      	adds	r0, r3, r6
 8003558:	f001 fe54 	bl	8005204 <memcpy>
				if (len < (15 * 4 - offset))
 800355c:	233c      	movs	r3, #60	; 0x3c
 800355e:	1b9b      	subs	r3, r3, r6
 8003560:	42ab      	cmp	r3, r5
 8003562:	dd06      	ble.n	8003572 <prvTraceStoreStringEventHelper+0xce>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 8003564:	2348      	movs	r3, #72	; 0x48
 8003566:	18f6      	adds	r6, r6, r3
 8003568:	2300      	movs	r3, #0
 800356a:	446e      	add	r6, sp
 800356c:	1976      	adds	r6, r6, r5
 800356e:	3e3c      	subs	r6, #60	; 0x3c
 8003570:	7033      	strb	r3, [r6, #0]
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 8003572:	2400      	movs	r4, #0
 8003574:	466a      	mov	r2, sp
 8003576:	4649      	mov	r1, r9
 8003578:	a801      	add	r0, sp, #4
 800357a:	9400      	str	r4, [sp, #0]
 800357c:	f7ff fe62 	bl	8003244 <writeToRTT>
 8003580:	2800      	cmp	r0, #0
 8003582:	d10a      	bne.n	800359a <prvTraceStoreStringEventHelper+0xf6>
 8003584:	f388 8810 	msr	PRIMASK, r8
}
 8003588:	b013      	add	sp, #76	; 0x4c
 800358a:	bcf0      	pop	{r4, r5, r6, r7}
 800358c:	46bb      	mov	fp, r7
 800358e:	46b2      	mov	sl, r6
 8003590:	46a9      	mov	r9, r5
 8003592:	46a0      	mov	r8, r4
 8003594:	bdf0      	pop	{r4, r5, r6, r7, pc}
			MaxBytesTruncated = bytesTruncated;
 8003596:	601c      	str	r4, [r3, #0]
 8003598:	e79f      	b.n	80034da <prvTraceStoreStringEventHelper+0x36>
	if (RecorderEnabled == isEnabled)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f1      	beq.n	8003584 <prvTraceStoreStringEventHelper+0xe0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a4:	2201      	movs	r2, #1
 80035a6:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 80035aa:	603c      	str	r4, [r7, #0]
 80035ac:	f383 8810 	msr	PRIMASK, r3
}
 80035b0:	e7e8      	b.n	8003584 <prvTraceStoreStringEventHelper+0xe0>
						data32[i] = va_arg(vl, uint32_t);
 80035b2:	0032      	movs	r2, r6
 80035b4:	991d      	ldr	r1, [sp, #116]	; 0x74
 80035b6:	a803      	add	r0, sp, #12
 80035b8:	f001 fe24 	bl	8005204 <memcpy>
				for (i = 0; i < len; i++)
 80035bc:	2d00      	cmp	r5, #0
 80035be:	dcc7      	bgt.n	8003550 <prvTraceStoreStringEventHelper+0xac>
 80035c0:	e7cc      	b.n	800355c <prvTraceStoreStringEventHelper+0xb8>
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	2000322c 	.word	0x2000322c
 80035c8:	20003238 	.word	0x20003238
 80035cc:	20003244 	.word	0x20003244
 80035d0:	e000e018 	.word	0xe000e018
 80035d4:	2000389c 	.word	0x2000389c

080035d8 <prvTraceStoreStringEvent.constprop.1>:
void prvTraceStoreStringEvent(int nArgs, uint16_t eventID, const char* str, ...)
 80035d8:	b40c      	push	{r2, r3}
 80035da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035dc:	46c6      	mov	lr, r8
 80035de:	b500      	push	{lr}
 80035e0:	b094      	sub	sp, #80	; 0x50
 80035e2:	991a      	ldr	r1, [sp, #104]	; 0x68
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 80035e4:	780b      	ldrb	r3, [r1, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d05c      	beq.n	80036a4 <prvTraceStoreStringEvent.constprop.1+0xcc>
 80035ea:	2200      	movs	r2, #0
 80035ec:	e001      	b.n	80035f2 <prvTraceStoreStringEvent.constprop.1+0x1a>
 80035ee:	2a34      	cmp	r2, #52	; 0x34
 80035f0:	d048      	beq.n	8003684 <prvTraceStoreStringEvent.constprop.1+0xac>
 80035f2:	0014      	movs	r4, r2
 80035f4:	3201      	adds	r2, #1
 80035f6:	5c8b      	ldrb	r3, [r1, r2]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f8      	bne.n	80035ee <prvTraceStoreStringEvent.constprop.1+0x16>
	nStrWords = (len+1+3)/4;
 80035fc:	3405      	adds	r4, #5
 80035fe:	10a0      	asrs	r0, r4, #2
	nWords = nStrWords + nArgs;
 8003600:	1c43      	adds	r3, r0, #1
	va_start(vl, str);
 8003602:	ad1b      	add	r5, sp, #108	; 0x6c
 8003604:	9501      	str	r5, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003606:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360a:	2501      	movs	r5, #1
 800360c:	f385 8810 	msr	PRIMASK, r5
	if (RecorderEnabled)
 8003610:	4e27      	ldr	r6, [pc, #156]	; (80036b0 <prvTraceStoreStringEvent.constprop.1+0xd8>)
 8003612:	6835      	ldr	r5, [r6, #0]
 8003614:	2d00      	cmp	r5, #0
 8003616:	d02c      	beq.n	8003672 <prvTraceStoreStringEvent.constprop.1+0x9a>
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 8003618:	3003      	adds	r0, #3
 800361a:	0080      	lsls	r0, r0, #2
 800361c:	4680      	mov	r8, r0
		eventCounter++;
 800361e:	4825      	ldr	r0, [pc, #148]	; (80036b4 <prvTraceStoreStringEvent.constprop.1+0xdc>)
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8003620:	031b      	lsls	r3, r3, #12
		eventCounter++;
 8003622:	4684      	mov	ip, r0
 8003624:	4665      	mov	r5, ip
 8003626:	6800      	ldr	r0, [r0, #0]
 8003628:	3001      	adds	r0, #1
 800362a:	6028      	str	r0, [r5, #0]
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 800362c:	2503      	movs	r5, #3
 800362e:	46ac      	mov	ip, r5
 8003630:	4665      	mov	r5, ip
 8003632:	432b      	orrs	r3, r5
 8003634:	466d      	mov	r5, sp
 8003636:	81ab      	strh	r3, [r5, #12]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003638:	4b1f      	ldr	r3, [pc, #124]	; (80036b8 <prvTraceStoreStringEvent.constprop.1+0xe0>)
				event->base.EventCount = (uint16_t)eventCounter;
 800363a:	81e8      	strh	r0, [r5, #14]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 800363c:	6818      	ldr	r0, [r3, #0]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 800363e:	4b1f      	ldr	r3, [pc, #124]	; (80036bc <prvTraceStoreStringEvent.constprop.1+0xe4>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003640:	0200      	lsls	r0, r0, #8
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	0a00      	lsrs	r0, r0, #8
 8003646:	061b      	lsls	r3, r3, #24
 8003648:	181b      	adds	r3, r3, r0
				event->base.TS = prvGetTimestamp32();
 800364a:	9304      	str	r3, [sp, #16]
						data32[i] = va_arg(vl, uint32_t);
 800364c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800364e:	9305      	str	r3, [sp, #20]
				for (i = 0; i < len; i++)
 8003650:	2a00      	cmp	r2, #0
 8003652:	d002      	beq.n	800365a <prvTraceStoreStringEvent.constprop.1+0x82>
					data8[offset + i] = str[i];
 8003654:	a806      	add	r0, sp, #24
 8003656:	f001 fdd5 	bl	8005204 <memcpy>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 800365a:	ab05      	add	r3, sp, #20
 800365c:	191b      	adds	r3, r3, r4
 800365e:	2400      	movs	r4, #0
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 8003660:	4641      	mov	r1, r8
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 8003662:	701c      	strb	r4, [r3, #0]
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 8003664:	aa02      	add	r2, sp, #8
 8003666:	a803      	add	r0, sp, #12
 8003668:	9402      	str	r4, [sp, #8]
 800366a:	f7ff fdeb 	bl	8003244 <writeToRTT>
 800366e:	2800      	cmp	r0, #0
 8003670:	d10c      	bne.n	800368c <prvTraceStoreStringEvent.constprop.1+0xb4>
 8003672:	f387 8810 	msr	PRIMASK, r7
}
 8003676:	b014      	add	sp, #80	; 0x50
 8003678:	bc80      	pop	{r7}
 800367a:	46b8      	mov	r8, r7
 800367c:	bcf0      	pop	{r4, r5, r6, r7}
 800367e:	bc08      	pop	{r3}
 8003680:	b002      	add	sp, #8
 8003682:	4718      	bx	r3
 8003684:	230f      	movs	r3, #15
 8003686:	200e      	movs	r0, #14
 8003688:	2438      	movs	r4, #56	; 0x38
 800368a:	e7ba      	b.n	8003602 <prvTraceStoreStringEvent.constprop.1+0x2a>
	if (RecorderEnabled == isEnabled)
 800368c:	6833      	ldr	r3, [r6, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0ef      	beq.n	8003672 <prvTraceStoreStringEvent.constprop.1+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003692:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003696:	2201      	movs	r2, #1
 8003698:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 800369c:	6034      	str	r4, [r6, #0]
 800369e:	f383 8810 	msr	PRIMASK, r3
}
 80036a2:	e7e6      	b.n	8003672 <prvTraceStoreStringEvent.constprop.1+0x9a>
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 80036a4:	2302      	movs	r3, #2
 80036a6:	2001      	movs	r0, #1
 80036a8:	2404      	movs	r4, #4
 80036aa:	2200      	movs	r2, #0
 80036ac:	e7a9      	b.n	8003602 <prvTraceStoreStringEvent.constprop.1+0x2a>
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	20003238 	.word	0x20003238
 80036b4:	20003244 	.word	0x20003244
 80036b8:	e000e018 	.word	0xe000e018
 80036bc:	2000389c 	.word	0x2000389c

080036c0 <vTraceStop>:
	if (RecorderEnabled == isEnabled)
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <vTraceStop+0x1c>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	2a00      	cmp	r2, #0
 80036c6:	d008      	beq.n	80036da <vTraceStop+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036cc:	2101      	movs	r1, #1
 80036ce:	f381 8810 	msr	PRIMASK, r1
	RecorderEnabled = isEnabled;		
 80036d2:	2100      	movs	r1, #0
 80036d4:	6019      	str	r1, [r3, #0]
 80036d6:	f382 8810 	msr	PRIMASK, r2
}
 80036da:	4770      	bx	lr
 80036dc:	20003238 	.word	0x20003238

080036e0 <xTraceIsRecordingEnabled>:
	return (int)RecorderEnabled;
 80036e0:	4b01      	ldr	r3, [pc, #4]	; (80036e8 <xTraceIsRecordingEnabled+0x8>)
 80036e2:	6818      	ldr	r0, [r3, #0]
}
 80036e4:	4770      	bx	lr
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	20003238 	.word	0x20003238

080036ec <prvTraceStoreStringEvent>:
{
 80036ec:	b40c      	push	{r2, r3}
 80036ee:	b510      	push	{r4, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	9c06      	ldr	r4, [sp, #24]
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 80036f4:	7823      	ldrb	r3, [r4, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d013      	beq.n	8003722 <prvTraceStoreStringEvent+0x36>
 80036fa:	2300      	movs	r3, #0
 80036fc:	e001      	b.n	8003702 <prvTraceStoreStringEvent+0x16>
 80036fe:	2b34      	cmp	r3, #52	; 0x34
 8003700:	d003      	beq.n	800370a <prvTraceStoreStringEvent+0x1e>
 8003702:	3301      	adds	r3, #1
 8003704:	5ce2      	ldrb	r2, [r4, r3]
 8003706:	2a00      	cmp	r2, #0
 8003708:	d1f9      	bne.n	80036fe <prvTraceStoreStringEvent+0x12>
	va_start(vl, str);
 800370a:	aa07      	add	r2, sp, #28
 800370c:	9203      	str	r2, [sp, #12]
	prvTraceStoreStringEventHelper(nArgs, eventID, NULL, len, str, vl);
 800370e:	9201      	str	r2, [sp, #4]
 8003710:	9400      	str	r4, [sp, #0]
 8003712:	2200      	movs	r2, #0
 8003714:	f7ff fec6 	bl	80034a4 <prvTraceStoreStringEventHelper>
}
 8003718:	b004      	add	sp, #16
 800371a:	bc10      	pop	{r4}
 800371c:	bc08      	pop	{r3}
 800371e:	b002      	add	sp, #8
 8003720:	4718      	bx	r3
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 8003722:	2300      	movs	r3, #0
 8003724:	e7f1      	b.n	800370a <prvTraceStoreStringEvent+0x1e>
 8003726:	46c0      	nop			; (mov r8, r8)

08003728 <prvTraceStoreSimpleStringEventHelper>:
{
 8003728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800372a:	4645      	mov	r5, r8
 800372c:	46de      	mov	lr, fp
 800372e:	4657      	mov	r7, sl
 8003730:	464e      	mov	r6, r9
 8003732:	b5e0      	push	{r5, r6, r7, lr}
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 8003734:	7813      	ldrb	r3, [r2, #0]
{
 8003736:	000d      	movs	r5, r1
 8003738:	b095      	sub	sp, #84	; 0x54
 800373a:	0011      	movs	r1, r2
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 800373c:	2b00      	cmp	r3, #0
 800373e:	d06a      	beq.n	8003816 <prvTraceStoreSimpleStringEventHelper+0xee>
 8003740:	2200      	movs	r2, #0
 8003742:	e001      	b.n	8003748 <prvTraceStoreSimpleStringEventHelper+0x20>
 8003744:	2a34      	cmp	r2, #52	; 0x34
 8003746:	d056      	beq.n	80037f6 <prvTraceStoreSimpleStringEventHelper+0xce>
 8003748:	0014      	movs	r4, r2
 800374a:	3201      	adds	r2, #1
 800374c:	5c8b      	ldrb	r3, [r1, r2]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f8      	bne.n	8003744 <prvTraceStoreSimpleStringEventHelper+0x1c>
	nStrWords = (len+1+3)/4;
 8003752:	3405      	adds	r4, #5
 8003754:	10a3      	asrs	r3, r4, #2
	if (userEvtChannel)
 8003756:	2d00      	cmp	r5, #0
 8003758:	d049      	beq.n	80037ee <prvTraceStoreSimpleStringEventHelper+0xc6>
	nWords = nStrWords + nArgs;
 800375a:	2604      	movs	r6, #4
 800375c:	46b4      	mov	ip, r6
		eventID++;
 800375e:	3001      	adds	r0, #1
 8003760:	b280      	uxth	r0, r0
	nWords = nStrWords + nArgs;
 8003762:	3301      	adds	r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003764:	f3ef 8610 	mrs	r6, PRIMASK
 8003768:	9600      	str	r6, [sp, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376a:	2601      	movs	r6, #1
 800376c:	f386 8810 	msr	PRIMASK, r6
	if (RecorderEnabled)
 8003770:	4e2b      	ldr	r6, [pc, #172]	; (8003820 <prvTraceStoreSimpleStringEventHelper+0xf8>)
 8003772:	6837      	ldr	r7, [r6, #0]
 8003774:	9601      	str	r6, [sp, #4]
 8003776:	2f00      	cmp	r7, #0
 8003778:	d02f      	beq.n	80037da <prvTraceStoreSimpleStringEventHelper+0xb2>
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 800377a:	1c9f      	adds	r7, r3, #2
 800377c:	00bf      	lsls	r7, r7, #2
 800377e:	46b8      	mov	r8, r7
		eventCounter++;
 8003780:	4f28      	ldr	r7, [pc, #160]	; (8003824 <prvTraceStoreSimpleStringEventHelper+0xfc>)
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8003782:	031b      	lsls	r3, r3, #12
		eventCounter++;
 8003784:	46ba      	mov	sl, r7
 8003786:	683f      	ldr	r7, [r7, #0]
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8003788:	4318      	orrs	r0, r3
		eventCounter++;
 800378a:	46b9      	mov	r9, r7
 800378c:	2701      	movs	r7, #1
 800378e:	46bb      	mov	fp, r7
 8003790:	44d9      	add	r9, fp
 8003792:	464e      	mov	r6, r9
 8003794:	4657      	mov	r7, sl
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8003796:	ab02      	add	r3, sp, #8
 8003798:	8098      	strh	r0, [r3, #4]
				event->base.EventCount = (uint16_t)eventCounter;
 800379a:	80de      	strh	r6, [r3, #6]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 800379c:	4b22      	ldr	r3, [pc, #136]	; (8003828 <prvTraceStoreSimpleStringEventHelper+0x100>)
		eventCounter++;
 800379e:	603e      	str	r6, [r7, #0]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 80037a0:	6818      	ldr	r0, [r3, #0]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 80037a2:	4b22      	ldr	r3, [pc, #136]	; (800382c <prvTraceStoreSimpleStringEventHelper+0x104>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 80037a4:	0200      	lsls	r0, r0, #8
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	0a00      	lsrs	r0, r0, #8
 80037aa:	061b      	lsls	r3, r3, #24
 80037ac:	181b      	adds	r3, r3, r0
				event->base.TS = prvGetTimestamp32();
 80037ae:	9304      	str	r3, [sp, #16]
				if (userEvtChannel != NULL)
 80037b0:	2d00      	cmp	r5, #0
 80037b2:	d000      	beq.n	80037b6 <prvTraceStoreSimpleStringEventHelper+0x8e>
					data32[0] = (uint32_t)userEvtChannel;
 80037b4:	9505      	str	r5, [sp, #20]
					data8[offset + i] = str[i];
 80037b6:	ad05      	add	r5, sp, #20
				for (i = 0; i < len; i++)
 80037b8:	2a00      	cmp	r2, #0
 80037ba:	d003      	beq.n	80037c4 <prvTraceStoreSimpleStringEventHelper+0x9c>
					data8[offset + i] = str[i];
 80037bc:	4663      	mov	r3, ip
 80037be:	18e8      	adds	r0, r5, r3
 80037c0:	f001 fd20 	bl	8005204 <memcpy>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 80037c4:	192d      	adds	r5, r5, r4
 80037c6:	2400      	movs	r4, #0
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 80037c8:	4641      	mov	r1, r8
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 80037ca:	702c      	strb	r4, [r5, #0]
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 80037cc:	aa02      	add	r2, sp, #8
 80037ce:	a803      	add	r0, sp, #12
 80037d0:	9402      	str	r4, [sp, #8]
 80037d2:	f7ff fd37 	bl	8003244 <writeToRTT>
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d110      	bne.n	80037fc <prvTraceStoreSimpleStringEventHelper+0xd4>
 80037da:	9b00      	ldr	r3, [sp, #0]
 80037dc:	f383 8810 	msr	PRIMASK, r3
}
 80037e0:	b015      	add	sp, #84	; 0x54
 80037e2:	bcf0      	pop	{r4, r5, r6, r7}
 80037e4:	46bb      	mov	fp, r7
 80037e6:	46b2      	mov	sl, r6
 80037e8:	46a9      	mov	r9, r5
 80037ea:	46a0      	mov	r8, r4
 80037ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ee:	2600      	movs	r6, #0
 80037f0:	0014      	movs	r4, r2
 80037f2:	46b4      	mov	ip, r6
 80037f4:	e7b6      	b.n	8003764 <prvTraceStoreSimpleStringEventHelper+0x3c>
 80037f6:	230e      	movs	r3, #14
 80037f8:	2438      	movs	r4, #56	; 0x38
 80037fa:	e7ac      	b.n	8003756 <prvTraceStoreSimpleStringEventHelper+0x2e>
	if (RecorderEnabled == isEnabled)
 80037fc:	9901      	ldr	r1, [sp, #4]
 80037fe:	680b      	ldr	r3, [r1, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0ea      	beq.n	80037da <prvTraceStoreSimpleStringEventHelper+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003804:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003808:	2201      	movs	r2, #1
 800380a:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 800380e:	600c      	str	r4, [r1, #0]
 8003810:	f383 8810 	msr	PRIMASK, r3
}
 8003814:	e7e1      	b.n	80037da <prvTraceStoreSimpleStringEventHelper+0xb2>
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 8003816:	2301      	movs	r3, #1
 8003818:	2404      	movs	r4, #4
 800381a:	2200      	movs	r2, #0
 800381c:	e79b      	b.n	8003756 <prvTraceStoreSimpleStringEventHelper+0x2e>
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	20003238 	.word	0x20003238
 8003824:	20003244 	.word	0x20003244
 8003828:	e000e018 	.word	0xe000e018
 800382c:	2000389c 	.word	0x2000389c

08003830 <prvTraceStoreEvent0>:
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8003830:	2380      	movs	r3, #128	; 0x80
{
 8003832:	b5f0      	push	{r4, r5, r6, r7, lr}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8003834:	015b      	lsls	r3, r3, #5
{
 8003836:	b085      	sub	sp, #20
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8003838:	4298      	cmp	r0, r3
 800383a:	d230      	bcs.n	800389e <prvTraceStoreEvent0+0x6e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800383c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003840:	2501      	movs	r5, #1
 8003842:	f385 8810 	msr	PRIMASK, r5
	if (RecorderEnabled)
 8003846:	4c26      	ldr	r4, [pc, #152]	; (80038e0 <prvTraceStoreEvent0+0xb0>)
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d103      	bne.n	8003856 <prvTraceStoreEvent0+0x26>
 800384e:	f386 8810 	msr	PRIMASK, r6
}
 8003852:	b005      	add	sp, #20
 8003854:	bdf0      	pop	{r4, r5, r6, r7, pc}
		eventCounter++;
 8003856:	4a23      	ldr	r2, [pc, #140]	; (80038e4 <prvTraceStoreEvent0+0xb4>)
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(BaseEvent));
 8003858:	2700      	movs	r7, #0
		eventCounter++;
 800385a:	6813      	ldr	r3, [r2, #0]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(BaseEvent));
 800385c:	2108      	movs	r1, #8
		eventCounter++;
 800385e:	3301      	adds	r3, #1
 8003860:	6013      	str	r3, [r2, #0]
				event->EventID = eventID | PARAM_COUNT(0);
 8003862:	466a      	mov	r2, sp
				event->EventCount = (uint16_t)eventCounter;
 8003864:	8153      	strh	r3, [r2, #10]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003866:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <prvTraceStoreEvent0+0xb8>)
				event->EventID = eventID | PARAM_COUNT(0);
 8003868:	8110      	strh	r0, [r2, #8]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 800386a:	681a      	ldr	r2, [r3, #0]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 800386c:	4b1f      	ldr	r3, [pc, #124]	; (80038ec <prvTraceStoreEvent0+0xbc>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 800386e:	0212      	lsls	r2, r2, #8
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	0a12      	lsrs	r2, r2, #8
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	189b      	adds	r3, r3, r2
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(BaseEvent));
 8003878:	a802      	add	r0, sp, #8
 800387a:	aa01      	add	r2, sp, #4
				event->TS = prvGetTimestamp32();
 800387c:	9303      	str	r3, [sp, #12]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(BaseEvent));
 800387e:	9701      	str	r7, [sp, #4]
 8003880:	f7ff fce0 	bl	8003244 <writeToRTT>
 8003884:	2800      	cmp	r0, #0
 8003886:	d0e2      	beq.n	800384e <prvTraceStoreEvent0+0x1e>
	if (RecorderEnabled == isEnabled)
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0df      	beq.n	800384e <prvTraceStoreEvent0+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003892:	f385 8810 	msr	PRIMASK, r5
	RecorderEnabled = isEnabled;		
 8003896:	6027      	str	r7, [r4, #0]
 8003898:	f383 8810 	msr	PRIMASK, r3
}
 800389c:	e7d7      	b.n	800384e <prvTraceStoreEvent0+0x1e>
	if (errorCode == PSF_ERROR_NONE)
 800389e:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <prvTraceStoreEvent0+0xc0>)
 80038a0:	681c      	ldr	r4, [r3, #0]
 80038a2:	2c00      	cmp	r4, #0
 80038a4:	d1d5      	bne.n	8003852 <prvTraceStoreEvent0+0x22>
		errorCode = errCode;
 80038a6:	2501      	movs	r5, #1
		SET_ERROR_WARNING_FLAG(errorCode);
 80038a8:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <prvTraceStoreEvent0+0xc4>)
		errorCode = errCode;
 80038aa:	601d      	str	r5, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 80038ac:	6813      	ldr	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 80038ae:	4e12      	ldr	r6, [pc, #72]	; (80038f8 <prvTraceStoreEvent0+0xc8>)
		SET_ERROR_WARNING_FLAG(errorCode);
 80038b0:	432b      	orrs	r3, r5
 80038b2:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 80038b4:	2090      	movs	r0, #144	; 0x90
 80038b6:	4a11      	ldr	r2, [pc, #68]	; (80038fc <prvTraceStoreEvent0+0xcc>)
 80038b8:	6831      	ldr	r1, [r6, #0]
 80038ba:	f7ff ff35 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 80038be:	4a10      	ldr	r2, [pc, #64]	; (8003900 <prvTraceStoreEvent0+0xd0>)
 80038c0:	2090      	movs	r0, #144	; 0x90
 80038c2:	6831      	ldr	r1, [r6, #0]
 80038c4:	f7ff ff30 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <prvTraceStoreEvent0+0xb0>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	2a00      	cmp	r2, #0
 80038ce:	d0c0      	beq.n	8003852 <prvTraceStoreEvent0+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d4:	f385 8810 	msr	PRIMASK, r5
	RecorderEnabled = isEnabled;		
 80038d8:	601c      	str	r4, [r3, #0]
 80038da:	f382 8810 	msr	PRIMASK, r2
}
 80038de:	e7b8      	b.n	8003852 <prvTraceStoreEvent0+0x22>
 80038e0:	20003238 	.word	0x20003238
 80038e4:	20003244 	.word	0x20003244
 80038e8:	e000e018 	.word	0xe000e018
 80038ec:	2000389c 	.word	0x2000389c
 80038f0:	20003240 	.word	0x20003240
 80038f4:	20003224 	.word	0x20003224
 80038f8:	20003220 	.word	0x20003220
 80038fc:	080052e0 	.word	0x080052e0
 8003900:	080052bc 	.word	0x080052bc

08003904 <prvTraceStoreEvent1>:
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8003904:	2380      	movs	r3, #128	; 0x80
{
 8003906:	b5f0      	push	{r4, r5, r6, r7, lr}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8003908:	015b      	lsls	r3, r3, #5
{
 800390a:	b085      	sub	sp, #20
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 800390c:	4298      	cmp	r0, r3
 800390e:	d232      	bcs.n	8003976 <prvTraceStoreEvent1+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003910:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003914:	2501      	movs	r5, #1
 8003916:	f385 8810 	msr	PRIMASK, r5
	if (RecorderEnabled)
 800391a:	4c27      	ldr	r4, [pc, #156]	; (80039b8 <prvTraceStoreEvent1+0xb4>)
 800391c:	6822      	ldr	r2, [r4, #0]
 800391e:	2a00      	cmp	r2, #0
 8003920:	d103      	bne.n	800392a <prvTraceStoreEvent1+0x26>
 8003922:	f386 8810 	msr	PRIMASK, r6
}
 8003926:	b005      	add	sp, #20
 8003928:	bdf0      	pop	{r4, r5, r6, r7, pc}
				event->base.EventID = eventID | PARAM_COUNT(1);
 800392a:	4303      	orrs	r3, r0
 800392c:	4668      	mov	r0, sp
		eventCounter++;
 800392e:	4f23      	ldr	r7, [pc, #140]	; (80039bc <prvTraceStoreEvent1+0xb8>)
				event->base.EventID = eventID | PARAM_COUNT(1);
 8003930:	8083      	strh	r3, [r0, #4]
		eventCounter++;
 8003932:	683a      	ldr	r2, [r7, #0]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003934:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <prvTraceStoreEvent1+0xbc>)
		eventCounter++;
 8003936:	3201      	adds	r2, #1
 8003938:	603a      	str	r2, [r7, #0]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_1));
 800393a:	2700      	movs	r7, #0
				event->base.EventCount = (uint16_t)eventCounter;
 800393c:	80c2      	strh	r2, [r0, #6]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 800393e:	681a      	ldr	r2, [r3, #0]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 8003940:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <prvTraceStoreEvent1+0xc0>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003942:	0212      	lsls	r2, r2, #8
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	0a12      	lsrs	r2, r2, #8
 8003948:	061b      	lsls	r3, r3, #24
 800394a:	189b      	adds	r3, r3, r2
				event->param1 = (uint32_t)param1;
 800394c:	9103      	str	r1, [sp, #12]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_1));
 800394e:	466a      	mov	r2, sp
 8003950:	210c      	movs	r1, #12
 8003952:	a801      	add	r0, sp, #4
				event->base.TS = prvGetTimestamp32();
 8003954:	9302      	str	r3, [sp, #8]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_1));
 8003956:	9700      	str	r7, [sp, #0]
 8003958:	f7ff fc74 	bl	8003244 <writeToRTT>
 800395c:	2800      	cmp	r0, #0
 800395e:	d0e0      	beq.n	8003922 <prvTraceStoreEvent1+0x1e>
	if (RecorderEnabled == isEnabled)
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0dd      	beq.n	8003922 <prvTraceStoreEvent1+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003966:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396a:	f385 8810 	msr	PRIMASK, r5
	RecorderEnabled = isEnabled;		
 800396e:	6027      	str	r7, [r4, #0]
 8003970:	f383 8810 	msr	PRIMASK, r3
}
 8003974:	e7d5      	b.n	8003922 <prvTraceStoreEvent1+0x1e>
	if (errorCode == PSF_ERROR_NONE)
 8003976:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <prvTraceStoreEvent1+0xc4>)
 8003978:	681c      	ldr	r4, [r3, #0]
 800397a:	2c00      	cmp	r4, #0
 800397c:	d1d3      	bne.n	8003926 <prvTraceStoreEvent1+0x22>
		errorCode = errCode;
 800397e:	2501      	movs	r5, #1
		SET_ERROR_WARNING_FLAG(errorCode);
 8003980:	4a12      	ldr	r2, [pc, #72]	; (80039cc <prvTraceStoreEvent1+0xc8>)
		errorCode = errCode;
 8003982:	601d      	str	r5, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8003984:	6813      	ldr	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003986:	4e12      	ldr	r6, [pc, #72]	; (80039d0 <prvTraceStoreEvent1+0xcc>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8003988:	432b      	orrs	r3, r5
 800398a:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 800398c:	2090      	movs	r0, #144	; 0x90
 800398e:	4a11      	ldr	r2, [pc, #68]	; (80039d4 <prvTraceStoreEvent1+0xd0>)
 8003990:	6831      	ldr	r1, [r6, #0]
 8003992:	f7ff fec9 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8003996:	4a10      	ldr	r2, [pc, #64]	; (80039d8 <prvTraceStoreEvent1+0xd4>)
 8003998:	2090      	movs	r0, #144	; 0x90
 800399a:	6831      	ldr	r1, [r6, #0]
 800399c:	f7ff fec4 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <prvTraceStoreEvent1+0xb4>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	2a00      	cmp	r2, #0
 80039a6:	d0be      	beq.n	8003926 <prvTraceStoreEvent1+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ac:	f385 8810 	msr	PRIMASK, r5
	RecorderEnabled = isEnabled;		
 80039b0:	601c      	str	r4, [r3, #0]
 80039b2:	f382 8810 	msr	PRIMASK, r2
}
 80039b6:	e7b6      	b.n	8003926 <prvTraceStoreEvent1+0x22>
 80039b8:	20003238 	.word	0x20003238
 80039bc:	20003244 	.word	0x20003244
 80039c0:	e000e018 	.word	0xe000e018
 80039c4:	2000389c 	.word	0x2000389c
 80039c8:	20003240 	.word	0x20003240
 80039cc:	20003224 	.word	0x20003224
 80039d0:	20003220 	.word	0x20003220
 80039d4:	080052e0 	.word	0x080052e0
 80039d8:	080052bc 	.word	0x080052bc

080039dc <prvTraceStoreEvent2>:
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80039dc:	2380      	movs	r3, #128	; 0x80
{
 80039de:	b5f0      	push	{r4, r5, r6, r7, lr}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80039e0:	015b      	lsls	r3, r3, #5
{
 80039e2:	b087      	sub	sp, #28
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80039e4:	4298      	cmp	r0, r3
 80039e6:	d235      	bcs.n	8003a54 <prvTraceStoreEvent2+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ec:	2501      	movs	r5, #1
 80039ee:	f385 8810 	msr	PRIMASK, r5
	if (RecorderEnabled)
 80039f2:	4c29      	ldr	r4, [pc, #164]	; (8003a98 <prvTraceStoreEvent2+0xbc>)
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d103      	bne.n	8003a02 <prvTraceStoreEvent2+0x26>
 80039fa:	f386 8810 	msr	PRIMASK, r6
}
 80039fe:	b007      	add	sp, #28
 8003a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		eventCounter++;
 8003a02:	4f26      	ldr	r7, [pc, #152]	; (8003a9c <prvTraceStoreEvent2+0xc0>)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	3301      	adds	r3, #1
 8003a08:	603b      	str	r3, [r7, #0]
				event->base.EventID = eventID | PARAM_COUNT(2);
 8003a0a:	2780      	movs	r7, #128	; 0x80
 8003a0c:	01bf      	lsls	r7, r7, #6
 8003a0e:	4338      	orrs	r0, r7
 8003a10:	466f      	mov	r7, sp
 8003a12:	8138      	strh	r0, [r7, #8]
				event->base.EventCount = (uint16_t)eventCounter;
 8003a14:	817b      	strh	r3, [r7, #10]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_2));
 8003a16:	2700      	movs	r7, #0
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003a18:	4b21      	ldr	r3, [pc, #132]	; (8003aa0 <prvTraceStoreEvent2+0xc4>)
 8003a1a:	6818      	ldr	r0, [r3, #0]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 8003a1c:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <prvTraceStoreEvent2+0xc8>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003a1e:	0200      	lsls	r0, r0, #8
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	0a00      	lsrs	r0, r0, #8
 8003a24:	061b      	lsls	r3, r3, #24
 8003a26:	181b      	adds	r3, r3, r0
				event->param1 = (uint32_t)param1;
 8003a28:	9104      	str	r1, [sp, #16]
				event->param2 = param2;
 8003a2a:	9205      	str	r2, [sp, #20]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_2));
 8003a2c:	2110      	movs	r1, #16
 8003a2e:	aa01      	add	r2, sp, #4
 8003a30:	a802      	add	r0, sp, #8
				event->base.TS = prvGetTimestamp32();
 8003a32:	9303      	str	r3, [sp, #12]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_2));
 8003a34:	9701      	str	r7, [sp, #4]
 8003a36:	f7ff fc05 	bl	8003244 <writeToRTT>
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	d0dd      	beq.n	80039fa <prvTraceStoreEvent2+0x1e>
	if (RecorderEnabled == isEnabled)
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0da      	beq.n	80039fa <prvTraceStoreEvent2+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a44:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a48:	f385 8810 	msr	PRIMASK, r5
	RecorderEnabled = isEnabled;		
 8003a4c:	6027      	str	r7, [r4, #0]
 8003a4e:	f383 8810 	msr	PRIMASK, r3
}
 8003a52:	e7d2      	b.n	80039fa <prvTraceStoreEvent2+0x1e>
	if (errorCode == PSF_ERROR_NONE)
 8003a54:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <prvTraceStoreEvent2+0xcc>)
 8003a56:	681c      	ldr	r4, [r3, #0]
 8003a58:	2c00      	cmp	r4, #0
 8003a5a:	d1d0      	bne.n	80039fe <prvTraceStoreEvent2+0x22>
		errorCode = errCode;
 8003a5c:	2501      	movs	r5, #1
		SET_ERROR_WARNING_FLAG(errorCode);
 8003a5e:	4a13      	ldr	r2, [pc, #76]	; (8003aac <prvTraceStoreEvent2+0xd0>)
		errorCode = errCode;
 8003a60:	601d      	str	r5, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8003a62:	6813      	ldr	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003a64:	4e12      	ldr	r6, [pc, #72]	; (8003ab0 <prvTraceStoreEvent2+0xd4>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8003a66:	432b      	orrs	r3, r5
 8003a68:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003a6a:	2090      	movs	r0, #144	; 0x90
 8003a6c:	4a11      	ldr	r2, [pc, #68]	; (8003ab4 <prvTraceStoreEvent2+0xd8>)
 8003a6e:	6831      	ldr	r1, [r6, #0]
 8003a70:	f7ff fe5a 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8003a74:	4a10      	ldr	r2, [pc, #64]	; (8003ab8 <prvTraceStoreEvent2+0xdc>)
 8003a76:	2090      	movs	r0, #144	; 0x90
 8003a78:	6831      	ldr	r1, [r6, #0]
 8003a7a:	f7ff fe55 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <prvTraceStoreEvent2+0xbc>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	2a00      	cmp	r2, #0
 8003a84:	d0bb      	beq.n	80039fe <prvTraceStoreEvent2+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a86:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8a:	f385 8810 	msr	PRIMASK, r5
	RecorderEnabled = isEnabled;		
 8003a8e:	601c      	str	r4, [r3, #0]
 8003a90:	f382 8810 	msr	PRIMASK, r2
}
 8003a94:	e7b3      	b.n	80039fe <prvTraceStoreEvent2+0x22>
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	20003238 	.word	0x20003238
 8003a9c:	20003244 	.word	0x20003244
 8003aa0:	e000e018 	.word	0xe000e018
 8003aa4:	2000389c 	.word	0x2000389c
 8003aa8:	20003240 	.word	0x20003240
 8003aac:	20003224 	.word	0x20003224
 8003ab0:	20003220 	.word	0x20003220
 8003ab4:	080052e0 	.word	0x080052e0
 8003ab8:	080052bc 	.word	0x080052bc

08003abc <prvTraceStoreEvent3>:
{
 8003abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003abe:	46c6      	mov	lr, r8
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8003ac0:	2480      	movs	r4, #128	; 0x80
{
 8003ac2:	b500      	push	{lr}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8003ac4:	0164      	lsls	r4, r4, #5
{
 8003ac6:	b086      	sub	sp, #24
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8003ac8:	42a0      	cmp	r0, r4
 8003aca:	d23b      	bcs.n	8003b44 <prvTraceStoreEvent3+0x88>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003acc:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad0:	2401      	movs	r4, #1
 8003ad2:	46a0      	mov	r8, r4
 8003ad4:	f384 8810 	msr	PRIMASK, r4
	if (RecorderEnabled)
 8003ad8:	4c2b      	ldr	r4, [pc, #172]	; (8003b88 <prvTraceStoreEvent3+0xcc>)
 8003ada:	6827      	ldr	r7, [r4, #0]
 8003adc:	2f00      	cmp	r7, #0
 8003ade:	d105      	bne.n	8003aec <prvTraceStoreEvent3+0x30>
 8003ae0:	f386 8810 	msr	PRIMASK, r6
}
 8003ae4:	b006      	add	sp, #24
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	46b8      	mov	r8, r7
 8003aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		eventCounter++;
 8003aec:	4f27      	ldr	r7, [pc, #156]	; (8003b8c <prvTraceStoreEvent3+0xd0>)
 8003aee:	46bc      	mov	ip, r7
 8003af0:	4665      	mov	r5, ip
 8003af2:	683f      	ldr	r7, [r7, #0]
 8003af4:	3701      	adds	r7, #1
 8003af6:	602f      	str	r7, [r5, #0]
				event->base.EventID = eventID | PARAM_COUNT(3);
 8003af8:	25c0      	movs	r5, #192	; 0xc0
 8003afa:	01ad      	lsls	r5, r5, #6
 8003afc:	4328      	orrs	r0, r5
 8003afe:	466d      	mov	r5, sp
 8003b00:	80a8      	strh	r0, [r5, #4]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003b02:	4823      	ldr	r0, [pc, #140]	; (8003b90 <prvTraceStoreEvent3+0xd4>)
				event->base.EventCount = (uint16_t)eventCounter;
 8003b04:	80ef      	strh	r7, [r5, #6]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003b06:	6807      	ldr	r7, [r0, #0]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 8003b08:	4822      	ldr	r0, [pc, #136]	; (8003b94 <prvTraceStoreEvent3+0xd8>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8003b0a:	023f      	lsls	r7, r7, #8
 8003b0c:	6800      	ldr	r0, [r0, #0]
 8003b0e:	0a3f      	lsrs	r7, r7, #8
 8003b10:	0600      	lsls	r0, r0, #24
 8003b12:	19c0      	adds	r0, r0, r7
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_3));
 8003b14:	2700      	movs	r7, #0
				event->base.TS = prvGetTimestamp32();
 8003b16:	9002      	str	r0, [sp, #8]
				event->param1 = (uint32_t)param1;
 8003b18:	9103      	str	r1, [sp, #12]
				event->param2 = param2;
 8003b1a:	9204      	str	r2, [sp, #16]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_3));
 8003b1c:	2114      	movs	r1, #20
 8003b1e:	466a      	mov	r2, sp
 8003b20:	a801      	add	r0, sp, #4
				event->param3 = param3;
 8003b22:	9305      	str	r3, [sp, #20]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_3));
 8003b24:	9700      	str	r7, [sp, #0]
 8003b26:	f7ff fb8d 	bl	8003244 <writeToRTT>
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	d0d8      	beq.n	8003ae0 <prvTraceStoreEvent3+0x24>
	if (RecorderEnabled == isEnabled)
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0d5      	beq.n	8003ae0 <prvTraceStoreEvent3+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b34:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b38:	f388 8810 	msr	PRIMASK, r8
	RecorderEnabled = isEnabled;		
 8003b3c:	6027      	str	r7, [r4, #0]
 8003b3e:	f383 8810 	msr	PRIMASK, r3
}
 8003b42:	e7cd      	b.n	8003ae0 <prvTraceStoreEvent3+0x24>
	if (errorCode == PSF_ERROR_NONE)
 8003b44:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <prvTraceStoreEvent3+0xdc>)
 8003b46:	681c      	ldr	r4, [r3, #0]
 8003b48:	2c00      	cmp	r4, #0
 8003b4a:	d1cb      	bne.n	8003ae4 <prvTraceStoreEvent3+0x28>
		errorCode = errCode;
 8003b4c:	2501      	movs	r5, #1
		SET_ERROR_WARNING_FLAG(errorCode);
 8003b4e:	4a13      	ldr	r2, [pc, #76]	; (8003b9c <prvTraceStoreEvent3+0xe0>)
		errorCode = errCode;
 8003b50:	601d      	str	r5, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8003b52:	6813      	ldr	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003b54:	4e12      	ldr	r6, [pc, #72]	; (8003ba0 <prvTraceStoreEvent3+0xe4>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8003b56:	432b      	orrs	r3, r5
 8003b58:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003b5a:	2090      	movs	r0, #144	; 0x90
 8003b5c:	4a11      	ldr	r2, [pc, #68]	; (8003ba4 <prvTraceStoreEvent3+0xe8>)
 8003b5e:	6831      	ldr	r1, [r6, #0]
 8003b60:	f7ff fde2 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8003b64:	4a10      	ldr	r2, [pc, #64]	; (8003ba8 <prvTraceStoreEvent3+0xec>)
 8003b66:	2090      	movs	r0, #144	; 0x90
 8003b68:	6831      	ldr	r1, [r6, #0]
 8003b6a:	f7ff fddd 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <prvTraceStoreEvent3+0xcc>)
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	2a00      	cmp	r2, #0
 8003b74:	d0b6      	beq.n	8003ae4 <prvTraceStoreEvent3+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b76:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7a:	f385 8810 	msr	PRIMASK, r5
	RecorderEnabled = isEnabled;		
 8003b7e:	601c      	str	r4, [r3, #0]
 8003b80:	f382 8810 	msr	PRIMASK, r2
}
 8003b84:	e7ae      	b.n	8003ae4 <prvTraceStoreEvent3+0x28>
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	20003238 	.word	0x20003238
 8003b8c:	20003244 	.word	0x20003244
 8003b90:	e000e018 	.word	0xe000e018
 8003b94:	2000389c 	.word	0x2000389c
 8003b98:	20003240 	.word	0x20003240
 8003b9c:	20003224 	.word	0x20003224
 8003ba0:	20003220 	.word	0x20003220
 8003ba4:	080052e0 	.word	0x080052e0
 8003ba8:	080052bc 	.word	0x080052bc

08003bac <prvTraceSaveObjectSymbol>:
{
 8003bac:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bae:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f383 8810 	msr	PRIMASK, r3
	if (firstFreeSymbolTableIndex < SYMBOL_TABLE_BUFFER_SIZE)
 8003bb8:	23a0      	movs	r3, #160	; 0xa0
 8003bba:	4e1c      	ldr	r6, [pc, #112]	; (8003c2c <prvTraceSaveObjectSymbol+0x80>)
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	6835      	ldr	r5, [r6, #0]
 8003bc0:	429d      	cmp	r5, r3
 8003bc2:	d226      	bcs.n	8003c12 <prvTraceSaveObjectSymbol+0x66>
		symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[firstFreeSymbolTableIndex / sizeof(uint32_t)] = (uint32_t)address;
 8003bc4:	4b1a      	ldr	r3, [pc, #104]	; (8003c30 <prvTraceSaveObjectSymbol+0x84>)
 8003bc6:	08aa      	lsrs	r2, r5, #2
 8003bc8:	0092      	lsls	r2, r2, #2
 8003bca:	50d0      	str	r0, [r2, r3]
		ptrSymbol = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[firstFreeSymbolTableIndex + sizeof(uint32_t)];
 8003bcc:	1d28      	adds	r0, r5, #4
 8003bce:	18c0      	adds	r0, r0, r3
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e002      	b.n	8003bda <prvTraceSaveObjectSymbol+0x2e>
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	2b19      	cmp	r3, #25
 8003bd8:	d022      	beq.n	8003c20 <prvTraceSaveObjectSymbol+0x74>
			ptrSymbol[i] = (uint8_t)name[i];	/* We do this first to ensure we also get the 0 termination, if there is one */
 8003bda:	5cca      	ldrb	r2, [r1, r3]
 8003bdc:	18cc      	adds	r4, r1, r3
 8003bde:	54c2      	strb	r2, [r0, r3]
			if (name[i] == 0)
 8003be0:	2a00      	cmp	r2, #0
 8003be2:	d1f7      	bne.n	8003bd4 <prvTraceSaveObjectSymbol+0x28>
		while ((name[i] != 0) && i < 128)
 8003be4:	7822      	ldrb	r2, [r4, #0]
 8003be6:	2a00      	cmp	r2, #0
 8003be8:	d10a      	bne.n	8003c00 <prvTraceSaveObjectSymbol+0x54>
		if (i > LongestSymbolName)
 8003bea:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <prvTraceSaveObjectSymbol+0x88>)
 8003bec:	6811      	ldr	r1, [r2, #0]
 8003bee:	428b      	cmp	r3, r1
 8003bf0:	d814      	bhi.n	8003c1c <prvTraceSaveObjectSymbol+0x70>
		firstFreeSymbolTableIndex += SYMBOL_TABLE_SLOT_SIZE;
 8003bf2:	3520      	adds	r5, #32
 8003bf4:	6035      	str	r5, [r6, #0]
 8003bf6:	f38c 8810 	msr	PRIMASK, ip
}
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
		while ((name[i] != 0) && i < 128)
 8003bfc:	2b80      	cmp	r3, #128	; 0x80
 8003bfe:	d0f4      	beq.n	8003bea <prvTraceSaveObjectSymbol+0x3e>
			i++;
 8003c00:	3301      	adds	r3, #1
		while ((name[i] != 0) && i < 128)
 8003c02:	5cca      	ldrb	r2, [r1, r3]
 8003c04:	2a00      	cmp	r2, #0
 8003c06:	d1f9      	bne.n	8003bfc <prvTraceSaveObjectSymbol+0x50>
		if (i > LongestSymbolName)
 8003c08:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <prvTraceSaveObjectSymbol+0x88>)
 8003c0a:	6811      	ldr	r1, [r2, #0]
 8003c0c:	428b      	cmp	r3, r1
 8003c0e:	d9f0      	bls.n	8003bf2 <prvTraceSaveObjectSymbol+0x46>
 8003c10:	e004      	b.n	8003c1c <prvTraceSaveObjectSymbol+0x70>
		NoRoomForSymbol++;
 8003c12:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <prvTraceSaveObjectSymbol+0x8c>)
 8003c14:	6813      	ldr	r3, [r2, #0]
 8003c16:	3301      	adds	r3, #1
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e7ec      	b.n	8003bf6 <prvTraceSaveObjectSymbol+0x4a>
			LongestSymbolName = i;
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e7e8      	b.n	8003bf2 <prvTraceSaveObjectSymbol+0x46>
		while ((name[i] != 0) && i < 128)
 8003c20:	000c      	movs	r4, r1
 8003c22:	7e62      	ldrb	r2, [r4, #25]
 8003c24:	3419      	adds	r4, #25
 8003c26:	2a00      	cmp	r2, #0
 8003c28:	d1ea      	bne.n	8003c00 <prvTraceSaveObjectSymbol+0x54>
 8003c2a:	e7de      	b.n	8003bea <prvTraceSaveObjectSymbol+0x3e>
 8003c2c:	2000324c 	.word	0x2000324c
 8003c30:	20003390 	.word	0x20003390
 8003c34:	20003228 	.word	0x20003228
 8003c38:	20003234 	.word	0x20003234

08003c3c <vTraceStoreKernelObjectName>:
{
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	0005      	movs	r5, r0
 8003c40:	000c      	movs	r4, r1
	prvTraceSaveObjectSymbol(object, name);
 8003c42:	f7ff ffb3 	bl	8003bac <prvTraceSaveObjectSymbol>
	prvTraceStoreStringEvent(1, eventID, name, object);
 8003c46:	002b      	movs	r3, r5
 8003c48:	0022      	movs	r2, r4
 8003c4a:	2103      	movs	r1, #3
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	f7ff fcc3 	bl	80035d8 <prvTraceStoreStringEvent.constprop.1>
}
 8003c52:	bd70      	pop	{r4, r5, r6, pc}

08003c54 <xTraceRegisterString>:
{
 8003c54:	b570      	push	{r4, r5, r6, lr}
 8003c56:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c58:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f383 8810 	msr	PRIMASK, r3
	if (firstFreeSymbolTableIndex < SYMBOL_TABLE_BUFFER_SIZE)
 8003c62:	22a0      	movs	r2, #160	; 0xa0
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <xTraceRegisterString+0x3c>)
	void* retVal = 0;
 8003c66:	2400      	movs	r4, #0
	if (firstFreeSymbolTableIndex < SYMBOL_TABLE_BUFFER_SIZE)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	00d2      	lsls	r2, r2, #3
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d205      	bcs.n	8003c7c <xTraceRegisterString+0x28>
		retVal = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[firstFreeSymbolTableIndex];
 8003c70:	4c08      	ldr	r4, [pc, #32]	; (8003c94 <xTraceRegisterString+0x40>)
		prvTraceSaveObjectSymbol(retVal, name);
 8003c72:	0001      	movs	r1, r0
		retVal = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[firstFreeSymbolTableIndex];
 8003c74:	191c      	adds	r4, r3, r4
		prvTraceSaveObjectSymbol(retVal, name);
 8003c76:	0020      	movs	r0, r4
 8003c78:	f7ff ff98 	bl	8003bac <prvTraceSaveObjectSymbol>
 8003c7c:	f386 8810 	msr	PRIMASK, r6
	prvTraceStoreStringEvent(1, eventID, (const char*)name, str);
 8003c80:	002a      	movs	r2, r5
 8003c82:	0023      	movs	r3, r4
 8003c84:	2103      	movs	r1, #3
 8003c86:	2001      	movs	r0, #1
 8003c88:	f7ff fca6 	bl	80035d8 <prvTraceStoreStringEvent.constprop.1>
}
 8003c8c:	0020      	movs	r0, r4
 8003c8e:	bd70      	pop	{r4, r5, r6, pc}
 8003c90:	2000324c 	.word	0x2000324c
 8003c94:	20003390 	.word	0x20003390

08003c98 <prvTraceSaveObjectData>:
{
 8003c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c9a:	46c6      	mov	lr, r8
 8003c9c:	468c      	mov	ip, r1
 8003c9e:	b500      	push	{lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca0:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f383 8810 	msr	PRIMASK, r3
	foundSlot = firstFreeObjectDataTableIndex;
 8003caa:	4918      	ldr	r1, [pc, #96]	; (8003d0c <prvTraceSaveObjectData+0x74>)
 8003cac:	680e      	ldr	r6, [r1, #0]
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 8003cae:	2e00      	cmp	r6, #0
 8003cb0:	d021      	beq.n	8003cf6 <prvTraceSaveObjectData+0x5e>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	4f16      	ldr	r7, [pc, #88]	; (8003d10 <prvTraceSaveObjectData+0x78>)
 8003cb6:	e002      	b.n	8003cbe <prvTraceSaveObjectData+0x26>
 8003cb8:	3308      	adds	r3, #8
 8003cba:	429e      	cmp	r6, r3
 8003cbc:	d912      	bls.n	8003ce4 <prvTraceSaveObjectData+0x4c>
		ptr = &objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i / sizeof(uint32_t)];
 8003cbe:	089a      	lsrs	r2, r3, #2
		if (*ptr == (uint32_t)address)
 8003cc0:	0094      	lsls	r4, r2, #2
 8003cc2:	593d      	ldr	r5, [r7, r4]
 8003cc4:	42a8      	cmp	r0, r5
 8003cc6:	d1f7      	bne.n	8003cb8 <prvTraceSaveObjectData+0x20>
	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
 8003cc8:	21a0      	movs	r1, #160	; 0xa0
 8003cca:	0049      	lsls	r1, r1, #1
 8003ccc:	428b      	cmp	r3, r1
 8003cce:	d20d      	bcs.n	8003cec <prvTraceSaveObjectData+0x54>
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 8003cd0:	4663      	mov	r3, ip
 8003cd2:	3201      	adds	r2, #1
 8003cd4:	0092      	lsls	r2, r2, #2
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
 8003cd6:	5138      	str	r0, [r7, r4]
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 8003cd8:	50bb      	str	r3, [r7, r2]
 8003cda:	f388 8810 	msr	PRIMASK, r8
}
 8003cde:	bc80      	pop	{r7}
 8003ce0:	46b8      	mov	r8, r7
 8003ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
 8003ce4:	23a0      	movs	r3, #160	; 0xa0
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	429e      	cmp	r6, r3
 8003cea:	d305      	bcc.n	8003cf8 <prvTraceSaveObjectData+0x60>
		NoRoomForObjectData++;
 8003cec:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <prvTraceSaveObjectData+0x7c>)
 8003cee:	6813      	ldr	r3, [r2, #0]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	e7f1      	b.n	8003cda <prvTraceSaveObjectData+0x42>
 8003cf6:	4f06      	ldr	r7, [pc, #24]	; (8003d10 <prvTraceSaveObjectData+0x78>)
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
 8003cf8:	08b3      	lsrs	r3, r6, #2
 8003cfa:	009a      	lsls	r2, r3, #2
 8003cfc:	50b8      	str	r0, [r7, r2]
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 8003cfe:	4662      	mov	r2, ip
 8003d00:	3301      	adds	r3, #1
 8003d02:	009b      	lsls	r3, r3, #2
			firstFreeObjectDataTableIndex += OBJECT_DATA_SLOT_SIZE;
 8003d04:	3608      	adds	r6, #8
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 8003d06:	50fa      	str	r2, [r7, r3]
			firstFreeObjectDataTableIndex += OBJECT_DATA_SLOT_SIZE;
 8003d08:	600e      	str	r6, [r1, #0]
 8003d0a:	e7e6      	b.n	8003cda <prvTraceSaveObjectData+0x42>
 8003d0c:	20003248 	.word	0x20003248
 8003d10:	20003250 	.word	0x20003250
 8003d14:	20003230 	.word	0x20003230

08003d18 <prvIsValidCommand>:
{
 8003d18:	b530      	push	{r4, r5, lr}
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8003d1a:	7804      	ldrb	r4, [r0, #0]
												cmd->param1 +
 8003d1c:	7842      	ldrb	r2, [r0, #1]
												cmd->param2 +
 8003d1e:	7881      	ldrb	r1, [r0, #2]
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8003d20:	1912      	adds	r2, r2, r4
												cmd->param1 +
 8003d22:	1889      	adds	r1, r1, r2
												cmd->param3 +
 8003d24:	78c2      	ldrb	r2, [r0, #3]
	if (cmd->checksumMSB != (unsigned char)(checksum >> 8))
 8003d26:	79c5      	ldrb	r5, [r0, #7]
												cmd->param2 +
 8003d28:	1852      	adds	r2, r2, r1
												cmd->param4 +
 8003d2a:	7901      	ldrb	r1, [r0, #4]
{
 8003d2c:	0003      	movs	r3, r0
												cmd->param3 +
 8003d2e:	1889      	adds	r1, r1, r2
												cmd->param5));
 8003d30:	7942      	ldrb	r2, [r0, #5]
		return 0;
 8003d32:	2000      	movs	r0, #0
												cmd->param4 +
 8003d34:	1852      	adds	r2, r2, r1
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8003d36:	43d2      	mvns	r2, r2
 8003d38:	b292      	uxth	r2, r2
	if (cmd->checksumMSB != (unsigned char)(checksum >> 8))
 8003d3a:	0a11      	lsrs	r1, r2, #8
 8003d3c:	428d      	cmp	r5, r1
 8003d3e:	d103      	bne.n	8003d48 <prvIsValidCommand+0x30>
	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFF))
 8003d40:	799b      	ldrb	r3, [r3, #6]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d000      	beq.n	8003d4a <prvIsValidCommand+0x32>
}
 8003d48:	bd30      	pop	{r4, r5, pc}
	if (cmd->cmdCode > CMD_LAST_COMMAND)
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	42a3      	cmp	r3, r4
 8003d4e:	4140      	adcs	r0, r0
 8003d50:	e7fa      	b.n	8003d48 <prvIsValidCommand+0x30>
 8003d52:	46c0      	nop			; (mov r8, r8)

08003d54 <prvProcessCommand>:
{
 8003d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d56:	46de      	mov	lr, fp
 8003d58:	4657      	mov	r7, sl
 8003d5a:	464e      	mov	r6, r9
 8003d5c:	4645      	mov	r5, r8
 8003d5e:	b5e0      	push	{r5, r6, r7, lr}
  	switch(cmd->cmdCode)
 8003d60:	7803      	ldrb	r3, [r0, #0]
{
 8003d62:	b091      	sub	sp, #68	; 0x44
  	switch(cmd->cmdCode)
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d006      	beq.n	8003d76 <prvProcessCommand+0x22>
}
 8003d68:	b011      	add	sp, #68	; 0x44
 8003d6a:	bcf0      	pop	{r4, r5, r6, r7}
 8003d6c:	46bb      	mov	fp, r7
 8003d6e:	46b2      	mov	sl, r6
 8003d70:	46a9      	mov	r9, r5
 8003d72:	46a0      	mov	r8, r4
 8003d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (RecorderEnabled == isEnabled)
 8003d76:	4ac5      	ldr	r2, [pc, #788]	; (800408c <prvProcessCommand+0x338>)
		  	prvSetRecorderEnabled(cmd->param1);
 8003d78:	7841      	ldrb	r1, [r0, #1]
	if (RecorderEnabled == isEnabled)
 8003d7a:	4691      	mov	r9, r2
 8003d7c:	6812      	ldr	r2, [r2, #0]
		  	prvSetRecorderEnabled(cmd->param1);
 8003d7e:	9102      	str	r1, [sp, #8]
	if (RecorderEnabled == isEnabled)
 8003d80:	4291      	cmp	r1, r2
 8003d82:	d0f1      	beq.n	8003d68 <prvProcessCommand+0x14>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d84:	f3ef 8210 	mrs	r2, PRIMASK
 8003d88:	9203      	str	r2, [sp, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8a:	f383 8810 	msr	PRIMASK, r3
	if (isEnabled)
 8003d8e:	2900      	cmp	r1, #0
 8003d90:	d106      	bne.n	8003da0 <prvProcessCommand+0x4c>
	RecorderEnabled = isEnabled;		
 8003d92:	464b      	mov	r3, r9
 8003d94:	9a02      	ldr	r2, [sp, #8]
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	9b03      	ldr	r3, [sp, #12]
 8003d9a:	f383 8810 	msr	PRIMASK, r3
}
 8003d9e:	e7e3      	b.n	8003d68 <prvProcessCommand+0x14>
     	eventCounter = 0;
 8003da0:	2100      	movs	r1, #0
        ISR_stack_index = -1;
 8003da2:	20ff      	movs	r0, #255	; 0xff
     	eventCounter = 0;
 8003da4:	4aba      	ldr	r2, [pc, #744]	; (8004090 <prvProcessCommand+0x33c>)
 8003da6:	6011      	str	r1, [r2, #0]
 8003da8:	9204      	str	r2, [sp, #16]
        ISR_stack_index = -1;
 8003daa:	4aba      	ldr	r2, [pc, #744]	; (8004094 <prvProcessCommand+0x340>)
 8003dac:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dae:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db2:	f383 8810 	msr	PRIMASK, r3
		header->psf = PSFEndianessIdentifier;
 8003db6:	4bb8      	ldr	r3, [pc, #736]	; (8004098 <prvProcessCommand+0x344>)
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 8003db8:	2600      	movs	r6, #0
		header->psf = PSFEndianessIdentifier;
 8003dba:	9308      	str	r3, [sp, #32]
		header->version = FormatVersion;
 8003dbc:	4bb7      	ldr	r3, [pc, #732]	; (800409c <prvProcessCommand+0x348>)
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 8003dbe:	2418      	movs	r4, #24
		header->version = FormatVersion;
 8003dc0:	9309      	str	r3, [sp, #36]	; 0x24
		header->heapCounter = trcHeapCounter;
 8003dc2:	4bb7      	ldr	r3, [pc, #732]	; (80040a0 <prvProcessCommand+0x34c>)
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 8003dc4:	2700      	movs	r7, #0
		header->heapCounter = trcHeapCounter;
 8003dc6:	681b      	ldr	r3, [r3, #0]
		header->options = 0;
 8003dc8:	910a      	str	r1, [sp, #40]	; 0x28
		header->heapCounter = trcHeapCounter;
 8003dca:	930b      	str	r3, [sp, #44]	; 0x2c
		header->symbolSize = SYMBOL_TABLE_SLOT_SIZE;
 8003dcc:	4bb5      	ldr	r3, [pc, #724]	; (80040a4 <prvProcessCommand+0x350>)
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 8003dce:	ad08      	add	r5, sp, #32
		header->symbolSize = SYMBOL_TABLE_SLOT_SIZE;
 8003dd0:	930c      	str	r3, [sp, #48]	; 0x30
 8003dd2:	4bb5      	ldr	r3, [pc, #724]	; (80040a8 <prvProcessCommand+0x354>)
 8003dd4:	930d      	str	r3, [sp, #52]	; 0x34
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 8003dd6:	e004      	b.n	8003de2 <prvProcessCommand+0x8e>
 8003dd8:	9b07      	ldr	r3, [sp, #28]
 8003dda:	3601      	adds	r6, #1
 8003ddc:	18ed      	adds	r5, r5, r3
 8003dde:	1ae4      	subs	r4, r4, r3
 8003de0:	d02a      	beq.n	8003e38 <prvProcessCommand+0xe4>
 8003de2:	0021      	movs	r1, r4
 8003de4:	0028      	movs	r0, r5
 8003de6:	aa07      	add	r2, sp, #28
 8003de8:	9707      	str	r7, [sp, #28]
 8003dea:	f7ff fa2b 	bl	8003244 <writeToRTT>
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d0f2      	beq.n	8003dd8 <prvProcessCommand+0x84>
	if (errorCode == PSF_ERROR_NONE)
 8003df2:	4bae      	ldr	r3, [pc, #696]	; (80040ac <prvProcessCommand+0x358>)
 8003df4:	681c      	ldr	r4, [r3, #0]
 8003df6:	2c00      	cmp	r4, #0
 8003df8:	d11e      	bne.n	8003e38 <prvProcessCommand+0xe4>
		errorCode = errCode;
 8003dfa:	2206      	movs	r2, #6
		SET_ERROR_WARNING_FLAG(errorCode);
 8003dfc:	2120      	movs	r1, #32
		errorCode = errCode;
 8003dfe:	601a      	str	r2, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8003e00:	4aab      	ldr	r2, [pc, #684]	; (80040b0 <prvProcessCommand+0x35c>)
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003e02:	4dac      	ldr	r5, [pc, #688]	; (80040b4 <prvProcessCommand+0x360>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8003e04:	6813      	ldr	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003e06:	2090      	movs	r0, #144	; 0x90
		SET_ERROR_WARNING_FLAG(errorCode);
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003e0c:	6829      	ldr	r1, [r5, #0]
 8003e0e:	4aaa      	ldr	r2, [pc, #680]	; (80040b8 <prvProcessCommand+0x364>)
 8003e10:	f7ff fc8a 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8003e14:	2090      	movs	r0, #144	; 0x90
 8003e16:	4aa9      	ldr	r2, [pc, #676]	; (80040bc <prvProcessCommand+0x368>)
 8003e18:	6829      	ldr	r1, [r5, #0]
 8003e1a:	f7ff fc85 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 8003e1e:	464b      	mov	r3, r9
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <prvProcessCommand+0xe4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e26:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 8003e30:	464a      	mov	r2, r9
 8003e32:	6014      	str	r4, [r2, #0]
 8003e34:	f383 8810 	msr	PRIMASK, r3
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 8003e38:	2e01      	cmp	r6, #1
 8003e3a:	d900      	bls.n	8003e3e <prvProcessCommand+0xea>
 8003e3c:	e221      	b.n	8004282 <prvProcessCommand+0x52e>
 8003e3e:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e42:	f3ef 8310 	mrs	r3, PRIMASK
 8003e46:	9305      	str	r3, [sp, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f383 8810 	msr	PRIMASK, r3
	if (errorCode == PSF_ERROR_NONE)
 8003e4e:	4b97      	ldr	r3, [pc, #604]	; (80040ac <prvProcessCommand+0x358>)
 8003e50:	4f9b      	ldr	r7, [pc, #620]	; (80040c0 <prvProcessCommand+0x36c>)
 8003e52:	469a      	mov	sl, r3
		SET_ERROR_WARNING_FLAG(errorCode);
 8003e54:	4b96      	ldr	r3, [pc, #600]	; (80040b0 <prvProcessCommand+0x35c>)
 8003e56:	469b      	mov	fp, r3
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003e58:	4b97      	ldr	r3, [pc, #604]	; (80040b8 <prvProcessCommand+0x364>)
 8003e5a:	9301      	str	r3, [sp, #4]
            	data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	687e      	ldr	r6, [r7, #4]
 8003e60:	469c      	mov	ip, r3
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	68bd      	ldr	r5, [r7, #8]
 8003e66:	4698      	mov	r8, r3
 8003e68:	4663      	mov	r3, ip
 8003e6a:	68fc      	ldr	r4, [r7, #12]
 8003e6c:	6938      	ldr	r0, [r7, #16]
 8003e6e:	6979      	ldr	r1, [r7, #20]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	9308      	str	r3, [sp, #32]
 8003e74:	4643      	mov	r3, r8
 8003e76:	930f      	str	r3, [sp, #60]	; 0x3c
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, SYMBOL_TABLE_SLOT_SIZE);						
 8003e78:	2300      	movs	r3, #0
            	data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 8003e7a:	9609      	str	r6, [sp, #36]	; 0x24
 8003e7c:	950a      	str	r5, [sp, #40]	; 0x28
 8003e7e:	940b      	str	r4, [sp, #44]	; 0x2c
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, SYMBOL_TABLE_SLOT_SIZE);						
 8003e80:	2600      	movs	r6, #0
 8003e82:	2420      	movs	r4, #32
 8003e84:	4698      	mov	r8, r3
            	data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 8003e86:	900c      	str	r0, [sp, #48]	; 0x30
 8003e88:	910d      	str	r1, [sp, #52]	; 0x34
 8003e8a:	920e      	str	r2, [sp, #56]	; 0x38
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, SYMBOL_TABLE_SLOT_SIZE);						
 8003e8c:	ad08      	add	r5, sp, #32
 8003e8e:	e004      	b.n	8003e9a <prvProcessCommand+0x146>
 8003e90:	9b07      	ldr	r3, [sp, #28]
 8003e92:	3601      	adds	r6, #1
 8003e94:	18ed      	adds	r5, r5, r3
 8003e96:	1ae4      	subs	r4, r4, r3
 8003e98:	d02d      	beq.n	8003ef6 <prvProcessCommand+0x1a2>
 8003e9a:	4643      	mov	r3, r8
 8003e9c:	0021      	movs	r1, r4
 8003e9e:	0028      	movs	r0, r5
 8003ea0:	aa07      	add	r2, sp, #28
 8003ea2:	9307      	str	r3, [sp, #28]
 8003ea4:	f7ff f9ce 	bl	8003244 <writeToRTT>
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	d0f1      	beq.n	8003e90 <prvProcessCommand+0x13c>
	if (errorCode == PSF_ERROR_NONE)
 8003eac:	4653      	mov	r3, sl
 8003eae:	681c      	ldr	r4, [r3, #0]
 8003eb0:	2c00      	cmp	r4, #0
 8003eb2:	d120      	bne.n	8003ef6 <prvProcessCommand+0x1a2>
		errorCode = errCode;
 8003eb4:	2306      	movs	r3, #6
 8003eb6:	4652      	mov	r2, sl
 8003eb8:	6013      	str	r3, [r2, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8003eba:	465b      	mov	r3, fp
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	681b      	ldr	r3, [r3, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003ec0:	4d7c      	ldr	r5, [pc, #496]	; (80040b4 <prvProcessCommand+0x360>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	465a      	mov	r2, fp
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003ec6:	2090      	movs	r0, #144	; 0x90
		SET_ERROR_WARNING_FLAG(errorCode);
 8003ec8:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003eca:	6829      	ldr	r1, [r5, #0]
 8003ecc:	9a01      	ldr	r2, [sp, #4]
 8003ece:	f7ff fc2b 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8003ed2:	2090      	movs	r0, #144	; 0x90
 8003ed4:	4a79      	ldr	r2, [pc, #484]	; (80040bc <prvProcessCommand+0x368>)
 8003ed6:	6829      	ldr	r1, [r5, #0]
 8003ed8:	f7ff fc26 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 8003edc:	464b      	mov	r3, r9
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <prvProcessCommand+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 8003eee:	464a      	mov	r2, r9
 8003ef0:	6014      	str	r4, [r2, #0]
 8003ef2:	f383 8810 	msr	PRIMASK, r3
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, SYMBOL_TABLE_SLOT_SIZE);						
 8003ef6:	2e01      	cmp	r6, #1
 8003ef8:	d900      	bls.n	8003efc <prvProcessCommand+0x1a8>
 8003efa:	e19f      	b.n	800423c <prvProcessCommand+0x4e8>
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
 8003efc:	4b71      	ldr	r3, [pc, #452]	; (80040c4 <prvProcessCommand+0x370>)
 8003efe:	3720      	adds	r7, #32
 8003f00:	42bb      	cmp	r3, r7
 8003f02:	d1ab      	bne.n	8003e5c <prvProcessCommand+0x108>
 8003f04:	9b05      	ldr	r3, [sp, #20]
 8003f06:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f0e:	9305      	str	r3, [sp, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f10:	2301      	movs	r3, #1
 8003f12:	f383 8810 	msr	PRIMASK, r3
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 8003f16:	4b6c      	ldr	r3, [pc, #432]	; (80040c8 <prvProcessCommand+0x374>)
 8003f18:	4698      	mov	r8, r3
	if (errorCode == PSF_ERROR_NONE)
 8003f1a:	4b64      	ldr	r3, [pc, #400]	; (80040ac <prvProcessCommand+0x358>)
 8003f1c:	469a      	mov	sl, r3
		SET_ERROR_WARNING_FLAG(errorCode);
 8003f1e:	4b64      	ldr	r3, [pc, #400]	; (80040b0 <prvProcessCommand+0x35c>)
 8003f20:	469b      	mov	fp, r3
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003f22:	4b65      	ldr	r3, [pc, #404]	; (80040b8 <prvProcessCommand+0x364>)
 8003f24:	9301      	str	r3, [sp, #4]
            	data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 8003f26:	4643      	mov	r3, r8
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, OBJECT_DATA_SLOT_SIZE);			
 8003f28:	2600      	movs	r6, #0
            	data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 8003f2a:	cb0c      	ldmia	r3, {r2, r3}
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, OBJECT_DATA_SLOT_SIZE);			
 8003f2c:	2408      	movs	r4, #8
 8003f2e:	2700      	movs	r7, #0
            	data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 8003f30:	9208      	str	r2, [sp, #32]
 8003f32:	9309      	str	r3, [sp, #36]	; 0x24
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, OBJECT_DATA_SLOT_SIZE);			
 8003f34:	ad08      	add	r5, sp, #32
 8003f36:	e004      	b.n	8003f42 <prvProcessCommand+0x1ee>
 8003f38:	9b07      	ldr	r3, [sp, #28]
 8003f3a:	3601      	adds	r6, #1
 8003f3c:	18ed      	adds	r5, r5, r3
 8003f3e:	1ae4      	subs	r4, r4, r3
 8003f40:	d02c      	beq.n	8003f9c <prvProcessCommand+0x248>
 8003f42:	0021      	movs	r1, r4
 8003f44:	0028      	movs	r0, r5
 8003f46:	aa07      	add	r2, sp, #28
 8003f48:	9707      	str	r7, [sp, #28]
 8003f4a:	f7ff f97b 	bl	8003244 <writeToRTT>
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	d0f2      	beq.n	8003f38 <prvProcessCommand+0x1e4>
	if (errorCode == PSF_ERROR_NONE)
 8003f52:	4653      	mov	r3, sl
 8003f54:	681c      	ldr	r4, [r3, #0]
 8003f56:	2c00      	cmp	r4, #0
 8003f58:	d120      	bne.n	8003f9c <prvProcessCommand+0x248>
		errorCode = errCode;
 8003f5a:	2306      	movs	r3, #6
 8003f5c:	4652      	mov	r2, sl
 8003f5e:	6013      	str	r3, [r2, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8003f60:	465b      	mov	r3, fp
 8003f62:	2220      	movs	r2, #32
 8003f64:	681b      	ldr	r3, [r3, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003f66:	4d53      	ldr	r5, [pc, #332]	; (80040b4 <prvProcessCommand+0x360>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	465a      	mov	r2, fp
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003f6c:	2090      	movs	r0, #144	; 0x90
		SET_ERROR_WARNING_FLAG(errorCode);
 8003f6e:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003f70:	6829      	ldr	r1, [r5, #0]
 8003f72:	9a01      	ldr	r2, [sp, #4]
 8003f74:	f7ff fbd8 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8003f78:	2090      	movs	r0, #144	; 0x90
 8003f7a:	4a50      	ldr	r2, [pc, #320]	; (80040bc <prvProcessCommand+0x368>)
 8003f7c:	6829      	ldr	r1, [r5, #0]
 8003f7e:	f7ff fbd3 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 8003f82:	464b      	mov	r3, r9
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <prvProcessCommand+0x248>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f8a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 8003f94:	464a      	mov	r2, r9
 8003f96:	6014      	str	r4, [r2, #0]
 8003f98:	f383 8810 	msr	PRIMASK, r3
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, OBJECT_DATA_SLOT_SIZE);			
 8003f9c:	2e01      	cmp	r6, #1
 8003f9e:	d900      	bls.n	8003fa2 <prvProcessCommand+0x24e>
 8003fa0:	e13c      	b.n	800421c <prvProcessCommand+0x4c8>
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 8003fa2:	2308      	movs	r3, #8
 8003fa4:	469c      	mov	ip, r3
 8003fa6:	4b49      	ldr	r3, [pc, #292]	; (80040cc <prvProcessCommand+0x378>)
 8003fa8:	44e0      	add	r8, ip
 8003faa:	4598      	cmp	r8, r3
 8003fac:	d1bb      	bne.n	8003f26 <prvProcessCommand+0x1d2>
 8003fae:	9b05      	ldr	r3, [sp, #20]
 8003fb0:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb4:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f383 8810 	msr	PRIMASK, r3
		memcpy(extinfo, &PSFExtensionInfo, sizeof(PSFExtensionInfoType));
 8003fbe:	4b44      	ldr	r3, [pc, #272]	; (80040d0 <prvProcessCommand+0x37c>)
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(extinfo, sizeof(PSFExtensionInfoType));		
 8003fc0:	2600      	movs	r6, #0
		memcpy(extinfo, &PSFExtensionInfo, sizeof(PSFExtensionInfoType));
 8003fc2:	681b      	ldr	r3, [r3, #0]
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(extinfo, sizeof(PSFExtensionInfoType));		
 8003fc4:	2404      	movs	r4, #4
 8003fc6:	2700      	movs	r7, #0
		memcpy(extinfo, &PSFExtensionInfo, sizeof(PSFExtensionInfoType));
 8003fc8:	9307      	str	r3, [sp, #28]
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(extinfo, sizeof(PSFExtensionInfoType));		
 8003fca:	ad07      	add	r5, sp, #28
 8003fcc:	e004      	b.n	8003fd8 <prvProcessCommand+0x284>
 8003fce:	9b08      	ldr	r3, [sp, #32]
 8003fd0:	3601      	adds	r6, #1
 8003fd2:	18ed      	adds	r5, r5, r3
 8003fd4:	1ae4      	subs	r4, r4, r3
 8003fd6:	d02a      	beq.n	800402e <prvProcessCommand+0x2da>
 8003fd8:	0021      	movs	r1, r4
 8003fda:	0028      	movs	r0, r5
 8003fdc:	aa08      	add	r2, sp, #32
 8003fde:	9708      	str	r7, [sp, #32]
 8003fe0:	f7ff f930 	bl	8003244 <writeToRTT>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d0f2      	beq.n	8003fce <prvProcessCommand+0x27a>
	if (errorCode == PSF_ERROR_NONE)
 8003fe8:	4b30      	ldr	r3, [pc, #192]	; (80040ac <prvProcessCommand+0x358>)
 8003fea:	681c      	ldr	r4, [r3, #0]
 8003fec:	2c00      	cmp	r4, #0
 8003fee:	d11e      	bne.n	800402e <prvProcessCommand+0x2da>
		errorCode = errCode;
 8003ff0:	2206      	movs	r2, #6
		SET_ERROR_WARNING_FLAG(errorCode);
 8003ff2:	2120      	movs	r1, #32
		errorCode = errCode;
 8003ff4:	601a      	str	r2, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8003ff6:	4a2e      	ldr	r2, [pc, #184]	; (80040b0 <prvProcessCommand+0x35c>)
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003ff8:	4d2e      	ldr	r5, [pc, #184]	; (80040b4 <prvProcessCommand+0x360>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8003ffa:	6813      	ldr	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8003ffc:	2090      	movs	r0, #144	; 0x90
		SET_ERROR_WARNING_FLAG(errorCode);
 8003ffe:	430b      	orrs	r3, r1
 8004000:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8004002:	6829      	ldr	r1, [r5, #0]
 8004004:	4a2c      	ldr	r2, [pc, #176]	; (80040b8 <prvProcessCommand+0x364>)
 8004006:	f7ff fb8f 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 800400a:	2090      	movs	r0, #144	; 0x90
 800400c:	4a2b      	ldr	r2, [pc, #172]	; (80040bc <prvProcessCommand+0x368>)
 800400e:	6829      	ldr	r1, [r5, #0]
 8004010:	f7ff fb8a 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 8004014:	464b      	mov	r3, r9
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <prvProcessCommand+0x2da>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800401c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004020:	2201      	movs	r2, #1
 8004022:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 8004026:	464a      	mov	r2, r9
 8004028:	6014      	str	r4, [r2, #0]
 800402a:	f383 8810 	msr	PRIMASK, r3
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(extinfo, sizeof(PSFExtensionInfoType));		
 800402e:	2e01      	cmp	r6, #1
 8004030:	d900      	bls.n	8004034 <prvProcessCommand+0x2e0>
 8004032:	e136      	b.n	80042a2 <prvProcessCommand+0x54e>
 8004034:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004038:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800403c:	2301      	movs	r3, #1
 800403e:	f383 8810 	msr	PRIMASK, r3
	if (uiTraceSystemState == TRC_STATE_IN_STARTUP)
 8004042:	4b24      	ldr	r3, [pc, #144]	; (80040d4 <prvProcessCommand+0x380>)
 8004044:	2002      	movs	r0, #2
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d000      	beq.n	800404e <prvProcessCommand+0x2fa>
 800404c:	e139      	b.n	80042c2 <prvProcessCommand+0x56e>
	eventCounter++;
 800404e:	9a04      	ldr	r2, [sp, #16]
			pxEvent->base.EventID = PSF_EVENT_TRACE_START | PARAM_COUNT(3);
 8004050:	a906      	add	r1, sp, #24
	eventCounter++;
 8004052:	6813      	ldr	r3, [r2, #0]
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(pxEvent, sizeof(EventWithParam_3));
 8004054:	2600      	movs	r6, #0
	eventCounter++;
 8004056:	3301      	adds	r3, #1
			pxEvent->base.EventCount = (uint16_t)eventCounter;
 8004058:	814b      	strh	r3, [r1, #10]
	eventCounter++;
 800405a:	6013      	str	r3, [r2, #0]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 800405c:	4b1e      	ldr	r3, [pc, #120]	; (80040d8 <prvProcessCommand+0x384>)
			pxEvent->base.EventID = PSF_EVENT_TRACE_START | PARAM_COUNT(3);
 800405e:	4a1f      	ldr	r2, [pc, #124]	; (80040dc <prvProcessCommand+0x388>)
	uint32_t ticks = TRACE_GET_OS_TICKS();
 8004060:	4698      	mov	r8, r3
			pxEvent->base.EventID = PSF_EVENT_TRACE_START | PARAM_COUNT(3);
 8004062:	810a      	strh	r2, [r1, #8]
	uint32_t ticks = TRACE_GET_OS_TICKS();
 8004064:	681a      	ldr	r2, [r3, #0]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8004066:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <prvProcessCommand+0x38c>)
 8004068:	0611      	lsls	r1, r2, #24
 800406a:	681b      	ldr	r3, [r3, #0]
			pxEvent->param1 = (uint32_t)TRACE_GET_OS_TICKS();
 800406c:	920a      	str	r2, [sp, #40]	; 0x28
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 800406e:	021b      	lsls	r3, r3, #8
			pxEvent->param3 = SessionCounter++;
 8004070:	4a1c      	ldr	r2, [pc, #112]	; (80040e4 <prvProcessCommand+0x390>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8004072:	0a1b      	lsrs	r3, r3, #8
 8004074:	185b      	adds	r3, r3, r1
			pxEvent->base.TS = prvGetTimestamp32();
 8004076:	9309      	str	r3, [sp, #36]	; 0x24
			pxEvent->param3 = SessionCounter++;
 8004078:	6813      	ldr	r3, [r2, #0]
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(pxEvent, sizeof(EventWithParam_3));
 800407a:	2414      	movs	r4, #20
			pxEvent->param3 = SessionCounter++;
 800407c:	1c59      	adds	r1, r3, #1
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(pxEvent, sizeof(EventWithParam_3));
 800407e:	2700      	movs	r7, #0
			pxEvent->param2 = (uint32_t)currentTask;
 8004080:	900b      	str	r0, [sp, #44]	; 0x2c
			pxEvent->param3 = SessionCounter++;
 8004082:	6011      	str	r1, [r2, #0]
 8004084:	930c      	str	r3, [sp, #48]	; 0x30
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(pxEvent, sizeof(EventWithParam_3));
 8004086:	ad08      	add	r5, sp, #32
 8004088:	e033      	b.n	80040f2 <prvProcessCommand+0x39e>
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	20003238 	.word	0x20003238
 8004090:	20003244 	.word	0x20003244
 8004094:	20000008 	.word	0x20000008
 8004098:	50534600 	.word	0x50534600
 800409c:	1aa10006 	.word	0x1aa10006
 80040a0:	20003894 	.word	0x20003894
 80040a4:	00280020 	.word	0x00280020
 80040a8:	00280008 	.word	0x00280008
 80040ac:	20003240 	.word	0x20003240
 80040b0:	20003224 	.word	0x20003224
 80040b4:	20003220 	.word	0x20003220
 80040b8:	0800530c 	.word	0x0800530c
 80040bc:	080052bc 	.word	0x080052bc
 80040c0:	20003390 	.word	0x20003390
 80040c4:	20003890 	.word	0x20003890
 80040c8:	20003250 	.word	0x20003250
 80040cc:	20003390 	.word	0x20003390
 80040d0:	2000000c 	.word	0x2000000c
 80040d4:	20003898 	.word	0x20003898
 80040d8:	2000389c 	.word	0x2000389c
 80040dc:	00003001 	.word	0x00003001
 80040e0:	e000e018 	.word	0xe000e018
 80040e4:	2000323c 	.word	0x2000323c
 80040e8:	9b07      	ldr	r3, [sp, #28]
 80040ea:	3601      	adds	r6, #1
 80040ec:	18ed      	adds	r5, r5, r3
 80040ee:	1ae4      	subs	r4, r4, r3
 80040f0:	d02a      	beq.n	8004148 <prvProcessCommand+0x3f4>
 80040f2:	0021      	movs	r1, r4
 80040f4:	0028      	movs	r0, r5
 80040f6:	aa07      	add	r2, sp, #28
 80040f8:	9707      	str	r7, [sp, #28]
 80040fa:	f7ff f8a3 	bl	8003244 <writeToRTT>
 80040fe:	2800      	cmp	r0, #0
 8004100:	d0f2      	beq.n	80040e8 <prvProcessCommand+0x394>
	if (errorCode == PSF_ERROR_NONE)
 8004102:	4b71      	ldr	r3, [pc, #452]	; (80042c8 <prvProcessCommand+0x574>)
 8004104:	681c      	ldr	r4, [r3, #0]
 8004106:	2c00      	cmp	r4, #0
 8004108:	d11e      	bne.n	8004148 <prvProcessCommand+0x3f4>
		errorCode = errCode;
 800410a:	2206      	movs	r2, #6
		SET_ERROR_WARNING_FLAG(errorCode);
 800410c:	2120      	movs	r1, #32
		errorCode = errCode;
 800410e:	601a      	str	r2, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8004110:	4a6e      	ldr	r2, [pc, #440]	; (80042cc <prvProcessCommand+0x578>)
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8004112:	4d6f      	ldr	r5, [pc, #444]	; (80042d0 <prvProcessCommand+0x57c>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8004114:	6813      	ldr	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8004116:	2090      	movs	r0, #144	; 0x90
		SET_ERROR_WARNING_FLAG(errorCode);
 8004118:	430b      	orrs	r3, r1
 800411a:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 800411c:	6829      	ldr	r1, [r5, #0]
 800411e:	4a6d      	ldr	r2, [pc, #436]	; (80042d4 <prvProcessCommand+0x580>)
 8004120:	f7ff fb02 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8004124:	2090      	movs	r0, #144	; 0x90
 8004126:	4a6c      	ldr	r2, [pc, #432]	; (80042d8 <prvProcessCommand+0x584>)
 8004128:	6829      	ldr	r1, [r5, #0]
 800412a:	f7ff fafd 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 800412e:	464b      	mov	r3, r9
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <prvProcessCommand+0x3f4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004136:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413a:	2201      	movs	r2, #1
 800413c:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 8004140:	464a      	mov	r2, r9
 8004142:	6014      	str	r4, [r2, #0]
 8004144:	f383 8810 	msr	PRIMASK, r3
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(pxEvent, sizeof(EventWithParam_3));
 8004148:	2e01      	cmp	r6, #1
 800414a:	d900      	bls.n	800414e <prvProcessCommand+0x3fa>
 800414c:	e089      	b.n	8004262 <prvProcessCommand+0x50e>
 800414e:	f38a 8810 	msr	PRIMASK, sl
	if (timestampFrequency == 0)
 8004152:	4b62      	ldr	r3, [pc, #392]	; (80042dc <prvProcessCommand+0x588>)
 8004154:	6819      	ldr	r1, [r3, #0]
 8004156:	2900      	cmp	r1, #0
 8004158:	d100      	bne.n	800415c <prvProcessCommand+0x408>
 800415a:	e07f      	b.n	800425c <prvProcessCommand+0x508>
	eventCounter++;
 800415c:	9a04      	ldr	r2, [sp, #16]
			event->base.EventID = PSF_EVENT_TS_CONFIG | (uint16_t)PARAM_COUNT(4);
 800415e:	a806      	add	r0, sp, #24
	eventCounter++;
 8004160:	6813      	ldr	r3, [r2, #0]
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(event, (uint32_t)sizeof(EventWithParam_4));
 8004162:	2600      	movs	r6, #0
	eventCounter++;
 8004164:	3301      	adds	r3, #1
			event->base.EventCount = (uint16_t)eventCounter;
 8004166:	8143      	strh	r3, [r0, #10]
	eventCounter++;
 8004168:	6013      	str	r3, [r2, #0]
			event->base.EventID = PSF_EVENT_TS_CONFIG | (uint16_t)PARAM_COUNT(4);
 800416a:	4a5d      	ldr	r2, [pc, #372]	; (80042e0 <prvProcessCommand+0x58c>)
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 800416c:	4b5d      	ldr	r3, [pc, #372]	; (80042e4 <prvProcessCommand+0x590>)
			event->base.EventID = PSF_EVENT_TS_CONFIG | (uint16_t)PARAM_COUNT(4);
 800416e:	8102      	strh	r2, [r0, #8]
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4643      	mov	r3, r8
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	0212      	lsls	r2, r2, #8
 8004178:	061b      	lsls	r3, r3, #24
 800417a:	0a12      	lsrs	r2, r2, #8
 800417c:	189b      	adds	r3, r3, r2
			event->base.TS = prvGetTimestamp32();
 800417e:	9309      	str	r3, [sp, #36]	; 0x24
			event->param2 = (uint32_t)(TRACE_TICK_RATE_HZ);
 8004180:	2364      	movs	r3, #100	; 0x64
 8004182:	930b      	str	r3, [sp, #44]	; 0x2c
			event->param3 = (uint32_t)(TRC_HWTC_TYPE);
 8004184:	3b60      	subs	r3, #96	; 0x60
 8004186:	930c      	str	r3, [sp, #48]	; 0x30
			event->param4 = (uint32_t)(TRC_CFG_ISR_TAILCHAINING_THRESHOLD);
 8004188:	2300      	movs	r3, #0
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(event, (uint32_t)sizeof(EventWithParam_4));
 800418a:	2518      	movs	r5, #24
 800418c:	2700      	movs	r7, #0
			event->param1 = (uint32_t)timestampFrequency;
 800418e:	910a      	str	r1, [sp, #40]	; 0x28
			event->param4 = (uint32_t)(TRC_CFG_ISR_TAILCHAINING_THRESHOLD);
 8004190:	930d      	str	r3, [sp, #52]	; 0x34
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(event, (uint32_t)sizeof(EventWithParam_4));
 8004192:	ac08      	add	r4, sp, #32
 8004194:	e004      	b.n	80041a0 <prvProcessCommand+0x44c>
 8004196:	9b07      	ldr	r3, [sp, #28]
 8004198:	3601      	adds	r6, #1
 800419a:	18e4      	adds	r4, r4, r3
 800419c:	1aed      	subs	r5, r5, r3
 800419e:	d02a      	beq.n	80041f6 <prvProcessCommand+0x4a2>
 80041a0:	0029      	movs	r1, r5
 80041a2:	0020      	movs	r0, r4
 80041a4:	aa07      	add	r2, sp, #28
 80041a6:	9707      	str	r7, [sp, #28]
 80041a8:	f7ff f84c 	bl	8003244 <writeToRTT>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	d0f2      	beq.n	8004196 <prvProcessCommand+0x442>
	if (errorCode == PSF_ERROR_NONE)
 80041b0:	4b45      	ldr	r3, [pc, #276]	; (80042c8 <prvProcessCommand+0x574>)
 80041b2:	681c      	ldr	r4, [r3, #0]
 80041b4:	2c00      	cmp	r4, #0
 80041b6:	d11e      	bne.n	80041f6 <prvProcessCommand+0x4a2>
		errorCode = errCode;
 80041b8:	2206      	movs	r2, #6
		SET_ERROR_WARNING_FLAG(errorCode);
 80041ba:	2120      	movs	r1, #32
		errorCode = errCode;
 80041bc:	601a      	str	r2, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 80041be:	4a43      	ldr	r2, [pc, #268]	; (80042cc <prvProcessCommand+0x578>)
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 80041c0:	4d43      	ldr	r5, [pc, #268]	; (80042d0 <prvProcessCommand+0x57c>)
		SET_ERROR_WARNING_FLAG(errorCode);
 80041c2:	6813      	ldr	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 80041c4:	2090      	movs	r0, #144	; 0x90
		SET_ERROR_WARNING_FLAG(errorCode);
 80041c6:	430b      	orrs	r3, r1
 80041c8:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 80041ca:	6829      	ldr	r1, [r5, #0]
 80041cc:	4a41      	ldr	r2, [pc, #260]	; (80042d4 <prvProcessCommand+0x580>)
 80041ce:	f7ff faab 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 80041d2:	2090      	movs	r0, #144	; 0x90
 80041d4:	4a40      	ldr	r2, [pc, #256]	; (80042d8 <prvProcessCommand+0x584>)
 80041d6:	6829      	ldr	r1, [r5, #0]
 80041d8:	f7ff faa6 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 80041dc:	464b      	mov	r3, r9
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <prvProcessCommand+0x4a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e8:	2201      	movs	r2, #1
 80041ea:	f382 8810 	msr	PRIMASK, r2
	RecorderEnabled = isEnabled;		
 80041ee:	464a      	mov	r2, r9
 80041f0:	6014      	str	r4, [r2, #0]
 80041f2:	f383 8810 	msr	PRIMASK, r3
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(event, (uint32_t)sizeof(EventWithParam_4));
 80041f6:	2e01      	cmp	r6, #1
 80041f8:	d800      	bhi.n	80041fc <prvProcessCommand+0x4a8>
 80041fa:	e5ca      	b.n	8003d92 <prvProcessCommand+0x3e>
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	4a33      	ldr	r2, [pc, #204]	; (80042cc <prvProcessCommand+0x578>)
 8004200:	015b      	lsls	r3, r3, #5
 8004202:	6811      	ldr	r1, [r2, #0]
 8004204:	4219      	tst	r1, r3
 8004206:	d000      	beq.n	800420a <prvProcessCommand+0x4b6>
 8004208:	e5c3      	b.n	8003d92 <prvProcessCommand+0x3e>
		SET_ERROR_WARNING_FLAG(errCode);
 800420a:	430b      	orrs	r3, r1
 800420c:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 800420e:	4b30      	ldr	r3, [pc, #192]	; (80042d0 <prvProcessCommand+0x57c>)
 8004210:	2090      	movs	r0, #144	; 0x90
 8004212:	4a35      	ldr	r2, [pc, #212]	; (80042e8 <prvProcessCommand+0x594>)
 8004214:	6819      	ldr	r1, [r3, #0]
 8004216:	f7ff fa87 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
}
 800421a:	e5ba      	b.n	8003d92 <prvProcessCommand+0x3e>
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	4a2b      	ldr	r2, [pc, #172]	; (80042cc <prvProcessCommand+0x578>)
 8004220:	015b      	lsls	r3, r3, #5
 8004222:	6811      	ldr	r1, [r2, #0]
 8004224:	4219      	tst	r1, r3
 8004226:	d000      	beq.n	800422a <prvProcessCommand+0x4d6>
 8004228:	e6bb      	b.n	8003fa2 <prvProcessCommand+0x24e>
		SET_ERROR_WARNING_FLAG(errCode);
 800422a:	430b      	orrs	r3, r1
 800422c:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 800422e:	4b28      	ldr	r3, [pc, #160]	; (80042d0 <prvProcessCommand+0x57c>)
 8004230:	2090      	movs	r0, #144	; 0x90
 8004232:	4a2d      	ldr	r2, [pc, #180]	; (80042e8 <prvProcessCommand+0x594>)
 8004234:	6819      	ldr	r1, [r3, #0]
 8004236:	f7ff fa77 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
 800423a:	e6b2      	b.n	8003fa2 <prvProcessCommand+0x24e>
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 800423c:	2380      	movs	r3, #128	; 0x80
 800423e:	4a23      	ldr	r2, [pc, #140]	; (80042cc <prvProcessCommand+0x578>)
 8004240:	015b      	lsls	r3, r3, #5
 8004242:	6811      	ldr	r1, [r2, #0]
 8004244:	4219      	tst	r1, r3
 8004246:	d000      	beq.n	800424a <prvProcessCommand+0x4f6>
 8004248:	e658      	b.n	8003efc <prvProcessCommand+0x1a8>
		SET_ERROR_WARNING_FLAG(errCode);
 800424a:	430b      	orrs	r3, r1
 800424c:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 800424e:	4b20      	ldr	r3, [pc, #128]	; (80042d0 <prvProcessCommand+0x57c>)
 8004250:	2090      	movs	r0, #144	; 0x90
 8004252:	4a25      	ldr	r2, [pc, #148]	; (80042e8 <prvProcessCommand+0x594>)
 8004254:	6819      	ldr	r1, [r3, #0]
 8004256:	f7ff fa67 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
 800425a:	e64f      	b.n	8003efc <prvProcessCommand+0x1a8>
		timestampFrequency = TRC_HWTC_FREQ_HZ;
 800425c:	4923      	ldr	r1, [pc, #140]	; (80042ec <prvProcessCommand+0x598>)
 800425e:	6019      	str	r1, [r3, #0]
 8004260:	e77c      	b.n	800415c <prvProcessCommand+0x408>
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	4a19      	ldr	r2, [pc, #100]	; (80042cc <prvProcessCommand+0x578>)
 8004266:	015b      	lsls	r3, r3, #5
 8004268:	6811      	ldr	r1, [r2, #0]
 800426a:	4219      	tst	r1, r3
 800426c:	d000      	beq.n	8004270 <prvProcessCommand+0x51c>
 800426e:	e76e      	b.n	800414e <prvProcessCommand+0x3fa>
		SET_ERROR_WARNING_FLAG(errCode);
 8004270:	430b      	orrs	r3, r1
 8004272:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8004274:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <prvProcessCommand+0x57c>)
 8004276:	2090      	movs	r0, #144	; 0x90
 8004278:	4a1b      	ldr	r2, [pc, #108]	; (80042e8 <prvProcessCommand+0x594>)
 800427a:	6819      	ldr	r1, [r3, #0]
 800427c:	f7ff fa54 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
 8004280:	e765      	b.n	800414e <prvProcessCommand+0x3fa>
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	4a11      	ldr	r2, [pc, #68]	; (80042cc <prvProcessCommand+0x578>)
 8004286:	015b      	lsls	r3, r3, #5
 8004288:	6811      	ldr	r1, [r2, #0]
 800428a:	4219      	tst	r1, r3
 800428c:	d000      	beq.n	8004290 <prvProcessCommand+0x53c>
 800428e:	e5d6      	b.n	8003e3e <prvProcessCommand+0xea>
		SET_ERROR_WARNING_FLAG(errCode);
 8004290:	430b      	orrs	r3, r1
 8004292:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8004294:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <prvProcessCommand+0x57c>)
 8004296:	2090      	movs	r0, #144	; 0x90
 8004298:	4a13      	ldr	r2, [pc, #76]	; (80042e8 <prvProcessCommand+0x594>)
 800429a:	6819      	ldr	r1, [r3, #0]
 800429c:	f7ff fa44 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
 80042a0:	e5cd      	b.n	8003e3e <prvProcessCommand+0xea>
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	4a09      	ldr	r2, [pc, #36]	; (80042cc <prvProcessCommand+0x578>)
 80042a6:	015b      	lsls	r3, r3, #5
 80042a8:	6811      	ldr	r1, [r2, #0]
 80042aa:	4219      	tst	r1, r3
 80042ac:	d000      	beq.n	80042b0 <prvProcessCommand+0x55c>
 80042ae:	e6c1      	b.n	8004034 <prvProcessCommand+0x2e0>
		SET_ERROR_WARNING_FLAG(errCode);
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <prvProcessCommand+0x57c>)
 80042b6:	2090      	movs	r0, #144	; 0x90
 80042b8:	4a0b      	ldr	r2, [pc, #44]	; (80042e8 <prvProcessCommand+0x594>)
 80042ba:	6819      	ldr	r1, [r3, #0]
 80042bc:	f7ff fa34 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
 80042c0:	e6b8      	b.n	8004034 <prvProcessCommand+0x2e0>
		currentTask = TRACE_GET_CURRENT_TASK();
 80042c2:	f7ff f8df 	bl	8003484 <prvTraceGetCurrentTaskHandle>
 80042c6:	e6c2      	b.n	800404e <prvProcessCommand+0x2fa>
 80042c8:	20003240 	.word	0x20003240
 80042cc:	20003224 	.word	0x20003224
 80042d0:	20003220 	.word	0x20003220
 80042d4:	0800530c 	.word	0x0800530c
 80042d8:	080052bc 	.word	0x080052bc
 80042dc:	20003890 	.word	0x20003890
 80042e0:	00004002 	.word	0x00004002
 80042e4:	e000e018 	.word	0xe000e018
 80042e8:	08005340 	.word	0x08005340
 80042ec:	000f4240 	.word	0x000f4240

080042f0 <prvTraceWarning>:
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 80042f0:	2301      	movs	r3, #1
 80042f2:	3801      	subs	r0, #1
 80042f4:	4083      	lsls	r3, r0
 80042f6:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <prvTraceWarning+0x30>)
{
 80042f8:	b510      	push	{r4, lr}
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 80042fa:	6811      	ldr	r1, [r2, #0]
 80042fc:	4219      	tst	r1, r3
 80042fe:	d109      	bne.n	8004314 <prvTraceWarning+0x24>
		SET_ERROR_WARNING_FLAG(errCode);
 8004300:	430b      	orrs	r3, r1
 8004302:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8004304:	4b07      	ldr	r3, [pc, #28]	; (8004324 <prvTraceWarning+0x34>)
	switch (errCode)
 8004306:	2200      	movs	r2, #0
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8004308:	6819      	ldr	r1, [r3, #0]
	switch (errCode)
 800430a:	280d      	cmp	r0, #13
 800430c:	d903      	bls.n	8004316 <prvTraceWarning+0x26>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 800430e:	2090      	movs	r0, #144	; 0x90
 8004310:	f7ff fa0a 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
}
 8004314:	bd10      	pop	{r4, pc}
 8004316:	4b04      	ldr	r3, [pc, #16]	; (8004328 <prvTraceWarning+0x38>)
 8004318:	0080      	lsls	r0, r0, #2
 800431a:	58c2      	ldr	r2, [r0, r3]
 800431c:	e7f7      	b.n	800430e <prvTraceWarning+0x1e>
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	20003224 	.word	0x20003224
 8004324:	20003220 	.word	0x20003220
 8004328:	08005524 	.word	0x08005524

0800432c <prvTraceError>:
	if (errorCode == PSF_ERROR_NONE)
 800432c:	4b15      	ldr	r3, [pc, #84]	; (8004384 <prvTraceError+0x58>)
{
 800432e:	b510      	push	{r4, lr}
	if (errorCode == PSF_ERROR_NONE)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	2a00      	cmp	r2, #0
 8004334:	d121      	bne.n	800437a <prvTraceError+0x4e>
		errorCode = errCode;
 8004336:	6018      	str	r0, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8004338:	2301      	movs	r3, #1
 800433a:	3801      	subs	r0, #1
 800433c:	4083      	lsls	r3, r0
 800433e:	4a12      	ldr	r2, [pc, #72]	; (8004388 <prvTraceError+0x5c>)
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8004340:	4c12      	ldr	r4, [pc, #72]	; (800438c <prvTraceError+0x60>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8004342:	6811      	ldr	r1, [r2, #0]
 8004344:	430b      	orrs	r3, r1
 8004346:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8004348:	6821      	ldr	r1, [r4, #0]
	switch (errCode)
 800434a:	2200      	movs	r2, #0
 800434c:	280d      	cmp	r0, #13
 800434e:	d915      	bls.n	800437c <prvTraceError+0x50>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8004350:	2090      	movs	r0, #144	; 0x90
 8004352:	f7ff f9e9 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8004356:	4a0e      	ldr	r2, [pc, #56]	; (8004390 <prvTraceError+0x64>)
 8004358:	2090      	movs	r0, #144	; 0x90
 800435a:	6821      	ldr	r1, [r4, #0]
 800435c:	f7ff f9e4 	bl	8003728 <prvTraceStoreSimpleStringEventHelper>
	if (RecorderEnabled == isEnabled)
 8004360:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <prvTraceError+0x68>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	2a00      	cmp	r2, #0
 8004366:	d008      	beq.n	800437a <prvTraceError+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004368:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436c:	2101      	movs	r1, #1
 800436e:	f381 8810 	msr	PRIMASK, r1
	RecorderEnabled = isEnabled;		
 8004372:	2100      	movs	r1, #0
 8004374:	6019      	str	r1, [r3, #0]
 8004376:	f382 8810 	msr	PRIMASK, r2
}
 800437a:	bd10      	pop	{r4, pc}
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <prvTraceError+0x6c>)
 800437e:	0080      	lsls	r0, r0, #2
 8004380:	58c2      	ldr	r2, [r0, r3]
 8004382:	e7e5      	b.n	8004350 <prvTraceError+0x24>
 8004384:	20003240 	.word	0x20003240
 8004388:	20003224 	.word	0x20003224
 800438c:	20003220 	.word	0x20003220
 8004390:	080052bc 	.word	0x080052bc
 8004394:	20003238 	.word	0x20003238
 8004398:	08005524 	.word	0x08005524

0800439c <vArriveeCartons>:
		// The program should never be here...
	}
}

void vArriveeCartons (void *pvParameters)
{
 800439c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439e:	46de      	mov	lr, fp
 80043a0:	4657      	mov	r7, sl
 80043a2:	464e      	mov	r6, r9
 80043a4:	4645      	mov	r5, r8
 80043a6:	b5e0      	push	{r5, r6, r7, lr}
 80043a8:	b08b      	sub	sp, #44	; 0x2c

	subscribe_message_t sub;
	subscribe_message_t *sub_pm;

	// Distribution cartons
	FACTORY_IO_Actuators_Set(A0_ON, A0_Msk, actuator_write_buffer);
 80043aa:	af05      	add	r7, sp, #20
 80043ac:	003a      	movs	r2, r7
 80043ae:	2101      	movs	r1, #1
 80043b0:	2001      	movs	r0, #1
 80043b2:	f000 fe77 	bl	80050a4 <FACTORY_IO_Actuators_Set>
	pm = &actuator_write_buffer;
	xQueueSendToBack(xPublishQueue, &pm, 0);
 80043b6:	4b75      	ldr	r3, [pc, #468]	; (800458c <vArriveeCartons+0x1f0>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	469a      	mov	sl, r3
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	a903      	add	r1, sp, #12
 80043c0:	2300      	movs	r3, #0
	pm = &actuator_write_buffer;
 80043c2:	9703      	str	r7, [sp, #12]
	xQueueSendToBack(xPublishQueue, &pm, 0);
 80043c4:	f7fc f922 	bl	800060c <xQueueGenericSend>

	sub.sem_id = &xSemArriveeCartons;
	sub.sensor_state=S0_ON;
 80043c8:	2301      	movs	r3, #1
	sub.sensor_mask= S0_Pos;
	sub_pm = &sub;
	xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80043ca:	4e71      	ldr	r6, [pc, #452]	; (8004590 <vArriveeCartons+0x1f4>)
	sub.sem_id = &xSemArriveeCartons;
 80043cc:	4d71      	ldr	r5, [pc, #452]	; (8004594 <vArriveeCartons+0x1f8>)
 80043ce:	ac07      	add	r4, sp, #28
	sub.sensor_state=S0_ON;
 80043d0:	4698      	mov	r8, r3
	xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80043d2:	2200      	movs	r2, #0
 80043d4:	a904      	add	r1, sp, #16
	sub.sensor_state=S0_ON;
 80043d6:	60a3      	str	r3, [r4, #8]
	sub.sensor_mask= S0_Pos;
 80043d8:	6063      	str	r3, [r4, #4]
	xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80043da:	6830      	ldr	r0, [r6, #0]
 80043dc:	2300      	movs	r3, #0
	sub.sem_id = &xSemArriveeCartons;
 80043de:	9507      	str	r5, [sp, #28]
	sub_pm = &sub;
 80043e0:	9404      	str	r4, [sp, #16]
	xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80043e2:	f7fc f913 	bl	800060c <xQueueGenericSend>
	xSemaphoreTake(xSemArriveeCartons, portMAX_DELAY);
 80043e6:	2101      	movs	r1, #1
 80043e8:	6828      	ldr	r0, [r5, #0]
 80043ea:	4249      	negs	r1, r1
 80043ec:	f7fc fe2c 	bl	8001048 <xQueueSemaphoreTake>


	// Passage du carton 1 devant le capteur carton distribu�
	sub.sem_id = &xSemArriveeCartons;
	sub.sensor_state=S0_OFF;
 80043f0:	2300      	movs	r3, #0
 80043f2:	4699      	mov	r9, r3
 80043f4:	60a3      	str	r3, [r4, #8]
	sub.sensor_mask= S0_Pos;
 80043f6:	4643      	mov	r3, r8
	sub_pm = &sub;
	xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80043f8:	2200      	movs	r2, #0
	sub.sensor_mask= S0_Pos;
 80043fa:	6063      	str	r3, [r4, #4]
	xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80043fc:	a904      	add	r1, sp, #16
 80043fe:	2300      	movs	r3, #0
 8004400:	6830      	ldr	r0, [r6, #0]
	sub.sem_id = &xSemArriveeCartons;
 8004402:	9507      	str	r5, [sp, #28]
	sub_pm = &sub;
 8004404:	9404      	str	r4, [sp, #16]
	xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004406:	f7fc f901 	bl	800060c <xQueueGenericSend>
	xSemaphoreTake(xSemArriveeCartons, portMAX_DELAY);
 800440a:	2101      	movs	r1, #1
 800440c:	6828      	ldr	r0, [r5, #0]
 800440e:	4249      	negs	r1, r1
 8004410:	f7fc fe1a 	bl	8001048 <xQueueSemaphoreTake>

	sub.sensor_state=S0_ON;
 8004414:	4643      	mov	r3, r8
	sub_pm = &sub;
	xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004416:	2200      	movs	r2, #0
	sub.sensor_state=S0_ON;
 8004418:	60a3      	str	r3, [r4, #8]
	xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800441a:	a904      	add	r1, sp, #16
 800441c:	2300      	movs	r3, #0
 800441e:	6830      	ldr	r0, [r6, #0]
	sub_pm = &sub;
 8004420:	9404      	str	r4, [sp, #16]
	xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004422:	f7fc f8f3 	bl	800060c <xQueueGenericSend>
	xSemaphoreTake(xSemArriveeCartons, portMAX_DELAY);
 8004426:	2101      	movs	r1, #1
 8004428:	6828      	ldr	r0, [r5, #0]
 800442a:	4249      	negs	r1, r1
 800442c:	f7fc fe0c 	bl	8001048 <xQueueSemaphoreTake>

	sub.sensor_state=S0_OFF;
 8004430:	464b      	mov	r3, r9
	sub_pm = &sub;
	xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004432:	2200      	movs	r2, #0
 8004434:	a904      	add	r1, sp, #16
 8004436:	6830      	ldr	r0, [r6, #0]
	sub.sensor_state=S0_OFF;
 8004438:	60a3      	str	r3, [r4, #8]
	sub_pm = &sub;
 800443a:	9404      	str	r4, [sp, #16]
	xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800443c:	f7fc f8e6 	bl	800060c <xQueueGenericSend>
	xSemaphoreTake(xSemArriveeCartons, portMAX_DELAY);
 8004440:	2101      	movs	r1, #1
 8004442:	6828      	ldr	r0, [r5, #0]
 8004444:	4249      	negs	r1, r1
 8004446:	f7fc fdff 	bl	8001048 <xQueueSemaphoreTake>

	// D�sactive Distribution cartons
	FACTORY_IO_Actuators_Set(A0_OFF, A0_Msk, actuator_write_buffer);
 800444a:	003a      	movs	r2, r7
 800444c:	2101      	movs	r1, #1
 800444e:	2000      	movs	r0, #0
 8004450:	f000 fe28 	bl	80050a4 <FACTORY_IO_Actuators_Set>
	pm = &actuator_write_buffer;
	xQueueSendToBack(xPublishQueue, &pm, 0);
 8004454:	4653      	mov	r3, sl
 8004456:	2200      	movs	r2, #0
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	a903      	add	r1, sp, #12
 800445c:	2300      	movs	r3, #0
	pm = &actuator_write_buffer;
 800445e:	9703      	str	r7, [sp, #12]
	xQueueSendToBack(xPublishQueue, &pm, 0);
 8004460:	f7fc f8d4 	bl	800060c <xQueueGenericSend>
 8004464:	4b4c      	ldr	r3, [pc, #304]	; (8004598 <vArriveeCartons+0x1fc>)
 8004466:	4699      	mov	r9, r3
 8004468:	4b4c      	ldr	r3, [pc, #304]	; (800459c <vArriveeCartons+0x200>)
 800446a:	469b      	mov	fp, r3
	{
		free_heap_size = xPortGetFreeHeapSize();  // Mesure de free heap size

		// Passage du carton 1 devant le capteur entr�e palettiseur
		sub.sem_id = &xSemArriveeCartons;
		sub.sensor_state=S2_OFF;
 800446c:	2300      	movs	r3, #0
 800446e:	4698      	mov	r8, r3
		free_heap_size = xPortGetFreeHeapSize();  // Mesure de free heap size
 8004470:	f7fe fc3a 	bl	8002ce8 <xPortGetFreeHeapSize>
 8004474:	464b      	mov	r3, r9
 8004476:	6018      	str	r0, [r3, #0]
		sub.sensor_state=S2_OFF;
 8004478:	4643      	mov	r3, r8
 800447a:	60a3      	str	r3, [r4, #8]
		sub.sensor_mask=S2_Pos;
 800447c:	2304      	movs	r3, #4
		sub_pm = &sub;
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800447e:	2200      	movs	r2, #0
		sub.sensor_mask=S2_Pos;
 8004480:	6063      	str	r3, [r4, #4]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004482:	a904      	add	r1, sp, #16
 8004484:	2300      	movs	r3, #0
 8004486:	6830      	ldr	r0, [r6, #0]
		sub.sem_id = &xSemArriveeCartons;
 8004488:	6025      	str	r5, [r4, #0]
		sub_pm = &sub;
 800448a:	9404      	str	r4, [sp, #16]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800448c:	f7fc f8be 	bl	800060c <xQueueGenericSend>
		xSemaphoreTake(xSemArriveeCartons, portMAX_DELAY);
 8004490:	2101      	movs	r1, #1
 8004492:	6828      	ldr	r0, [r5, #0]
 8004494:	4249      	negs	r1, r1
 8004496:	f7fc fdd7 	bl	8001048 <xQueueSemaphoreTake>

		// Fin du passage du carton 1 devant le capteur entr�e palettiseur
		sub.sensor_state=S2_ON;
 800449a:	2304      	movs	r3, #4
		sub_pm = &sub;
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800449c:	2200      	movs	r2, #0
		sub.sensor_state=S2_ON;
 800449e:	60a3      	str	r3, [r4, #8]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80044a0:	a904      	add	r1, sp, #16
 80044a2:	2300      	movs	r3, #0
 80044a4:	6830      	ldr	r0, [r6, #0]
		sub_pm = &sub;
 80044a6:	9404      	str	r4, [sp, #16]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80044a8:	f7fc f8b0 	bl	800060c <xQueueGenericSend>
		xSemaphoreTake(xSemArriveeCartons, portMAX_DELAY);
 80044ac:	2101      	movs	r1, #1
 80044ae:	6828      	ldr	r0, [r5, #0]
 80044b0:	4249      	negs	r1, r1
 80044b2:	f7fc fdc9 	bl	8001048 <xQueueSemaphoreTake>

		// Passage du carton 2 devant le capteur entr�e palettiseur
		sub.sensor_state=S2_OFF;
 80044b6:	4643      	mov	r3, r8
		sub_pm = &sub;
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80044b8:	2200      	movs	r2, #0
		sub.sensor_state=S2_OFF;
 80044ba:	60a3      	str	r3, [r4, #8]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80044bc:	a904      	add	r1, sp, #16
 80044be:	2300      	movs	r3, #0
 80044c0:	6830      	ldr	r0, [r6, #0]
		sub_pm = &sub;
 80044c2:	9404      	str	r4, [sp, #16]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80044c4:	f7fc f8a2 	bl	800060c <xQueueGenericSend>
		xSemaphoreTake(xSemArriveeCartons, portMAX_DELAY);
 80044c8:	2101      	movs	r1, #1
 80044ca:	6828      	ldr	r0, [r5, #0]
 80044cc:	4249      	negs	r1, r1
 80044ce:	f7fc fdbb 	bl	8001048 <xQueueSemaphoreTake>

		vTaskDelay(20);
 80044d2:	2014      	movs	r0, #20
 80044d4:	f7fd fda0 	bl	8002018 <vTaskDelay>

		// Attente de la synchro indiquant que les cartons pr�c�dents ont
		// �t� pouss�s (�tat initial � 1)
		xEventGroupWaitBits(taskSync, S_CARTONS_POUSSES, pdTRUE, pdTRUE, portMAX_DELAY);
 80044d8:	465b      	mov	r3, fp
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	2301      	movs	r3, #1
 80044de:	425b      	negs	r3, r3
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	2201      	movs	r2, #1
 80044e4:	3302      	adds	r3, #2
 80044e6:	2108      	movs	r1, #8
 80044e8:	f7fb fea0 	bl	800022c <xEventGroupWaitBits>

		// Ouverture barri�re et distribution cartons
		FACTORY_IO_Actuators_Set(A2_OFF | A0_ON, A2_Msk | A0_Msk, actuator_write_buffer);
 80044ec:	003a      	movs	r2, r7
 80044ee:	2105      	movs	r1, #5
 80044f0:	2001      	movs	r0, #1
 80044f2:	f000 fdd7 	bl	80050a4 <FACTORY_IO_Actuators_Set>
		pm = &actuator_write_buffer;
		xQueueSendToBack(xPublishQueue, &pm, 0);
 80044f6:	4653      	mov	r3, sl
 80044f8:	a903      	add	r1, sp, #12
 80044fa:	2200      	movs	r2, #0
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	2300      	movs	r3, #0
		pm = &actuator_write_buffer;
 8004500:	9703      	str	r7, [sp, #12]
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004502:	f7fc f883 	bl	800060c <xQueueGenericSend>

		// Passage du carton 1 devant le capteur carton distribu�
		sub.sem_id = &xSemArriveeCartons;
		sub.sensor_state=S0_OFF;
 8004506:	4643      	mov	r3, r8
 8004508:	60a3      	str	r3, [r4, #8]
		sub.sensor_mask= S0_Pos;
 800450a:	2301      	movs	r3, #1
		sub_pm = &sub;
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800450c:	2200      	movs	r2, #0
		sub.sensor_mask= S0_Pos;
 800450e:	6063      	str	r3, [r4, #4]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004510:	a904      	add	r1, sp, #16
 8004512:	2300      	movs	r3, #0
 8004514:	6830      	ldr	r0, [r6, #0]
		sub.sem_id = &xSemArriveeCartons;
 8004516:	6025      	str	r5, [r4, #0]
		sub_pm = &sub;
 8004518:	9404      	str	r4, [sp, #16]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800451a:	f7fc f877 	bl	800060c <xQueueGenericSend>
		xSemaphoreTake(xSemArriveeCartons, portMAX_DELAY);
 800451e:	2101      	movs	r1, #1
 8004520:	6828      	ldr	r0, [r5, #0]
 8004522:	4249      	negs	r1, r1
 8004524:	f7fc fd90 	bl	8001048 <xQueueSemaphoreTake>

		sub.sensor_state=S0_ON;
 8004528:	2301      	movs	r3, #1
		sub_pm = &sub;
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800452a:	2200      	movs	r2, #0
		sub.sensor_state=S0_ON;
 800452c:	60a3      	str	r3, [r4, #8]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800452e:	a904      	add	r1, sp, #16
 8004530:	2300      	movs	r3, #0
 8004532:	6830      	ldr	r0, [r6, #0]
		sub_pm = &sub;
 8004534:	9404      	str	r4, [sp, #16]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004536:	f7fc f869 	bl	800060c <xQueueGenericSend>
		xSemaphoreTake(xSemArriveeCartons, portMAX_DELAY);
 800453a:	2101      	movs	r1, #1
 800453c:	6828      	ldr	r0, [r5, #0]
 800453e:	4249      	negs	r1, r1
 8004540:	f7fc fd82 	bl	8001048 <xQueueSemaphoreTake>

		sub.sensor_state=S0_OFF;
 8004544:	4643      	mov	r3, r8
		sub_pm = &sub;
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004546:	2200      	movs	r2, #0
		sub.sensor_state=S0_OFF;
 8004548:	60a3      	str	r3, [r4, #8]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800454a:	a904      	add	r1, sp, #16
 800454c:	2300      	movs	r3, #0
 800454e:	6830      	ldr	r0, [r6, #0]
		sub_pm = &sub;
 8004550:	9404      	str	r4, [sp, #16]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004552:	f7fc f85b 	bl	800060c <xQueueGenericSend>
		xSemaphoreTake(xSemArriveeCartons, portMAX_DELAY);
 8004556:	2101      	movs	r1, #1
 8004558:	6828      	ldr	r0, [r5, #0]
 800455a:	4249      	negs	r1, r1
 800455c:	f7fc fd74 	bl	8001048 <xQueueSemaphoreTake>

		// D�sactive Distribution cartons et fermeture barri�re
		FACTORY_IO_Actuators_Set(A0_OFF | A2_ON, A0_Msk | A2_Msk, actuator_write_buffer);
 8004560:	003a      	movs	r2, r7
 8004562:	2105      	movs	r1, #5
 8004564:	2004      	movs	r0, #4
 8004566:	f000 fd9d 	bl	80050a4 <FACTORY_IO_Actuators_Set>
		pm = &actuator_write_buffer;
		xQueueSendToBack(xPublishQueue, &pm, 0);
 800456a:	4653      	mov	r3, sl
 800456c:	2200      	movs	r2, #0
 800456e:	a903      	add	r1, sp, #12
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	2300      	movs	r3, #0
		pm = &actuator_write_buffer;
 8004574:	9703      	str	r7, [sp, #12]
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004576:	f7fc f849 	bl	800060c <xQueueGenericSend>

		// Envoi de la synchro indiquant que les cartons doivent �tre pouss�s
		xEventGroupSetBits(taskSync, ARRIVEE_DES_CARTONS);
 800457a:	465b      	mov	r3, fp
 800457c:	2104      	movs	r1, #4
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	f7fb ff0e 	bl	80003a0 <xEventGroupSetBits>

		vTaskDelay(100/TIMEBASE);
 8004584:	200a      	movs	r0, #10
 8004586:	f7fd fd47 	bl	8002018 <vTaskDelay>
	while(1)
 800458a:	e771      	b.n	8004470 <vArriveeCartons+0xd4>
 800458c:	200038c8 	.word	0x200038c8
 8004590:	200038e8 	.word	0x200038e8
 8004594:	200038cc 	.word	0x200038cc
 8004598:	200038a0 	.word	0x200038a0
 800459c:	200038b4 	.word	0x200038b4

080045a0 <vPoussoir>:
	}
}

void vPoussoir (void *pvParameters)
{
 80045a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a2:	4657      	mov	r7, sl
 80045a4:	46de      	mov	lr, fp
 80045a6:	464e      	mov	r6, r9
 80045a8:	4645      	mov	r5, r8
 80045aa:	b5e0      	push	{r5, r6, r7, lr}
 80045ac:	4b46      	ldr	r3, [pc, #280]	; (80046c8 <vPoussoir+0x128>)
 80045ae:	b08d      	sub	sp, #52	; 0x34
 80045b0:	9303      	str	r3, [sp, #12]
 80045b2:	4b46      	ldr	r3, [pc, #280]	; (80046cc <vPoussoir+0x12c>)
 80045b4:	4e46      	ldr	r6, [pc, #280]	; (80046d0 <vPoussoir+0x130>)
 80045b6:	469b      	mov	fp, r3
 80045b8:	4b46      	ldr	r3, [pc, #280]	; (80046d4 <vPoussoir+0x134>)
 80045ba:	af07      	add	r7, sp, #28
 80045bc:	469a      	mov	sl, r3
 80045be:	4b46      	ldr	r3, [pc, #280]	; (80046d8 <vPoussoir+0x138>)
 80045c0:	ac09      	add	r4, sp, #36	; 0x24
	command_message_t *pm;

	while(1)
	{
		// Prend le Mutex
		xSemaphoreTake(xStockPoussoir, portMAX_DELAY);
 80045c2:	001d      	movs	r5, r3
 80045c4:	2101      	movs	r1, #1
 80045c6:	9b03      	ldr	r3, [sp, #12]
 80045c8:	4249      	negs	r1, r1
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	f7fc fd3c 	bl	8001048 <xQueueSemaphoreTake>
 80045d0:	2303      	movs	r3, #3
 80045d2:	46a8      	mov	r8, r5
 80045d4:	001d      	movs	r5, r3
		while(stock_poussoir != 0)
		{
			stock_poussoir --;

			// Attente de l'arriv�e des cartons devant le poussoir
			xEventGroupWaitBits(taskSync, ARRIVEE_DES_CARTONS, pdTRUE, pdTRUE, portMAX_DELAY);
 80045d6:	465b      	mov	r3, fp
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	2301      	movs	r3, #1
 80045dc:	425b      	negs	r3, r3
 80045de:	2201      	movs	r2, #1
 80045e0:	2104      	movs	r1, #4
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	3302      	adds	r3, #2
 80045e6:	f7fb fe21 	bl	800022c <xEventGroupWaitBits>

			// Activation du poussoir
			FACTORY_IO_Actuators_Set(A4_ON, A4_Msk, actuator_write_buffer);
 80045ea:	003a      	movs	r2, r7
 80045ec:	2110      	movs	r1, #16
 80045ee:	2010      	movs	r0, #16
 80045f0:	f000 fd58 	bl	80050a4 <FACTORY_IO_Actuators_Set>
			pm = &actuator_write_buffer;
			xQueueSendToBack(xPublishQueue, &pm, 0);
 80045f4:	4653      	mov	r3, sl
 80045f6:	2200      	movs	r2, #0
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	a906      	add	r1, sp, #24
 80045fc:	2300      	movs	r3, #0
			pm = &actuator_write_buffer;
 80045fe:	9706      	str	r7, [sp, #24]
			xQueueSendToBack(xPublishQueue, &pm, 0);
 8004600:	f7fc f804 	bl	800060c <xQueueGenericSend>

			// Attente que le poussoir ait atteint sa but�e (d�sactivation et r�activation du capteur)
			sub.sensor_mask= S4_Pos;
 8004604:	2310      	movs	r3, #16
			sub.sensor_state=S4_OFF;
			sub.sem_id = &xSemPoussoir;
			sub_pm = &sub;
			xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004606:	4642      	mov	r2, r8
			sub.sensor_mask= S4_Pos;
 8004608:	4699      	mov	r9, r3
 800460a:	6063      	str	r3, [r4, #4]
			sub.sensor_state=S4_OFF;
 800460c:	2300      	movs	r3, #0
			xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800460e:	6810      	ldr	r0, [r2, #0]
 8004610:	a905      	add	r1, sp, #20
 8004612:	2200      	movs	r2, #0
			sub.sensor_state=S4_OFF;
 8004614:	60a3      	str	r3, [r4, #8]
			sub.sem_id = &xSemPoussoir;
 8004616:	6026      	str	r6, [r4, #0]
			sub_pm = &sub;
 8004618:	9405      	str	r4, [sp, #20]
			xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800461a:	f7fb fff7 	bl	800060c <xQueueGenericSend>
			xSemaphoreTake(xSemPoussoir, portMAX_DELAY);
 800461e:	2101      	movs	r1, #1
 8004620:	6830      	ldr	r0, [r6, #0]
 8004622:	4249      	negs	r1, r1
 8004624:	f7fc fd10 	bl	8001048 <xQueueSemaphoreTake>

			sub.sensor_state=S4_ON;
 8004628:	464a      	mov	r2, r9
 800462a:	60a2      	str	r2, [r4, #8]
			sub_pm = &sub;
			xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800462c:	4642      	mov	r2, r8
 800462e:	2300      	movs	r3, #0
 8004630:	6810      	ldr	r0, [r2, #0]
 8004632:	a905      	add	r1, sp, #20
 8004634:	2200      	movs	r2, #0
			sub_pm = &sub;
 8004636:	9405      	str	r4, [sp, #20]
			xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004638:	f7fb ffe8 	bl	800060c <xQueueGenericSend>
			xSemaphoreTake(xSemPoussoir, portMAX_DELAY);
 800463c:	2101      	movs	r1, #1
 800463e:	6830      	ldr	r0, [r6, #0]
 8004640:	4249      	negs	r1, r1
 8004642:	f7fc fd01 	bl	8001048 <xQueueSemaphoreTake>

			// D�sactivation du poussoir
			FACTORY_IO_Actuators_Set(A4_OFF, A4_Msk, actuator_write_buffer);
 8004646:	003a      	movs	r2, r7
 8004648:	2110      	movs	r1, #16
 800464a:	2000      	movs	r0, #0
 800464c:	f000 fd2a 	bl	80050a4 <FACTORY_IO_Actuators_Set>
			pm = &actuator_write_buffer;
			xQueueSendToBack(xPublishQueue, &pm, 0);
 8004650:	4652      	mov	r2, sl
 8004652:	2300      	movs	r3, #0
 8004654:	6810      	ldr	r0, [r2, #0]
 8004656:	a906      	add	r1, sp, #24
 8004658:	2200      	movs	r2, #0
			pm = &actuator_write_buffer;
 800465a:	9706      	str	r7, [sp, #24]
			xQueueSendToBack(xPublishQueue, &pm, 0);
 800465c:	f7fb ffd6 	bl	800060c <xQueueGenericSend>

			// Attente que le poussoir ait atteint sa but�e (d�sactivation et r�activation du capteur)
			sub.sensor_state=S4_OFF;
 8004660:	2300      	movs	r3, #0
 8004662:	60a3      	str	r3, [r4, #8]
			sub_pm = &sub;
			xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004664:	4643      	mov	r3, r8
 8004666:	2200      	movs	r2, #0
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	a905      	add	r1, sp, #20
 800466c:	2300      	movs	r3, #0
			sub_pm = &sub;
 800466e:	9405      	str	r4, [sp, #20]
			xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004670:	f7fb ffcc 	bl	800060c <xQueueGenericSend>
			xSemaphoreTake(xSemPoussoir, portMAX_DELAY);
 8004674:	2101      	movs	r1, #1
 8004676:	6830      	ldr	r0, [r6, #0]
 8004678:	4249      	negs	r1, r1
 800467a:	f7fc fce5 	bl	8001048 <xQueueSemaphoreTake>

			sub.sensor_state=S4_ON;
 800467e:	464b      	mov	r3, r9
 8004680:	60a3      	str	r3, [r4, #8]
			sub_pm = &sub;
			xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004682:	4643      	mov	r3, r8
 8004684:	2200      	movs	r2, #0
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	a905      	add	r1, sp, #20
 800468a:	2300      	movs	r3, #0
			sub_pm = &sub;
 800468c:	9405      	str	r4, [sp, #20]
			xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800468e:	f7fb ffbd 	bl	800060c <xQueueGenericSend>
			xSemaphoreTake(xSemPoussoir, portMAX_DELAY);
 8004692:	2101      	movs	r1, #1
 8004694:	6830      	ldr	r0, [r6, #0]
 8004696:	4249      	negs	r1, r1
 8004698:	f7fc fcd6 	bl	8001048 <xQueueSemaphoreTake>

			// Envoi de la synchro : cartons pouss�s
			xEventGroupSetBits(taskSync, S_CARTONS_POUSSES);
 800469c:	465b      	mov	r3, fp
		while(stock_poussoir != 0)
 800469e:	3d01      	subs	r5, #1
			xEventGroupSetBits(taskSync, S_CARTONS_POUSSES);
 80046a0:	2108      	movs	r1, #8
 80046a2:	6818      	ldr	r0, [r3, #0]
		while(stock_poussoir != 0)
 80046a4:	b2ed      	uxtb	r5, r5
			xEventGroupSetBits(taskSync, S_CARTONS_POUSSES);
 80046a6:	f7fb fe7b 	bl	80003a0 <xEventGroupSetBits>
		while(stock_poussoir != 0)
 80046aa:	2d00      	cmp	r5, #0
 80046ac:	d193      	bne.n	80045d6 <vPoussoir+0x36>
		}

		// Une fois les 3 salves de cartons pouss�s, on donne
		// le s�maphore � l'�tau
		xSemaphoreGive(xStockPoussoir);
 80046ae:	9b03      	ldr	r3, [sp, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	2100      	movs	r1, #0
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	2300      	movs	r3, #0
 80046b8:	f7fb ffa8 	bl	800060c <xQueueGenericSend>

		// R�z du stock de cartons
		stock_poussoir = 3;


		vTaskDelay(100/TIMEBASE);
 80046bc:	200a      	movs	r0, #10
		xSemaphoreGive(xStockPoussoir);
 80046be:	4645      	mov	r5, r8
		vTaskDelay(100/TIMEBASE);
 80046c0:	f7fd fcaa 	bl	8002018 <vTaskDelay>
		xSemaphoreTake(xStockPoussoir, portMAX_DELAY);
 80046c4:	e77e      	b.n	80045c4 <vPoussoir+0x24>
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	200038e4 	.word	0x200038e4
 80046cc:	200038b4 	.word	0x200038b4
 80046d0:	200038dc 	.word	0x200038dc
 80046d4:	200038c8 	.word	0x200038c8
 80046d8:	200038e8 	.word	0x200038e8

080046dc <vPaletteHorizontal>:
	}
}


void vPaletteHorizontal (void *pvParameters)
{
 80046dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046de:	4646      	mov	r6, r8
 80046e0:	46d6      	mov	lr, sl
 80046e2:	464f      	mov	r7, r9
 80046e4:	4b42      	ldr	r3, [pc, #264]	; (80047f0 <vPaletteHorizontal+0x114>)
 80046e6:	b5c0      	push	{r6, r7, lr}
 80046e8:	4698      	mov	r8, r3
 80046ea:	4b42      	ldr	r3, [pc, #264]	; (80047f4 <vPaletteHorizontal+0x118>)
 80046ec:	b08a      	sub	sp, #40	; 0x28
 80046ee:	4699      	mov	r9, r3
 80046f0:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <vPaletteHorizontal+0x11c>)
 80046f2:	4e42      	ldr	r6, [pc, #264]	; (80047fc <vPaletteHorizontal+0x120>)
 80046f4:	469a      	mov	sl, r3
 80046f6:	ad05      	add	r5, sp, #20
 80046f8:	ac07      	add	r4, sp, #28
	command_message_t *pm;

	while(1){
		// Activation des deux tapis palette (A16 et A17)
		// Activation de la distribution (A9)
		FACTORY_IO_Actuators_Set(A16_ON | A17_ON | A9_ON, A16_Msk | A17_Msk | A9_Msk, actuator_write_buffer);
 80046fa:	4941      	ldr	r1, [pc, #260]	; (8004800 <vPaletteHorizontal+0x124>)
 80046fc:	002a      	movs	r2, r5
 80046fe:	0008      	movs	r0, r1
 8004700:	f000 fcd0 	bl	80050a4 <FACTORY_IO_Actuators_Set>
		pm = &actuator_write_buffer;
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004704:	4643      	mov	r3, r8
 8004706:	a904      	add	r1, sp, #16
 8004708:	2200      	movs	r2, #0
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	2300      	movs	r3, #0
		pm = &actuator_write_buffer;
 800470e:	9504      	str	r5, [sp, #16]
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004710:	f7fb ff7c 	bl	800060c <xQueueGenericSend>

		// Attente que la palette arrive sur le support (entree palette)
		sub.sensor_mask= S12_Pos;
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	019b      	lsls	r3, r3, #6
 8004718:	6063      	str	r3, [r4, #4]
		sub.sensor_state=S12_ON;
 800471a:	60a3      	str	r3, [r4, #8]
		sub.sem_id = &xSemPaletteH;
		sub_pm = &sub;
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
		xSemaphoreTake(xSemPaletteH, portMAX_DELAY);
 800471c:	2701      	movs	r7, #1
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800471e:	464b      	mov	r3, r9
		xSemaphoreTake(xSemPaletteH, portMAX_DELAY);
 8004720:	427f      	negs	r7, r7
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004722:	2200      	movs	r2, #0
 8004724:	a903      	add	r1, sp, #12
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	2300      	movs	r3, #0
		sub.sem_id = &xSemPaletteH;
 800472a:	6026      	str	r6, [r4, #0]
		sub_pm = &sub;
 800472c:	9403      	str	r4, [sp, #12]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800472e:	f7fb ff6d 	bl	800060c <xQueueGenericSend>
		xSemaphoreTake(xSemPaletteH, portMAX_DELAY);
 8004732:	0039      	movs	r1, r7
 8004734:	6830      	ldr	r0, [r6, #0]
 8004736:	f7fc fc87 	bl	8001048 <xQueueSemaphoreTake>

		// D�sactivation de la distribution (A9) et activation du chargement palette (A10)
		FACTORY_IO_Actuators_Set(A9_OFF | A10_ON, A9_Msk | A10_Msk, actuator_write_buffer);
 800473a:	21c0      	movs	r1, #192	; 0xc0
 800473c:	2080      	movs	r0, #128	; 0x80
 800473e:	002a      	movs	r2, r5
 8004740:	0109      	lsls	r1, r1, #4
 8004742:	0100      	lsls	r0, r0, #4
 8004744:	f000 fcae 	bl	80050a4 <FACTORY_IO_Actuators_Set>
		pm = &actuator_write_buffer;
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004748:	4643      	mov	r3, r8
 800474a:	a904      	add	r1, sp, #16
 800474c:	2200      	movs	r2, #0
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	2300      	movs	r3, #0
		pm = &actuator_write_buffer;
 8004752:	9504      	str	r5, [sp, #16]
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004754:	f7fb ff5a 	bl	800060c <xQueueGenericSend>

		// Attente que la palette arrive au bout du support (sortie palette)
		sub.sensor_mask= S9_Pos;
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	6063      	str	r3, [r4, #4]
		sub.sensor_state=S9_ON;
 800475e:	60a3      	str	r3, [r4, #8]
		sub.sem_id = &xSemPaletteH;
		sub_pm = &sub;
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004760:	464b      	mov	r3, r9
 8004762:	2200      	movs	r2, #0
 8004764:	a903      	add	r1, sp, #12
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	2300      	movs	r3, #0
		sub.sem_id = &xSemPaletteH;
 800476a:	6026      	str	r6, [r4, #0]
		sub_pm = &sub;
 800476c:	9403      	str	r4, [sp, #12]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800476e:	f7fb ff4d 	bl	800060c <xQueueGenericSend>
		xSemaphoreTake(xSemPaletteH, portMAX_DELAY);
 8004772:	0039      	movs	r1, r7
 8004774:	6830      	ldr	r0, [r6, #0]
 8004776:	f7fc fc67 	bl	8001048 <xQueueSemaphoreTake>

		// D�sactivation de la distribution, du chargement et du tapis vers ascenseur
		FACTORY_IO_Actuators_Set(A10_OFF | A16_OFF, A10_Msk |A16_Msk, actuator_write_buffer);
 800477a:	2181      	movs	r1, #129	; 0x81
 800477c:	002a      	movs	r2, r5
 800477e:	2000      	movs	r0, #0
 8004780:	02c9      	lsls	r1, r1, #11
 8004782:	f000 fc8f 	bl	80050a4 <FACTORY_IO_Actuators_Set>
		pm = &actuator_write_buffer;
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004786:	4643      	mov	r3, r8
 8004788:	2200      	movs	r2, #0
 800478a:	a904      	add	r1, sp, #16
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	2300      	movs	r3, #0
		pm = &actuator_write_buffer;
 8004790:	9504      	str	r5, [sp, #16]
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004792:	f7fb ff3b 	bl	800060c <xQueueGenericSend>

		// Envoi de la synchro pour indiquer que la palette est en place
		xEventGroupSetBits(taskSync, S_ARRIVEE_PALETTE_2);
 8004796:	4653      	mov	r3, sl
 8004798:	2140      	movs	r1, #64	; 0x40
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	f7fb fe00 	bl	80003a0 <xEventGroupSetBits>

		// Attente de la synchro indiquant que la palette est pr�te � �tre envoy�e
		xEventGroupWaitBits(taskSync, S_ENVOI_PALETTE, pdTRUE, pdTRUE, portMAX_DELAY);
 80047a0:	4653      	mov	r3, sl
 80047a2:	2201      	movs	r2, #1
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	2180      	movs	r1, #128	; 0x80
 80047a8:	2301      	movs	r3, #1
 80047aa:	9700      	str	r7, [sp, #0]
 80047ac:	f7fb fd3e 	bl	800022c <xEventGroupWaitBits>

		// Activation du chargement de la palette
		FACTORY_IO_Actuators_Set(A10_ON, A10_Msk, actuator_write_buffer);
 80047b0:	2180      	movs	r1, #128	; 0x80
 80047b2:	0109      	lsls	r1, r1, #4
 80047b4:	002a      	movs	r2, r5
 80047b6:	0008      	movs	r0, r1
 80047b8:	f000 fc74 	bl	80050a4 <FACTORY_IO_Actuators_Set>
		pm = &actuator_write_buffer;
		xQueueSendToBack(xPublishQueue, &pm, 0);
 80047bc:	4643      	mov	r3, r8
 80047be:	a904      	add	r1, sp, #16
 80047c0:	2200      	movs	r2, #0
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	2300      	movs	r3, #0
		pm = &actuator_write_buffer;
 80047c6:	9504      	str	r5, [sp, #16]
		xQueueSendToBack(xPublishQueue, &pm, 0);
 80047c8:	f7fb ff20 	bl	800060c <xQueueGenericSend>

		// Attente que la palette soit partie
		sub.sensor_state=S9_OFF;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60a3      	str	r3, [r4, #8]
		sub_pm = &sub;
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80047d0:	464b      	mov	r3, r9
 80047d2:	2200      	movs	r2, #0
 80047d4:	a903      	add	r1, sp, #12
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	2300      	movs	r3, #0
		sub_pm = &sub;
 80047da:	9403      	str	r4, [sp, #12]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80047dc:	f7fb ff16 	bl	800060c <xQueueGenericSend>
		xSemaphoreTake(xSemPaletteH, portMAX_DELAY);
 80047e0:	0039      	movs	r1, r7
 80047e2:	6830      	ldr	r0, [r6, #0]
 80047e4:	f7fc fc30 	bl	8001048 <xQueueSemaphoreTake>

		vTaskDelay(100/TIMEBASE);
 80047e8:	200a      	movs	r0, #10
 80047ea:	f7fd fc15 	bl	8002018 <vTaskDelay>
	while(1){
 80047ee:	e784      	b.n	80046fa <vPaletteHorizontal+0x1e>
 80047f0:	200038c8 	.word	0x200038c8
 80047f4:	200038e8 	.word	0x200038e8
 80047f8:	200038b4 	.word	0x200038b4
 80047fc:	200038d8 	.word	0x200038d8
 8004800:	000c0400 	.word	0x000c0400

08004804 <vEtau>:
	}
}

void vEtau (void *pvParameters)
{
 8004804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004806:	46de      	mov	lr, fp
 8004808:	464e      	mov	r6, r9
 800480a:	4645      	mov	r5, r8
 800480c:	4657      	mov	r7, sl
 800480e:	b5e0      	push	{r5, r6, r7, lr}
	// Ce d�lai permet de s'assurer que cette t�che ne prend pas le Mutex
	// avant le poussoir
	vTaskDelay(50/TIMEBASE);
 8004810:	2005      	movs	r0, #5
{
 8004812:	b08b      	sub	sp, #44	; 0x2c
	vTaskDelay(50/TIMEBASE);
 8004814:	f7fd fc00 	bl	8002018 <vTaskDelay>
 8004818:	4b57      	ldr	r3, [pc, #348]	; (8004978 <vEtau+0x174>)
 800481a:	4f58      	ldr	r7, [pc, #352]	; (800497c <vEtau+0x178>)
 800481c:	4699      	mov	r9, r3
 800481e:	4b58      	ldr	r3, [pc, #352]	; (8004980 <vEtau+0x17c>)
 8004820:	4e58      	ldr	r6, [pc, #352]	; (8004984 <vEtau+0x180>)
 8004822:	4698      	mov	r8, r3
 8004824:	4b58      	ldr	r3, [pc, #352]	; (8004988 <vEtau+0x184>)
 8004826:	ad05      	add	r5, sp, #20
 8004828:	469b      	mov	fp, r3
	command_message_t actuator_write_buffer;
	command_message_t *pm;

	while(1){
		// Prise du mutex depuis la t�che poussoir
		xSemaphoreTake(xStockPoussoir, portMAX_DELAY);
 800482a:	003b      	movs	r3, r7
 800482c:	4647      	mov	r7, r8
 800482e:	4698      	mov	r8, r3
 8004830:	ac07      	add	r4, sp, #28
 8004832:	464b      	mov	r3, r9
 8004834:	2101      	movs	r1, #1
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	4249      	negs	r1, r1
 800483a:	f7fc fc05 	bl	8001048 <xQueueSemaphoreTake>

		// Activation de l'�tau
		FACTORY_IO_Actuators_Set(A5_ON, A5_Msk, actuator_write_buffer);
 800483e:	002a      	movs	r2, r5
 8004840:	2120      	movs	r1, #32
 8004842:	2020      	movs	r0, #32
 8004844:	f000 fc2e 	bl	80050a4 <FACTORY_IO_Actuators_Set>
		pm = &actuator_write_buffer;
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004848:	a904      	add	r1, sp, #16
 800484a:	2300      	movs	r3, #0
 800484c:	2200      	movs	r2, #0
 800484e:	6838      	ldr	r0, [r7, #0]
		pm = &actuator_write_buffer;
 8004850:	9504      	str	r5, [sp, #16]
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004852:	f7fb fedb 	bl	800060c <xQueueGenericSend>

		// Attente que l'�tau soit serr�
		sub.sensor_mask= S5_Pos;
 8004856:	2320      	movs	r3, #32
 8004858:	469a      	mov	sl, r3
 800485a:	6063      	str	r3, [r4, #4]
		sub.sensor_state=S5_ON;
 800485c:	60a3      	str	r3, [r4, #8]
		sub.sem_id = &xSemEtau;
		sub_pm = &sub;
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800485e:	4643      	mov	r3, r8
 8004860:	2200      	movs	r2, #0
 8004862:	a903      	add	r1, sp, #12
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	2300      	movs	r3, #0
		sub.sem_id = &xSemEtau;
 8004868:	6026      	str	r6, [r4, #0]
		sub_pm = &sub;
 800486a:	9403      	str	r4, [sp, #12]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 800486c:	f7fb fece 	bl	800060c <xQueueGenericSend>
		xSemaphoreTake(xSemEtau, portMAX_DELAY);
 8004870:	2101      	movs	r1, #1
 8004872:	6830      	ldr	r0, [r6, #0]
 8004874:	4249      	negs	r1, r1
 8004876:	f7fc fbe7 	bl	8001048 <xQueueSemaphoreTake>

		// Attente de l'autorisation d'ouverture de la trappe
		xEventGroupWaitBits(taskSync, S_OUVERTURE_TRAPPE, pdTRUE, pdTRUE, portMAX_DELAY);
 800487a:	465b      	mov	r3, fp
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	2301      	movs	r3, #1
 8004880:	425b      	negs	r3, r3
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	2201      	movs	r2, #1
 8004886:	3302      	adds	r3, #2
 8004888:	2110      	movs	r1, #16
 800488a:	f7fb fccf 	bl	800022c <xEventGroupWaitBits>

		// Ouverture de la trappe
		FACTORY_IO_Actuators_Set(A3_ON, A3_Msk, actuator_write_buffer);
 800488e:	002a      	movs	r2, r5
 8004890:	2108      	movs	r1, #8
 8004892:	2008      	movs	r0, #8
 8004894:	f000 fc06 	bl	80050a4 <FACTORY_IO_Actuators_Set>
		pm = &actuator_write_buffer;
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004898:	a904      	add	r1, sp, #16
 800489a:	2300      	movs	r3, #0
 800489c:	2200      	movs	r2, #0
 800489e:	6838      	ldr	r0, [r7, #0]
		pm = &actuator_write_buffer;
 80048a0:	9504      	str	r5, [sp, #16]
		xQueueSendToBack(xPublishQueue, &pm, 0);
 80048a2:	f7fb feb3 	bl	800060c <xQueueGenericSend>

		// Attente que la trappe soit ouverte
		sub.sensor_mask= S3_Pos;
 80048a6:	2308      	movs	r3, #8
		sub.sensor_state=S3_ON;
		sub_pm = &sub;
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80048a8:	4641      	mov	r1, r8
 80048aa:	2200      	movs	r2, #0
		sub.sensor_mask= S3_Pos;
 80048ac:	6063      	str	r3, [r4, #4]
		sub.sensor_state=S3_ON;
 80048ae:	60a3      	str	r3, [r4, #8]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80048b0:	6808      	ldr	r0, [r1, #0]
 80048b2:	2300      	movs	r3, #0
 80048b4:	a903      	add	r1, sp, #12
		sub_pm = &sub;
 80048b6:	9403      	str	r4, [sp, #12]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80048b8:	f7fb fea8 	bl	800060c <xQueueGenericSend>
		xSemaphoreTake(xSemEtau, portMAX_DELAY);
 80048bc:	2101      	movs	r1, #1
 80048be:	6830      	ldr	r0, [r6, #0]
 80048c0:	4249      	negs	r1, r1
 80048c2:	f7fc fbc1 	bl	8001048 <xQueueSemaphoreTake>

		// D�sactivation de l'�tau pour faire tomber les cartons
		FACTORY_IO_Actuators_Set(A5_OFF, A5_Msk, actuator_write_buffer);
 80048c6:	002a      	movs	r2, r5
 80048c8:	2120      	movs	r1, #32
 80048ca:	2000      	movs	r0, #0
 80048cc:	f000 fbea 	bl	80050a4 <FACTORY_IO_Actuators_Set>
		pm = &actuator_write_buffer;
		xQueueSendToBack(xPublishQueue, &pm, 0);
 80048d0:	a904      	add	r1, sp, #16
 80048d2:	2300      	movs	r3, #0
 80048d4:	2200      	movs	r2, #0
 80048d6:	6838      	ldr	r0, [r7, #0]
		pm = &actuator_write_buffer;
 80048d8:	9504      	str	r5, [sp, #16]
		xQueueSendToBack(xPublishQueue, &pm, 0);
 80048da:	f7fb fe97 	bl	800060c <xQueueGenericSend>

		// Attente que l'�tau soit revenu en pos initiale
		sub.sensor_mask= S5_Pos;
 80048de:	4651      	mov	r1, sl
 80048e0:	6061      	str	r1, [r4, #4]
		sub.sensor_state=S5_OFF;
 80048e2:	2100      	movs	r1, #0
 80048e4:	468a      	mov	sl, r1
 80048e6:	60a1      	str	r1, [r4, #8]
		sub_pm = &sub;
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80048e8:	4641      	mov	r1, r8
 80048ea:	2300      	movs	r3, #0
 80048ec:	2200      	movs	r2, #0
 80048ee:	6808      	ldr	r0, [r1, #0]
 80048f0:	a903      	add	r1, sp, #12
		sub_pm = &sub;
 80048f2:	9403      	str	r4, [sp, #12]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80048f4:	f7fb fe8a 	bl	800060c <xQueueGenericSend>
		xSemaphoreTake(xSemEtau, portMAX_DELAY);
 80048f8:	2101      	movs	r1, #1
 80048fa:	6830      	ldr	r0, [r6, #0]
 80048fc:	4249      	negs	r1, r1
 80048fe:	f7fc fba3 	bl	8001048 <xQueueSemaphoreTake>

		// Synchro pour indique � l'ascenseur que les cartons sont d�pos�s
		xEventGroupSetBits(taskSync, S_6_CARTONS_DEPOSES);
 8004902:	4659      	mov	r1, fp
 8004904:	6808      	ldr	r0, [r1, #0]
 8004906:	2120      	movs	r1, #32
 8004908:	f7fb fd4a 	bl	80003a0 <xEventGroupSetBits>

		// Delay pour laisser le temps aux cartons de tomber et � l'ascenseur de
		// se repositionner (descente)
		vTaskDelay(500/TIMEBASE);
 800490c:	2032      	movs	r0, #50	; 0x32
 800490e:	f7fd fb83 	bl	8002018 <vTaskDelay>

		// Attente de la synchro autorisant la fermeture de la trappe
		xEventGroupWaitBits(taskSync, S_FERMETURE_PORTE, pdTRUE, pdTRUE, portMAX_DELAY);
 8004912:	4659      	mov	r1, fp
 8004914:	2201      	movs	r2, #1
 8004916:	6808      	ldr	r0, [r1, #0]
 8004918:	2180      	movs	r1, #128	; 0x80
 800491a:	4252      	negs	r2, r2
 800491c:	2301      	movs	r3, #1
 800491e:	9200      	str	r2, [sp, #0]
 8004920:	0049      	lsls	r1, r1, #1
 8004922:	3202      	adds	r2, #2
 8004924:	f7fb fc82 	bl	800022c <xEventGroupWaitBits>

		// Fermeture de la trappe
		FACTORY_IO_Actuators_Set(A3_OFF, A3_Msk, actuator_write_buffer);
 8004928:	002a      	movs	r2, r5
 800492a:	2108      	movs	r1, #8
 800492c:	2000      	movs	r0, #0
 800492e:	f000 fbb9 	bl	80050a4 <FACTORY_IO_Actuators_Set>
		pm = &actuator_write_buffer;
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004932:	a904      	add	r1, sp, #16
 8004934:	2300      	movs	r3, #0
 8004936:	2200      	movs	r2, #0
 8004938:	6838      	ldr	r0, [r7, #0]
		pm = &actuator_write_buffer;
 800493a:	9504      	str	r5, [sp, #16]
		xQueueSendToBack(xPublishQueue, &pm, 0);
 800493c:	f7fb fe66 	bl	800060c <xQueueGenericSend>

		// Attente que la trappe soit ferm�e
		sub.sensor_mask= S3_Pos;
 8004940:	2308      	movs	r3, #8
 8004942:	6063      	str	r3, [r4, #4]
		sub.sensor_state=S3_OFF;
 8004944:	4653      	mov	r3, sl
 8004946:	60a3      	str	r3, [r4, #8]
		sub_pm = &sub;
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004948:	4643      	mov	r3, r8
 800494a:	2200      	movs	r2, #0
 800494c:	a903      	add	r1, sp, #12
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	2300      	movs	r3, #0
		sub_pm = &sub;
 8004952:	9403      	str	r4, [sp, #12]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004954:	f7fb fe5a 	bl	800060c <xQueueGenericSend>
		xSemaphoreTake(xSemEtau, portMAX_DELAY);
 8004958:	2101      	movs	r1, #1
 800495a:	6830      	ldr	r0, [r6, #0]
 800495c:	4249      	negs	r1, r1
 800495e:	f7fc fb73 	bl	8001048 <xQueueSemaphoreTake>

		// Redonne le s�maphore � la t�che poussoir
		xSemaphoreGive(xStockPoussoir);
 8004962:	464b      	mov	r3, r9
 8004964:	2200      	movs	r2, #0
 8004966:	2100      	movs	r1, #0
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	2300      	movs	r3, #0
 800496c:	f7fb fe4e 	bl	800060c <xQueueGenericSend>

		vTaskDelay(100/TIMEBASE);
 8004970:	200a      	movs	r0, #10
 8004972:	f7fd fb51 	bl	8002018 <vTaskDelay>
	while(1){
 8004976:	e75c      	b.n	8004832 <vEtau+0x2e>
 8004978:	200038e4 	.word	0x200038e4
 800497c:	200038e8 	.word	0x200038e8
 8004980:	200038c8 	.word	0x200038c8
 8004984:	200038d4 	.word	0x200038d4
 8004988:	200038b4 	.word	0x200038b4

0800498c <vAscenseur>:
	}
}

void vAscenseur (void *pvParameters)
{
 800498c:	4b67      	ldr	r3, [pc, #412]	; (8004b2c <vAscenseur+0x1a0>)
 800498e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004990:	464e      	mov	r6, r9
 8004992:	4699      	mov	r9, r3
 8004994:	4b66      	ldr	r3, [pc, #408]	; (8004b30 <vAscenseur+0x1a4>)
 8004996:	4645      	mov	r5, r8
 8004998:	4698      	mov	r8, r3
 800499a:	4b66      	ldr	r3, [pc, #408]	; (8004b34 <vAscenseur+0x1a8>)
 800499c:	46de      	mov	lr, fp
 800499e:	469b      	mov	fp, r3
	command_message_t actuator_write_buffer;
	command_message_t *pm;

	while(1){
		// Attente d'une palette
		xEventGroupWaitBits(taskSync, S_ARRIVEE_PALETTE_2, pdTRUE, pdTRUE, portMAX_DELAY);
 80049a0:	2301      	movs	r3, #1
{
 80049a2:	4657      	mov	r7, sl
		xEventGroupWaitBits(taskSync, S_ARRIVEE_PALETTE_2, pdTRUE, pdTRUE, portMAX_DELAY);
 80049a4:	425b      	negs	r3, r3
 80049a6:	469a      	mov	sl, r3
{
 80049a8:	b5e0      	push	{r5, r6, r7, lr}
 80049aa:	4f63      	ldr	r7, [pc, #396]	; (8004b38 <vAscenseur+0x1ac>)
 80049ac:	b08b      	sub	sp, #44	; 0x2c
 80049ae:	ad05      	add	r5, sp, #20
 80049b0:	ac07      	add	r4, sp, #28
		xEventGroupWaitBits(taskSync, S_ARRIVEE_PALETTE_2, pdTRUE, pdTRUE, portMAX_DELAY);
 80049b2:	4653      	mov	r3, sl
 80049b4:	6838      	ldr	r0, [r7, #0]
 80049b6:	2201      	movs	r2, #1
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	2140      	movs	r1, #64	; 0x40
 80049bc:	2301      	movs	r3, #1
 80049be:	f7fb fc35 	bl	800022c <xEventGroupWaitBits>

		// Monter to limit
		FACTORY_IO_Actuators_Set(A6_ON | A8_ON, A6_Msk | A8_Msk, actuator_write_buffer);
 80049c2:	2190      	movs	r1, #144	; 0x90
 80049c4:	0089      	lsls	r1, r1, #2
 80049c6:	002a      	movs	r2, r5
 80049c8:	0008      	movs	r0, r1
 80049ca:	f000 fb6b 	bl	80050a4 <FACTORY_IO_Actuators_Set>
		pm = &actuator_write_buffer;
		xQueueSendToBack(xPublishQueue, &pm, 0);
 80049ce:	464b      	mov	r3, r9
 80049d0:	a904      	add	r1, sp, #16
 80049d2:	2200      	movs	r2, #0
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	2300      	movs	r3, #0
		pm = &actuator_write_buffer;
 80049d8:	9504      	str	r5, [sp, #16]
		xQueueSendToBack(xPublishQueue, &pm, 0);
 80049da:	f7fb fe17 	bl	800060c <xQueueGenericSend>

		// Arriv�e �tage 1
		sub.sensor_mask= S7_Pos;
		sub.sensor_state=S7_ON;
		sub.sem_id=&xSemAscenseur;
 80049de:	4643      	mov	r3, r8
		sub.sensor_mask= S7_Pos;
 80049e0:	2680      	movs	r6, #128	; 0x80
		sub.sem_id=&xSemAscenseur;
 80049e2:	6023      	str	r3, [r4, #0]
		sub_pm = &sub;
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80049e4:	465b      	mov	r3, fp
		sub.sensor_mask= S7_Pos;
 80049e6:	0076      	lsls	r6, r6, #1
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80049e8:	2200      	movs	r2, #0
 80049ea:	a903      	add	r1, sp, #12
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	2300      	movs	r3, #0
		sub.sensor_mask= S7_Pos;
 80049f0:	6066      	str	r6, [r4, #4]
		sub.sensor_state=S7_ON;
 80049f2:	60a6      	str	r6, [r4, #8]
		sub_pm = &sub;
 80049f4:	9403      	str	r4, [sp, #12]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 80049f6:	f7fb fe09 	bl	800060c <xQueueGenericSend>
		xSemaphoreTake(xSemAscenseur, portMAX_DELAY);
 80049fa:	4643      	mov	r3, r8
 80049fc:	2101      	movs	r1, #1
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	4249      	negs	r1, r1
 8004a02:	f7fc fb21 	bl	8001048 <xQueueSemaphoreTake>

		// Commander l'ouverture de la trappe
		xEventGroupSetBits(taskSync, S_OUVERTURE_TRAPPE);
 8004a06:	2110      	movs	r1, #16
 8004a08:	6838      	ldr	r0, [r7, #0]
 8004a0a:	f7fb fcc9 	bl	80003a0 <xEventGroupSetBits>

		// D�sactiver la mont�e et le to limit
		FACTORY_IO_Actuators_Set(A6_OFF | A8_OFF, A6_Msk | A8_Msk, actuator_write_buffer);
 8004a0e:	2190      	movs	r1, #144	; 0x90
 8004a10:	002a      	movs	r2, r5
 8004a12:	2000      	movs	r0, #0
 8004a14:	0089      	lsls	r1, r1, #2
 8004a16:	f000 fb45 	bl	80050a4 <FACTORY_IO_Actuators_Set>
		pm = &actuator_write_buffer;
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	a904      	add	r1, sp, #16
 8004a1e:	2200      	movs	r2, #0
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	2300      	movs	r3, #0
		pm = &actuator_write_buffer;
 8004a24:	9504      	str	r5, [sp, #16]
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004a26:	f7fb fdf1 	bl	800060c <xQueueGenericSend>

		// Attendre que les 6 cartons soient d�pos�s
		xEventGroupWaitBits(taskSync, S_6_CARTONS_DEPOSES, pdTRUE, pdTRUE, portMAX_DELAY);
 8004a2a:	4653      	mov	r3, sl
 8004a2c:	6838      	ldr	r0, [r7, #0]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	2120      	movs	r1, #32
 8004a34:	2301      	movs	r3, #1
 8004a36:	f7fb fbf9 	bl	800022c <xEventGroupWaitBits>

		// Descendre
		FACTORY_IO_Actuators_Set(A7_ON, A7_Msk, actuator_write_buffer);
 8004a3a:	002a      	movs	r2, r5
 8004a3c:	0031      	movs	r1, r6
 8004a3e:	0030      	movs	r0, r6
 8004a40:	f000 fb30 	bl	80050a4 <FACTORY_IO_Actuators_Set>
		pm = &actuator_write_buffer;
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004a44:	464b      	mov	r3, r9
 8004a46:	a904      	add	r1, sp, #16
 8004a48:	2200      	movs	r2, #0
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	2300      	movs	r3, #0
		pm = &actuator_write_buffer;
 8004a4e:	9504      	str	r5, [sp, #16]
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004a50:	f7fb fddc 	bl	800060c <xQueueGenericSend>

		// Etage 7 quitt�
		sub.sensor_mask= S7_Pos;
		sub.sensor_state=S7_OFF;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60a3      	str	r3, [r4, #8]
		sub.sem_id=&xSemAscenseur;
 8004a58:	4643      	mov	r3, r8
 8004a5a:	6023      	str	r3, [r4, #0]
		sub_pm = &sub;
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004a5c:	465b      	mov	r3, fp
 8004a5e:	2200      	movs	r2, #0
 8004a60:	a903      	add	r1, sp, #12
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	2300      	movs	r3, #0
		sub.sensor_mask= S7_Pos;
 8004a66:	6066      	str	r6, [r4, #4]
		sub_pm = &sub;
 8004a68:	9403      	str	r4, [sp, #12]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004a6a:	f7fb fdcf 	bl	800060c <xQueueGenericSend>
		xSemaphoreTake(xSemAscenseur, portMAX_DELAY);
 8004a6e:	4643      	mov	r3, r8
 8004a70:	2101      	movs	r1, #1
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	4249      	negs	r1, r1
 8004a76:	f7fc fae7 	bl	8001048 <xQueueSemaphoreTake>

		// Descendre off
		FACTORY_IO_Actuators_Set(A7_OFF, A7_Msk, actuator_write_buffer);
 8004a7a:	002a      	movs	r2, r5
 8004a7c:	0031      	movs	r1, r6
 8004a7e:	2000      	movs	r0, #0
 8004a80:	f000 fb10 	bl	80050a4 <FACTORY_IO_Actuators_Set>
		pm = &actuator_write_buffer;
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004a84:	464b      	mov	r3, r9
 8004a86:	2200      	movs	r2, #0
 8004a88:	a904      	add	r1, sp, #16
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	2300      	movs	r3, #0
		pm = &actuator_write_buffer;
 8004a8e:	9504      	str	r5, [sp, #16]
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004a90:	f7fb fdbc 	bl	800060c <xQueueGenericSend>

		//vTaskDelay(1500/TIMEBASE);

		// Commander la fermeture de la trappe
		xEventGroupSetBits(taskSync, S_FERMETURE_PORTE);
 8004a94:	0031      	movs	r1, r6
 8004a96:	6838      	ldr	r0, [r7, #0]
 8004a98:	f7fb fc82 	bl	80003a0 <xEventGroupSetBits>

		// Indiquer que l'on est pr�t � une nouvelle ouverture de trappe
		xEventGroupSetBits(taskSync, S_OUVERTURE_TRAPPE);
 8004a9c:	2110      	movs	r1, #16
 8004a9e:	6838      	ldr	r0, [r7, #0]
 8004aa0:	f7fb fc7e 	bl	80003a0 <xEventGroupSetBits>
		// Attendre que les 6 cartons soient d�pos�s
		xEventGroupWaitBits(taskSync, S_6_CARTONS_DEPOSES, pdTRUE, pdTRUE, portMAX_DELAY);
 8004aa4:	4653      	mov	r3, sl
 8004aa6:	6838      	ldr	r0, [r7, #0]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	2120      	movs	r1, #32
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f7fb fbbc 	bl	800022c <xEventGroupWaitBits>

		// Descendre to limit
		FACTORY_IO_Actuators_Set(A7_ON | A8_ON, A7_Msk | A8_Msk, actuator_write_buffer);
 8004ab4:	21c0      	movs	r1, #192	; 0xc0
 8004ab6:	0089      	lsls	r1, r1, #2
 8004ab8:	002a      	movs	r2, r5
 8004aba:	0008      	movs	r0, r1
 8004abc:	f000 faf2 	bl	80050a4 <FACTORY_IO_Actuators_Set>
		pm = &actuator_write_buffer;
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004ac0:	464b      	mov	r3, r9
 8004ac2:	a904      	add	r1, sp, #16
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	2300      	movs	r3, #0
		pm = &actuator_write_buffer;
 8004aca:	9504      	str	r5, [sp, #16]
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004acc:	f7fb fd9e 	bl	800060c <xQueueGenericSend>

		// Rez de chauss� atteint
		sub.sensor_mask= S6_Pos;
 8004ad0:	2340      	movs	r3, #64	; 0x40
 8004ad2:	6063      	str	r3, [r4, #4]
		sub.sensor_state=S6_ON;
 8004ad4:	60a3      	str	r3, [r4, #8]
		sub.sem_id=&xSemAscenseur;
 8004ad6:	4643      	mov	r3, r8
 8004ad8:	6023      	str	r3, [r4, #0]
		sub_pm = &sub;
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004ada:	465b      	mov	r3, fp
 8004adc:	2200      	movs	r2, #0
 8004ade:	a903      	add	r1, sp, #12
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	2300      	movs	r3, #0
		sub_pm = &sub;
 8004ae4:	9403      	str	r4, [sp, #12]
		xQueueSendToBack(xSubscribeQueue, &sub_pm, 0);
 8004ae6:	f7fb fd91 	bl	800060c <xQueueGenericSend>
		xSemaphoreTake(xSemAscenseur, portMAX_DELAY);
 8004aea:	4643      	mov	r3, r8
 8004aec:	2101      	movs	r1, #1
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	4249      	negs	r1, r1
 8004af2:	f7fc faa9 	bl	8001048 <xQueueSemaphoreTake>

		// Commander la fermeture de la porte
		xEventGroupSetBits(taskSync, S_FERMETURE_PORTE);
 8004af6:	0031      	movs	r1, r6
 8004af8:	6838      	ldr	r0, [r7, #0]
 8004afa:	f7fb fc51 	bl	80003a0 <xEventGroupSetBits>
		// Commander l'envoi de la palette
		xEventGroupSetBits(taskSync, S_ENVOI_PALETTE);
 8004afe:	2180      	movs	r1, #128	; 0x80
 8004b00:	6838      	ldr	r0, [r7, #0]
 8004b02:	f7fb fc4d 	bl	80003a0 <xEventGroupSetBits>

		// D�sactiver la descente et le to limit
		FACTORY_IO_Actuators_Set(A7_OFF | A8_OFF, A7_Msk | A8_Msk, actuator_write_buffer);
 8004b06:	21c0      	movs	r1, #192	; 0xc0
 8004b08:	002a      	movs	r2, r5
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	0089      	lsls	r1, r1, #2
 8004b0e:	f000 fac9 	bl	80050a4 <FACTORY_IO_Actuators_Set>
		pm = &actuator_write_buffer;
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004b12:	464b      	mov	r3, r9
 8004b14:	2200      	movs	r2, #0
 8004b16:	6818      	ldr	r0, [r3, #0]
 8004b18:	a904      	add	r1, sp, #16
 8004b1a:	2300      	movs	r3, #0
		pm = &actuator_write_buffer;
 8004b1c:	9504      	str	r5, [sp, #16]
		xQueueSendToBack(xPublishQueue, &pm, 0);
 8004b1e:	f7fb fd75 	bl	800060c <xQueueGenericSend>

		vTaskDelay(100/TIMEBASE);
 8004b22:	200a      	movs	r0, #10
 8004b24:	f7fd fa78 	bl	8002018 <vTaskDelay>
	while(1){
 8004b28:	e743      	b.n	80049b2 <vAscenseur+0x26>
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	200038c8 	.word	0x200038c8
 8004b30:	200038d0 	.word	0x200038d0
 8004b34:	200038e8 	.word	0x200038e8
 8004b38:	200038b4 	.word	0x200038b4

08004b3c <vTask_Write>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b3c:	20c2      	movs	r0, #194	; 0xc2
 8004b3e:	2180      	movs	r1, #128	; 0x80
		vTaskDelayUntil (&xLastWakeTime, (100/(portTICK_RATE_MS)));
	}
}

void vTask_Write (void *pvParameters)
{
 8004b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b42:	4645      	mov	r5, r8
 8004b44:	4657      	mov	r7, sl
 8004b46:	464e      	mov	r6, r9
 8004b48:	46de      	mov	lr, fp
 8004b4a:	4a24      	ldr	r2, [pc, #144]	; (8004bdc <vTask_Write+0xa0>)
 8004b4c:	0080      	lsls	r0, r0, #2
 8004b4e:	5813      	ldr	r3, [r2, r0]
 8004b50:	0609      	lsls	r1, r1, #24
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	0a1b      	lsrs	r3, r3, #8
 8004b56:	430b      	orrs	r3, r1
 8004b58:	b5e0      	push	{r5, r6, r7, lr}
 8004b5a:	5013      	str	r3, [r2, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b5c:	2380      	movs	r3, #128	; 0x80
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	4b1f      	ldr	r3, [pc, #124]	; (8004be0 <vTask_Write+0xa4>)
 8004b64:	4d1f      	ldr	r5, [pc, #124]	; (8004be4 <vTask_Write+0xa8>)
 8004b66:	4698      	mov	r8, r3
		for(i=0;i<7;i++){
			tx_dma_buffer[i] = (*message)[i];
		}

		// Set Memory Buffer size
		DMA1_Channel4->CNDTR = 7;
 8004b68:	2307      	movs	r3, #7
 8004b6a:	4699      	mov	r9, r3
 8004b6c:	4f1e      	ldr	r7, [pc, #120]	; (8004be8 <vTask_Write+0xac>)
 8004b6e:	4c1f      	ldr	r4, [pc, #124]	; (8004bec <vTask_Write+0xb0>)
{
 8004b70:	b083      	sub	sp, #12
		xQueueReceive(xPublishQueue, &message, portMAX_DELAY);
 8004b72:	4643      	mov	r3, r8
 8004b74:	2201      	movs	r2, #1
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	4252      	negs	r2, r2
 8004b7a:	a901      	add	r1, sp, #4
 8004b7c:	f7fc f856 	bl	8000c2c <xQueueReceive>
			tx_dma_buffer[i] = (*message)[i];
 8004b80:	9b01      	ldr	r3, [sp, #4]

		// Enable DMA1 Channel 4
		DMA1_Channel4->CCR |= DMA_CCR_EN;

		// Enable USART2 DMA Request on TX
		USART2->CR3 |= USART_CR3_DMAT;
 8004b82:	4e1b      	ldr	r6, [pc, #108]	; (8004bf0 <vTask_Write+0xb4>)
			tx_dma_buffer[i] = (*message)[i];
 8004b84:	785a      	ldrb	r2, [r3, #1]
 8004b86:	7819      	ldrb	r1, [r3, #0]
 8004b88:	0212      	lsls	r2, r2, #8
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	7899      	ldrb	r1, [r3, #2]

		xSemaphoreTake(xSem_DMA_TC,portMAX_DELAY);
 8004b8e:	6838      	ldr	r0, [r7, #0]
			tx_dma_buffer[i] = (*message)[i];
 8004b90:	0409      	lsls	r1, r1, #16
 8004b92:	4311      	orrs	r1, r2
 8004b94:	78da      	ldrb	r2, [r3, #3]
 8004b96:	0612      	lsls	r2, r2, #24
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	602a      	str	r2, [r5, #0]
 8004b9c:	791a      	ldrb	r2, [r3, #4]
		xSemaphoreTake(xSem_DMA_TC,portMAX_DELAY);
 8004b9e:	2101      	movs	r1, #1
			tx_dma_buffer[i] = (*message)[i];
 8004ba0:	712a      	strb	r2, [r5, #4]
 8004ba2:	795a      	ldrb	r2, [r3, #5]
		xSemaphoreTake(xSem_DMA_TC,portMAX_DELAY);
 8004ba4:	4249      	negs	r1, r1
			tx_dma_buffer[i] = (*message)[i];
 8004ba6:	716a      	strb	r2, [r5, #5]
		DMA1_Channel4->CCR |= DMA_CCR_EN;
 8004ba8:	2201      	movs	r2, #1
			tx_dma_buffer[i] = (*message)[i];
 8004baa:	799b      	ldrb	r3, [r3, #6]
		DMA1_Channel4->CCR |= DMA_CCR_EN;
 8004bac:	4693      	mov	fp, r2
			tx_dma_buffer[i] = (*message)[i];
 8004bae:	71ab      	strb	r3, [r5, #6]
		DMA1_Channel4->CNDTR = 7;
 8004bb0:	464b      	mov	r3, r9
 8004bb2:	6063      	str	r3, [r4, #4]
		DMA1_Channel4->CCR |= DMA_CCR_EN;
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	6023      	str	r3, [r4, #0]
		USART2->CR3 |= USART_CR3_DMAT;
 8004bba:	68b3      	ldr	r3, [r6, #8]
 8004bbc:	327f      	adds	r2, #127	; 0x7f
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60b3      	str	r3, [r6, #8]
 8004bc2:	4692      	mov	sl, r2
		xSemaphoreTake(xSem_DMA_TC,portMAX_DELAY);
 8004bc4:	f7fc fa40 	bl	8001048 <xQueueSemaphoreTake>

		// Disable DMA1 Channel 4
		DMA1_Channel4->CCR &= ~DMA_CCR_EN;
 8004bc8:	465a      	mov	r2, fp
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	4393      	bics	r3, r2

		// Disable USART2 DMA Request on TX
		USART2->CR3 &= ~USART_CR3_DMAT;
 8004bce:	4652      	mov	r2, sl
		DMA1_Channel4->CCR &= ~DMA_CCR_EN;
 8004bd0:	6023      	str	r3, [r4, #0]
		USART2->CR3 &= ~USART_CR3_DMAT;
 8004bd2:	68b3      	ldr	r3, [r6, #8]
 8004bd4:	4393      	bics	r3, r2
 8004bd6:	60b3      	str	r3, [r6, #8]
	while(1){
 8004bd8:	e7cb      	b.n	8004b72 <vTask_Write+0x36>
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	e000e100 	.word	0xe000e100
 8004be0:	200038c8 	.word	0x200038c8
 8004be4:	200038b8 	.word	0x200038b8
 8004be8:	200038e0 	.word	0x200038e0
 8004bec:	40020044 	.word	0x40020044
 8004bf0:	40004400 	.word	0x40004400

08004bf4 <vTask_Pub>:
void vTask_Pub (void *pvParameters){
 8004bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
	xSemaphoreTake(xSemArriveeCartons, 0);
 8004bf6:	4b3d      	ldr	r3, [pc, #244]	; (8004cec <vTask_Pub+0xf8>)
void vTask_Pub (void *pvParameters){
 8004bf8:	b093      	sub	sp, #76	; 0x4c
	xSemaphoreTake(xSemArriveeCartons, 0);
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	f7fc fa23 	bl	8001048 <xQueueSemaphoreTake>
	xSemaphoreTake(xSemPoussoir, 0);
 8004c02:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <vTask_Pub+0xfc>)
 8004c04:	2100      	movs	r1, #0
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	f7fc fa1e 	bl	8001048 <xQueueSemaphoreTake>
	xSemaphoreTake(xSemPaletteH, 0);
 8004c0c:	4b39      	ldr	r3, [pc, #228]	; (8004cf4 <vTask_Pub+0x100>)
 8004c0e:	2100      	movs	r1, #0
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	f7fc fa19 	bl	8001048 <xQueueSemaphoreTake>
	xSemaphoreTake(xSemAscenseur, 0);
 8004c16:	4b38      	ldr	r3, [pc, #224]	; (8004cf8 <vTask_Pub+0x104>)
 8004c18:	2100      	movs	r1, #0
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	f7fc fa14 	bl	8001048 <xQueueSemaphoreTake>
	xSemaphoreTake(xSemEtau, 0);
 8004c20:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <vTask_Pub+0x108>)
 8004c22:	2100      	movs	r1, #0
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	f7fc fa0f 	bl	8001048 <xQueueSemaphoreTake>
		Sub_DB[i].sem_id = NULL;
 8004c2a:	2300      	movs	r3, #0
		Sub_DB[i].sensor_mask = 0;
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	2000      	movs	r0, #0
		Sub_DB[i].sem_id = NULL;
 8004c30:	9302      	str	r3, [sp, #8]
		Sub_DB[i].sensor_mask = 0;
 8004c32:	9006      	str	r0, [sp, #24]
 8004c34:	9107      	str	r1, [sp, #28]
 8004c36:	900c      	str	r0, [sp, #48]	; 0x30
 8004c38:	910d      	str	r1, [sp, #52]	; 0x34
 8004c3a:	9303      	str	r3, [sp, #12]
		Sub_DB[i].sensor_state = 0;
 8004c3c:	9304      	str	r3, [sp, #16]
		Sub_DB[i].sem_id = NULL;
 8004c3e:	9305      	str	r3, [sp, #20]
 8004c40:	9308      	str	r3, [sp, #32]
		Sub_DB[i].sensor_mask = 0;
 8004c42:	9309      	str	r3, [sp, #36]	; 0x24
		Sub_DB[i].sensor_state = 0;
 8004c44:	930a      	str	r3, [sp, #40]	; 0x28
		Sub_DB[i].sem_id = NULL;
 8004c46:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c48:	930e      	str	r3, [sp, #56]	; 0x38
		Sub_DB[i].sensor_mask = 0;
 8004c4a:	930f      	str	r3, [sp, #60]	; 0x3c
		Sub_DB[i].sensor_state = 0;
 8004c4c:	9310      	str	r3, [sp, #64]	; 0x40
	xLastWakeTime = xTaskGetTickCount();
 8004c4e:	f7fc ffe7 	bl	8001c20 <xTaskGetTickCount>
		xStatus = xQueueReceive(xSubscribeQueue, &message, 0);
 8004c52:	4f2b      	ldr	r7, [pc, #172]	; (8004d00 <vTask_Pub+0x10c>)
	xLastWakeTime = xTaskGetTickCount();
 8004c54:	9001      	str	r0, [sp, #4]
		xStatus = xQueueReceive(xSubscribeQueue, &message, 0);
 8004c56:	2200      	movs	r2, #0
 8004c58:	4669      	mov	r1, sp
 8004c5a:	6838      	ldr	r0, [r7, #0]
 8004c5c:	ae11      	add	r6, sp, #68	; 0x44
 8004c5e:	f7fb ffe5 	bl	8000c2c <xQueueReceive>
		if(xStatus == pdPASS){
 8004c62:	2801      	cmp	r0, #1
 8004c64:	d017      	beq.n	8004c96 <vTask_Pub+0xa2>
 8004c66:	ac02      	add	r4, sp, #8
			if(Sub_DB[i].sem_id != NULL){
 8004c68:	6825      	ldr	r5, [r4, #0]
 8004c6a:	2d00      	cmp	r5, #0
 8004c6c:	d005      	beq.n	8004c7a <vTask_Pub+0x86>
				if(FACTORY_IO_Sensors_Check(Sub_DB[i].sensor_mask, Sub_DB[i].sensor_state)){
 8004c6e:	68a1      	ldr	r1, [r4, #8]
 8004c70:	6860      	ldr	r0, [r4, #4]
 8004c72:	f000 fa2d 	bl	80050d0 <FACTORY_IO_Sensors_Check>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	d127      	bne.n	8004cca <vTask_Pub+0xd6>
		for(int i=0;i<SUB_SIZE;i++){
 8004c7a:	340c      	adds	r4, #12
 8004c7c:	42a6      	cmp	r6, r4
 8004c7e:	d1f3      	bne.n	8004c68 <vTask_Pub+0x74>
		vTaskDelayUntil (&xLastWakeTime, (100/(portTICK_RATE_MS)));
 8004c80:	210a      	movs	r1, #10
 8004c82:	a801      	add	r0, sp, #4
 8004c84:	f7fd f95c 	bl	8001f40 <vTaskDelayUntil>
		xStatus = xQueueReceive(xSubscribeQueue, &message, 0);
 8004c88:	2200      	movs	r2, #0
 8004c8a:	4669      	mov	r1, sp
 8004c8c:	6838      	ldr	r0, [r7, #0]
 8004c8e:	f7fb ffcd 	bl	8000c2c <xQueueReceive>
		if(xStatus == pdPASS){
 8004c92:	2801      	cmp	r0, #1
 8004c94:	d1e7      	bne.n	8004c66 <vTask_Pub+0x72>
				if(Sub_DB[counter].sem_id == NULL){
 8004c96:	9b02      	ldr	r3, [sp, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d021      	beq.n	8004ce0 <vTask_Pub+0xec>
 8004c9c:	9b05      	ldr	r3, [sp, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <vTask_Pub+0xc2>
 8004ca2:	9b08      	ldr	r3, [sp, #32]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01f      	beq.n	8004ce8 <vTask_Pub+0xf4>
 8004ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d01a      	beq.n	8004ce4 <vTask_Pub+0xf0>
 8004cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cb0:	3003      	adds	r0, #3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1d7      	bne.n	8004c66 <vTask_Pub+0x72>
					Sub_DB[counter] = *message;
 8004cb6:	a902      	add	r1, sp, #8
 8004cb8:	468c      	mov	ip, r1
 8004cba:	0043      	lsls	r3, r0, #1
 8004cbc:	181b      	adds	r3, r3, r0
 8004cbe:	9a00      	ldr	r2, [sp, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4463      	add	r3, ip
 8004cc4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004cc6:	c313      	stmia	r3!, {r0, r1, r4}
					break;
 8004cc8:	e7cd      	b.n	8004c66 <vTask_Pub+0x72>
				xSemaphoreGive(*Sub_DB[i].sem_id);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2100      	movs	r1, #0
 8004cd0:	6828      	ldr	r0, [r5, #0]
 8004cd2:	f7fb fc9b 	bl	800060c <xQueueGenericSend>
				Sub_DB[i].sem_id = NULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	6023      	str	r3, [r4, #0]
				Sub_DB[i].sensor_mask = 0;
 8004cda:	6063      	str	r3, [r4, #4]
				Sub_DB[i].sensor_state = 0;
 8004cdc:	60a3      	str	r3, [r4, #8]
 8004cde:	e7cc      	b.n	8004c7a <vTask_Pub+0x86>
				if(Sub_DB[counter].sem_id == NULL){
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	e7e8      	b.n	8004cb6 <vTask_Pub+0xc2>
 8004ce4:	2003      	movs	r0, #3
 8004ce6:	e7e6      	b.n	8004cb6 <vTask_Pub+0xc2>
 8004ce8:	2002      	movs	r0, #2
 8004cea:	e7e4      	b.n	8004cb6 <vTask_Pub+0xc2>
 8004cec:	200038cc 	.word	0x200038cc
 8004cf0:	200038dc 	.word	0x200038dc
 8004cf4:	200038d8 	.word	0x200038d8
 8004cf8:	200038d0 	.word	0x200038d0
 8004cfc:	200038d4 	.word	0x200038d4
 8004d00:	200038e8 	.word	0x200038e8

08004d04 <main>:
{
 8004d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d06:	46de      	mov	lr, fp
 8004d08:	4657      	mov	r7, sl
 8004d0a:	464e      	mov	r6, r9
 8004d0c:	4645      	mov	r5, r8
 	RCC->CFGR |= RCC_CFGR_HPRE_DIV8;
 8004d0e:	21a0      	movs	r1, #160	; 0xa0
{
 8004d10:	b5e0      	push	{r5, r6, r7, lr}
 	RCC->CFGR |= RCC_CFGR_HPRE_DIV8;
 8004d12:	4a68      	ldr	r2, [pc, #416]	; (8004eb4 <main+0x1b0>)
{
 8004d14:	b089      	sub	sp, #36	; 0x24
 	RCC->CFGR |= RCC_CFGR_HPRE_DIV8;
 8004d16:	6853      	ldr	r3, [r2, #4]
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	6053      	str	r3, [r2, #4]
	BSP_DELAY_TIM_init();
 8004d1c:	f000 f9ac 	bl	8005078 <BSP_DELAY_TIM_init>
	BSP_Console_Init();
 8004d20:	f000 f934 	bl	8004f8c <BSP_Console_Init>
	vTraceEnable(TRC_START);
 8004d24:	2001      	movs	r0, #1
 8004d26:	f7fe fb35 	bl	8003394 <vTraceEnable>
	xSubscribeQueue = xQueueCreate(10, sizeof(subscribe_message_t *));
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2104      	movs	r1, #4
 8004d2e:	200a      	movs	r0, #10
 8004d30:	f7fb fbca 	bl	80004c8 <xQueueGenericCreate>
 8004d34:	4b60      	ldr	r3, [pc, #384]	; (8004eb8 <main+0x1b4>)
	xPublishQueue = xQueueCreate(10, sizeof(command_message_t *));
 8004d36:	2200      	movs	r2, #0
	xSubscribeQueue = xQueueCreate(10, sizeof(subscribe_message_t *));
 8004d38:	6018      	str	r0, [r3, #0]
	xPublishQueue = xQueueCreate(10, sizeof(command_message_t *));
 8004d3a:	2104      	movs	r1, #4
 8004d3c:	200a      	movs	r0, #10
	xSubscribeQueue = xQueueCreate(10, sizeof(subscribe_message_t *));
 8004d3e:	469b      	mov	fp, r3
	xPublishQueue = xQueueCreate(10, sizeof(command_message_t *));
 8004d40:	f7fb fbc2 	bl	80004c8 <xQueueGenericCreate>
 8004d44:	4c5d      	ldr	r4, [pc, #372]	; (8004ebc <main+0x1b8>)
	xSemArriveeCartons = xSemaphoreCreateBinary();
 8004d46:	2203      	movs	r2, #3
	xPublishQueue = xQueueCreate(10, sizeof(command_message_t *));
 8004d48:	6020      	str	r0, [r4, #0]
	xSemArriveeCartons = xSemaphoreCreateBinary();
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	2001      	movs	r0, #1
 8004d4e:	f7fb fbbb 	bl	80004c8 <xQueueGenericCreate>
 8004d52:	4b5b      	ldr	r3, [pc, #364]	; (8004ec0 <main+0x1bc>)
	xSemPoussoir = xSemaphoreCreateBinary();
 8004d54:	2203      	movs	r2, #3
	xSemArriveeCartons = xSemaphoreCreateBinary();
 8004d56:	6018      	str	r0, [r3, #0]
	xSemPoussoir = xSemaphoreCreateBinary();
 8004d58:	2100      	movs	r1, #0
 8004d5a:	2001      	movs	r0, #1
	xSemArriveeCartons = xSemaphoreCreateBinary();
 8004d5c:	4699      	mov	r9, r3
	xSemPoussoir = xSemaphoreCreateBinary();
 8004d5e:	f7fb fbb3 	bl	80004c8 <xQueueGenericCreate>
 8004d62:	4b58      	ldr	r3, [pc, #352]	; (8004ec4 <main+0x1c0>)
	xSemPaletteH = xSemaphoreCreateBinary();
 8004d64:	2203      	movs	r2, #3
	xSemPoussoir = xSemaphoreCreateBinary();
 8004d66:	6018      	str	r0, [r3, #0]
	xSemPaletteH = xSemaphoreCreateBinary();
 8004d68:	2100      	movs	r1, #0
 8004d6a:	2001      	movs	r0, #1
	xSemPoussoir = xSemaphoreCreateBinary();
 8004d6c:	4698      	mov	r8, r3
	xSemPaletteH = xSemaphoreCreateBinary();
 8004d6e:	f7fb fbab 	bl	80004c8 <xQueueGenericCreate>
 8004d72:	4f55      	ldr	r7, [pc, #340]	; (8004ec8 <main+0x1c4>)
	xSemAscenseur = xSemaphoreCreateBinary();
 8004d74:	2203      	movs	r2, #3
 8004d76:	2100      	movs	r1, #0
	xSemPaletteH = xSemaphoreCreateBinary();
 8004d78:	6038      	str	r0, [r7, #0]
	xSemAscenseur = xSemaphoreCreateBinary();
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	f7fb fba4 	bl	80004c8 <xQueueGenericCreate>
 8004d80:	4e52      	ldr	r6, [pc, #328]	; (8004ecc <main+0x1c8>)
	xSemEtau = xSemaphoreCreateBinary();
 8004d82:	2203      	movs	r2, #3
 8004d84:	2100      	movs	r1, #0
	xSemAscenseur = xSemaphoreCreateBinary();
 8004d86:	6030      	str	r0, [r6, #0]
	xSemEtau = xSemaphoreCreateBinary();
 8004d88:	2001      	movs	r0, #1
 8004d8a:	f7fb fb9d 	bl	80004c8 <xQueueGenericCreate>
 8004d8e:	4d50      	ldr	r5, [pc, #320]	; (8004ed0 <main+0x1cc>)
 8004d90:	6028      	str	r0, [r5, #0]
	xStockPoussoir = xSemaphoreCreateMutex();
 8004d92:	2001      	movs	r0, #1
 8004d94:	f7fb fe3e 	bl	8000a14 <xQueueCreateMutex>
 8004d98:	4b4e      	ldr	r3, [pc, #312]	; (8004ed4 <main+0x1d0>)
	xSem_DMA_TC = xSemaphoreCreateBinary();
 8004d9a:	2203      	movs	r2, #3
 8004d9c:	2100      	movs	r1, #0
	xStockPoussoir = xSemaphoreCreateMutex();
 8004d9e:	6018      	str	r0, [r3, #0]
	xSem_DMA_TC = xSemaphoreCreateBinary();
 8004da0:	2001      	movs	r0, #1
	xStockPoussoir = xSemaphoreCreateMutex();
 8004da2:	469a      	mov	sl, r3
	xSem_DMA_TC = xSemaphoreCreateBinary();
 8004da4:	f7fb fb90 	bl	80004c8 <xQueueGenericCreate>
 8004da8:	4b4b      	ldr	r3, [pc, #300]	; (8004ed8 <main+0x1d4>)
 8004daa:	9302      	str	r3, [sp, #8]
 8004dac:	6018      	str	r0, [r3, #0]
	taskSync = xEventGroupCreate();
 8004dae:	f7fb fa09 	bl	80001c4 <xEventGroupCreate>
 8004db2:	4a4a      	ldr	r2, [pc, #296]	; (8004edc <main+0x1d8>)
	vTraceSetQueueName(xSubscribeQueue, "Subscribe Queue");
 8004db4:	494a      	ldr	r1, [pc, #296]	; (8004ee0 <main+0x1dc>)
	taskSync = xEventGroupCreate();
 8004db6:	6010      	str	r0, [r2, #0]
	vTraceSetQueueName(xSubscribeQueue, "Subscribe Queue");
 8004db8:	4658      	mov	r0, fp
 8004dba:	6800      	ldr	r0, [r0, #0]
	taskSync = xEventGroupCreate();
 8004dbc:	9203      	str	r2, [sp, #12]
	vTraceSetQueueName(xSubscribeQueue, "Subscribe Queue");
 8004dbe:	f7fe fb55 	bl	800346c <vTraceSetQueueName>
	vTraceSetQueueName(xPublishQueue, "Publish Queue");
 8004dc2:	6820      	ldr	r0, [r4, #0]
 8004dc4:	4947      	ldr	r1, [pc, #284]	; (8004ee4 <main+0x1e0>)
 8004dc6:	f7fe fb51 	bl	800346c <vTraceSetQueueName>
	vTraceSetMutexName(xStockPoussoir, "Mutex Stock poussoir");
 8004dca:	4650      	mov	r0, sl
 8004dcc:	4946      	ldr	r1, [pc, #280]	; (8004ee8 <main+0x1e4>)
 8004dce:	6800      	ldr	r0, [r0, #0]
 8004dd0:	f7fe fb54 	bl	800347c <vTraceSetMutexName>
	vTraceSetSemaphoreName(xSemArriveeCartons, "xSemArriveeCartons");
 8004dd4:	4648      	mov	r0, r9
 8004dd6:	4945      	ldr	r1, [pc, #276]	; (8004eec <main+0x1e8>)
 8004dd8:	6800      	ldr	r0, [r0, #0]
 8004dda:	f7fe fb4b 	bl	8003474 <vTraceSetSemaphoreName>
	vTraceSetSemaphoreName(xSemPoussoir, "xSemPoussoir");
 8004dde:	4640      	mov	r0, r8
 8004de0:	4943      	ldr	r1, [pc, #268]	; (8004ef0 <main+0x1ec>)
 8004de2:	6800      	ldr	r0, [r0, #0]
 8004de4:	f7fe fb46 	bl	8003474 <vTraceSetSemaphoreName>
	vTraceSetSemaphoreName(xSemPaletteH, "xSemPaletteH");
 8004de8:	4942      	ldr	r1, [pc, #264]	; (8004ef4 <main+0x1f0>)
 8004dea:	6838      	ldr	r0, [r7, #0]
 8004dec:	f7fe fb42 	bl	8003474 <vTraceSetSemaphoreName>
	vTraceSetSemaphoreName(xSemAscenseur, "xSemAscenseur");
 8004df0:	4941      	ldr	r1, [pc, #260]	; (8004ef8 <main+0x1f4>)
 8004df2:	6830      	ldr	r0, [r6, #0]
 8004df4:	f7fe fb3e 	bl	8003474 <vTraceSetSemaphoreName>
	vTraceSetSemaphoreName(xSemEtau, "xSemEtau");
 8004df8:	6828      	ldr	r0, [r5, #0]
 8004dfa:	4940      	ldr	r1, [pc, #256]	; (8004efc <main+0x1f8>)
 8004dfc:	f7fe fb3a 	bl	8003474 <vTraceSetSemaphoreName>
	vTraceSetSemaphoreName(xSem_DMA_TC, "xSEM_DMA_TC");
 8004e00:	9b02      	ldr	r3, [sp, #8]
 8004e02:	493f      	ldr	r1, [pc, #252]	; (8004f00 <main+0x1fc>)
 8004e04:	6818      	ldr	r0, [r3, #0]
	FACTORY_IO_Actuators_Set(A1_ON | A2_ON | A11_ON | A12_OFF | A14_ON | A18_ON | A19_ON,
 8004e06:	ad06      	add	r5, sp, #24
	vTraceSetSemaphoreName(xSem_DMA_TC, "xSEM_DMA_TC");
 8004e08:	f7fe fb34 	bl	8003474 <vTraceSetSemaphoreName>
	FACTORY_IO_Actuators_Set(A1_ON | A2_ON | A11_ON | A12_OFF | A14_ON | A18_ON | A19_ON,
 8004e0c:	002a      	movs	r2, r5
 8004e0e:	493d      	ldr	r1, [pc, #244]	; (8004f04 <main+0x200>)
 8004e10:	483d      	ldr	r0, [pc, #244]	; (8004f08 <main+0x204>)
 8004e12:	f000 f947 	bl	80050a4 <FACTORY_IO_Actuators_Set>
	xQueueSendToBack(xPublishQueue, &pm, 0);
 8004e16:	2300      	movs	r3, #0
 8004e18:	2200      	movs	r2, #0
 8004e1a:	6820      	ldr	r0, [r4, #0]
 8004e1c:	a905      	add	r1, sp, #20
	pm = &actuator_write_buffer;
 8004e1e:	9505      	str	r5, [sp, #20]
	xQueueSendToBack(xPublishQueue, &pm, 0);
 8004e20:	f7fb fbf4 	bl	800060c <xQueueGenericSend>
	xEventGroupSetBits(taskSync, S_CARTONS_POUSSES);
 8004e24:	9a03      	ldr	r2, [sp, #12]
 8004e26:	2108      	movs	r1, #8
 8004e28:	6810      	ldr	r0, [r2, #0]
 8004e2a:	f7fb fab9 	bl	80003a0 <xEventGroupSetBits>
	xTaskCreate(vArriveeCartons, "ArriveeCartons", 128, NULL, 5, NULL);
 8004e2e:	2400      	movs	r4, #0
 8004e30:	2305      	movs	r3, #5
 8004e32:	2280      	movs	r2, #128	; 0x80
 8004e34:	4935      	ldr	r1, [pc, #212]	; (8004f0c <main+0x208>)
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	4835      	ldr	r0, [pc, #212]	; (8004f10 <main+0x20c>)
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	9401      	str	r4, [sp, #4]
 8004e3e:	f7fc fc5f 	bl	8001700 <xTaskCreate>
	xTaskCreate(vPoussoir, "Poussoir", 128, NULL, 4, NULL);
 8004e42:	2304      	movs	r3, #4
 8004e44:	2280      	movs	r2, #128	; 0x80
 8004e46:	4933      	ldr	r1, [pc, #204]	; (8004f14 <main+0x210>)
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	4833      	ldr	r0, [pc, #204]	; (8004f18 <main+0x214>)
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	9401      	str	r4, [sp, #4]
 8004e50:	f7fc fc56 	bl	8001700 <xTaskCreate>
	xTaskCreate(vPaletteHorizontal, "PaletteHorizontal", 128, NULL, 1, NULL);
 8004e54:	2301      	movs	r3, #1
 8004e56:	2280      	movs	r2, #128	; 0x80
 8004e58:	4930      	ldr	r1, [pc, #192]	; (8004f1c <main+0x218>)
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	4830      	ldr	r0, [pc, #192]	; (8004f20 <main+0x21c>)
 8004e5e:	2300      	movs	r3, #0
 8004e60:	9401      	str	r4, [sp, #4]
 8004e62:	f7fc fc4d 	bl	8001700 <xTaskCreate>
	xTaskCreate(vTask_Pub, "Task_Pub", 128, NULL, 7, NULL);
 8004e66:	2307      	movs	r3, #7
 8004e68:	2280      	movs	r2, #128	; 0x80
 8004e6a:	492e      	ldr	r1, [pc, #184]	; (8004f24 <main+0x220>)
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	482e      	ldr	r0, [pc, #184]	; (8004f28 <main+0x224>)
 8004e70:	2300      	movs	r3, #0
 8004e72:	9401      	str	r4, [sp, #4]
 8004e74:	f7fc fc44 	bl	8001700 <xTaskCreate>
	xTaskCreate(vTask_Write, "Task_Write", 128, NULL, 6, NULL);
 8004e78:	2306      	movs	r3, #6
 8004e7a:	2280      	movs	r2, #128	; 0x80
 8004e7c:	492b      	ldr	r1, [pc, #172]	; (8004f2c <main+0x228>)
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	482b      	ldr	r0, [pc, #172]	; (8004f30 <main+0x22c>)
 8004e82:	2300      	movs	r3, #0
 8004e84:	9401      	str	r4, [sp, #4]
 8004e86:	f7fc fc3b 	bl	8001700 <xTaskCreate>
	xTaskCreate(vAscenseur, "Ascenseur", 128, NULL, 2, NULL);
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	2280      	movs	r2, #128	; 0x80
 8004e8e:	4929      	ldr	r1, [pc, #164]	; (8004f34 <main+0x230>)
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	4829      	ldr	r0, [pc, #164]	; (8004f38 <main+0x234>)
 8004e94:	2300      	movs	r3, #0
 8004e96:	9401      	str	r4, [sp, #4]
 8004e98:	f7fc fc32 	bl	8001700 <xTaskCreate>
	xTaskCreate(vEtau, "Etau", 128, NULL, 3, NULL);
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	2280      	movs	r2, #128	; 0x80
 8004ea0:	4926      	ldr	r1, [pc, #152]	; (8004f3c <main+0x238>)
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	4826      	ldr	r0, [pc, #152]	; (8004f40 <main+0x23c>)
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	9401      	str	r4, [sp, #4]
 8004eaa:	f7fc fc29 	bl	8001700 <xTaskCreate>
	vTaskStartScheduler();
 8004eae:	f7fc fd75 	bl	800199c <vTaskStartScheduler>
	while(1)
 8004eb2:	e7fe      	b.n	8004eb2 <main+0x1ae>
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	200038e8 	.word	0x200038e8
 8004ebc:	200038c8 	.word	0x200038c8
 8004ec0:	200038cc 	.word	0x200038cc
 8004ec4:	200038dc 	.word	0x200038dc
 8004ec8:	200038d8 	.word	0x200038d8
 8004ecc:	200038d0 	.word	0x200038d0
 8004ed0:	200038d4 	.word	0x200038d4
 8004ed4:	200038e4 	.word	0x200038e4
 8004ed8:	200038e0 	.word	0x200038e0
 8004edc:	200038b4 	.word	0x200038b4
 8004ee0:	0800555c 	.word	0x0800555c
 8004ee4:	0800556c 	.word	0x0800556c
 8004ee8:	0800557c 	.word	0x0800557c
 8004eec:	08005594 	.word	0x08005594
 8004ef0:	080055a8 	.word	0x080055a8
 8004ef4:	080055b8 	.word	0x080055b8
 8004ef8:	080055c8 	.word	0x080055c8
 8004efc:	080055d8 	.word	0x080055d8
 8004f00:	080055e4 	.word	0x080055e4
 8004f04:	00313006 	.word	0x00313006
 8004f08:	00311006 	.word	0x00311006
 8004f0c:	08005598 	.word	0x08005598
 8004f10:	0800439d 	.word	0x0800439d
 8004f14:	080055ac 	.word	0x080055ac
 8004f18:	080045a1 	.word	0x080045a1
 8004f1c:	080055f0 	.word	0x080055f0
 8004f20:	080046dd 	.word	0x080046dd
 8004f24:	08005604 	.word	0x08005604
 8004f28:	08004bf5 	.word	0x08004bf5
 8004f2c:	08005610 	.word	0x08005610
 8004f30:	08004b3d 	.word	0x08004b3d
 8004f34:	080055cc 	.word	0x080055cc
 8004f38:	0800498d 	.word	0x0800498d
 8004f3c:	080055dc 	.word	0x080055dc
 8004f40:	08004805 	.word	0x08004805

08004f44 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8004f44:	4770      	bx	lr
 8004f46:	46c0      	nop			; (mov r8, r8)

08004f48 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004f48:	e7fe      	b.n	8004f48 <HardFault_Handler>
 8004f4a:	46c0      	nop			; (mov r8, r8)

08004f4c <DMA1_Channel4_5_6_7_IRQHandler>:
 * This function handles DMA2 interrupt request.
 */
extern xSemaphoreHandle xSem_DMA_TC;

void DMA1_Channel4_5_6_7_IRQHandler(){
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8004f4c:	2300      	movs	r3, #0

	if((DMA1->ISR & DMA_ISR_TCIF4_Msk) != 0){
 8004f4e:	2280      	movs	r2, #128	; 0x80
void DMA1_Channel4_5_6_7_IRQHandler(){
 8004f50:	b500      	push	{lr}
 8004f52:	b083      	sub	sp, #12
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8004f54:	9301      	str	r3, [sp, #4]
	if((DMA1->ISR & DMA_ISR_TCIF4_Msk) != 0){
 8004f56:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <DMA1_Channel4_5_6_7_IRQHandler+0x34>)
 8004f58:	0192      	lsls	r2, r2, #6
 8004f5a:	6819      	ldr	r1, [r3, #0]
 8004f5c:	4211      	tst	r1, r2
 8004f5e:	d101      	bne.n	8004f64 <DMA1_Channel4_5_6_7_IRQHandler+0x18>
		xSemaphoreGiveFromISR(xSem_DMA_TC, &xHigherPriorityTaskWoken);

		// Perform a context switch to the waiting task
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
	}
}
 8004f60:	b003      	add	sp, #12
 8004f62:	bd00      	pop	{pc}
		DMA1->IFCR = DMA_IFCR_CTCIF4;
 8004f64:	605a      	str	r2, [r3, #4]
		xSemaphoreGiveFromISR(xSem_DMA_TC, &xHigherPriorityTaskWoken);
 8004f66:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <DMA1_Channel4_5_6_7_IRQHandler+0x38>)
 8004f68:	a901      	add	r1, sp, #4
 8004f6a:	6818      	ldr	r0, [r3, #0]
 8004f6c:	f7fb fde4 	bl	8000b38 <xQueueGiveFromISR>
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8004f70:	9b01      	ldr	r3, [sp, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f4      	beq.n	8004f60 <DMA1_Channel4_5_6_7_IRQHandler+0x14>
 8004f76:	2280      	movs	r2, #128	; 0x80
 8004f78:	4b03      	ldr	r3, [pc, #12]	; (8004f88 <DMA1_Channel4_5_6_7_IRQHandler+0x3c>)
 8004f7a:	0552      	lsls	r2, r2, #21
 8004f7c:	601a      	str	r2, [r3, #0]
}
 8004f7e:	e7ef      	b.n	8004f60 <DMA1_Channel4_5_6_7_IRQHandler+0x14>
 8004f80:	40020000 	.word	0x40020000
 8004f84:	200038e0 	.word	0x200038e0
 8004f88:	e000ed04 	.word	0xe000ed04

08004f8c <BSP_Console_Init>:
 */

void BSP_Console_Init()
{
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8004f8c:	2280      	movs	r2, #128	; 0x80
 8004f8e:	4931      	ldr	r1, [pc, #196]	; (8005054 <BSP_Console_Init+0xc8>)
 8004f90:	0292      	lsls	r2, r2, #10
 8004f92:	694b      	ldr	r3, [r1, #20]
{
 8004f94:	b570      	push	{r4, r5, r6, lr}
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8004f96:	4313      	orrs	r3, r2
 8004f98:	614b      	str	r3, [r1, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 8004f9a:	2390      	movs	r3, #144	; 0x90
 8004f9c:	24f0      	movs	r4, #240	; 0xf0
 8004f9e:	05db      	lsls	r3, r3, #23
 8004fa0:	6818      	ldr	r0, [r3, #0]

	// Reset DMA1 Channel 4 configuration
	DMA1_Channel4->CCR = 0x00000000;

	// Set direction Memory -> Peripheral
	DMA1_Channel4->CCR = DMA_CCR_DIR;
 8004fa2:	2610      	movs	r6, #16
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 8004fa4:	43a0      	bics	r0, r4
 8004fa6:	6018      	str	r0, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	3c50      	subs	r4, #80	; 0x50
 8004fac:	4320      	orrs	r0, r4
 8004fae:	6018      	str	r0, [r3, #0]
	GPIOA->AFR[0] &= ~(0x0000FF00);
 8004fb0:	6a18      	ldr	r0, [r3, #32]
 8004fb2:	4c29      	ldr	r4, [pc, #164]	; (8005058 <BSP_Console_Init+0xcc>)

	// Peripheral data size is 8-bit (byte)
	DMA1_Channel4->CCR |= (0x00 <<DMA_CCR_PSIZE_Pos);

	// Enable Transfer complete interrupt enable
	DMA1_Channel4->CCR |= DMA_CCR_TCIE;
 8004fb4:	2502      	movs	r5, #2
	GPIOA->AFR[0] &= ~(0x0000FF00);
 8004fb6:	4020      	ands	r0, r4
 8004fb8:	6218      	str	r0, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 8004fba:	2088      	movs	r0, #136	; 0x88
 8004fbc:	6a1c      	ldr	r4, [r3, #32]
 8004fbe:	0140      	lsls	r0, r0, #5
 8004fc0:	4320      	orrs	r0, r4
 8004fc2:	6218      	str	r0, [r3, #32]
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8004fc4:	69cb      	ldr	r3, [r1, #28]
	USART2->CR1 = 0x00000000;
 8004fc6:	2000      	movs	r0, #0
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8004fc8:	431a      	orrs	r2, r3
	USART2->BRR = 17; // For 1MHz
 8004fca:	2311      	movs	r3, #17
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8004fcc:	240c      	movs	r4, #12
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8004fce:	61ca      	str	r2, [r1, #28]
	USART2->CR1 = 0x00000000;
 8004fd0:	4a22      	ldr	r2, [pc, #136]	; (800505c <BSP_Console_Init+0xd0>)
 8004fd2:	6010      	str	r0, [r2, #0]
	USART2->CR2 = 0x00000000;
 8004fd4:	6050      	str	r0, [r2, #4]
	USART2->CR3 = 0x00000000;
 8004fd6:	6090      	str	r0, [r2, #8]
	USART2->BRR = 17; // For 1MHz
 8004fd8:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8004fda:	6813      	ldr	r3, [r2, #0]
 8004fdc:	4323      	orrs	r3, r4
 8004fde:	6013      	str	r3, [r2, #0]
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8004fe0:	694b      	ldr	r3, [r1, #20]
 8004fe2:	3c0b      	subs	r4, #11
 8004fe4:	4323      	orrs	r3, r4
 8004fe6:	614b      	str	r3, [r1, #20]
	DMA1_Channel4->CCR = 0x00000000;
 8004fe8:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <BSP_Console_Init+0xd4>)
	DMA1_Channel4->CPAR = (uint32_t)&USART2->TDR;
 8004fea:	491e      	ldr	r1, [pc, #120]	; (8005064 <BSP_Console_Init+0xd8>)
	DMA1_Channel4->CCR = 0x00000000;
 8004fec:	6018      	str	r0, [r3, #0]
	DMA1_Channel4->CCR = DMA_CCR_DIR;
 8004fee:	601e      	str	r6, [r3, #0]
	DMA1_Channel4->CPAR = (uint32_t)&USART2->TDR;
 8004ff0:	6099      	str	r1, [r3, #8]
	DMA1_Channel4->CCR |= (0x00 <<DMA_CCR_PSIZE_Pos);
 8004ff2:	6819      	ldr	r1, [r3, #0]
 8004ff4:	6019      	str	r1, [r3, #0]
	DMA1_Channel4->CCR |= DMA_CCR_TCIE;
 8004ff6:	6819      	ldr	r1, [r3, #0]
 8004ff8:	4329      	orrs	r1, r5
 8004ffa:	6019      	str	r1, [r3, #0]

	// Memory is tx_dma_buffer
	DMA1_Channel4->CMAR = (uint32_t)tx_dma_buffer;
 8004ffc:	491a      	ldr	r1, [pc, #104]	; (8005068 <BSP_Console_Init+0xdc>)

	// Memory data size is 8-bit (byte)
	DMA1_Channel4->CCR |= (0x00 <<DMA_CCR_MSIZE_Pos);

	// Enable auto-increment Memory address
	DMA1_Channel4->CCR |= DMA_CCR_MINC;
 8004ffe:	357e      	adds	r5, #126	; 0x7e
	DMA1_Channel4->CMAR = (uint32_t)tx_dma_buffer;
 8005000:	60d9      	str	r1, [r3, #12]
	DMA1_Channel4->CCR |= (0x00 <<DMA_CCR_MSIZE_Pos);
 8005002:	6819      	ldr	r1, [r3, #0]
 8005004:	6019      	str	r1, [r3, #0]
	DMA1_Channel4->CCR |= DMA_CCR_MINC;
 8005006:	6819      	ldr	r1, [r3, #0]
 8005008:	4329      	orrs	r1, r5
 800500a:	6019      	str	r1, [r3, #0]

	// Setup RX on DMA Channel 5 //

	// Reset DMA1 Channel 5 configuration
	DMA1_Channel5->CCR = 0x00000000;
 800500c:	4b17      	ldr	r3, [pc, #92]	; (800506c <BSP_Console_Init+0xe0>)
 800500e:	6018      	str	r0, [r3, #0]

	// Set direction Peripheral -> Memory
	DMA1_Channel5->CCR &= ~DMA_CCR_DIR;
 8005010:	6819      	ldr	r1, [r3, #0]

	// Peripheral data size is 8-bit (byte)
	DMA1_Channel5->CCR |= (0x00 <<DMA_CCR_PSIZE_Pos);

	// Disable auto-increment Peripheral address
	DMA1_Channel5->CCR &= ~DMA_CCR_PINC;
 8005012:	3040      	adds	r0, #64	; 0x40
	DMA1_Channel5->CCR &= ~DMA_CCR_DIR;
 8005014:	43b1      	bics	r1, r6
 8005016:	6019      	str	r1, [r3, #0]
	DMA1_Channel5->CPAR = (uint32_t)&USART2->RDR;
 8005018:	4915      	ldr	r1, [pc, #84]	; (8005070 <BSP_Console_Init+0xe4>)
 800501a:	6099      	str	r1, [r3, #8]
	DMA1_Channel5->CCR |= (0x00 <<DMA_CCR_PSIZE_Pos);
 800501c:	6819      	ldr	r1, [r3, #0]
 800501e:	6019      	str	r1, [r3, #0]
	DMA1_Channel5->CCR &= ~DMA_CCR_PINC;
 8005020:	6819      	ldr	r1, [r3, #0]
 8005022:	4381      	bics	r1, r0
 8005024:	6019      	str	r1, [r3, #0]

	// Memory is rx_dma_buffer
	DMA1_Channel5->CMAR = (uint32_t)rx_dma_buffer;
 8005026:	4913      	ldr	r1, [pc, #76]	; (8005074 <BSP_Console_Init+0xe8>)
 8005028:	60d9      	str	r1, [r3, #12]

	// Memory data size is 8-bit (byte)
	DMA1_Channel5->CCR |= (0x00 <<DMA_CCR_MSIZE_Pos);
 800502a:	6819      	ldr	r1, [r3, #0]
 800502c:	6019      	str	r1, [r3, #0]

	// Enable auto-increment Memory address
	DMA1_Channel5->CCR |= DMA_CCR_MINC;
 800502e:	6819      	ldr	r1, [r3, #0]
 8005030:	4329      	orrs	r1, r5
 8005032:	6019      	str	r1, [r3, #0]

	// Set Memory Buffer size
	DMA1_Channel5->CNDTR = FRAME_LENGTH;
 8005034:	210e      	movs	r1, #14
 8005036:	6059      	str	r1, [r3, #4]

	// DMA mode is circular
	DMA1_Channel5->CCR |= DMA_CCR_CIRC;
 8005038:	6819      	ldr	r1, [r3, #0]
 800503a:	3d60      	subs	r5, #96	; 0x60
 800503c:	4329      	orrs	r1, r5
 800503e:	6019      	str	r1, [r3, #0]

	// Enable DMA1 Channel 5
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 8005040:	6819      	ldr	r1, [r3, #0]
 8005042:	4321      	orrs	r1, r4
 8005044:	6019      	str	r1, [r3, #0]

	// Enable USART2 DMA Request on RX
	USART2->CR3 |= USART_CR3_DMAR;
 8005046:	6893      	ldr	r3, [r2, #8]
 8005048:	4303      	orrs	r3, r0
 800504a:	6093      	str	r3, [r2, #8]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 800504c:	6813      	ldr	r3, [r2, #0]
 800504e:	4323      	orrs	r3, r4
 8005050:	6013      	str	r3, [r2, #0]
}
 8005052:	bd70      	pop	{r4, r5, r6, pc}
 8005054:	40021000 	.word	0x40021000
 8005058:	ffff00ff 	.word	0xffff00ff
 800505c:	40004400 	.word	0x40004400
 8005060:	40020044 	.word	0x40020044
 8005064:	40004428 	.word	0x40004428
 8005068:	200038b8 	.word	0x200038b8
 800506c:	40020058 	.word	0x40020058
 8005070:	40004424 	.word	0x40004424
 8005074:	200038a4 	.word	0x200038a4

08005078 <BSP_DELAY_TIM_init>:
 */

void BSP_DELAY_TIM_init(void)
{
	// Enable TIM6 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8005078:	2110      	movs	r1, #16
 800507a:	4a06      	ldr	r2, [pc, #24]	; (8005094 <BSP_DELAY_TIM_init+0x1c>)
 800507c:	69d3      	ldr	r3, [r2, #28]
 800507e:	430b      	orrs	r3, r1
 8005080:	61d3      	str	r3, [r2, #28]

	// Reset TIM6 configuration
	TIM6->CR1 = 0x0000;
 8005082:	2200      	movs	r2, #0
 8005084:	4b04      	ldr	r3, [pc, #16]	; (8005098 <BSP_DELAY_TIM_init+0x20>)
 8005086:	601a      	str	r2, [r3, #0]
	TIM6->CR2 = 0x0000;
 8005088:	605a      	str	r2, [r3, #4]

	// Set TIM6 prescaler
	// Fck = 48MHz -> /48000 = 1KHz counting frequency
	TIM6->PSC = (uint16_t) 48000 -1;
 800508a:	4a04      	ldr	r2, [pc, #16]	; (800509c <BSP_DELAY_TIM_init+0x24>)
 800508c:	629a      	str	r2, [r3, #40]	; 0x28

	// Set ARR to maximum value
	TIM6->ARR = (uint16_t) 0xFFFF;
 800508e:	4a04      	ldr	r2, [pc, #16]	; (80050a0 <BSP_DELAY_TIM_init+0x28>)
 8005090:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005092:	4770      	bx	lr
 8005094:	40021000 	.word	0x40021000
 8005098:	40001000 	.word	0x40001000
 800509c:	0000bb7f 	.word	0x0000bb7f
 80050a0:	0000ffff 	.word	0x0000ffff

080050a4 <FACTORY_IO_Actuators_Set>:
/*
 * FACTORY_IO_Actuators_Set
 */

void FACTORY_IO_Actuators_Set(uint32_t cmd, uint32_t msk, uint8_t* buffer)
{
 80050a4:	b510      	push	{r4, lr}
	static uint32_t current_actuators_state;

	current_actuators_state = ((current_actuators_state & ~msk) | cmd);
 80050a6:	4c09      	ldr	r4, [pc, #36]	; (80050cc <FACTORY_IO_Actuators_Set+0x28>)
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	438b      	bics	r3, r1
 80050ac:	4318      	orrs	r0, r3

	// Prepare frame buffer
	buffer[0] = TAG_ACTUATORS; 							// Actuators tag
 80050ae:	23ad      	movs	r3, #173	; 0xad
 80050b0:	7013      	strb	r3, [r2, #0]

	buffer[1] = (uint8_t) (current_actuators_state & 0x000000FF);			// data byte #1
	buffer[2] = (uint8_t)((current_actuators_state & 0x0000FF00) >>8U );	// data byte #2
 80050b2:	0a03      	lsrs	r3, r0, #8
 80050b4:	7093      	strb	r3, [r2, #2]
	buffer[3] = (uint8_t)((current_actuators_state & 0x00FF0000) >>16U);	// data byte #2
 80050b6:	0c03      	lsrs	r3, r0, #16
 80050b8:	70d3      	strb	r3, [r2, #3]
	buffer[4] = (uint8_t)((current_actuators_state & 0xFF000000) >>24U);	// data byte #2

	buffer[5] = 0x00;									// CRC (not yet implemented)
 80050ba:	2300      	movs	r3, #0
	current_actuators_state = ((current_actuators_state & ~msk) | cmd);
 80050bc:	6020      	str	r0, [r4, #0]
	buffer[1] = (uint8_t) (current_actuators_state & 0x000000FF);			// data byte #1
 80050be:	7050      	strb	r0, [r2, #1]
	buffer[5] = 0x00;									// CRC (not yet implemented)
 80050c0:	7153      	strb	r3, [r2, #5]
	buffer[4] = (uint8_t)((current_actuators_state & 0xFF000000) >>24U);	// data byte #2
 80050c2:	0e00      	lsrs	r0, r0, #24
	buffer[6] = '\n';									// End byte
 80050c4:	330a      	adds	r3, #10
	buffer[4] = (uint8_t)((current_actuators_state & 0xFF000000) >>24U);	// data byte #2
 80050c6:	7110      	strb	r0, [r2, #4]
	buffer[6] = '\n';									// End byte
 80050c8:	7193      	strb	r3, [r2, #6]
}
 80050ca:	bd10      	pop	{r4, pc}
 80050cc:	200038ec 	.word	0x200038ec

080050d0 <FACTORY_IO_Sensors_Check>:
/*
 * FACTORY_IO_Sensors_Check
 */

uint8_t	FACTORY_IO_Sensors_Check(uint32_t msk, uint32_t desired_state)
{
 80050d0:	b510      	push	{r4, lr}
	sstates = 0x00000000;

	sstates |= rx_dma_buffer[1];
	sstates |= (rx_dma_buffer[2] <<8U );
	sstates |= (rx_dma_buffer[3] <<16U);
	sstates |= (rx_dma_buffer[4] <<24U);
 80050d2:	4c08      	ldr	r4, [pc, #32]	; (80050f4 <FACTORY_IO_Sensors_Check+0x24>)
 80050d4:	78a3      	ldrb	r3, [r4, #2]
 80050d6:	7862      	ldrb	r2, [r4, #1]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	4313      	orrs	r3, r2
 80050dc:	78e2      	ldrb	r2, [r4, #3]
 80050de:	0412      	lsls	r2, r2, #16
 80050e0:	431a      	orrs	r2, r3
 80050e2:	7923      	ldrb	r3, [r4, #4]
 80050e4:	061b      	lsls	r3, r3, #24
 80050e6:	4313      	orrs	r3, r2

	// Perform logical comparison with mask
	if ((sstates & msk) == desired_state)
 80050e8:	4018      	ands	r0, r3
 80050ea:	1a40      	subs	r0, r0, r1
 80050ec:	4243      	negs	r3, r0
 80050ee:	4158      	adcs	r0, r3

	else
	{
		return 0;
	}
}
 80050f0:	b2c0      	uxtb	r0, r0
 80050f2:	bd10      	pop	{r4, pc}
 80050f4:	200038a4 	.word	0x200038a4

080050f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80050f8:	480d      	ldr	r0, [pc, #52]	; (8005130 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80050fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050fc:	480d      	ldr	r0, [pc, #52]	; (8005134 <LoopForever+0x6>)
  ldr r1, =_edata
 80050fe:	490e      	ldr	r1, [pc, #56]	; (8005138 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005100:	4a0e      	ldr	r2, [pc, #56]	; (800513c <LoopForever+0xe>)
  movs r3, #0
 8005102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005104:	e002      	b.n	800510c <LoopCopyDataInit>

08005106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800510a:	3304      	adds	r3, #4

0800510c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800510c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800510e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005110:	d3f9      	bcc.n	8005106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005112:	4a0b      	ldr	r2, [pc, #44]	; (8005140 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005114:	4c0b      	ldr	r4, [pc, #44]	; (8005144 <LoopForever+0x16>)
  movs r3, #0
 8005116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005118:	e001      	b.n	800511e <LoopFillZerobss>

0800511a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800511a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800511c:	3204      	adds	r2, #4

0800511e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800511e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005120:	d3fb      	bcc.n	800511a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005122:	f000 f813 	bl	800514c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005126:	f000 f849 	bl	80051bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800512a:	f7ff fdeb 	bl	8004d04 <main>

0800512e <LoopForever>:

LoopForever:
    b LoopForever
 800512e:	e7fe      	b.n	800512e <LoopForever>
  ldr   r0, =_estack
 8005130:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005138:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800513c:	08005624 	.word	0x08005624
  ldr r2, =_sbss
 8005140:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8005144:	200038f0 	.word	0x200038f0

08005148 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005148:	e7fe      	b.n	8005148 <ADC1_COMP_IRQHandler>
	...

0800514c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800514c:	2101      	movs	r1, #1
 800514e:	4b11      	ldr	r3, [pc, #68]	; (8005194 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8005150:	4811      	ldr	r0, [pc, #68]	; (8005198 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	4002      	ands	r2, r0
 800515c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	480e      	ldr	r0, [pc, #56]	; (800519c <SystemInit+0x50>)
 8005162:	4002      	ands	r2, r0
 8005164:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	480d      	ldr	r0, [pc, #52]	; (80051a0 <SystemInit+0x54>)
 800516a:	4002      	ands	r2, r0
 800516c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	480c      	ldr	r0, [pc, #48]	; (80051a4 <SystemInit+0x58>)
 8005172:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8005174:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8005176:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8005178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517a:	4382      	bics	r2, r0
 800517c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 800517e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005180:	4809      	ldr	r0, [pc, #36]	; (80051a8 <SystemInit+0x5c>)
 8005182:	4002      	ands	r2, r0
 8005184:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8005186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005188:	438a      	bics	r2, r1
 800518a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800518c:	2200      	movs	r2, #0
 800518e:	609a      	str	r2, [r3, #8]

}
 8005190:	4770      	bx	lr
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	40021000 	.word	0x40021000
 8005198:	08ffb80c 	.word	0x08ffb80c
 800519c:	fef6ffff 	.word	0xfef6ffff
 80051a0:	fffbffff 	.word	0xfffbffff
 80051a4:	ffc0ffff 	.word	0xffc0ffff
 80051a8:	fffcfe2c 	.word	0xfffcfe2c

080051ac <memset>:
 80051ac:	0003      	movs	r3, r0
 80051ae:	1882      	adds	r2, r0, r2
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d100      	bne.n	80051b6 <memset+0xa>
 80051b4:	4770      	bx	lr
 80051b6:	7019      	strb	r1, [r3, #0]
 80051b8:	3301      	adds	r3, #1
 80051ba:	e7f9      	b.n	80051b0 <memset+0x4>

080051bc <__libc_init_array>:
 80051bc:	b570      	push	{r4, r5, r6, lr}
 80051be:	2600      	movs	r6, #0
 80051c0:	4c0c      	ldr	r4, [pc, #48]	; (80051f4 <__libc_init_array+0x38>)
 80051c2:	4d0d      	ldr	r5, [pc, #52]	; (80051f8 <__libc_init_array+0x3c>)
 80051c4:	1b64      	subs	r4, r4, r5
 80051c6:	10a4      	asrs	r4, r4, #2
 80051c8:	42a6      	cmp	r6, r4
 80051ca:	d109      	bne.n	80051e0 <__libc_init_array+0x24>
 80051cc:	2600      	movs	r6, #0
 80051ce:	f000 f823 	bl	8005218 <_init>
 80051d2:	4c0a      	ldr	r4, [pc, #40]	; (80051fc <__libc_init_array+0x40>)
 80051d4:	4d0a      	ldr	r5, [pc, #40]	; (8005200 <__libc_init_array+0x44>)
 80051d6:	1b64      	subs	r4, r4, r5
 80051d8:	10a4      	asrs	r4, r4, #2
 80051da:	42a6      	cmp	r6, r4
 80051dc:	d105      	bne.n	80051ea <__libc_init_array+0x2e>
 80051de:	bd70      	pop	{r4, r5, r6, pc}
 80051e0:	00b3      	lsls	r3, r6, #2
 80051e2:	58eb      	ldr	r3, [r5, r3]
 80051e4:	4798      	blx	r3
 80051e6:	3601      	adds	r6, #1
 80051e8:	e7ee      	b.n	80051c8 <__libc_init_array+0xc>
 80051ea:	00b3      	lsls	r3, r6, #2
 80051ec:	58eb      	ldr	r3, [r5, r3]
 80051ee:	4798      	blx	r3
 80051f0:	3601      	adds	r6, #1
 80051f2:	e7f2      	b.n	80051da <__libc_init_array+0x1e>
 80051f4:	0800561c 	.word	0x0800561c
 80051f8:	0800561c 	.word	0x0800561c
 80051fc:	08005620 	.word	0x08005620
 8005200:	0800561c 	.word	0x0800561c

08005204 <memcpy>:
 8005204:	2300      	movs	r3, #0
 8005206:	b510      	push	{r4, lr}
 8005208:	429a      	cmp	r2, r3
 800520a:	d100      	bne.n	800520e <memcpy+0xa>
 800520c:	bd10      	pop	{r4, pc}
 800520e:	5ccc      	ldrb	r4, [r1, r3]
 8005210:	54c4      	strb	r4, [r0, r3]
 8005212:	3301      	adds	r3, #1
 8005214:	e7f8      	b.n	8005208 <memcpy+0x4>
	...

08005218 <_init>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr

08005224 <_fini>:
 8005224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522a:	bc08      	pop	{r3}
 800522c:	469e      	mov	lr, r3
 800522e:	4770      	bx	lr
